
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop$2() { }
    const identity$3 = x => x;
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function is_promise(value) {
        return value && typeof value === 'object' && typeof value.then === 'function';
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    let src_url_equal_anchor;
    function src_url_equal(element_src, url) {
        if (!src_url_equal_anchor) {
            src_url_equal_anchor = document.createElement('a');
        }
        src_url_equal_anchor.href = url;
        return element_src === src_url_equal_anchor.href;
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe$1(store, ...callbacks) {
        if (store == null) {
            return noop$2;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function get_store_value(store) {
        let value;
        subscribe$1(store, _ => value = _)();
        return value;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe$1(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function null_to_empty(value) {
        return value == null ? '' : value;
    }
    function set_store_value(store, ret, value) {
        store.set(value);
        return ret;
    }
    function action_destroyer(action_result) {
        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop$2;
    }

    const is_client = typeof window !== 'undefined';
    let now$1 = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop$2;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function get_root_for_style(node) {
        if (!node)
            return document;
        const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
        if (root && root.host) {
            return root;
        }
        return node.ownerDocument;
    }
    function append_empty_stylesheet(node) {
        const style_element = element('style');
        append_stylesheet(get_root_for_style(node), style_element);
        return style_element.sheet;
    }
    function append_stylesheet(node, style) {
        append(node.head || node, style);
        return style.sheet;
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        if (node.parentNode) {
            node.parentNode.removeChild(node);
        }
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function stop_propagation(fn) {
        return function (event) {
            event.stopPropagation();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function to_number(value) {
        return value === '' ? null : +value;
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        if (value === null) {
            node.style.removeProperty(key);
        }
        else {
            node.style.setProperty(key, value, important ? 'important' : '');
        }
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, cancelable, detail);
        return e;
    }

    // we need to store the information for multiple documents because a Svelte application could also contain iframes
    // https://github.com/sveltejs/svelte/issues/3624
    const managed_styles = new Map();
    let active = 0;
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash$1(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_style_information(doc, node) {
        const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
        managed_styles.set(doc, info);
        return info;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash$1(rule)}_${uid}`;
        const doc = get_root_for_style(node);
        const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
        if (!rules[name]) {
            rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        const previous = (node.style.animation || '').split(', ');
        const next = previous.filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        );
        const deleted = previous.length - next.length;
        if (deleted) {
            node.style.animation = next.join(', ');
            active -= deleted;
            if (!active)
                clear_rules();
        }
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            managed_styles.forEach(info => {
                const { ownerNode } = info.stylesheet;
                // there is no ownerNode if it runs on jsdom.
                if (ownerNode)
                    detach(ownerNode);
            });
            managed_styles.clear();
        });
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    /**
     * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.
     * It must be called during the component's initialisation (but doesn't need to live *inside* the component;
     * it can be called from an external module).
     *
     * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).
     *
     * https://svelte.dev/docs#run-time-svelte-onmount
     */
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    /**
     * Schedules a callback to run immediately after the component has been updated.
     *
     * The first time the callback runs will be after the initial `onMount`
     */
    function afterUpdate(fn) {
        get_current_component().$$.after_update.push(fn);
    }
    /**
     * Schedules a callback to run immediately before the component is unmounted.
     *
     * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the
     * only one that runs inside a server-side component.
     *
     * https://svelte.dev/docs#run-time-svelte-ondestroy
     */
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    /**
     * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).
     * Event dispatchers are functions that can take two arguments: `name` and `detail`.
     *
     * Component events created with `createEventDispatcher` create a
     * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).
     * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).
     * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)
     * property and can contain any type of data.
     *
     * https://svelte.dev/docs#run-time-svelte-createeventdispatcher
     */
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail, { cancelable = false } = {}) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail, { cancelable });
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
                return !event.defaultPrevented;
            }
            return true;
        };
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            // @ts-ignore
            callbacks.slice().forEach(fn => fn.call(this, event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            while (flushidx < dirty_components.length) {
                const component = dirty_components[flushidx];
                flushidx++;
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
        else if (callback) {
            callback();
        }
    }
    const null_transition = { duration: 0 };
    function create_in_transition(node, fn, params) {
        const options = { direction: 'in' };
        let config = fn(node, params, options);
        let running = false;
        let animation_name;
        let task;
        let uid = 0;
        function cleanup() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function go() {
            const { delay = 0, duration = 300, easing = identity$3, tick = noop$2, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
            tick(0, 1);
            const start_time = now$1() + delay;
            const end_time = start_time + duration;
            if (task)
                task.abort();
            running = true;
            add_render_callback(() => dispatch(node, true, 'start'));
            task = loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(1, 0);
                        dispatch(node, true, 'end');
                        cleanup();
                        return running = false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(t, 1 - t);
                    }
                }
                return running;
            });
        }
        let started = false;
        return {
            start() {
                if (started)
                    return;
                started = true;
                delete_rule(node);
                if (is_function(config)) {
                    config = config(options);
                    wait().then(go);
                }
                else {
                    go();
                }
            },
            invalidate() {
                started = false;
            },
            end() {
                if (running) {
                    cleanup();
                    running = false;
                }
            }
        };
    }
    function create_out_transition(node, fn, params) {
        const options = { direction: 'out' };
        let config = fn(node, params, options);
        let running = true;
        let animation_name;
        const group = outros;
        group.r += 1;
        function go() {
            const { delay = 0, duration = 300, easing = identity$3, tick = noop$2, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
            const start_time = now$1() + delay;
            const end_time = start_time + duration;
            add_render_callback(() => dispatch(node, false, 'start'));
            loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(0, 1);
                        dispatch(node, false, 'end');
                        if (!--group.r) {
                            // this will result in `end()` being called,
                            // so we don't need to clean up here
                            run_all(group.c);
                        }
                        return false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(1 - t, t);
                    }
                }
                return running;
            });
        }
        if (is_function(config)) {
            wait().then(() => {
                // @ts-ignore
                config = config(options);
                go();
            });
        }
        else {
            go();
        }
        return {
            end(reset) {
                if (reset && config.tick) {
                    config.tick(1, 0);
                }
                if (running) {
                    if (animation_name)
                        delete_rule(node, animation_name);
                    running = false;
                }
            }
        };
    }

    function handle_promise(promise, info) {
        const token = info.token = {};
        function update(type, index, key, value) {
            if (info.token !== token)
                return;
            info.resolved = value;
            let child_ctx = info.ctx;
            if (key !== undefined) {
                child_ctx = child_ctx.slice();
                child_ctx[key] = value;
            }
            const block = type && (info.current = type)(child_ctx);
            let needs_flush = false;
            if (info.block) {
                if (info.blocks) {
                    info.blocks.forEach((block, i) => {
                        if (i !== index && block) {
                            group_outros();
                            transition_out(block, 1, 1, () => {
                                if (info.blocks[i] === block) {
                                    info.blocks[i] = null;
                                }
                            });
                            check_outros();
                        }
                    });
                }
                else {
                    info.block.d(1);
                }
                block.c();
                transition_in(block, 1);
                block.m(info.mount(), info.anchor);
                needs_flush = true;
            }
            info.block = block;
            if (info.blocks)
                info.blocks[index] = block;
            if (needs_flush) {
                flush();
            }
        }
        if (is_promise(promise)) {
            const current_component = get_current_component();
            promise.then(value => {
                set_current_component(current_component);
                update(info.then, 1, info.value, value);
                set_current_component(null);
            }, error => {
                set_current_component(current_component);
                update(info.catch, 2, info.error, error);
                set_current_component(null);
                if (!info.hasCatch) {
                    throw error;
                }
            });
            // if we previously had a then/catch block, destroy it
            if (info.current !== info.pending) {
                update(info.pending, 0);
                return true;
            }
        }
        else {
            if (info.current !== info.then) {
                update(info.then, 1, info.value, promise);
                return true;
            }
            info.resolved = promise;
        }
    }
    function update_await_block_branch(info, ctx, dirty) {
        const child_ctx = ctx.slice();
        const { resolved } = info;
        if (info.current === info.then) {
            child_ctx[info.value] = resolved;
        }
        if (info.current === info.catch) {
            child_ctx[info.error] = resolved;
        }
        info.block.p(child_ctx, dirty);
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
                // if the component was destroyed immediately
                // it will update the `$$.on_destroy` reference to `null`.
                // the destructured on_destroy may still reference to the old array
                if (component.$$.on_destroy) {
                    component.$$.on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: [],
            // state
            props,
            update: noop$2,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop$2;
        }
        $on(type, callback) {
            if (!is_function(callback)) {
                return noop$2;
            }
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.55.0' }, detail), { bubbles: true }));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    function construct_svelte_component_dev(component, props) {
        const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';
        try {
            const instance = new component(props);
            if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {
                throw new Error(error_message);
            }
            return instance;
        }
        catch (err) {
            const { message } = err;
            if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {
                throw new Error(error_message);
            }
            else {
                throw err;
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    /**
     * @typedef {Object} WrappedComponent Object returned by the `wrap` method
     * @property {SvelteComponent} component - Component to load (this is always asynchronous)
     * @property {RoutePrecondition[]} [conditions] - Route pre-conditions to validate
     * @property {Object} [props] - Optional dictionary of static props
     * @property {Object} [userData] - Optional user data dictionary
     * @property {bool} _sveltesparouter - Internal flag; always set to true
     */

    /**
     * @callback AsyncSvelteComponent
     * @returns {Promise<SvelteComponent>} Returns a Promise that resolves with a Svelte component
     */

    /**
     * @callback RoutePrecondition
     * @param {RouteDetail} detail - Route detail object
     * @returns {boolean|Promise<boolean>} If the callback returns a false-y value, it's interpreted as the precondition failed, so it aborts loading the component (and won't process other pre-condition callbacks)
     */

    /**
     * @typedef {Object} WrapOptions Options object for the call to `wrap`
     * @property {SvelteComponent} [component] - Svelte component to load (this is incompatible with `asyncComponent`)
     * @property {AsyncSvelteComponent} [asyncComponent] - Function that returns a Promise that fulfills with a Svelte component (e.g. `{asyncComponent: () => import('Foo.svelte')}`)
     * @property {SvelteComponent} [loadingComponent] - Svelte component to be displayed while the async route is loading (as a placeholder); when unset or false-y, no component is shown while component
     * @property {object} [loadingParams] - Optional dictionary passed to the `loadingComponent` component as params (for an exported prop called `params`)
     * @property {object} [userData] - Optional object that will be passed to events such as `routeLoading`, `routeLoaded`, `conditionsFailed`
     * @property {object} [props] - Optional key-value dictionary of static props that will be passed to the component. The props are expanded with {...props}, so the key in the dictionary becomes the name of the prop.
     * @property {RoutePrecondition[]|RoutePrecondition} [conditions] - Route pre-conditions to add, which will be executed in order
     */

    /**
     * Wraps a component to enable multiple capabilities:
     * 1. Using dynamically-imported component, with (e.g. `{asyncComponent: () => import('Foo.svelte')}`), which also allows bundlers to do code-splitting.
     * 2. Adding route pre-conditions (e.g. `{conditions: [...]}`)
     * 3. Adding static props that are passed to the component
     * 4. Adding custom userData, which is passed to route events (e.g. route loaded events) or to route pre-conditions (e.g. `{userData: {foo: 'bar}}`)
     * 
     * @param {WrapOptions} args - Arguments object
     * @returns {WrappedComponent} Wrapped component
     */
    function wrap$3(args) {
        if (!args) {
            throw Error('Parameter args is required')
        }

        // We need to have one and only one of component and asyncComponent
        // This does a "XNOR"
        if (!args.component == !args.asyncComponent) {
            throw Error('One and only one of component and asyncComponent is required')
        }

        // If the component is not async, wrap it into a function returning a Promise
        if (args.component) {
            args.asyncComponent = () => Promise.resolve(args.component);
        }

        // Parameter asyncComponent and each item of conditions must be functions
        if (typeof args.asyncComponent != 'function') {
            throw Error('Parameter asyncComponent must be a function')
        }
        if (args.conditions) {
            // Ensure it's an array
            if (!Array.isArray(args.conditions)) {
                args.conditions = [args.conditions];
            }
            for (let i = 0; i < args.conditions.length; i++) {
                if (!args.conditions[i] || typeof args.conditions[i] != 'function') {
                    throw Error('Invalid parameter conditions[' + i + ']')
                }
            }
        }

        // Check if we have a placeholder component
        if (args.loadingComponent) {
            args.asyncComponent.loading = args.loadingComponent;
            args.asyncComponent.loadingParams = args.loadingParams || undefined;
        }

        // Returns an object that contains all the functions to execute too
        // The _sveltesparouter flag is to confirm the object was created by this router
        const obj = {
            component: args.asyncComponent,
            userData: args.userData,
            conditions: (args.conditions && args.conditions.length) ? args.conditions : undefined,
            props: (args.props && Object.keys(args.props).length) ? args.props : {},
            _sveltesparouter: true
        };

        return obj
    }

    const subscriber_queue = [];
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param value initial value
     * @param {StartStopNotifier}start start and stop notifications for subscriptions
     */
    function readable(value, start) {
        return {
            subscribe: writable(value, start).subscribe
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop$2) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop$2) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop$2;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }
    function derived(stores, fn, initial_value) {
        const single = !Array.isArray(stores);
        const stores_array = single
            ? [stores]
            : stores;
        const auto = fn.length < 2;
        return readable(initial_value, (set) => {
            let inited = false;
            const values = [];
            let pending = 0;
            let cleanup = noop$2;
            const sync = () => {
                if (pending) {
                    return;
                }
                cleanup();
                const result = fn(single ? values[0] : values, set);
                if (auto) {
                    set(result);
                }
                else {
                    cleanup = is_function(result) ? result : noop$2;
                }
            };
            const unsubscribers = stores_array.map((store, i) => subscribe$1(store, (value) => {
                values[i] = value;
                pending &= ~(1 << i);
                if (inited) {
                    sync();
                }
            }, () => {
                pending |= (1 << i);
            }));
            inited = true;
            sync();
            return function stop() {
                run_all(unsubscribers);
                cleanup();
            };
        });
    }

    function parse$2(str, loose) {
    	if (str instanceof RegExp) return { keys:false, pattern:str };
    	var c, o, tmp, ext, keys=[], pattern='', arr = str.split('/');
    	arr[0] || arr.shift();

    	while (tmp = arr.shift()) {
    		c = tmp[0];
    		if (c === '*') {
    			keys.push('wild');
    			pattern += '/(.*)';
    		} else if (c === ':') {
    			o = tmp.indexOf('?', 1);
    			ext = tmp.indexOf('.', 1);
    			keys.push( tmp.substring(1, !!~o ? o : !!~ext ? ext : tmp.length) );
    			pattern += !!~o && !~ext ? '(?:/([^/]+?))?' : '/([^/]+?)';
    			if (!!~ext) pattern += (!!~o ? '?' : '') + '\\' + tmp.substring(ext);
    		} else {
    			pattern += '/' + tmp;
    		}
    	}

    	return {
    		keys: keys,
    		pattern: new RegExp('^' + pattern + (loose ? '(?=$|\/)' : '\/?$'), 'i')
    	};
    }

    /* node_modules\svelte-spa-router\Router.svelte generated by Svelte v3.55.0 */

    const { Error: Error_1$5, Object: Object_1$2, console: console_1$7 } = globals;

    // (267:0) {:else}
    function create_else_block$2(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	const switch_instance_spread_levels = [/*props*/ ctx[2]];
    	var switch_value = /*component*/ ctx[0];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = construct_svelte_component_dev(switch_value, switch_props());
    		switch_instance.$on("routeEvent", /*routeEvent_handler_1*/ ctx[7]);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) mount_component(switch_instance, target, anchor);
    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty & /*props*/ 4)
    			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*props*/ ctx[2])])
    			: {};

    			if (switch_value !== (switch_value = /*component*/ ctx[0])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = construct_svelte_component_dev(switch_value, switch_props());
    					switch_instance.$on("routeEvent", /*routeEvent_handler_1*/ ctx[7]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(267:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (260:0) {#if componentParams}
    function create_if_block$6(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	const switch_instance_spread_levels = [{ params: /*componentParams*/ ctx[1] }, /*props*/ ctx[2]];
    	var switch_value = /*component*/ ctx[0];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = construct_svelte_component_dev(switch_value, switch_props());
    		switch_instance.$on("routeEvent", /*routeEvent_handler*/ ctx[6]);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) mount_component(switch_instance, target, anchor);
    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty & /*componentParams, props*/ 6)
    			? get_spread_update(switch_instance_spread_levels, [
    					dirty & /*componentParams*/ 2 && { params: /*componentParams*/ ctx[1] },
    					dirty & /*props*/ 4 && get_spread_object(/*props*/ ctx[2])
    				])
    			: {};

    			if (switch_value !== (switch_value = /*component*/ ctx[0])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = construct_svelte_component_dev(switch_value, switch_props());
    					switch_instance.$on("routeEvent", /*routeEvent_handler*/ ctx[6]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(260:0) {#if componentParams}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$q(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$6, create_else_block$2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*componentParams*/ ctx[1]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error_1$5("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function wrap$2(component, userData, ...conditions) {
    	// Use the new wrap method and show a deprecation warning
    	// eslint-disable-next-line no-console
    	console.warn('Method `wrap` from `svelte-spa-router` is deprecated and will be removed in a future version. Please use `svelte-spa-router/wrap` instead. See http://bit.ly/svelte-spa-router-upgrading');

    	return wrap$3({ component, userData, conditions });
    }

    /**
     * @typedef {Object} Location
     * @property {string} location - Location (page/view), for example `/book`
     * @property {string} [querystring] - Querystring from the hash, as a string not parsed
     */
    /**
     * Returns the current location from the hash.
     *
     * @returns {Location} Location object
     * @private
     */
    function getLocation() {
    	const hashPosition = window.location.href.indexOf('#/');

    	let location = hashPosition > -1
    	? window.location.href.substr(hashPosition + 1)
    	: '/';

    	// Check if there's a querystring
    	const qsPosition = location.indexOf('?');

    	let querystring = '';

    	if (qsPosition > -1) {
    		querystring = location.substr(qsPosition + 1);
    		location = location.substr(0, qsPosition);
    	}

    	return { location, querystring };
    }

    const loc = readable(null, // eslint-disable-next-line prefer-arrow-callback
    function start(set) {
    	set(getLocation());

    	const update = () => {
    		set(getLocation());
    	};

    	window.addEventListener('hashchange', update, false);

    	return function stop() {
    		window.removeEventListener('hashchange', update, false);
    	};
    });

    const location = derived(loc, $loc => $loc.location);
    const querystring = derived(loc, $loc => $loc.querystring);
    const params = writable(undefined);

    async function push(location) {
    	if (!location || location.length < 1 || location.charAt(0) != '/' && location.indexOf('#/') !== 0) {
    		throw Error('Invalid parameter location');
    	}

    	// Execute this code when the current call stack is complete
    	await tick();

    	// Note: this will include scroll state in history even when restoreScrollState is false
    	history.replaceState(
    		{
    			...history.state,
    			__svelte_spa_router_scrollX: window.scrollX,
    			__svelte_spa_router_scrollY: window.scrollY
    		},
    		undefined
    	);

    	window.location.hash = (location.charAt(0) == '#' ? '' : '#') + location;
    }

    async function pop() {
    	// Execute this code when the current call stack is complete
    	await tick();

    	window.history.back();
    }

    async function replace(location) {
    	if (!location || location.length < 1 || location.charAt(0) != '/' && location.indexOf('#/') !== 0) {
    		throw Error('Invalid parameter location');
    	}

    	// Execute this code when the current call stack is complete
    	await tick();

    	const dest = (location.charAt(0) == '#' ? '' : '#') + location;

    	try {
    		const newState = { ...history.state };
    		delete newState['__svelte_spa_router_scrollX'];
    		delete newState['__svelte_spa_router_scrollY'];
    		window.history.replaceState(newState, undefined, dest);
    	} catch(e) {
    		// eslint-disable-next-line no-console
    		console.warn('Caught exception while replacing the current page. If you\'re running this in the Svelte REPL, please note that the `replace` method might not work in this environment.');
    	}

    	// The method above doesn't trigger the hashchange event, so let's do that manually
    	window.dispatchEvent(new Event('hashchange'));
    }

    function link(node, opts) {
    	opts = linkOpts(opts);

    	// Only apply to <a> tags
    	if (!node || !node.tagName || node.tagName.toLowerCase() != 'a') {
    		throw Error('Action "link" can only be used with <a> tags');
    	}

    	updateLink(node, opts);

    	return {
    		update(updated) {
    			updated = linkOpts(updated);
    			updateLink(node, updated);
    		}
    	};
    }

    function restoreScroll(state) {
    	// If this exists, then this is a back navigation: restore the scroll position
    	if (state) {
    		window.scrollTo(state.__svelte_spa_router_scrollX, state.__svelte_spa_router_scrollY);
    	} else {
    		// Otherwise this is a forward navigation: scroll to top
    		window.scrollTo(0, 0);
    	}
    }

    // Internal function used by the link function
    function updateLink(node, opts) {
    	let href = opts.href || node.getAttribute('href');

    	// Destination must start with '/' or '#/'
    	if (href && href.charAt(0) == '/') {
    		// Add # to the href attribute
    		href = '#' + href;
    	} else if (!href || href.length < 2 || href.slice(0, 2) != '#/') {
    		throw Error('Invalid value for "href" attribute: ' + href);
    	}

    	node.setAttribute('href', href);

    	node.addEventListener('click', event => {
    		// Prevent default anchor onclick behaviour
    		event.preventDefault();

    		if (!opts.disabled) {
    			scrollstateHistoryHandler(event.currentTarget.getAttribute('href'));
    		}
    	});
    }

    // Internal function that ensures the argument of the link action is always an object
    function linkOpts(val) {
    	if (val && typeof val == 'string') {
    		return { href: val };
    	} else {
    		return val || {};
    	}
    }

    /**
     * The handler attached to an anchor tag responsible for updating the
     * current history state with the current scroll state
     *
     * @param {string} href - Destination
     */
    function scrollstateHistoryHandler(href) {
    	// Setting the url (3rd arg) to href will break clicking for reasons, so don't try to do that
    	history.replaceState(
    		{
    			...history.state,
    			__svelte_spa_router_scrollX: window.scrollX,
    			__svelte_spa_router_scrollY: window.scrollY
    		},
    		undefined
    	);

    	// This will force an update as desired, but this time our scroll state will be attached
    	window.location.hash = href;
    }

    function instance$q($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Router', slots, []);
    	let { routes = {} } = $$props;
    	let { prefix = '' } = $$props;
    	let { restoreScrollState = false } = $$props;

    	/**
     * Container for a route: path, component
     */
    	class RouteItem {
    		/**
     * Initializes the object and creates a regular expression from the path, using regexparam.
     *
     * @param {string} path - Path to the route (must start with '/' or '*')
     * @param {SvelteComponent|WrappedComponent} component - Svelte component for the route, optionally wrapped
     */
    		constructor(path, component) {
    			if (!component || typeof component != 'function' && (typeof component != 'object' || component._sveltesparouter !== true)) {
    				throw Error('Invalid component object');
    			}

    			// Path must be a regular or expression, or a string starting with '/' or '*'
    			if (!path || typeof path == 'string' && (path.length < 1 || path.charAt(0) != '/' && path.charAt(0) != '*') || typeof path == 'object' && !(path instanceof RegExp)) {
    				throw Error('Invalid value for "path" argument - strings must start with / or *');
    			}

    			const { pattern, keys } = parse$2(path);
    			this.path = path;

    			// Check if the component is wrapped and we have conditions
    			if (typeof component == 'object' && component._sveltesparouter === true) {
    				this.component = component.component;
    				this.conditions = component.conditions || [];
    				this.userData = component.userData;
    				this.props = component.props || {};
    			} else {
    				// Convert the component to a function that returns a Promise, to normalize it
    				this.component = () => Promise.resolve(component);

    				this.conditions = [];
    				this.props = {};
    			}

    			this._pattern = pattern;
    			this._keys = keys;
    		}

    		/**
     * Checks if `path` matches the current route.
     * If there's a match, will return the list of parameters from the URL (if any).
     * In case of no match, the method will return `null`.
     *
     * @param {string} path - Path to test
     * @returns {null|Object.<string, string>} List of paramters from the URL if there's a match, or `null` otherwise.
     */
    		match(path) {
    			// If there's a prefix, check if it matches the start of the path.
    			// If not, bail early, else remove it before we run the matching.
    			if (prefix) {
    				if (typeof prefix == 'string') {
    					if (path.startsWith(prefix)) {
    						path = path.substr(prefix.length) || '/';
    					} else {
    						return null;
    					}
    				} else if (prefix instanceof RegExp) {
    					const match = path.match(prefix);

    					if (match && match[0]) {
    						path = path.substr(match[0].length) || '/';
    					} else {
    						return null;
    					}
    				}
    			}

    			// Check if the pattern matches
    			const matches = this._pattern.exec(path);

    			if (matches === null) {
    				return null;
    			}

    			// If the input was a regular expression, this._keys would be false, so return matches as is
    			if (this._keys === false) {
    				return matches;
    			}

    			const out = {};
    			let i = 0;

    			while (i < this._keys.length) {
    				// In the match parameters, URL-decode all values
    				try {
    					out[this._keys[i]] = decodeURIComponent(matches[i + 1] || '') || null;
    				} catch(e) {
    					out[this._keys[i]] = null;
    				}

    				i++;
    			}

    			return out;
    		}

    		/**
     * Dictionary with route details passed to the pre-conditions functions, as well as the `routeLoading`, `routeLoaded` and `conditionsFailed` events
     * @typedef {Object} RouteDetail
     * @property {string|RegExp} route - Route matched as defined in the route definition (could be a string or a reguar expression object)
     * @property {string} location - Location path
     * @property {string} querystring - Querystring from the hash
     * @property {object} [userData] - Custom data passed by the user
     * @property {SvelteComponent} [component] - Svelte component (only in `routeLoaded` events)
     * @property {string} [name] - Name of the Svelte component (only in `routeLoaded` events)
     */
    		/**
     * Executes all conditions (if any) to control whether the route can be shown. Conditions are executed in the order they are defined, and if a condition fails, the following ones aren't executed.
     * 
     * @param {RouteDetail} detail - Route detail
     * @returns {boolean} Returns true if all the conditions succeeded
     */
    		async checkConditions(detail) {
    			for (let i = 0; i < this.conditions.length; i++) {
    				if (!await this.conditions[i](detail)) {
    					return false;
    				}
    			}

    			return true;
    		}
    	}

    	// Set up all routes
    	const routesList = [];

    	if (routes instanceof Map) {
    		// If it's a map, iterate on it right away
    		routes.forEach((route, path) => {
    			routesList.push(new RouteItem(path, route));
    		});
    	} else {
    		// We have an object, so iterate on its own properties
    		Object.keys(routes).forEach(path => {
    			routesList.push(new RouteItem(path, routes[path]));
    		});
    	}

    	// Props for the component to render
    	let component = null;

    	let componentParams = null;
    	let props = {};

    	// Event dispatcher from Svelte
    	const dispatch = createEventDispatcher();

    	// Just like dispatch, but executes on the next iteration of the event loop
    	async function dispatchNextTick(name, detail) {
    		// Execute this code when the current call stack is complete
    		await tick();

    		dispatch(name, detail);
    	}

    	// If this is set, then that means we have popped into this var the state of our last scroll position
    	let previousScrollState = null;

    	let popStateChanged = null;

    	if (restoreScrollState) {
    		popStateChanged = event => {
    			// If this event was from our history.replaceState, event.state will contain
    			// our scroll history. Otherwise, event.state will be null (like on forward
    			// navigation)
    			if (event.state && (event.state.__svelte_spa_router_scrollY || event.state.__svelte_spa_router_scrollX)) {
    				previousScrollState = event.state;
    			} else {
    				previousScrollState = null;
    			}
    		};

    		// This is removed in the destroy() invocation below
    		window.addEventListener('popstate', popStateChanged);

    		afterUpdate(() => {
    			restoreScroll(previousScrollState);
    		});
    	}

    	// Always have the latest value of loc
    	let lastLoc = null;

    	// Current object of the component loaded
    	let componentObj = null;

    	// Handle hash change events
    	// Listen to changes in the $loc store and update the page
    	// Do not use the $: syntax because it gets triggered by too many things
    	const unsubscribeLoc = loc.subscribe(async newLoc => {
    		lastLoc = newLoc;

    		// Find a route matching the location
    		let i = 0;

    		while (i < routesList.length) {
    			const match = routesList[i].match(newLoc.location);

    			if (!match) {
    				i++;
    				continue;
    			}

    			const detail = {
    				route: routesList[i].path,
    				location: newLoc.location,
    				querystring: newLoc.querystring,
    				userData: routesList[i].userData,
    				params: match && typeof match == 'object' && Object.keys(match).length
    				? match
    				: null
    			};

    			// Check if the route can be loaded - if all conditions succeed
    			if (!await routesList[i].checkConditions(detail)) {
    				// Don't display anything
    				$$invalidate(0, component = null);

    				componentObj = null;

    				// Trigger an event to notify the user, then exit
    				dispatchNextTick('conditionsFailed', detail);

    				return;
    			}

    			// Trigger an event to alert that we're loading the route
    			// We need to clone the object on every event invocation so we don't risk the object to be modified in the next tick
    			dispatchNextTick('routeLoading', Object.assign({}, detail));

    			// If there's a component to show while we're loading the route, display it
    			const obj = routesList[i].component;

    			// Do not replace the component if we're loading the same one as before, to avoid the route being unmounted and re-mounted
    			if (componentObj != obj) {
    				if (obj.loading) {
    					$$invalidate(0, component = obj.loading);
    					componentObj = obj;
    					$$invalidate(1, componentParams = obj.loadingParams);
    					$$invalidate(2, props = {});

    					// Trigger the routeLoaded event for the loading component
    					// Create a copy of detail so we don't modify the object for the dynamic route (and the dynamic route doesn't modify our object too)
    					dispatchNextTick('routeLoaded', Object.assign({}, detail, {
    						component,
    						name: component.name,
    						params: componentParams
    					}));
    				} else {
    					$$invalidate(0, component = null);
    					componentObj = null;
    				}

    				// Invoke the Promise
    				const loaded = await obj();

    				// Now that we're here, after the promise resolved, check if we still want this component, as the user might have navigated to another page in the meanwhile
    				if (newLoc != lastLoc) {
    					// Don't update the component, just exit
    					return;
    				}

    				// If there is a "default" property, which is used by async routes, then pick that
    				$$invalidate(0, component = loaded && loaded.default || loaded);

    				componentObj = obj;
    			}

    			// Set componentParams only if we have a match, to avoid a warning similar to `<Component> was created with unknown prop 'params'`
    			// Of course, this assumes that developers always add a "params" prop when they are expecting parameters
    			if (match && typeof match == 'object' && Object.keys(match).length) {
    				$$invalidate(1, componentParams = match);
    			} else {
    				$$invalidate(1, componentParams = null);
    			}

    			// Set static props, if any
    			$$invalidate(2, props = routesList[i].props);

    			// Dispatch the routeLoaded event then exit
    			// We need to clone the object on every event invocation so we don't risk the object to be modified in the next tick
    			dispatchNextTick('routeLoaded', Object.assign({}, detail, {
    				component,
    				name: component.name,
    				params: componentParams
    			})).then(() => {
    				params.set(componentParams);
    			});

    			return;
    		}

    		// If we're still here, there was no match, so show the empty component
    		$$invalidate(0, component = null);

    		componentObj = null;
    		params.set(undefined);
    	});

    	onDestroy(() => {
    		unsubscribeLoc();
    		popStateChanged && window.removeEventListener('popstate', popStateChanged);
    	});

    	const writable_props = ['routes', 'prefix', 'restoreScrollState'];

    	Object_1$2.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$7.warn(`<Router> was created with unknown prop '${key}'`);
    	});

    	function routeEvent_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function routeEvent_handler_1(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('routes' in $$props) $$invalidate(3, routes = $$props.routes);
    		if ('prefix' in $$props) $$invalidate(4, prefix = $$props.prefix);
    		if ('restoreScrollState' in $$props) $$invalidate(5, restoreScrollState = $$props.restoreScrollState);
    	};

    	$$self.$capture_state = () => ({
    		readable,
    		writable,
    		derived,
    		tick,
    		_wrap: wrap$3,
    		wrap: wrap$2,
    		getLocation,
    		loc,
    		location,
    		querystring,
    		params,
    		push,
    		pop,
    		replace,
    		link,
    		restoreScroll,
    		updateLink,
    		linkOpts,
    		scrollstateHistoryHandler,
    		onDestroy,
    		createEventDispatcher,
    		afterUpdate,
    		parse: parse$2,
    		routes,
    		prefix,
    		restoreScrollState,
    		RouteItem,
    		routesList,
    		component,
    		componentParams,
    		props,
    		dispatch,
    		dispatchNextTick,
    		previousScrollState,
    		popStateChanged,
    		lastLoc,
    		componentObj,
    		unsubscribeLoc
    	});

    	$$self.$inject_state = $$props => {
    		if ('routes' in $$props) $$invalidate(3, routes = $$props.routes);
    		if ('prefix' in $$props) $$invalidate(4, prefix = $$props.prefix);
    		if ('restoreScrollState' in $$props) $$invalidate(5, restoreScrollState = $$props.restoreScrollState);
    		if ('component' in $$props) $$invalidate(0, component = $$props.component);
    		if ('componentParams' in $$props) $$invalidate(1, componentParams = $$props.componentParams);
    		if ('props' in $$props) $$invalidate(2, props = $$props.props);
    		if ('previousScrollState' in $$props) previousScrollState = $$props.previousScrollState;
    		if ('popStateChanged' in $$props) popStateChanged = $$props.popStateChanged;
    		if ('lastLoc' in $$props) lastLoc = $$props.lastLoc;
    		if ('componentObj' in $$props) componentObj = $$props.componentObj;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*restoreScrollState*/ 32) {
    			// Update history.scrollRestoration depending on restoreScrollState
    			history.scrollRestoration = restoreScrollState ? 'manual' : 'auto';
    		}
    	};

    	return [
    		component,
    		componentParams,
    		props,
    		routes,
    		prefix,
    		restoreScrollState,
    		routeEvent_handler,
    		routeEvent_handler_1
    	];
    }

    class Router extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$q, create_fragment$q, safe_not_equal, {
    			routes: 3,
    			prefix: 4,
    			restoreScrollState: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Router",
    			options,
    			id: create_fragment$q.name
    		});
    	}

    	get routes() {
    		throw new Error_1$5("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set routes(value) {
    		throw new Error_1$5("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prefix() {
    		throw new Error_1$5("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prefix(value) {
    		throw new Error_1$5("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get restoreScrollState() {
    		throw new Error_1$5("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set restoreScrollState(value) {
    		throw new Error_1$5("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\Title.svelte generated by Svelte v3.55.0 */

    const file$m = "src\\components\\Title.svelte";

    function create_fragment$p(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "id", "title");
    			if (!src_url_equal(img.src, img_src_value = "./img/logo.svg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "poolygotchi");
    			attr_dev(img, "class", "svelte-b8i14t");
    			add_location(img, file$m, 2, 0, 18);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: noop$2,
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$p($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Title', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Title> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Title extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$p, create_fragment$p, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Title",
    			options,
    			id: create_fragment$p.name
    		});
    	}
    }

    function ifEnter(cb) {
        return (e) => { if (e.key === 'Enter')
            cb(); };
    }

    // The random number is a js implementation of the Xorshift PRNG
    const randseed = new Array(4); // Xorshift: [x, y, z, w] 32 bit values

    function seedrand(seed) {
    	randseed.fill(0);

    	for(let i = 0; i < seed.length; i++) {
    		randseed[i%4] = ((randseed[i%4] << 5) - randseed[i%4]) + seed.charCodeAt(i);
    	}
    }

    function rand$1() {
    	// based on Java's String.hashCode(), expanded to 4 32bit values
    	const t = randseed[0] ^ (randseed[0] << 11);

    	randseed[0] = randseed[1];
    	randseed[1] = randseed[2];
    	randseed[2] = randseed[3];
    	randseed[3] = (randseed[3] ^ (randseed[3] >> 19) ^ t ^ (t >> 8));

    	return (randseed[3] >>> 0) / ((1 << 31) >>> 0);
    }

    function createColor() {
    	//saturation is the whole color spectrum
    	const h = Math.floor(rand$1() * 360);
    	//saturation goes from 40 to 100, it avoids greyish colors
    	const s = ((rand$1() * 60) + 40) + '%';
    	//lightness can be anything from 0 to 100, but probabilities are a bell curve around 50%
    	const l = ((rand$1() + rand$1() + rand$1() + rand$1()) * 25) + '%';

    	return 'hsl(' + h + ',' + s + ',' + l + ')';
    }

    function createImageData(size) {
    	const width = size; // Only support square icons for now
    	const height = size;

    	const dataWidth = Math.ceil(width / 2);
    	const mirrorWidth = width - dataWidth;

    	const data = [];
    	for(let y = 0; y < height; y++) {
    		let row = [];
    		for(let x = 0; x < dataWidth; x++) {
    			// this makes foreground and background color to have a 43% (1/2.3) probability
    			// spot color has 13% chance
    			row[x] = Math.floor(rand$1()*2.3);
    		}
    		const r = row.slice(0, mirrorWidth);
    		r.reverse();
    		row = row.concat(r);

    		for(let i = 0; i < row.length; i++) {
    			data.push(row[i]);
    		}
    	}

    	return data;
    }

    function buildOpts(opts) {
    	const newOpts = {};

    	newOpts.seed = opts.seed || Math.floor((Math.random()*Math.pow(10,16))).toString(16);

    	seedrand(newOpts.seed);

    	newOpts.size = opts.size || 8;
    	newOpts.scale = opts.scale || 4;
    	newOpts.color = opts.color || createColor();
    	newOpts.bgcolor = opts.bgcolor || createColor();
    	newOpts.spotcolor = opts.spotcolor || createColor();

    	return newOpts;
    }

    function renderIcon(opts, canvas) {
    	opts = buildOpts(opts || {});
    	const imageData = createImageData(opts.size);
    	const width = Math.sqrt(imageData.length);

    	canvas.width = canvas.height = opts.size * opts.scale;

    	const cc = canvas.getContext('2d');
    	cc.fillStyle = opts.bgcolor;
    	cc.fillRect(0, 0, canvas.width, canvas.height);
    	cc.fillStyle = opts.color;

    	for(let i = 0; i < imageData.length; i++) {

    		// if data is 0, leave the background
    		if(imageData[i]) {
    			const row = Math.floor(i / width);
    			const col = i % width;

    			// if data is 2, choose spot color, if 1 choose foreground
    			cc.fillStyle = (imageData[i] == 1) ? opts.color : opts.spotcolor;

    			cc.fillRect(col * opts.scale, row * opts.scale, opts.scale, opts.scale);
    		}
    	}

    	return canvas;
    }

    function createIcon(opts) {
    	var canvas = document.createElement('canvas');

    	renderIcon(opts, canvas);

    	return canvas;
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function getAugmentedNamespace(n) {
    	if (n.__esModule) return n;
    	var a = Object.defineProperty({}, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    function createCommonjsModule$4(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    function commonjsRequire$1 (target) {
    	throw new Error('Could not dynamically require "' + target + '". Please configure the dynamicRequireTargets option of @rollup/plugin-commonjs appropriately for this require call to behave properly.');
    }

    var _nodeResolve_empty = {};

    var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': _nodeResolve_empty
    });

    var require$$0$2 = /*@__PURE__*/getAugmentedNamespace(_nodeResolve_empty$1);

    var bn$1 = createCommonjsModule$4(function (module) {
    (function (module, exports) {

      // Utils
      function assert (val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
      }

      // Could use `inherits` module, but don't want to move from single file
      // architecture yet.
      function inherits (ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }

      // BN

      function BN (number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }

        this.negative = 0;
        this.words = null;
        this.length = 0;

        // Reduction context
        this.red = null;

        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }

          this._init(number || 0, base || 10, endian || 'be');
        }
      }
      if (typeof module === 'object') {
        module.exports = BN;
      } else {
        exports.BN = BN;
      }

      BN.BN = BN;
      BN.wordSize = 26;

      var Buffer;
      try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
          Buffer = window.Buffer;
        } else {
          Buffer = require$$0$2.Buffer;
        }
      } catch (e) {
      }

      BN.isBN = function isBN (num) {
        if (num instanceof BN) {
          return true;
        }

        return num !== null && typeof num === 'object' &&
          num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };

      BN.max = function max (left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };

      BN.min = function min (left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };

      BN.prototype._init = function init (number, base, endian) {
        if (typeof number === 'number') {
          return this._initNumber(number, base, endian);
        }

        if (typeof number === 'object') {
          return this._initArray(number, base, endian);
        }

        if (base === 'hex') {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);

        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
          start++;
          this.negative = 1;
        }

        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === 'le') {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };

      BN.prototype._initNumber = function _initNumber (number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 0x4000000) {
          this.words = [number & 0x3ffffff];
          this.length = 1;
        } else if (number < 0x10000000000000) {
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff
          ];
          this.length = 2;
        } else {
          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff,
            1
          ];
          this.length = 3;
        }

        if (endian !== 'le') return;

        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initArray = function _initArray (number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }

        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w;
        var off = 0;
        if (endian === 'be') {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };

      function parseHex4Bits (string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) {
          return c - 48;
        // 'A' - 'F'
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        // 'a' - 'f'
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert(false, 'Invalid character in ' + string);
        }
      }

      function parseHexByte (string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }

      BN.prototype._parseHex = function _parseHex (number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        // 24-bits chunks
        var off = 0;
        var j = 0;

        var w;
        if (endian === 'be') {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }

        this._strip();
      };

      function parseBase (str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;

          r *= mul;

          // 'a'
          if (c >= 49) {
            b = c - 49 + 0xa;

          // 'A'
          } else if (c >= 17) {
            b = c - 17 + 0xa;

          // '0' - '9'
          } else {
            b = c;
          }
          assert(c >= 0 && b < mul, 'Invalid character');
          r += b;
        }
        return r;
      }

      BN.prototype._parseBase = function _parseBase (number, base, start) {
        // Initialize as zero
        this.words = [0];
        this.length = 1;

        // Find length of limb in base
        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = (limbPow / base) | 0;

        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;

        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);

          this.imuln(limbPow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);

          for (i = 0; i < mod; i++) {
            pow *= base;
          }

          this.imuln(pow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        this._strip();
      };

      BN.prototype.copy = function copy (dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };

      function move (dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }

      BN.prototype._move = function _move (dest) {
        move(dest, this);
      };

      BN.prototype.clone = function clone () {
        var r = new BN(null);
        this.copy(r);
        return r;
      };

      BN.prototype._expand = function _expand (size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };

      // Remove leading `0` from `this`
      BN.prototype._strip = function strip () {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };

      BN.prototype._normSign = function _normSign () {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };

      // Check Symbol.for because not everywhere where Symbol defined
      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
      if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
        try {
          BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
        } catch (e) {
          BN.prototype.inspect = inspect;
        }
      } else {
        BN.prototype.inspect = inspect;
      }

      function inspect () {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      }

      /*

      var zeros = [];
      var groupSizes = [];
      var groupBases = [];

      var s = '';
      var i = -1;
      while (++i < BN.wordSize) {
        zeros[i] = s;
        s += '0';
      }
      groupSizes[0] = 0;
      groupSizes[1] = 0;
      groupBases[0] = 0;
      groupBases[1] = 0;
      var base = 2 - 1;
      while (++base < 36 + 1) {
        var groupSize = 0;
        var groupBase = 1;
        while (groupBase < (1 << BN.wordSize) / base) {
          groupBase *= base;
          groupSize += 1;
        }
        groupSizes[base] = groupSize;
        groupBases[base] = groupBase;
      }

      */

      var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
      ];

      var groupSizes = [
        0, 0,
        25, 16, 12, 11, 10, 9, 8,
        8, 7, 7, 7, 7, 6, 6,
        6, 6, 6, 6, 6, 5, 5,
        5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5
      ];

      var groupBases = [
        0, 0,
        33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
        43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
        16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
        6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
        24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
      ];

      BN.prototype.toString = function toString (base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;

        var out;
        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = (((w << off) | carry) & 0xffffff).toString(16);
            carry = (w >>> (24 - off)) & 0xffffff;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        if (base === (base | 0) && base >= 2 && base <= 36) {
          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
          var groupSize = groupSizes[base];
          // var groupBase = Math.pow(base, groupSize);
          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);

            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = '0' + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        assert(false, 'Base should be between 2 and 36');
      };

      BN.prototype.toNumber = function toNumber () {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 0x4000000;
        } else if (this.length === 3 && this.words[2] === 0x01) {
          // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + (this.words[1] * 0x4000000);
        } else if (this.length > 2) {
          assert(false, 'Number can only safely store up to 53 bits');
        }
        return (this.negative !== 0) ? -ret : ret;
      };

      BN.prototype.toJSON = function toJSON () {
        return this.toString(16, 2);
      };

      if (Buffer) {
        BN.prototype.toBuffer = function toBuffer (endian, length) {
          return this.toArrayLike(Buffer, endian, length);
        };
      }

      BN.prototype.toArray = function toArray (endian, length) {
        return this.toArrayLike(Array, endian, length);
      };

      var allocate = function allocate (ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };

      BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
        this._strip();

        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');

        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
      };

      BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
        var position = 0;
        var carry = 0;

        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = (this.words[i] << shift) | carry;

          res[position++] = word & 0xff;
          if (position < res.length) {
            res[position++] = (word >> 8) & 0xff;
          }
          if (position < res.length) {
            res[position++] = (word >> 16) & 0xff;
          }

          if (shift === 6) {
            if (position < res.length) {
              res[position++] = (word >> 24) & 0xff;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }

        if (position < res.length) {
          res[position++] = carry;

          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };

      BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
        var position = res.length - 1;
        var carry = 0;

        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = (this.words[i] << shift) | carry;

          res[position--] = word & 0xff;
          if (position >= 0) {
            res[position--] = (word >> 8) & 0xff;
          }
          if (position >= 0) {
            res[position--] = (word >> 16) & 0xff;
          }

          if (shift === 6) {
            if (position >= 0) {
              res[position--] = (word >> 24) & 0xff;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }

        if (position >= 0) {
          res[position--] = carry;

          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };

      if (Math.clz32) {
        BN.prototype._countBits = function _countBits (w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits (w) {
          var t = w;
          var r = 0;
          if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 0x40) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 0x8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 0x02) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }

      BN.prototype._zeroBits = function _zeroBits (w) {
        // Short-cut
        if (w === 0) return 26;

        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 0xf) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 0x3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 0x1) === 0) {
          r++;
        }
        return r;
      };

      // Return number of used bits in a BN
      BN.prototype.bitLength = function bitLength () {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };

      function toBitArray (num) {
        var w = new Array(num.bitLength());

        for (var bit = 0; bit < w.length; bit++) {
          var off = (bit / 26) | 0;
          var wbit = bit % 26;

          w[bit] = (num.words[off] >>> wbit) & 0x01;
        }

        return w;
      }

      // Number of trailing zero bits
      BN.prototype.zeroBits = function zeroBits () {
        if (this.isZero()) return 0;

        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };

      BN.prototype.byteLength = function byteLength () {
        return Math.ceil(this.bitLength() / 8);
      };

      BN.prototype.toTwos = function toTwos (width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };

      BN.prototype.fromTwos = function fromTwos (width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };

      BN.prototype.isNeg = function isNeg () {
        return this.negative !== 0;
      };

      // Return negative clone of `this`
      BN.prototype.neg = function neg () {
        return this.clone().ineg();
      };

      BN.prototype.ineg = function ineg () {
        if (!this.isZero()) {
          this.negative ^= 1;
        }

        return this;
      };

      // Or `num` with `this` in-place
      BN.prototype.iuor = function iuor (num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }

        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }

        return this._strip();
      };

      BN.prototype.ior = function ior (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };

      // Or `num` with `this`
      BN.prototype.or = function or (num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };

      BN.prototype.uor = function uor (num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };

      // And `num` with `this` in-place
      BN.prototype.iuand = function iuand (num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }

        this.length = b.length;

        return this._strip();
      };

      BN.prototype.iand = function iand (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };

      // And `num` with `this`
      BN.prototype.and = function and (num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };

      BN.prototype.uand = function uand (num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };

      // Xor `num` with `this` in-place
      BN.prototype.iuxor = function iuxor (num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }

        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = a.length;

        return this._strip();
      };

      BN.prototype.ixor = function ixor (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };

      // Xor `num` with `this`
      BN.prototype.xor = function xor (num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };

      BN.prototype.uxor = function uxor (num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };

      // Not ``this`` with ``width`` bitwidth
      BN.prototype.inotn = function inotn (width) {
        assert(typeof width === 'number' && width >= 0);

        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;

        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);

        if (bitsLeft > 0) {
          bytesNeeded--;
        }

        // Handle complete words
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 0x3ffffff;
        }

        // Handle the residue
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
        }

        // And remove leading zeroes
        return this._strip();
      };

      BN.prototype.notn = function notn (width) {
        return this.clone().inotn(width);
      };

      // Set `bit` of `this`
      BN.prototype.setn = function setn (bit, val) {
        assert(typeof bit === 'number' && bit >= 0);

        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        this._expand(off + 1);

        if (val) {
          this.words[off] = this.words[off] | (1 << wbit);
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }

        return this._strip();
      };

      // Add `num` to `this` in-place
      BN.prototype.iadd = function iadd (num) {
        var r;

        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();

        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }

        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }

        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        // Copy the rest of the words
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        return this;
      };

      // Add `num` to `this`
      BN.prototype.add = function add (num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }

        if (this.length > num.length) return this.clone().iadd(num);

        return num.clone().iadd(this);
      };

      // Subtract `num` from `this` in-place
      BN.prototype.isub = function isub (num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();

        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }

        // At this point both numbers are positive
        var cmp = this.cmp(num);

        // Optimization - zeroify
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }

        // a > b
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }

        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = Math.max(this.length, i);

        if (a !== this) {
          this.negative = 1;
        }

        return this._strip();
      };

      // Subtract `num` from `this`
      BN.prototype.sub = function sub (num) {
        return this.clone().isub(num);
      };

      function smallMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = (self.length + num.length) | 0;
        out.length = len;
        len = (len - 1) | 0;

        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        var carry = (r / 0x4000000) | 0;
        out.words[0] = lo;

        for (var k = 1; k < len; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = carry >>> 26;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = (k - j) | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += (r / 0x4000000) | 0;
            rword = r & 0x3ffffff;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }

        return out._strip();
      }

      // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).
      var comb10MulTo = function comb10MulTo (self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;

        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = (mid + Math.imul(ah0, bl0)) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = (mid + Math.imul(ah1, bl0)) | 0;
        hi = Math.imul(ah1, bh0);
        lo = (lo + Math.imul(al0, bl1)) | 0;
        mid = (mid + Math.imul(al0, bh1)) | 0;
        mid = (mid + Math.imul(ah0, bl1)) | 0;
        hi = (hi + Math.imul(ah0, bh1)) | 0;
        var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = (mid + Math.imul(ah2, bl0)) | 0;
        hi = Math.imul(ah2, bh0);
        lo = (lo + Math.imul(al1, bl1)) | 0;
        mid = (mid + Math.imul(al1, bh1)) | 0;
        mid = (mid + Math.imul(ah1, bl1)) | 0;
        hi = (hi + Math.imul(ah1, bh1)) | 0;
        lo = (lo + Math.imul(al0, bl2)) | 0;
        mid = (mid + Math.imul(al0, bh2)) | 0;
        mid = (mid + Math.imul(ah0, bl2)) | 0;
        hi = (hi + Math.imul(ah0, bh2)) | 0;
        var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = (mid + Math.imul(ah3, bl0)) | 0;
        hi = Math.imul(ah3, bh0);
        lo = (lo + Math.imul(al2, bl1)) | 0;
        mid = (mid + Math.imul(al2, bh1)) | 0;
        mid = (mid + Math.imul(ah2, bl1)) | 0;
        hi = (hi + Math.imul(ah2, bh1)) | 0;
        lo = (lo + Math.imul(al1, bl2)) | 0;
        mid = (mid + Math.imul(al1, bh2)) | 0;
        mid = (mid + Math.imul(ah1, bl2)) | 0;
        hi = (hi + Math.imul(ah1, bh2)) | 0;
        lo = (lo + Math.imul(al0, bl3)) | 0;
        mid = (mid + Math.imul(al0, bh3)) | 0;
        mid = (mid + Math.imul(ah0, bl3)) | 0;
        hi = (hi + Math.imul(ah0, bh3)) | 0;
        var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = (mid + Math.imul(ah4, bl0)) | 0;
        hi = Math.imul(ah4, bh0);
        lo = (lo + Math.imul(al3, bl1)) | 0;
        mid = (mid + Math.imul(al3, bh1)) | 0;
        mid = (mid + Math.imul(ah3, bl1)) | 0;
        hi = (hi + Math.imul(ah3, bh1)) | 0;
        lo = (lo + Math.imul(al2, bl2)) | 0;
        mid = (mid + Math.imul(al2, bh2)) | 0;
        mid = (mid + Math.imul(ah2, bl2)) | 0;
        hi = (hi + Math.imul(ah2, bh2)) | 0;
        lo = (lo + Math.imul(al1, bl3)) | 0;
        mid = (mid + Math.imul(al1, bh3)) | 0;
        mid = (mid + Math.imul(ah1, bl3)) | 0;
        hi = (hi + Math.imul(ah1, bh3)) | 0;
        lo = (lo + Math.imul(al0, bl4)) | 0;
        mid = (mid + Math.imul(al0, bh4)) | 0;
        mid = (mid + Math.imul(ah0, bl4)) | 0;
        hi = (hi + Math.imul(ah0, bh4)) | 0;
        var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = (mid + Math.imul(ah5, bl0)) | 0;
        hi = Math.imul(ah5, bh0);
        lo = (lo + Math.imul(al4, bl1)) | 0;
        mid = (mid + Math.imul(al4, bh1)) | 0;
        mid = (mid + Math.imul(ah4, bl1)) | 0;
        hi = (hi + Math.imul(ah4, bh1)) | 0;
        lo = (lo + Math.imul(al3, bl2)) | 0;
        mid = (mid + Math.imul(al3, bh2)) | 0;
        mid = (mid + Math.imul(ah3, bl2)) | 0;
        hi = (hi + Math.imul(ah3, bh2)) | 0;
        lo = (lo + Math.imul(al2, bl3)) | 0;
        mid = (mid + Math.imul(al2, bh3)) | 0;
        mid = (mid + Math.imul(ah2, bl3)) | 0;
        hi = (hi + Math.imul(ah2, bh3)) | 0;
        lo = (lo + Math.imul(al1, bl4)) | 0;
        mid = (mid + Math.imul(al1, bh4)) | 0;
        mid = (mid + Math.imul(ah1, bl4)) | 0;
        hi = (hi + Math.imul(ah1, bh4)) | 0;
        lo = (lo + Math.imul(al0, bl5)) | 0;
        mid = (mid + Math.imul(al0, bh5)) | 0;
        mid = (mid + Math.imul(ah0, bl5)) | 0;
        hi = (hi + Math.imul(ah0, bh5)) | 0;
        var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = (mid + Math.imul(ah6, bl0)) | 0;
        hi = Math.imul(ah6, bh0);
        lo = (lo + Math.imul(al5, bl1)) | 0;
        mid = (mid + Math.imul(al5, bh1)) | 0;
        mid = (mid + Math.imul(ah5, bl1)) | 0;
        hi = (hi + Math.imul(ah5, bh1)) | 0;
        lo = (lo + Math.imul(al4, bl2)) | 0;
        mid = (mid + Math.imul(al4, bh2)) | 0;
        mid = (mid + Math.imul(ah4, bl2)) | 0;
        hi = (hi + Math.imul(ah4, bh2)) | 0;
        lo = (lo + Math.imul(al3, bl3)) | 0;
        mid = (mid + Math.imul(al3, bh3)) | 0;
        mid = (mid + Math.imul(ah3, bl3)) | 0;
        hi = (hi + Math.imul(ah3, bh3)) | 0;
        lo = (lo + Math.imul(al2, bl4)) | 0;
        mid = (mid + Math.imul(al2, bh4)) | 0;
        mid = (mid + Math.imul(ah2, bl4)) | 0;
        hi = (hi + Math.imul(ah2, bh4)) | 0;
        lo = (lo + Math.imul(al1, bl5)) | 0;
        mid = (mid + Math.imul(al1, bh5)) | 0;
        mid = (mid + Math.imul(ah1, bl5)) | 0;
        hi = (hi + Math.imul(ah1, bh5)) | 0;
        lo = (lo + Math.imul(al0, bl6)) | 0;
        mid = (mid + Math.imul(al0, bh6)) | 0;
        mid = (mid + Math.imul(ah0, bl6)) | 0;
        hi = (hi + Math.imul(ah0, bh6)) | 0;
        var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = (mid + Math.imul(ah7, bl0)) | 0;
        hi = Math.imul(ah7, bh0);
        lo = (lo + Math.imul(al6, bl1)) | 0;
        mid = (mid + Math.imul(al6, bh1)) | 0;
        mid = (mid + Math.imul(ah6, bl1)) | 0;
        hi = (hi + Math.imul(ah6, bh1)) | 0;
        lo = (lo + Math.imul(al5, bl2)) | 0;
        mid = (mid + Math.imul(al5, bh2)) | 0;
        mid = (mid + Math.imul(ah5, bl2)) | 0;
        hi = (hi + Math.imul(ah5, bh2)) | 0;
        lo = (lo + Math.imul(al4, bl3)) | 0;
        mid = (mid + Math.imul(al4, bh3)) | 0;
        mid = (mid + Math.imul(ah4, bl3)) | 0;
        hi = (hi + Math.imul(ah4, bh3)) | 0;
        lo = (lo + Math.imul(al3, bl4)) | 0;
        mid = (mid + Math.imul(al3, bh4)) | 0;
        mid = (mid + Math.imul(ah3, bl4)) | 0;
        hi = (hi + Math.imul(ah3, bh4)) | 0;
        lo = (lo + Math.imul(al2, bl5)) | 0;
        mid = (mid + Math.imul(al2, bh5)) | 0;
        mid = (mid + Math.imul(ah2, bl5)) | 0;
        hi = (hi + Math.imul(ah2, bh5)) | 0;
        lo = (lo + Math.imul(al1, bl6)) | 0;
        mid = (mid + Math.imul(al1, bh6)) | 0;
        mid = (mid + Math.imul(ah1, bl6)) | 0;
        hi = (hi + Math.imul(ah1, bh6)) | 0;
        lo = (lo + Math.imul(al0, bl7)) | 0;
        mid = (mid + Math.imul(al0, bh7)) | 0;
        mid = (mid + Math.imul(ah0, bl7)) | 0;
        hi = (hi + Math.imul(ah0, bh7)) | 0;
        var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = (mid + Math.imul(ah8, bl0)) | 0;
        hi = Math.imul(ah8, bh0);
        lo = (lo + Math.imul(al7, bl1)) | 0;
        mid = (mid + Math.imul(al7, bh1)) | 0;
        mid = (mid + Math.imul(ah7, bl1)) | 0;
        hi = (hi + Math.imul(ah7, bh1)) | 0;
        lo = (lo + Math.imul(al6, bl2)) | 0;
        mid = (mid + Math.imul(al6, bh2)) | 0;
        mid = (mid + Math.imul(ah6, bl2)) | 0;
        hi = (hi + Math.imul(ah6, bh2)) | 0;
        lo = (lo + Math.imul(al5, bl3)) | 0;
        mid = (mid + Math.imul(al5, bh3)) | 0;
        mid = (mid + Math.imul(ah5, bl3)) | 0;
        hi = (hi + Math.imul(ah5, bh3)) | 0;
        lo = (lo + Math.imul(al4, bl4)) | 0;
        mid = (mid + Math.imul(al4, bh4)) | 0;
        mid = (mid + Math.imul(ah4, bl4)) | 0;
        hi = (hi + Math.imul(ah4, bh4)) | 0;
        lo = (lo + Math.imul(al3, bl5)) | 0;
        mid = (mid + Math.imul(al3, bh5)) | 0;
        mid = (mid + Math.imul(ah3, bl5)) | 0;
        hi = (hi + Math.imul(ah3, bh5)) | 0;
        lo = (lo + Math.imul(al2, bl6)) | 0;
        mid = (mid + Math.imul(al2, bh6)) | 0;
        mid = (mid + Math.imul(ah2, bl6)) | 0;
        hi = (hi + Math.imul(ah2, bh6)) | 0;
        lo = (lo + Math.imul(al1, bl7)) | 0;
        mid = (mid + Math.imul(al1, bh7)) | 0;
        mid = (mid + Math.imul(ah1, bl7)) | 0;
        hi = (hi + Math.imul(ah1, bh7)) | 0;
        lo = (lo + Math.imul(al0, bl8)) | 0;
        mid = (mid + Math.imul(al0, bh8)) | 0;
        mid = (mid + Math.imul(ah0, bl8)) | 0;
        hi = (hi + Math.imul(ah0, bh8)) | 0;
        var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = (mid + Math.imul(ah9, bl0)) | 0;
        hi = Math.imul(ah9, bh0);
        lo = (lo + Math.imul(al8, bl1)) | 0;
        mid = (mid + Math.imul(al8, bh1)) | 0;
        mid = (mid + Math.imul(ah8, bl1)) | 0;
        hi = (hi + Math.imul(ah8, bh1)) | 0;
        lo = (lo + Math.imul(al7, bl2)) | 0;
        mid = (mid + Math.imul(al7, bh2)) | 0;
        mid = (mid + Math.imul(ah7, bl2)) | 0;
        hi = (hi + Math.imul(ah7, bh2)) | 0;
        lo = (lo + Math.imul(al6, bl3)) | 0;
        mid = (mid + Math.imul(al6, bh3)) | 0;
        mid = (mid + Math.imul(ah6, bl3)) | 0;
        hi = (hi + Math.imul(ah6, bh3)) | 0;
        lo = (lo + Math.imul(al5, bl4)) | 0;
        mid = (mid + Math.imul(al5, bh4)) | 0;
        mid = (mid + Math.imul(ah5, bl4)) | 0;
        hi = (hi + Math.imul(ah5, bh4)) | 0;
        lo = (lo + Math.imul(al4, bl5)) | 0;
        mid = (mid + Math.imul(al4, bh5)) | 0;
        mid = (mid + Math.imul(ah4, bl5)) | 0;
        hi = (hi + Math.imul(ah4, bh5)) | 0;
        lo = (lo + Math.imul(al3, bl6)) | 0;
        mid = (mid + Math.imul(al3, bh6)) | 0;
        mid = (mid + Math.imul(ah3, bl6)) | 0;
        hi = (hi + Math.imul(ah3, bh6)) | 0;
        lo = (lo + Math.imul(al2, bl7)) | 0;
        mid = (mid + Math.imul(al2, bh7)) | 0;
        mid = (mid + Math.imul(ah2, bl7)) | 0;
        hi = (hi + Math.imul(ah2, bh7)) | 0;
        lo = (lo + Math.imul(al1, bl8)) | 0;
        mid = (mid + Math.imul(al1, bh8)) | 0;
        mid = (mid + Math.imul(ah1, bl8)) | 0;
        hi = (hi + Math.imul(ah1, bh8)) | 0;
        lo = (lo + Math.imul(al0, bl9)) | 0;
        mid = (mid + Math.imul(al0, bh9)) | 0;
        mid = (mid + Math.imul(ah0, bl9)) | 0;
        hi = (hi + Math.imul(ah0, bh9)) | 0;
        var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = (mid + Math.imul(ah9, bl1)) | 0;
        hi = Math.imul(ah9, bh1);
        lo = (lo + Math.imul(al8, bl2)) | 0;
        mid = (mid + Math.imul(al8, bh2)) | 0;
        mid = (mid + Math.imul(ah8, bl2)) | 0;
        hi = (hi + Math.imul(ah8, bh2)) | 0;
        lo = (lo + Math.imul(al7, bl3)) | 0;
        mid = (mid + Math.imul(al7, bh3)) | 0;
        mid = (mid + Math.imul(ah7, bl3)) | 0;
        hi = (hi + Math.imul(ah7, bh3)) | 0;
        lo = (lo + Math.imul(al6, bl4)) | 0;
        mid = (mid + Math.imul(al6, bh4)) | 0;
        mid = (mid + Math.imul(ah6, bl4)) | 0;
        hi = (hi + Math.imul(ah6, bh4)) | 0;
        lo = (lo + Math.imul(al5, bl5)) | 0;
        mid = (mid + Math.imul(al5, bh5)) | 0;
        mid = (mid + Math.imul(ah5, bl5)) | 0;
        hi = (hi + Math.imul(ah5, bh5)) | 0;
        lo = (lo + Math.imul(al4, bl6)) | 0;
        mid = (mid + Math.imul(al4, bh6)) | 0;
        mid = (mid + Math.imul(ah4, bl6)) | 0;
        hi = (hi + Math.imul(ah4, bh6)) | 0;
        lo = (lo + Math.imul(al3, bl7)) | 0;
        mid = (mid + Math.imul(al3, bh7)) | 0;
        mid = (mid + Math.imul(ah3, bl7)) | 0;
        hi = (hi + Math.imul(ah3, bh7)) | 0;
        lo = (lo + Math.imul(al2, bl8)) | 0;
        mid = (mid + Math.imul(al2, bh8)) | 0;
        mid = (mid + Math.imul(ah2, bl8)) | 0;
        hi = (hi + Math.imul(ah2, bh8)) | 0;
        lo = (lo + Math.imul(al1, bl9)) | 0;
        mid = (mid + Math.imul(al1, bh9)) | 0;
        mid = (mid + Math.imul(ah1, bl9)) | 0;
        hi = (hi + Math.imul(ah1, bh9)) | 0;
        var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = (mid + Math.imul(ah9, bl2)) | 0;
        hi = Math.imul(ah9, bh2);
        lo = (lo + Math.imul(al8, bl3)) | 0;
        mid = (mid + Math.imul(al8, bh3)) | 0;
        mid = (mid + Math.imul(ah8, bl3)) | 0;
        hi = (hi + Math.imul(ah8, bh3)) | 0;
        lo = (lo + Math.imul(al7, bl4)) | 0;
        mid = (mid + Math.imul(al7, bh4)) | 0;
        mid = (mid + Math.imul(ah7, bl4)) | 0;
        hi = (hi + Math.imul(ah7, bh4)) | 0;
        lo = (lo + Math.imul(al6, bl5)) | 0;
        mid = (mid + Math.imul(al6, bh5)) | 0;
        mid = (mid + Math.imul(ah6, bl5)) | 0;
        hi = (hi + Math.imul(ah6, bh5)) | 0;
        lo = (lo + Math.imul(al5, bl6)) | 0;
        mid = (mid + Math.imul(al5, bh6)) | 0;
        mid = (mid + Math.imul(ah5, bl6)) | 0;
        hi = (hi + Math.imul(ah5, bh6)) | 0;
        lo = (lo + Math.imul(al4, bl7)) | 0;
        mid = (mid + Math.imul(al4, bh7)) | 0;
        mid = (mid + Math.imul(ah4, bl7)) | 0;
        hi = (hi + Math.imul(ah4, bh7)) | 0;
        lo = (lo + Math.imul(al3, bl8)) | 0;
        mid = (mid + Math.imul(al3, bh8)) | 0;
        mid = (mid + Math.imul(ah3, bl8)) | 0;
        hi = (hi + Math.imul(ah3, bh8)) | 0;
        lo = (lo + Math.imul(al2, bl9)) | 0;
        mid = (mid + Math.imul(al2, bh9)) | 0;
        mid = (mid + Math.imul(ah2, bl9)) | 0;
        hi = (hi + Math.imul(ah2, bh9)) | 0;
        var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = (mid + Math.imul(ah9, bl3)) | 0;
        hi = Math.imul(ah9, bh3);
        lo = (lo + Math.imul(al8, bl4)) | 0;
        mid = (mid + Math.imul(al8, bh4)) | 0;
        mid = (mid + Math.imul(ah8, bl4)) | 0;
        hi = (hi + Math.imul(ah8, bh4)) | 0;
        lo = (lo + Math.imul(al7, bl5)) | 0;
        mid = (mid + Math.imul(al7, bh5)) | 0;
        mid = (mid + Math.imul(ah7, bl5)) | 0;
        hi = (hi + Math.imul(ah7, bh5)) | 0;
        lo = (lo + Math.imul(al6, bl6)) | 0;
        mid = (mid + Math.imul(al6, bh6)) | 0;
        mid = (mid + Math.imul(ah6, bl6)) | 0;
        hi = (hi + Math.imul(ah6, bh6)) | 0;
        lo = (lo + Math.imul(al5, bl7)) | 0;
        mid = (mid + Math.imul(al5, bh7)) | 0;
        mid = (mid + Math.imul(ah5, bl7)) | 0;
        hi = (hi + Math.imul(ah5, bh7)) | 0;
        lo = (lo + Math.imul(al4, bl8)) | 0;
        mid = (mid + Math.imul(al4, bh8)) | 0;
        mid = (mid + Math.imul(ah4, bl8)) | 0;
        hi = (hi + Math.imul(ah4, bh8)) | 0;
        lo = (lo + Math.imul(al3, bl9)) | 0;
        mid = (mid + Math.imul(al3, bh9)) | 0;
        mid = (mid + Math.imul(ah3, bl9)) | 0;
        hi = (hi + Math.imul(ah3, bh9)) | 0;
        var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = (mid + Math.imul(ah9, bl4)) | 0;
        hi = Math.imul(ah9, bh4);
        lo = (lo + Math.imul(al8, bl5)) | 0;
        mid = (mid + Math.imul(al8, bh5)) | 0;
        mid = (mid + Math.imul(ah8, bl5)) | 0;
        hi = (hi + Math.imul(ah8, bh5)) | 0;
        lo = (lo + Math.imul(al7, bl6)) | 0;
        mid = (mid + Math.imul(al7, bh6)) | 0;
        mid = (mid + Math.imul(ah7, bl6)) | 0;
        hi = (hi + Math.imul(ah7, bh6)) | 0;
        lo = (lo + Math.imul(al6, bl7)) | 0;
        mid = (mid + Math.imul(al6, bh7)) | 0;
        mid = (mid + Math.imul(ah6, bl7)) | 0;
        hi = (hi + Math.imul(ah6, bh7)) | 0;
        lo = (lo + Math.imul(al5, bl8)) | 0;
        mid = (mid + Math.imul(al5, bh8)) | 0;
        mid = (mid + Math.imul(ah5, bl8)) | 0;
        hi = (hi + Math.imul(ah5, bh8)) | 0;
        lo = (lo + Math.imul(al4, bl9)) | 0;
        mid = (mid + Math.imul(al4, bh9)) | 0;
        mid = (mid + Math.imul(ah4, bl9)) | 0;
        hi = (hi + Math.imul(ah4, bh9)) | 0;
        var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = (mid + Math.imul(ah9, bl5)) | 0;
        hi = Math.imul(ah9, bh5);
        lo = (lo + Math.imul(al8, bl6)) | 0;
        mid = (mid + Math.imul(al8, bh6)) | 0;
        mid = (mid + Math.imul(ah8, bl6)) | 0;
        hi = (hi + Math.imul(ah8, bh6)) | 0;
        lo = (lo + Math.imul(al7, bl7)) | 0;
        mid = (mid + Math.imul(al7, bh7)) | 0;
        mid = (mid + Math.imul(ah7, bl7)) | 0;
        hi = (hi + Math.imul(ah7, bh7)) | 0;
        lo = (lo + Math.imul(al6, bl8)) | 0;
        mid = (mid + Math.imul(al6, bh8)) | 0;
        mid = (mid + Math.imul(ah6, bl8)) | 0;
        hi = (hi + Math.imul(ah6, bh8)) | 0;
        lo = (lo + Math.imul(al5, bl9)) | 0;
        mid = (mid + Math.imul(al5, bh9)) | 0;
        mid = (mid + Math.imul(ah5, bl9)) | 0;
        hi = (hi + Math.imul(ah5, bh9)) | 0;
        var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = (mid + Math.imul(ah9, bl6)) | 0;
        hi = Math.imul(ah9, bh6);
        lo = (lo + Math.imul(al8, bl7)) | 0;
        mid = (mid + Math.imul(al8, bh7)) | 0;
        mid = (mid + Math.imul(ah8, bl7)) | 0;
        hi = (hi + Math.imul(ah8, bh7)) | 0;
        lo = (lo + Math.imul(al7, bl8)) | 0;
        mid = (mid + Math.imul(al7, bh8)) | 0;
        mid = (mid + Math.imul(ah7, bl8)) | 0;
        hi = (hi + Math.imul(ah7, bh8)) | 0;
        lo = (lo + Math.imul(al6, bl9)) | 0;
        mid = (mid + Math.imul(al6, bh9)) | 0;
        mid = (mid + Math.imul(ah6, bl9)) | 0;
        hi = (hi + Math.imul(ah6, bh9)) | 0;
        var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = (mid + Math.imul(ah9, bl7)) | 0;
        hi = Math.imul(ah9, bh7);
        lo = (lo + Math.imul(al8, bl8)) | 0;
        mid = (mid + Math.imul(al8, bh8)) | 0;
        mid = (mid + Math.imul(ah8, bl8)) | 0;
        hi = (hi + Math.imul(ah8, bh8)) | 0;
        lo = (lo + Math.imul(al7, bl9)) | 0;
        mid = (mid + Math.imul(al7, bh9)) | 0;
        mid = (mid + Math.imul(ah7, bl9)) | 0;
        hi = (hi + Math.imul(ah7, bh9)) | 0;
        var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = (mid + Math.imul(ah9, bl8)) | 0;
        hi = Math.imul(ah9, bh8);
        lo = (lo + Math.imul(al8, bl9)) | 0;
        mid = (mid + Math.imul(al8, bh9)) | 0;
        mid = (mid + Math.imul(ah8, bl9)) | 0;
        hi = (hi + Math.imul(ah8, bh9)) | 0;
        var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = (mid + Math.imul(ah9, bl9)) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };

      // Polyfill comb
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }

      function bigMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;

        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;

            var lo = r & 0x3ffffff;
            ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
            lo = (lo + rword) | 0;
            rword = lo & 0x3ffffff;
            ncarry = (ncarry + (lo >>> 26)) | 0;

            hncarry += ncarry >>> 26;
            ncarry &= 0x3ffffff;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }

        return out._strip();
      }

      function jumboMulTo (self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
      }

      BN.prototype.mulTo = function mulTo (num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }

        return res;
      };

      // Multiply `this` by `num`
      BN.prototype.mul = function mul (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };

      // Multiply employing FFT
      BN.prototype.mulf = function mulf (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };

      // In-place Multiplication
      BN.prototype.imul = function imul (num) {
        return this.clone().mulTo(num, this);
      };

      BN.prototype.imuln = function imuln (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;

        assert(typeof num === 'number');
        assert(num < 0x4000000);

        // Carry
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
          carry >>= 26;
          carry += (w / 0x4000000) | 0;
          // NOTE: lo is 27bit maximum
          carry += lo >>> 26;
          this.words[i] = lo & 0x3ffffff;
        }

        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }

        return isNegNum ? this.ineg() : this;
      };

      BN.prototype.muln = function muln (num) {
        return this.clone().imuln(num);
      };

      // `this` * `this`
      BN.prototype.sqr = function sqr () {
        return this.mul(this);
      };

      // `this` * `this` in-place
      BN.prototype.isqr = function isqr () {
        return this.imul(this.clone());
      };

      // Math.pow(`this`, `num`)
      BN.prototype.pow = function pow (num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);

        // Skip leading zeroes
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }

        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;

            res = res.mul(q);
          }
        }

        return res;
      };

      // Shift-left in-place
      BN.prototype.iushln = function iushln (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
        var i;

        if (r !== 0) {
          var carry = 0;

          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = ((this.words[i] | 0) - newCarry) << r;
            this.words[i] = c | carry;
            carry = newCarry >>> (26 - r);
          }

          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }

        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }

          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }

          this.length += s;
        }

        return this._strip();
      };

      BN.prototype.ishln = function ishln (bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
      };

      // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits
      BN.prototype.iushrn = function iushrn (bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) {
          h = (hint - (hint % 26)) / 26;
        } else {
          h = 0;
        }

        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        var maskedWords = extended;

        h -= s;
        h = Math.max(0, h);

        // Extended mode, copy masked part
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }

        if (s === 0) ; else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }

        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = (carry << (26 - r)) | (word >>> r);
          carry = word & mask;
        }

        // Push carried bits as a mask
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }

        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }

        return this._strip();
      };

      BN.prototype.ishrn = function ishrn (bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };

      // Shift-left
      BN.prototype.shln = function shln (bits) {
        return this.clone().ishln(bits);
      };

      BN.prototype.ushln = function ushln (bits) {
        return this.clone().iushln(bits);
      };

      // Shift-right
      BN.prototype.shrn = function shrn (bits) {
        return this.clone().ishrn(bits);
      };

      BN.prototype.ushrn = function ushrn (bits) {
        return this.clone().iushrn(bits);
      };

      // Test if n bit is set
      BN.prototype.testn = function testn (bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;

        // Check bit and return
        var w = this.words[s];

        return !!(w & q);
      };

      // Return only lowers bits of number (in-place)
      BN.prototype.imaskn = function imaskn (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;

        assert(this.negative === 0, 'imaskn works only with positive numbers');

        if (this.length <= s) {
          return this;
        }

        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);

        if (r !== 0) {
          var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
          this.words[this.length - 1] &= mask;
        }

        return this._strip();
      };

      // Return only lowers bits of number
      BN.prototype.maskn = function maskn (bits) {
        return this.clone().imaskn(bits);
      };

      // Add plain number `num` to `this`
      BN.prototype.iaddn = function iaddn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);

        // Possible sign change
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }

          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }

        // Add without checks
        return this._iaddn(num);
      };

      BN.prototype._iaddn = function _iaddn (num) {
        this.words[0] += num;

        // Carry
        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
          this.words[i] -= 0x4000000;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);

        return this;
      };

      // Subtract plain number `num` from `this`
      BN.prototype.isubn = function isubn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);

        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }

        this.words[0] -= num;

        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          // Carry
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
          }
        }

        return this._strip();
      };

      BN.prototype.addn = function addn (num) {
        return this.clone().iaddn(num);
      };

      BN.prototype.subn = function subn (num) {
        return this.clone().isubn(num);
      };

      BN.prototype.iabs = function iabs () {
        this.negative = 0;

        return this;
      };

      BN.prototype.abs = function abs () {
        return this.clone().iabs();
      };

      BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
        var len = num.length + shift;
        var i;

        this._expand(len);

        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 0x3ffffff;
          carry = (w >> 26) - ((right / 0x4000000) | 0);
          this.words[i + shift] = w & 0x3ffffff;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 0x3ffffff;
        }

        if (carry === 0) return this._strip();

        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;

        return this._strip();
      };

      BN.prototype._wordDiv = function _wordDiv (num, mode) {
        var shift = this.length - num.length;

        var a = this.clone();
        var b = num;

        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }

        // Initialize quotient
        var m = a.length - b.length;
        var q;

        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }

        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }

        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 0x4000000 +
            (a.words[b.length + j - 1] | 0);

          // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
          // (0x7ffffff)
          qj = Math.min((qj / bhi) | 0, 0x3ffffff);

          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();

        // Denormalize
        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }

        return {
          div: q || null,
          mod: a
        };
      };

      // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested
      BN.prototype.divmod = function divmod (num, mode, positive) {
        assert(!num.isZero());

        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }

        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }

          return {
            div: div,
            mod: mod
          };
        }

        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          return {
            div: div,
            mod: res.mod
          };
        }

        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }

          return {
            div: res.div,
            mod: mod
          };
        }

        // Both numbers are positive at this point

        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }

        // Very short reduction
        if (num.length === 1) {
          if (mode === 'div') {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }

          if (mode === 'mod') {
            return {
              div: null,
              mod: new BN(this.modrn(num.words[0]))
            };
          }

          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modrn(num.words[0]))
          };
        }

        return this._wordDiv(num, mode);
      };

      // Find `this` / `num`
      BN.prototype.div = function div (num) {
        return this.divmod(num, 'div', false).div;
      };

      // Find `this` % `num`
      BN.prototype.mod = function mod (num) {
        return this.divmod(num, 'mod', false).mod;
      };

      BN.prototype.umod = function umod (num) {
        return this.divmod(num, 'mod', true).mod;
      };

      // Find Round(`this` / `num`)
      BN.prototype.divRound = function divRound (num) {
        var dm = this.divmod(num);

        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;

        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);

        // Round down
        if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };

      BN.prototype.modrn = function modrn (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;

        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;

        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }

        return isNegNum ? -acc : acc;
      };

      // WARNING: DEPRECATED
      BN.prototype.modn = function modn (num) {
        return this.modrn(num);
      };

      // In-place division by number
      BN.prototype.idivn = function idivn (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;

        assert(num <= 0x3ffffff);

        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 0x4000000;
          this.words[i] = (w / num) | 0;
          carry = w % num;
        }

        this._strip();
        return isNegNum ? this.ineg() : this;
      };

      BN.prototype.divn = function divn (num) {
        return this.clone().idivn(num);
      };

      BN.prototype.egcd = function egcd (p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var x = this;
        var y = p.clone();

        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }

        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);

        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);

        var g = 0;

        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }

        var yp = y.clone();
        var xp = x.clone();

        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }

              A.iushrn(1);
              B.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }

              C.iushrn(1);
              D.iushrn(1);
            }
          }

          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }

        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };

      // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed
      BN.prototype._invmp = function _invmp (p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var a = this;
        var b = p.clone();

        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }

        var x1 = new BN(1);
        var x2 = new BN(0);

        var delta = b.clone();

        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }

              x1.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }

              x2.iushrn(1);
            }
          }

          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }

        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }

        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }

        return res;
      };

      BN.prototype.gcd = function gcd (num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();

        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;

        // Remove common factor of two
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }

        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }

          var r = a.cmp(b);
          if (r < 0) {
            // Swap `a` and `b` to make `a` always bigger than `b`
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }

          a.isub(b);
        } while (true);

        return b.iushln(shift);
      };

      // Invert number in the field F(num)
      BN.prototype.invm = function invm (num) {
        return this.egcd(num).a.umod(num);
      };

      BN.prototype.isEven = function isEven () {
        return (this.words[0] & 1) === 0;
      };

      BN.prototype.isOdd = function isOdd () {
        return (this.words[0] & 1) === 1;
      };

      // And first word and num
      BN.prototype.andln = function andln (num) {
        return this.words[0] & num;
      };

      // Increment at the bit position in-line
      BN.prototype.bincn = function bincn (bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }

        // Add bit and propagate, if needed
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 0x3ffffff;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };

      BN.prototype.isZero = function isZero () {
        return this.length === 1 && this.words[0] === 0;
      };

      BN.prototype.cmpn = function cmpn (num) {
        var negative = num < 0;

        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;

        this._strip();

        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }

          assert(num <= 0x3ffffff, 'Number is too big');

          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`
      BN.prototype.cmp = function cmp (num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;

        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Unsigned comparison
      BN.prototype.ucmp = function ucmp (num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;

        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;

          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };

      BN.prototype.gtn = function gtn (num) {
        return this.cmpn(num) === 1;
      };

      BN.prototype.gt = function gt (num) {
        return this.cmp(num) === 1;
      };

      BN.prototype.gten = function gten (num) {
        return this.cmpn(num) >= 0;
      };

      BN.prototype.gte = function gte (num) {
        return this.cmp(num) >= 0;
      };

      BN.prototype.ltn = function ltn (num) {
        return this.cmpn(num) === -1;
      };

      BN.prototype.lt = function lt (num) {
        return this.cmp(num) === -1;
      };

      BN.prototype.lten = function lten (num) {
        return this.cmpn(num) <= 0;
      };

      BN.prototype.lte = function lte (num) {
        return this.cmp(num) <= 0;
      };

      BN.prototype.eqn = function eqn (num) {
        return this.cmpn(num) === 0;
      };

      BN.prototype.eq = function eq (num) {
        return this.cmp(num) === 0;
      };

      //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //
      BN.red = function red (num) {
        return new Red(num);
      };

      BN.prototype.toRed = function toRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
      };

      BN.prototype.fromRed = function fromRed () {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
      };

      BN.prototype._forceRed = function _forceRed (ctx) {
        this.red = ctx;
        return this;
      };

      BN.prototype.forceRed = function forceRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
      };

      BN.prototype.redAdd = function redAdd (num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
      };

      BN.prototype.redIAdd = function redIAdd (num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
      };

      BN.prototype.redSub = function redSub (num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
      };

      BN.prototype.redISub = function redISub (num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
      };

      BN.prototype.redShl = function redShl (num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
      };

      BN.prototype.redMul = function redMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };

      BN.prototype.redIMul = function redIMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };

      BN.prototype.redSqr = function redSqr () {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
      };

      BN.prototype.redISqr = function redISqr () {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
      };

      // Square root over p
      BN.prototype.redSqrt = function redSqrt () {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
      };

      BN.prototype.redInvm = function redInvm () {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
      };

      // Return negative clone of `this` % `red modulo`
      BN.prototype.redNeg = function redNeg () {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
      };

      BN.prototype.redPow = function redPow (num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
      };

      // Prime numbers with efficient reduction
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };

      // Pseudo-Mersenne prime
      function MPrime (name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);

        this.tmp = this._tmp();
      }

      MPrime.prototype._tmp = function _tmp () {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };

      MPrime.prototype.ireduce = function ireduce (num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;

        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);

        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== undefined) {
            // r is a BN v4 instance
            r.strip();
          } else {
            // r is a BN v5 instance
            r._strip();
          }
        }

        return r;
      };

      MPrime.prototype.split = function split (input, out) {
        input.iushrn(this.n, 0, out);
      };

      MPrime.prototype.imulK = function imulK (num) {
        return num.imul(this.k);
      };

      function K256 () {
        MPrime.call(
          this,
          'k256',
          'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      inherits(K256, MPrime);

      K256.prototype.split = function split (input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;

        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;

        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }

        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;

        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };

      K256.prototype.imulK = function imulK (num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;

        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 0x3d1;
          num.words[i] = lo & 0x3ffffff;
          lo = w * 0x40 + ((lo / 0x4000000) | 0);
        }

        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };

      function P224 () {
        MPrime.call(
          this,
          'p224',
          'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      inherits(P224, MPrime);

      function P192 () {
        MPrime.call(
          this,
          'p192',
          'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      inherits(P192, MPrime);

      function P25519 () {
        // 2 ^ 255 - 19
        MPrime.call(
          this,
          '25519',
          '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      inherits(P25519, MPrime);

      P25519.prototype.imulK = function imulK (num) {
        // K = 0x13
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 0x13 + carry;
          var lo = hi & 0x3ffffff;
          hi >>>= 26;

          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };

      // Exported mostly for testing purposes, use plain name instead
      BN._prime = function prime (name) {
        // Cached version of prime
        if (primes[name]) return primes[name];

        var prime;
        if (name === 'k256') {
          prime = new K256();
        } else if (name === 'p224') {
          prime = new P224();
        } else if (name === 'p192') {
          prime = new P192();
        } else if (name === 'p25519') {
          prime = new P25519();
        } else {
          throw new Error('Unknown prime ' + name);
        }
        primes[name] = prime;

        return prime;
      };

      //
      // Base reduction engine
      //
      function Red (m) {
        if (typeof m === 'string') {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
      }

      Red.prototype._verify1 = function _verify1 (a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
      };

      Red.prototype._verify2 = function _verify2 (a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red,
          'red works only with red numbers');
      };

      Red.prototype.imod = function imod (a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);

        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };

      Red.prototype.neg = function neg (a) {
        if (a.isZero()) {
          return a.clone();
        }

        return this.m.sub(a)._forceRed(this);
      };

      Red.prototype.add = function add (a, b) {
        this._verify2(a, b);

        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.iadd = function iadd (a, b) {
        this._verify2(a, b);

        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };

      Red.prototype.sub = function sub (a, b) {
        this._verify2(a, b);

        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.isub = function isub (a, b) {
        this._verify2(a, b);

        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };

      Red.prototype.shl = function shl (a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };

      Red.prototype.imul = function imul (a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };

      Red.prototype.mul = function mul (a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };

      Red.prototype.isqr = function isqr (a) {
        return this.imul(a, a.clone());
      };

      Red.prototype.sqr = function sqr (a) {
        return this.mul(a, a);
      };

      Red.prototype.sqrt = function sqrt (a) {
        if (a.isZero()) return a.clone();

        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);

        // Fast case
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }

        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());

        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();

        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);

        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }

        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));

          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }

        return r;
      };

      Red.prototype.invm = function invm (a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };

      Red.prototype.pow = function pow (a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();

        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }

        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }

        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = (word >> j) & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }

            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }

            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }

        return res;
      };

      Red.prototype.convertTo = function convertTo (num) {
        var r = num.umod(this.m);

        return r === num ? r.clone() : r;
      };

      Red.prototype.convertFrom = function convertFrom (num) {
        var res = num.clone();
        res.red = null;
        return res;
      };

      //
      // Montgomery method engine
      //

      BN.mont = function mont (num) {
        return new Mont(num);
      };

      function Mont (m) {
        Red.call(this, m);

        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - (this.shift % 26);
        }

        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);

        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);

      Mont.prototype.convertTo = function convertTo (num) {
        return this.imod(num.ushln(this.shift));
      };

      Mont.prototype.convertFrom = function convertFrom (num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };

      Mont.prototype.imul = function imul (a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }

        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;

        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.mul = function mul (a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.invm = function invm (a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(module, commonjsGlobal);
    });

    const version$r = "logger/5.7.0";

    let _permanentCensorErrors = false;
    let _censorErrors = false;
    const LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
    let _logLevel = LogLevels["default"];
    let _globalLogger = null;
    function _checkNormalize() {
        try {
            const missing = [];
            // Make sure all forms of normalization are supported
            ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
                try {
                    if ("test".normalize(form) !== "test") {
                        throw new Error("bad normalize");
                    }
                    ;
                }
                catch (error) {
                    missing.push(form);
                }
            });
            if (missing.length) {
                throw new Error("missing " + missing.join(", "));
            }
            if (String.fromCharCode(0xe9).normalize("NFD") !== String.fromCharCode(0x65, 0x0301)) {
                throw new Error("broken implementation");
            }
        }
        catch (error) {
            return error.message;
        }
        return null;
    }
    const _normalizeError = _checkNormalize();
    var LogLevel;
    (function (LogLevel) {
        LogLevel["DEBUG"] = "DEBUG";
        LogLevel["INFO"] = "INFO";
        LogLevel["WARNING"] = "WARNING";
        LogLevel["ERROR"] = "ERROR";
        LogLevel["OFF"] = "OFF";
    })(LogLevel || (LogLevel = {}));
    var ErrorCode;
    (function (ErrorCode) {
        ///////////////////
        // Generic Errors
        // Unknown Error
        ErrorCode["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        // Not Implemented
        ErrorCode["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        // Unsupported Operation
        //   - operation
        ErrorCode["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        // Network Error (i.e. Ethereum Network, such as an invalid chain ID)
        //   - event ("noNetwork" is not re-thrown in provider.ready; otherwise thrown)
        ErrorCode["NETWORK_ERROR"] = "NETWORK_ERROR";
        // Some sort of bad response from the server
        ErrorCode["SERVER_ERROR"] = "SERVER_ERROR";
        // Timeout
        ErrorCode["TIMEOUT"] = "TIMEOUT";
        ///////////////////
        // Operational  Errors
        // Buffer Overrun
        ErrorCode["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        // Numeric Fault
        //   - operation: the operation being executed
        //   - fault: the reason this faulted
        ErrorCode["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ///////////////////
        // Argument Errors
        // Missing new operator to an object
        //  - name: The name of the class
        ErrorCode["MISSING_NEW"] = "MISSING_NEW";
        // Invalid argument (e.g. value is incompatible with type) to a function:
        //   - argument: The argument name that was invalid
        //   - value: The value of the argument
        ErrorCode["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        // Missing argument to a function:
        //   - count: The number of arguments received
        //   - expectedCount: The number of arguments expected
        ErrorCode["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        // Too many arguments
        //   - count: The number of arguments received
        //   - expectedCount: The number of arguments expected
        ErrorCode["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ///////////////////
        // Blockchain Errors
        // Call exception
        //  - transaction: the transaction
        //  - address?: the contract address
        //  - args?: The arguments passed into the function
        //  - method?: The Solidity method signature
        //  - errorSignature?: The EIP848 error signature
        //  - errorArgs?: The EIP848 error parameters
        //  - reason: The reason (only for EIP848 "Error(string)")
        ErrorCode["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        // Insufficient funds (< value + gasLimit * gasPrice)
        //   - transaction: the transaction attempted
        ErrorCode["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        // Nonce has already been used
        //   - transaction: the transaction attempted
        ErrorCode["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        // The replacement fee for the transaction is too low
        //   - transaction: the transaction attempted
        ErrorCode["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        // The gas limit could not be estimated
        //   - transaction: the transaction passed to estimateGas
        ErrorCode["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        // The transaction was replaced by one with a higher gas price
        //   - reason: "cancelled", "replaced" or "repriced"
        //   - cancelled: true if reason == "cancelled" or reason == "replaced")
        //   - hash: original transaction hash
        //   - replacement: the full TransactionsResponse for the replacement
        //   - receipt: the receipt of the replacement
        ErrorCode["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
        ///////////////////
        // Interaction Errors
        // The user rejected the action, such as signing a message or sending
        // a transaction
        ErrorCode["ACTION_REJECTED"] = "ACTION_REJECTED";
    })(ErrorCode || (ErrorCode = {}));
    const HEX = "0123456789abcdef";
    class Logger {
        constructor(version) {
            Object.defineProperty(this, "version", {
                enumerable: true,
                value: version,
                writable: false
            });
        }
        _log(logLevel, args) {
            const level = logLevel.toLowerCase();
            if (LogLevels[level] == null) {
                this.throwArgumentError("invalid log level name", "logLevel", logLevel);
            }
            if (_logLevel > LogLevels[level]) {
                return;
            }
            console.log.apply(console, args);
        }
        debug(...args) {
            this._log(Logger.levels.DEBUG, args);
        }
        info(...args) {
            this._log(Logger.levels.INFO, args);
        }
        warn(...args) {
            this._log(Logger.levels.WARNING, args);
        }
        makeError(message, code, params) {
            // Errors are being censored
            if (_censorErrors) {
                return this.makeError("censored error", code, {});
            }
            if (!code) {
                code = Logger.errors.UNKNOWN_ERROR;
            }
            if (!params) {
                params = {};
            }
            const messageDetails = [];
            Object.keys(params).forEach((key) => {
                const value = params[key];
                try {
                    if (value instanceof Uint8Array) {
                        let hex = "";
                        for (let i = 0; i < value.length; i++) {
                            hex += HEX[value[i] >> 4];
                            hex += HEX[value[i] & 0x0f];
                        }
                        messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
                    }
                    else {
                        messageDetails.push(key + "=" + JSON.stringify(value));
                    }
                }
                catch (error) {
                    messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
                }
            });
            messageDetails.push(`code=${code}`);
            messageDetails.push(`version=${this.version}`);
            const reason = message;
            let url = "";
            switch (code) {
                case ErrorCode.NUMERIC_FAULT: {
                    url = "NUMERIC_FAULT";
                    const fault = message;
                    switch (fault) {
                        case "overflow":
                        case "underflow":
                        case "division-by-zero":
                            url += "-" + fault;
                            break;
                        case "negative-power":
                        case "negative-width":
                            url += "-unsupported";
                            break;
                        case "unbound-bitwise-result":
                            url += "-unbound-result";
                            break;
                    }
                    break;
                }
                case ErrorCode.CALL_EXCEPTION:
                case ErrorCode.INSUFFICIENT_FUNDS:
                case ErrorCode.MISSING_NEW:
                case ErrorCode.NONCE_EXPIRED:
                case ErrorCode.REPLACEMENT_UNDERPRICED:
                case ErrorCode.TRANSACTION_REPLACED:
                case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
                    url = code;
                    break;
            }
            if (url) {
                message += " [ See: https:/\/links.ethers.org/v5-errors-" + url + " ]";
            }
            if (messageDetails.length) {
                message += " (" + messageDetails.join(", ") + ")";
            }
            // @TODO: Any??
            const error = new Error(message);
            error.reason = reason;
            error.code = code;
            Object.keys(params).forEach(function (key) {
                error[key] = params[key];
            });
            return error;
        }
        throwError(message, code, params) {
            throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name, value) {
            return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
                argument: name,
                value: value
            });
        }
        assert(condition, message, code, params) {
            if (!!condition) {
                return;
            }
            this.throwError(message, code, params);
        }
        assertArgument(condition, message, name, value) {
            if (!!condition) {
                return;
            }
            this.throwArgumentError(message, name, value);
        }
        checkNormalize(message) {
            if (_normalizeError) {
                this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "String.prototype.normalize", form: _normalizeError
                });
            }
        }
        checkSafeUint53(value, message) {
            if (typeof (value) !== "number") {
                return;
            }
            if (message == null) {
                message = "value not safe";
            }
            if (value < 0 || value >= 0x1fffffffffffff) {
                this.throwError(message, Logger.errors.NUMERIC_FAULT, {
                    operation: "checkSafeInteger",
                    fault: "out-of-safe-range",
                    value: value
                });
            }
            if (value % 1) {
                this.throwError(message, Logger.errors.NUMERIC_FAULT, {
                    operation: "checkSafeInteger",
                    fault: "non-integer",
                    value: value
                });
            }
        }
        checkArgumentCount(count, expectedCount, message) {
            if (message) {
                message = ": " + message;
            }
            else {
                message = "";
            }
            if (count < expectedCount) {
                this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
                    count: count,
                    expectedCount: expectedCount
                });
            }
            if (count > expectedCount) {
                this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
                    count: count,
                    expectedCount: expectedCount
                });
            }
        }
        checkNew(target, kind) {
            if (target === Object || target == null) {
                this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
            }
        }
        checkAbstract(target, kind) {
            if (target === kind) {
                this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
            }
            else if (target === Object || target == null) {
                this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
            }
        }
        static globalLogger() {
            if (!_globalLogger) {
                _globalLogger = new Logger(version$r);
            }
            return _globalLogger;
        }
        static setCensorship(censorship, permanent) {
            if (!censorship && permanent) {
                this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "setCensorship"
                });
            }
            if (_permanentCensorErrors) {
                if (!censorship) {
                    return;
                }
                this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "setCensorship"
                });
            }
            _censorErrors = !!censorship;
            _permanentCensorErrors = !!permanent;
        }
        static setLogLevel(logLevel) {
            const level = LogLevels[logLevel.toLowerCase()];
            if (level == null) {
                Logger.globalLogger().warn("invalid log level - " + logLevel);
                return;
            }
            _logLevel = level;
        }
        static from(version) {
            return new Logger(version);
        }
    }
    Logger.errors = ErrorCode;
    Logger.levels = LogLevel;

    var lib_esm$l = /*#__PURE__*/Object.freeze({
        __proto__: null,
        get LogLevel () { return LogLevel; },
        get ErrorCode () { return ErrorCode; },
        Logger: Logger
    });

    const version$q = "bytes/5.7.0";

    const logger$J = new Logger(version$q);
    ///////////////////////////////
    function isHexable(value) {
        return !!(value.toHexString);
    }
    function addSlice(array) {
        if (array.slice) {
            return array;
        }
        array.slice = function () {
            const args = Array.prototype.slice.call(arguments);
            return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
        };
        return array;
    }
    function isBytesLike(value) {
        return ((isHexString(value) && !(value.length % 2)) || isBytes(value));
    }
    function isInteger(value) {
        return (typeof (value) === "number" && value == value && (value % 1) === 0);
    }
    function isBytes(value) {
        if (value == null) {
            return false;
        }
        if (value.constructor === Uint8Array) {
            return true;
        }
        if (typeof (value) === "string") {
            return false;
        }
        if (!isInteger(value.length) || value.length < 0) {
            return false;
        }
        for (let i = 0; i < value.length; i++) {
            const v = value[i];
            if (!isInteger(v) || v < 0 || v >= 256) {
                return false;
            }
        }
        return true;
    }
    function arrayify(value, options) {
        if (!options) {
            options = {};
        }
        if (typeof (value) === "number") {
            logger$J.checkSafeUint53(value, "invalid arrayify value");
            const result = [];
            while (value) {
                result.unshift(value & 0xff);
                value = parseInt(String(value / 256));
            }
            if (result.length === 0) {
                result.push(0);
            }
            return addSlice(new Uint8Array(result));
        }
        if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
            value = "0x" + value;
        }
        if (isHexable(value)) {
            value = value.toHexString();
        }
        if (isHexString(value)) {
            let hex = value.substring(2);
            if (hex.length % 2) {
                if (options.hexPad === "left") {
                    hex = "0" + hex;
                }
                else if (options.hexPad === "right") {
                    hex += "0";
                }
                else {
                    logger$J.throwArgumentError("hex data is odd-length", "value", value);
                }
            }
            const result = [];
            for (let i = 0; i < hex.length; i += 2) {
                result.push(parseInt(hex.substring(i, i + 2), 16));
            }
            return addSlice(new Uint8Array(result));
        }
        if (isBytes(value)) {
            return addSlice(new Uint8Array(value));
        }
        return logger$J.throwArgumentError("invalid arrayify value", "value", value);
    }
    function concat$1(items) {
        const objects = items.map(item => arrayify(item));
        const length = objects.reduce((accum, item) => (accum + item.length), 0);
        const result = new Uint8Array(length);
        objects.reduce((offset, object) => {
            result.set(object, offset);
            return offset + object.length;
        }, 0);
        return addSlice(result);
    }
    function stripZeros(value) {
        let result = arrayify(value);
        if (result.length === 0) {
            return result;
        }
        // Find the first non-zero entry
        let start = 0;
        while (start < result.length && result[start] === 0) {
            start++;
        }
        // If we started with zeros, strip them
        if (start) {
            result = result.slice(start);
        }
        return result;
    }
    function zeroPad(value, length) {
        value = arrayify(value);
        if (value.length > length) {
            logger$J.throwArgumentError("value out of range", "value", arguments[0]);
        }
        const result = new Uint8Array(length);
        result.set(value, length - value.length);
        return addSlice(result);
    }
    function isHexString(value, length) {
        if (typeof (value) !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
            return false;
        }
        if (length && value.length !== 2 + 2 * length) {
            return false;
        }
        return true;
    }
    const HexCharacters = "0123456789abcdef";
    function hexlify(value, options) {
        if (!options) {
            options = {};
        }
        if (typeof (value) === "number") {
            logger$J.checkSafeUint53(value, "invalid hexlify value");
            let hex = "";
            while (value) {
                hex = HexCharacters[value & 0xf] + hex;
                value = Math.floor(value / 16);
            }
            if (hex.length) {
                if (hex.length % 2) {
                    hex = "0" + hex;
                }
                return "0x" + hex;
            }
            return "0x00";
        }
        if (typeof (value) === "bigint") {
            value = value.toString(16);
            if (value.length % 2) {
                return ("0x0" + value);
            }
            return "0x" + value;
        }
        if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
            value = "0x" + value;
        }
        if (isHexable(value)) {
            return value.toHexString();
        }
        if (isHexString(value)) {
            if (value.length % 2) {
                if (options.hexPad === "left") {
                    value = "0x0" + value.substring(2);
                }
                else if (options.hexPad === "right") {
                    value += "0";
                }
                else {
                    logger$J.throwArgumentError("hex data is odd-length", "value", value);
                }
            }
            return value.toLowerCase();
        }
        if (isBytes(value)) {
            let result = "0x";
            for (let i = 0; i < value.length; i++) {
                let v = value[i];
                result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];
            }
            return result;
        }
        return logger$J.throwArgumentError("invalid hexlify value", "value", value);
    }
    /*
    function unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {
        if (typeof(value) === "string" && value.length % 2 && value.substring(0, 2) === "0x") {
            return "0x0" + value.substring(2);
        }
        return value;
    }
    */
    function hexDataLength(data) {
        if (typeof (data) !== "string") {
            data = hexlify(data);
        }
        else if (!isHexString(data) || (data.length % 2)) {
            return null;
        }
        return (data.length - 2) / 2;
    }
    function hexDataSlice(data, offset, endOffset) {
        if (typeof (data) !== "string") {
            data = hexlify(data);
        }
        else if (!isHexString(data) || (data.length % 2)) {
            logger$J.throwArgumentError("invalid hexData", "value", data);
        }
        offset = 2 + 2 * offset;
        if (endOffset != null) {
            return "0x" + data.substring(offset, 2 + 2 * endOffset);
        }
        return "0x" + data.substring(offset);
    }
    function hexConcat(items) {
        let result = "0x";
        items.forEach((item) => {
            result += hexlify(item).substring(2);
        });
        return result;
    }
    function hexValue(value) {
        const trimmed = hexStripZeros(hexlify(value, { hexPad: "left" }));
        if (trimmed === "0x") {
            return "0x0";
        }
        return trimmed;
    }
    function hexStripZeros(value) {
        if (typeof (value) !== "string") {
            value = hexlify(value);
        }
        if (!isHexString(value)) {
            logger$J.throwArgumentError("invalid hex string", "value", value);
        }
        value = value.substring(2);
        let offset = 0;
        while (offset < value.length && value[offset] === "0") {
            offset++;
        }
        return "0x" + value.substring(offset);
    }
    function hexZeroPad(value, length) {
        if (typeof (value) !== "string") {
            value = hexlify(value);
        }
        else if (!isHexString(value)) {
            logger$J.throwArgumentError("invalid hex string", "value", value);
        }
        if (value.length > 2 * length + 2) {
            logger$J.throwArgumentError("value out of range", "value", arguments[1]);
        }
        while (value.length < 2 * length + 2) {
            value = "0x0" + value.substring(2);
        }
        return value;
    }
    function splitSignature(signature) {
        const result = {
            r: "0x",
            s: "0x",
            _vs: "0x",
            recoveryParam: 0,
            v: 0,
            yParityAndS: "0x",
            compact: "0x"
        };
        if (isBytesLike(signature)) {
            let bytes = arrayify(signature);
            // Get the r, s and v
            if (bytes.length === 64) {
                // EIP-2098; pull the v from the top bit of s and clear it
                result.v = 27 + (bytes[32] >> 7);
                bytes[32] &= 0x7f;
                result.r = hexlify(bytes.slice(0, 32));
                result.s = hexlify(bytes.slice(32, 64));
            }
            else if (bytes.length === 65) {
                result.r = hexlify(bytes.slice(0, 32));
                result.s = hexlify(bytes.slice(32, 64));
                result.v = bytes[64];
            }
            else {
                logger$J.throwArgumentError("invalid signature string", "signature", signature);
            }
            // Allow a recid to be used as the v
            if (result.v < 27) {
                if (result.v === 0 || result.v === 1) {
                    result.v += 27;
                }
                else {
                    logger$J.throwArgumentError("signature invalid v byte", "signature", signature);
                }
            }
            // Compute recoveryParam from v
            result.recoveryParam = 1 - (result.v % 2);
            // Compute _vs from recoveryParam and s
            if (result.recoveryParam) {
                bytes[32] |= 0x80;
            }
            result._vs = hexlify(bytes.slice(32, 64));
        }
        else {
            result.r = signature.r;
            result.s = signature.s;
            result.v = signature.v;
            result.recoveryParam = signature.recoveryParam;
            result._vs = signature._vs;
            // If the _vs is available, use it to populate missing s, v and recoveryParam
            // and verify non-missing s, v and recoveryParam
            if (result._vs != null) {
                const vs = zeroPad(arrayify(result._vs), 32);
                result._vs = hexlify(vs);
                // Set or check the recid
                const recoveryParam = ((vs[0] >= 128) ? 1 : 0);
                if (result.recoveryParam == null) {
                    result.recoveryParam = recoveryParam;
                }
                else if (result.recoveryParam !== recoveryParam) {
                    logger$J.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature);
                }
                // Set or check the s
                vs[0] &= 0x7f;
                const s = hexlify(vs);
                if (result.s == null) {
                    result.s = s;
                }
                else if (result.s !== s) {
                    logger$J.throwArgumentError("signature v mismatch _vs", "signature", signature);
                }
            }
            // Use recid and v to populate each other
            if (result.recoveryParam == null) {
                if (result.v == null) {
                    logger$J.throwArgumentError("signature missing v and recoveryParam", "signature", signature);
                }
                else if (result.v === 0 || result.v === 1) {
                    result.recoveryParam = result.v;
                }
                else {
                    result.recoveryParam = 1 - (result.v % 2);
                }
            }
            else {
                if (result.v == null) {
                    result.v = 27 + result.recoveryParam;
                }
                else {
                    const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));
                    if (result.recoveryParam !== recId) {
                        logger$J.throwArgumentError("signature recoveryParam mismatch v", "signature", signature);
                    }
                }
            }
            if (result.r == null || !isHexString(result.r)) {
                logger$J.throwArgumentError("signature missing or invalid r", "signature", signature);
            }
            else {
                result.r = hexZeroPad(result.r, 32);
            }
            if (result.s == null || !isHexString(result.s)) {
                logger$J.throwArgumentError("signature missing or invalid s", "signature", signature);
            }
            else {
                result.s = hexZeroPad(result.s, 32);
            }
            const vs = arrayify(result.s);
            if (vs[0] >= 128) {
                logger$J.throwArgumentError("signature s out of range", "signature", signature);
            }
            if (result.recoveryParam) {
                vs[0] |= 0x80;
            }
            const _vs = hexlify(vs);
            if (result._vs) {
                if (!isHexString(result._vs)) {
                    logger$J.throwArgumentError("signature invalid _vs", "signature", signature);
                }
                result._vs = hexZeroPad(result._vs, 32);
            }
            // Set or check the _vs
            if (result._vs == null) {
                result._vs = _vs;
            }
            else if (result._vs !== _vs) {
                logger$J.throwArgumentError("signature _vs mismatch v and s", "signature", signature);
            }
        }
        result.yParityAndS = result._vs;
        result.compact = result.r + result.yParityAndS.substring(2);
        return result;
    }
    function joinSignature(signature) {
        signature = splitSignature(signature);
        return hexlify(concat$1([
            signature.r,
            signature.s,
            (signature.recoveryParam ? "0x1c" : "0x1b")
        ]));
    }

    var lib_esm$k = /*#__PURE__*/Object.freeze({
        __proto__: null,
        isBytesLike: isBytesLike,
        isBytes: isBytes,
        arrayify: arrayify,
        concat: concat$1,
        stripZeros: stripZeros,
        zeroPad: zeroPad,
        isHexString: isHexString,
        hexlify: hexlify,
        hexDataLength: hexDataLength,
        hexDataSlice: hexDataSlice,
        hexConcat: hexConcat,
        hexValue: hexValue,
        hexStripZeros: hexStripZeros,
        hexZeroPad: hexZeroPad,
        splitSignature: splitSignature,
        joinSignature: joinSignature
    });

    const version$p = "bignumber/5.7.0";

    var BN = bn$1.BN;
    const logger$I = new Logger(version$p);
    const _constructorGuard$4 = {};
    const MAX_SAFE = 0x1fffffffffffff;
    function isBigNumberish(value) {
        return (value != null) && (BigNumber.isBigNumber(value) ||
            (typeof (value) === "number" && (value % 1) === 0) ||
            (typeof (value) === "string" && !!value.match(/^-?[0-9]+$/)) ||
            isHexString(value) ||
            (typeof (value) === "bigint") ||
            isBytes(value));
    }
    // Only warn about passing 10 into radix once
    let _warnedToStringRadix = false;
    class BigNumber {
        constructor(constructorGuard, hex) {
            if (constructorGuard !== _constructorGuard$4) {
                logger$I.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new (BigNumber)"
                });
            }
            this._hex = hex;
            this._isBigNumber = true;
            Object.freeze(this);
        }
        fromTwos(value) {
            return toBigNumber(toBN(this).fromTwos(value));
        }
        toTwos(value) {
            return toBigNumber(toBN(this).toTwos(value));
        }
        abs() {
            if (this._hex[0] === "-") {
                return BigNumber.from(this._hex.substring(1));
            }
            return this;
        }
        add(other) {
            return toBigNumber(toBN(this).add(toBN(other)));
        }
        sub(other) {
            return toBigNumber(toBN(this).sub(toBN(other)));
        }
        div(other) {
            const o = BigNumber.from(other);
            if (o.isZero()) {
                throwFault$1("division-by-zero", "div");
            }
            return toBigNumber(toBN(this).div(toBN(other)));
        }
        mul(other) {
            return toBigNumber(toBN(this).mul(toBN(other)));
        }
        mod(other) {
            const value = toBN(other);
            if (value.isNeg()) {
                throwFault$1("division-by-zero", "mod");
            }
            return toBigNumber(toBN(this).umod(value));
        }
        pow(other) {
            const value = toBN(other);
            if (value.isNeg()) {
                throwFault$1("negative-power", "pow");
            }
            return toBigNumber(toBN(this).pow(value));
        }
        and(other) {
            const value = toBN(other);
            if (this.isNegative() || value.isNeg()) {
                throwFault$1("unbound-bitwise-result", "and");
            }
            return toBigNumber(toBN(this).and(value));
        }
        or(other) {
            const value = toBN(other);
            if (this.isNegative() || value.isNeg()) {
                throwFault$1("unbound-bitwise-result", "or");
            }
            return toBigNumber(toBN(this).or(value));
        }
        xor(other) {
            const value = toBN(other);
            if (this.isNegative() || value.isNeg()) {
                throwFault$1("unbound-bitwise-result", "xor");
            }
            return toBigNumber(toBN(this).xor(value));
        }
        mask(value) {
            if (this.isNegative() || value < 0) {
                throwFault$1("negative-width", "mask");
            }
            return toBigNumber(toBN(this).maskn(value));
        }
        shl(value) {
            if (this.isNegative() || value < 0) {
                throwFault$1("negative-width", "shl");
            }
            return toBigNumber(toBN(this).shln(value));
        }
        shr(value) {
            if (this.isNegative() || value < 0) {
                throwFault$1("negative-width", "shr");
            }
            return toBigNumber(toBN(this).shrn(value));
        }
        eq(other) {
            return toBN(this).eq(toBN(other));
        }
        lt(other) {
            return toBN(this).lt(toBN(other));
        }
        lte(other) {
            return toBN(this).lte(toBN(other));
        }
        gt(other) {
            return toBN(this).gt(toBN(other));
        }
        gte(other) {
            return toBN(this).gte(toBN(other));
        }
        isNegative() {
            return (this._hex[0] === "-");
        }
        isZero() {
            return toBN(this).isZero();
        }
        toNumber() {
            try {
                return toBN(this).toNumber();
            }
            catch (error) {
                throwFault$1("overflow", "toNumber", this.toString());
            }
            return null;
        }
        toBigInt() {
            try {
                return BigInt(this.toString());
            }
            catch (e) { }
            return logger$I.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, {
                value: this.toString()
            });
        }
        toString() {
            // Lots of people expect this, which we do not support, so check (See: #889)
            if (arguments.length > 0) {
                if (arguments[0] === 10) {
                    if (!_warnedToStringRadix) {
                        _warnedToStringRadix = true;
                        logger$I.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
                    }
                }
                else if (arguments[0] === 16) {
                    logger$I.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
                }
                else {
                    logger$I.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
                }
            }
            return toBN(this).toString(10);
        }
        toHexString() {
            return this._hex;
        }
        toJSON(key) {
            return { type: "BigNumber", hex: this.toHexString() };
        }
        static from(value) {
            if (value instanceof BigNumber) {
                return value;
            }
            if (typeof (value) === "string") {
                if (value.match(/^-?0x[0-9a-f]+$/i)) {
                    return new BigNumber(_constructorGuard$4, toHex$1(value));
                }
                if (value.match(/^-?[0-9]+$/)) {
                    return new BigNumber(_constructorGuard$4, toHex$1(new BN(value)));
                }
                return logger$I.throwArgumentError("invalid BigNumber string", "value", value);
            }
            if (typeof (value) === "number") {
                if (value % 1) {
                    throwFault$1("underflow", "BigNumber.from", value);
                }
                if (value >= MAX_SAFE || value <= -MAX_SAFE) {
                    throwFault$1("overflow", "BigNumber.from", value);
                }
                return BigNumber.from(String(value));
            }
            const anyValue = value;
            if (typeof (anyValue) === "bigint") {
                return BigNumber.from(anyValue.toString());
            }
            if (isBytes(anyValue)) {
                return BigNumber.from(hexlify(anyValue));
            }
            if (anyValue) {
                // Hexable interface (takes priority)
                if (anyValue.toHexString) {
                    const hex = anyValue.toHexString();
                    if (typeof (hex) === "string") {
                        return BigNumber.from(hex);
                    }
                }
                else {
                    // For now, handle legacy JSON-ified values (goes away in v6)
                    let hex = anyValue._hex;
                    // New-form JSON
                    if (hex == null && anyValue.type === "BigNumber") {
                        hex = anyValue.hex;
                    }
                    if (typeof (hex) === "string") {
                        if (isHexString(hex) || (hex[0] === "-" && isHexString(hex.substring(1)))) {
                            return BigNumber.from(hex);
                        }
                    }
                }
            }
            return logger$I.throwArgumentError("invalid BigNumber value", "value", value);
        }
        static isBigNumber(value) {
            return !!(value && value._isBigNumber);
        }
    }
    // Normalize the hex string
    function toHex$1(value) {
        // For BN, call on the hex string
        if (typeof (value) !== "string") {
            return toHex$1(value.toString(16));
        }
        // If negative, prepend the negative sign to the normalized positive value
        if (value[0] === "-") {
            // Strip off the negative sign
            value = value.substring(1);
            // Cannot have multiple negative signs (e.g. "--0x04")
            if (value[0] === "-") {
                logger$I.throwArgumentError("invalid hex", "value", value);
            }
            // Call toHex on the positive component
            value = toHex$1(value);
            // Do not allow "-0x00"
            if (value === "0x00") {
                return value;
            }
            // Negate the value
            return "-" + value;
        }
        // Add a "0x" prefix if missing
        if (value.substring(0, 2) !== "0x") {
            value = "0x" + value;
        }
        // Normalize zero
        if (value === "0x") {
            return "0x00";
        }
        // Make the string even length
        if (value.length % 2) {
            value = "0x0" + value.substring(2);
        }
        // Trim to smallest even-length string
        while (value.length > 4 && value.substring(0, 4) === "0x00") {
            value = "0x" + value.substring(4);
        }
        return value;
    }
    function toBigNumber(value) {
        return BigNumber.from(toHex$1(value));
    }
    function toBN(value) {
        const hex = BigNumber.from(value).toHexString();
        if (hex[0] === "-") {
            return (new BN("-" + hex.substring(3), 16));
        }
        return new BN(hex.substring(2), 16);
    }
    function throwFault$1(fault, operation, value) {
        const params = { fault: fault, operation: operation };
        if (value != null) {
            params.value = value;
        }
        return logger$I.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
    }
    // value should have no prefix
    function _base36To16(value) {
        return (new BN(value, 36)).toString(16);
    }
    // value should have no prefix
    function _base16To36(value) {
        return (new BN(value, 16)).toString(36);
    }

    const logger$H = new Logger(version$p);
    const _constructorGuard$3 = {};
    const Zero$2 = BigNumber.from(0);
    const NegativeOne$2 = BigNumber.from(-1);
    function throwFault(message, fault, operation, value) {
        const params = { fault: fault, operation: operation };
        if (value !== undefined) {
            params.value = value;
        }
        return logger$H.throwError(message, Logger.errors.NUMERIC_FAULT, params);
    }
    // Constant to pull zeros from for multipliers
    let zeros = "0";
    while (zeros.length < 256) {
        zeros += zeros;
    }
    // Returns a string "1" followed by decimal "0"s
    function getMultiplier(decimals) {
        if (typeof (decimals) !== "number") {
            try {
                decimals = BigNumber.from(decimals).toNumber();
            }
            catch (e) { }
        }
        if (typeof (decimals) === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
            return ("1" + zeros.substring(0, decimals));
        }
        return logger$H.throwArgumentError("invalid decimal size", "decimals", decimals);
    }
    function formatFixed(value, decimals) {
        if (decimals == null) {
            decimals = 0;
        }
        const multiplier = getMultiplier(decimals);
        // Make sure wei is a big number (convert as necessary)
        value = BigNumber.from(value);
        const negative = value.lt(Zero$2);
        if (negative) {
            value = value.mul(NegativeOne$2);
        }
        let fraction = value.mod(multiplier).toString();
        while (fraction.length < multiplier.length - 1) {
            fraction = "0" + fraction;
        }
        // Strip training 0
        fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
        const whole = value.div(multiplier).toString();
        if (multiplier.length === 1) {
            value = whole;
        }
        else {
            value = whole + "." + fraction;
        }
        if (negative) {
            value = "-" + value;
        }
        return value;
    }
    function parseFixed(value, decimals) {
        if (decimals == null) {
            decimals = 0;
        }
        const multiplier = getMultiplier(decimals);
        if (typeof (value) !== "string" || !value.match(/^-?[0-9.]+$/)) {
            logger$H.throwArgumentError("invalid decimal value", "value", value);
        }
        // Is it negative?
        const negative = (value.substring(0, 1) === "-");
        if (negative) {
            value = value.substring(1);
        }
        if (value === ".") {
            logger$H.throwArgumentError("missing value", "value", value);
        }
        // Split it into a whole and fractional part
        const comps = value.split(".");
        if (comps.length > 2) {
            logger$H.throwArgumentError("too many decimal points", "value", value);
        }
        let whole = comps[0], fraction = comps[1];
        if (!whole) {
            whole = "0";
        }
        if (!fraction) {
            fraction = "0";
        }
        // Trim trailing zeros
        while (fraction[fraction.length - 1] === "0") {
            fraction = fraction.substring(0, fraction.length - 1);
        }
        // Check the fraction doesn't exceed our decimals size
        if (fraction.length > multiplier.length - 1) {
            throwFault("fractional component exceeds decimals", "underflow", "parseFixed");
        }
        // If decimals is 0, we have an empty string for fraction
        if (fraction === "") {
            fraction = "0";
        }
        // Fully pad the string with zeros to get to wei
        while (fraction.length < multiplier.length - 1) {
            fraction += "0";
        }
        const wholeValue = BigNumber.from(whole);
        const fractionValue = BigNumber.from(fraction);
        let wei = (wholeValue.mul(multiplier)).add(fractionValue);
        if (negative) {
            wei = wei.mul(NegativeOne$2);
        }
        return wei;
    }
    class FixedFormat {
        constructor(constructorGuard, signed, width, decimals) {
            if (constructorGuard !== _constructorGuard$3) {
                logger$H.throwError("cannot use FixedFormat constructor; use FixedFormat.from", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new FixedFormat"
                });
            }
            this.signed = signed;
            this.width = width;
            this.decimals = decimals;
            this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
            this._multiplier = getMultiplier(decimals);
            Object.freeze(this);
        }
        static from(value) {
            if (value instanceof FixedFormat) {
                return value;
            }
            if (typeof (value) === "number") {
                value = `fixed128x${value}`;
            }
            let signed = true;
            let width = 128;
            let decimals = 18;
            if (typeof (value) === "string") {
                if (value === "fixed") ;
                else if (value === "ufixed") {
                    signed = false;
                }
                else {
                    const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
                    if (!match) {
                        logger$H.throwArgumentError("invalid fixed format", "format", value);
                    }
                    signed = (match[1] !== "u");
                    width = parseInt(match[2]);
                    decimals = parseInt(match[3]);
                }
            }
            else if (value) {
                const check = (key, type, defaultValue) => {
                    if (value[key] == null) {
                        return defaultValue;
                    }
                    if (typeof (value[key]) !== type) {
                        logger$H.throwArgumentError("invalid fixed format (" + key + " not " + type + ")", "format." + key, value[key]);
                    }
                    return value[key];
                };
                signed = check("signed", "boolean", signed);
                width = check("width", "number", width);
                decimals = check("decimals", "number", decimals);
            }
            if (width % 8) {
                logger$H.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
            }
            if (decimals > 80) {
                logger$H.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
            }
            return new FixedFormat(_constructorGuard$3, signed, width, decimals);
        }
    }
    class FixedNumber {
        constructor(constructorGuard, hex, value, format) {
            if (constructorGuard !== _constructorGuard$3) {
                logger$H.throwError("cannot use FixedNumber constructor; use FixedNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new FixedFormat"
                });
            }
            this.format = format;
            this._hex = hex;
            this._value = value;
            this._isFixedNumber = true;
            Object.freeze(this);
        }
        _checkFormat(other) {
            if (this.format.name !== other.format.name) {
                logger$H.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
            }
        }
        addUnsafe(other) {
            this._checkFormat(other);
            const a = parseFixed(this._value, this.format.decimals);
            const b = parseFixed(other._value, other.format.decimals);
            return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);
        }
        subUnsafe(other) {
            this._checkFormat(other);
            const a = parseFixed(this._value, this.format.decimals);
            const b = parseFixed(other._value, other.format.decimals);
            return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);
        }
        mulUnsafe(other) {
            this._checkFormat(other);
            const a = parseFixed(this._value, this.format.decimals);
            const b = parseFixed(other._value, other.format.decimals);
            return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
        }
        divUnsafe(other) {
            this._checkFormat(other);
            const a = parseFixed(this._value, this.format.decimals);
            const b = parseFixed(other._value, other.format.decimals);
            return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
        }
        floor() {
            const comps = this.toString().split(".");
            if (comps.length === 1) {
                comps.push("0");
            }
            let result = FixedNumber.from(comps[0], this.format);
            const hasFraction = !comps[1].match(/^(0*)$/);
            if (this.isNegative() && hasFraction) {
                result = result.subUnsafe(ONE.toFormat(result.format));
            }
            return result;
        }
        ceiling() {
            const comps = this.toString().split(".");
            if (comps.length === 1) {
                comps.push("0");
            }
            let result = FixedNumber.from(comps[0], this.format);
            const hasFraction = !comps[1].match(/^(0*)$/);
            if (!this.isNegative() && hasFraction) {
                result = result.addUnsafe(ONE.toFormat(result.format));
            }
            return result;
        }
        // @TODO: Support other rounding algorithms
        round(decimals) {
            if (decimals == null) {
                decimals = 0;
            }
            // If we are already in range, we're done
            const comps = this.toString().split(".");
            if (comps.length === 1) {
                comps.push("0");
            }
            if (decimals < 0 || decimals > 80 || (decimals % 1)) {
                logger$H.throwArgumentError("invalid decimal count", "decimals", decimals);
            }
            if (comps[1].length <= decimals) {
                return this;
            }
            const factor = FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
            const bump = BUMP.toFormat(this.format);
            return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
        }
        isZero() {
            return (this._value === "0.0" || this._value === "0");
        }
        isNegative() {
            return (this._value[0] === "-");
        }
        toString() { return this._value; }
        toHexString(width) {
            if (width == null) {
                return this._hex;
            }
            if (width % 8) {
                logger$H.throwArgumentError("invalid byte width", "width", width);
            }
            const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
            return hexZeroPad(hex, width / 8);
        }
        toUnsafeFloat() { return parseFloat(this.toString()); }
        toFormat(format) {
            return FixedNumber.fromString(this._value, format);
        }
        static fromValue(value, decimals, format) {
            // If decimals looks more like a format, and there is no format, shift the parameters
            if (format == null && decimals != null && !isBigNumberish(decimals)) {
                format = decimals;
                decimals = null;
            }
            if (decimals == null) {
                decimals = 0;
            }
            if (format == null) {
                format = "fixed";
            }
            return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
        }
        static fromString(value, format) {
            if (format == null) {
                format = "fixed";
            }
            const fixedFormat = FixedFormat.from(format);
            const numeric = parseFixed(value, fixedFormat.decimals);
            if (!fixedFormat.signed && numeric.lt(Zero$2)) {
                throwFault("unsigned value cannot be negative", "overflow", "value", value);
            }
            let hex = null;
            if (fixedFormat.signed) {
                hex = numeric.toTwos(fixedFormat.width).toHexString();
            }
            else {
                hex = numeric.toHexString();
                hex = hexZeroPad(hex, fixedFormat.width / 8);
            }
            const decimal = formatFixed(numeric, fixedFormat.decimals);
            return new FixedNumber(_constructorGuard$3, hex, decimal, fixedFormat);
        }
        static fromBytes(value, format) {
            if (format == null) {
                format = "fixed";
            }
            const fixedFormat = FixedFormat.from(format);
            if (arrayify(value).length > fixedFormat.width / 8) {
                throw new Error("overflow");
            }
            let numeric = BigNumber.from(value);
            if (fixedFormat.signed) {
                numeric = numeric.fromTwos(fixedFormat.width);
            }
            const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
            const decimal = formatFixed(numeric, fixedFormat.decimals);
            return new FixedNumber(_constructorGuard$3, hex, decimal, fixedFormat);
        }
        static from(value, format) {
            if (typeof (value) === "string") {
                return FixedNumber.fromString(value, format);
            }
            if (isBytes(value)) {
                return FixedNumber.fromBytes(value, format);
            }
            try {
                return FixedNumber.fromValue(value, 0, format);
            }
            catch (error) {
                // Allow NUMERIC_FAULT to bubble up
                if (error.code !== Logger.errors.INVALID_ARGUMENT) {
                    throw error;
                }
            }
            return logger$H.throwArgumentError("invalid FixedNumber value", "value", value);
        }
        static isFixedNumber(value) {
            return !!(value && value._isFixedNumber);
        }
    }
    const ONE = FixedNumber.from(1);
    const BUMP = FixedNumber.from("0.5");

    const version$o = "properties/5.7.0";

    var __awaiter$m = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$G = new Logger(version$o);
    function defineReadOnly(object, name, value) {
        Object.defineProperty(object, name, {
            enumerable: true,
            value: value,
            writable: false,
        });
    }
    // Crawl up the constructor chain to find a static method
    function getStatic(ctor, key) {
        for (let i = 0; i < 32; i++) {
            if (ctor[key]) {
                return ctor[key];
            }
            if (!ctor.prototype || typeof (ctor.prototype) !== "object") {
                break;
            }
            ctor = Object.getPrototypeOf(ctor.prototype).constructor;
        }
        return null;
    }
    function resolveProperties(object) {
        return __awaiter$m(this, void 0, void 0, function* () {
            const promises = Object.keys(object).map((key) => {
                const value = object[key];
                return Promise.resolve(value).then((v) => ({ key: key, value: v }));
            });
            const results = yield Promise.all(promises);
            return results.reduce((accum, result) => {
                accum[(result.key)] = result.value;
                return accum;
            }, {});
        });
    }
    function checkProperties(object, properties) {
        if (!object || typeof (object) !== "object") {
            logger$G.throwArgumentError("invalid object", "object", object);
        }
        Object.keys(object).forEach((key) => {
            if (!properties[key]) {
                logger$G.throwArgumentError("invalid object key - " + key, "transaction:" + key, object);
            }
        });
    }
    function shallowCopy(object) {
        const result = {};
        for (const key in object) {
            result[key] = object[key];
        }
        return result;
    }
    const opaque = { bigint: true, boolean: true, "function": true, number: true, string: true };
    function _isFrozen(object) {
        // Opaque objects are not mutable, so safe to copy by assignment
        if (object === undefined || object === null || opaque[typeof (object)]) {
            return true;
        }
        if (Array.isArray(object) || typeof (object) === "object") {
            if (!Object.isFrozen(object)) {
                return false;
            }
            const keys = Object.keys(object);
            for (let i = 0; i < keys.length; i++) {
                let value = null;
                try {
                    value = object[keys[i]];
                }
                catch (error) {
                    // If accessing a value triggers an error, it is a getter
                    // designed to do so (e.g. Result) and is therefore "frozen"
                    continue;
                }
                if (!_isFrozen(value)) {
                    return false;
                }
            }
            return true;
        }
        return logger$G.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, "object", object);
    }
    // Returns a new copy of object, such that no properties may be replaced.
    // New properties may be added only to objects.
    function _deepCopy(object) {
        if (_isFrozen(object)) {
            return object;
        }
        // Arrays are mutable, so we need to create a copy
        if (Array.isArray(object)) {
            return Object.freeze(object.map((item) => deepCopy(item)));
        }
        if (typeof (object) === "object") {
            const result = {};
            for (const key in object) {
                const value = object[key];
                if (value === undefined) {
                    continue;
                }
                defineReadOnly(result, key, deepCopy(value));
            }
            return result;
        }
        return logger$G.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, "object", object);
    }
    function deepCopy(object) {
        return _deepCopy(object);
    }
    class Description {
        constructor(info) {
            for (const key in info) {
                this[key] = deepCopy(info[key]);
            }
        }
    }

    var lib_esm$j = /*#__PURE__*/Object.freeze({
        __proto__: null,
        defineReadOnly: defineReadOnly,
        getStatic: getStatic,
        resolveProperties: resolveProperties,
        checkProperties: checkProperties,
        shallowCopy: shallowCopy,
        deepCopy: deepCopy,
        Description: Description
    });

    const version$n = "abi/5.7.0";

    const logger$F = new Logger(version$n);
    const _constructorGuard$2 = {};
    let ModifiersBytes = { calldata: true, memory: true, storage: true };
    let ModifiersNest = { calldata: true, memory: true };
    function checkModifier(type, name) {
        if (type === "bytes" || type === "string") {
            if (ModifiersBytes[name]) {
                return true;
            }
        }
        else if (type === "address") {
            if (name === "payable") {
                return true;
            }
        }
        else if (type.indexOf("[") >= 0 || type === "tuple") {
            if (ModifiersNest[name]) {
                return true;
            }
        }
        if (ModifiersBytes[name] || name === "payable") {
            logger$F.throwArgumentError("invalid modifier", "name", name);
        }
        return false;
    }
    // @TODO: Make sure that children of an indexed tuple are marked with a null indexed
    function parseParamType(param, allowIndexed) {
        let originalParam = param;
        function throwError(i) {
            logger$F.throwArgumentError(`unexpected character at position ${i}`, "param", param);
        }
        param = param.replace(/\s/g, " ");
        function newNode(parent) {
            let node = { type: "", name: "", parent: parent, state: { allowType: true } };
            if (allowIndexed) {
                node.indexed = false;
            }
            return node;
        }
        let parent = { type: "", name: "", state: { allowType: true } };
        let node = parent;
        for (let i = 0; i < param.length; i++) {
            let c = param[i];
            switch (c) {
                case "(":
                    if (node.state.allowType && node.type === "") {
                        node.type = "tuple";
                    }
                    else if (!node.state.allowParams) {
                        throwError(i);
                    }
                    node.state.allowType = false;
                    node.type = verifyType(node.type);
                    node.components = [newNode(node)];
                    node = node.components[0];
                    break;
                case ")":
                    delete node.state;
                    if (node.name === "indexed") {
                        if (!allowIndexed) {
                            throwError(i);
                        }
                        node.indexed = true;
                        node.name = "";
                    }
                    if (checkModifier(node.type, node.name)) {
                        node.name = "";
                    }
                    node.type = verifyType(node.type);
                    let child = node;
                    node = node.parent;
                    if (!node) {
                        throwError(i);
                    }
                    delete child.parent;
                    node.state.allowParams = false;
                    node.state.allowName = true;
                    node.state.allowArray = true;
                    break;
                case ",":
                    delete node.state;
                    if (node.name === "indexed") {
                        if (!allowIndexed) {
                            throwError(i);
                        }
                        node.indexed = true;
                        node.name = "";
                    }
                    if (checkModifier(node.type, node.name)) {
                        node.name = "";
                    }
                    node.type = verifyType(node.type);
                    let sibling = newNode(node.parent);
                    //{ type: "", name: "", parent: node.parent, state: { allowType: true } };
                    node.parent.components.push(sibling);
                    delete node.parent;
                    node = sibling;
                    break;
                // Hit a space...
                case " ":
                    // If reading type, the type is done and may read a param or name
                    if (node.state.allowType) {
                        if (node.type !== "") {
                            node.type = verifyType(node.type);
                            delete node.state.allowType;
                            node.state.allowName = true;
                            node.state.allowParams = true;
                        }
                    }
                    // If reading name, the name is done
                    if (node.state.allowName) {
                        if (node.name !== "") {
                            if (node.name === "indexed") {
                                if (!allowIndexed) {
                                    throwError(i);
                                }
                                if (node.indexed) {
                                    throwError(i);
                                }
                                node.indexed = true;
                                node.name = "";
                            }
                            else if (checkModifier(node.type, node.name)) {
                                node.name = "";
                            }
                            else {
                                node.state.allowName = false;
                            }
                        }
                    }
                    break;
                case "[":
                    if (!node.state.allowArray) {
                        throwError(i);
                    }
                    node.type += c;
                    node.state.allowArray = false;
                    node.state.allowName = false;
                    node.state.readArray = true;
                    break;
                case "]":
                    if (!node.state.readArray) {
                        throwError(i);
                    }
                    node.type += c;
                    node.state.readArray = false;
                    node.state.allowArray = true;
                    node.state.allowName = true;
                    break;
                default:
                    if (node.state.allowType) {
                        node.type += c;
                        node.state.allowParams = true;
                        node.state.allowArray = true;
                    }
                    else if (node.state.allowName) {
                        node.name += c;
                        delete node.state.allowArray;
                    }
                    else if (node.state.readArray) {
                        node.type += c;
                    }
                    else {
                        throwError(i);
                    }
            }
        }
        if (node.parent) {
            logger$F.throwArgumentError("unexpected eof", "param", param);
        }
        delete parent.state;
        if (node.name === "indexed") {
            if (!allowIndexed) {
                throwError(originalParam.length - 7);
            }
            if (node.indexed) {
                throwError(originalParam.length - 7);
            }
            node.indexed = true;
            node.name = "";
        }
        else if (checkModifier(node.type, node.name)) {
            node.name = "";
        }
        parent.type = verifyType(parent.type);
        return parent;
    }
    function populate(object, params) {
        for (let key in params) {
            defineReadOnly(object, key, params[key]);
        }
    }
    const FormatTypes = Object.freeze({
        // Bare formatting, as is needed for computing a sighash of an event or function
        sighash: "sighash",
        // Human-Readable with Minimal spacing and without names (compact human-readable)
        minimal: "minimal",
        // Human-Readable with nice spacing, including all names
        full: "full",
        // JSON-format a la Solidity
        json: "json"
    });
    const paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
    class ParamType {
        constructor(constructorGuard, params) {
            if (constructorGuard !== _constructorGuard$2) {
                logger$F.throwError("use fromString", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new ParamType()"
                });
            }
            populate(this, params);
            let match = this.type.match(paramTypeArray);
            if (match) {
                populate(this, {
                    arrayLength: parseInt(match[2] || "-1"),
                    arrayChildren: ParamType.fromObject({
                        type: match[1],
                        components: this.components
                    }),
                    baseType: "array"
                });
            }
            else {
                populate(this, {
                    arrayLength: null,
                    arrayChildren: null,
                    baseType: ((this.components != null) ? "tuple" : this.type)
                });
            }
            this._isParamType = true;
            Object.freeze(this);
        }
        // Format the parameter fragment
        //   - sighash: "(uint256,address)"
        //   - minimal: "tuple(uint256,address) indexed"
        //   - full:    "tuple(uint256 foo, address bar) indexed baz"
        format(format) {
            if (!format) {
                format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
                logger$F.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
                let result = {
                    type: ((this.baseType === "tuple") ? "tuple" : this.type),
                    name: (this.name || undefined)
                };
                if (typeof (this.indexed) === "boolean") {
                    result.indexed = this.indexed;
                }
                if (this.components) {
                    result.components = this.components.map((comp) => JSON.parse(comp.format(format)));
                }
                return JSON.stringify(result);
            }
            let result = "";
            // Array
            if (this.baseType === "array") {
                result += this.arrayChildren.format(format);
                result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
            }
            else {
                if (this.baseType === "tuple") {
                    if (format !== FormatTypes.sighash) {
                        result += this.type;
                    }
                    result += "(" + this.components.map((comp) => comp.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ")";
                }
                else {
                    result += this.type;
                }
            }
            if (format !== FormatTypes.sighash) {
                if (this.indexed === true) {
                    result += " indexed";
                }
                if (format === FormatTypes.full && this.name) {
                    result += " " + this.name;
                }
            }
            return result;
        }
        static from(value, allowIndexed) {
            if (typeof (value) === "string") {
                return ParamType.fromString(value, allowIndexed);
            }
            return ParamType.fromObject(value);
        }
        static fromObject(value) {
            if (ParamType.isParamType(value)) {
                return value;
            }
            return new ParamType(_constructorGuard$2, {
                name: (value.name || null),
                type: verifyType(value.type),
                indexed: ((value.indexed == null) ? null : !!value.indexed),
                components: (value.components ? value.components.map(ParamType.fromObject) : null)
            });
        }
        static fromString(value, allowIndexed) {
            function ParamTypify(node) {
                return ParamType.fromObject({
                    name: node.name,
                    type: node.type,
                    indexed: node.indexed,
                    components: node.components
                });
            }
            return ParamTypify(parseParamType(value, !!allowIndexed));
        }
        static isParamType(value) {
            return !!(value != null && value._isParamType);
        }
    }
    function parseParams(value, allowIndex) {
        return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));
    }
    class Fragment {
        constructor(constructorGuard, params) {
            if (constructorGuard !== _constructorGuard$2) {
                logger$F.throwError("use a static from method", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new Fragment()"
                });
            }
            populate(this, params);
            this._isFragment = true;
            Object.freeze(this);
        }
        static from(value) {
            if (Fragment.isFragment(value)) {
                return value;
            }
            if (typeof (value) === "string") {
                return Fragment.fromString(value);
            }
            return Fragment.fromObject(value);
        }
        static fromObject(value) {
            if (Fragment.isFragment(value)) {
                return value;
            }
            switch (value.type) {
                case "function":
                    return FunctionFragment.fromObject(value);
                case "event":
                    return EventFragment.fromObject(value);
                case "constructor":
                    return ConstructorFragment.fromObject(value);
                case "error":
                    return ErrorFragment.fromObject(value);
                case "fallback":
                case "receive":
                    // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?
                    return null;
            }
            return logger$F.throwArgumentError("invalid fragment object", "value", value);
        }
        static fromString(value) {
            // Make sure the "returns" is surrounded by a space and all whitespace is exactly one space
            value = value.replace(/\s/g, " ");
            value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
            value = value.trim();
            if (value.split(" ")[0] === "event") {
                return EventFragment.fromString(value.substring(5).trim());
            }
            else if (value.split(" ")[0] === "function") {
                return FunctionFragment.fromString(value.substring(8).trim());
            }
            else if (value.split("(")[0].trim() === "constructor") {
                return ConstructorFragment.fromString(value.trim());
            }
            else if (value.split(" ")[0] === "error") {
                return ErrorFragment.fromString(value.substring(5).trim());
            }
            return logger$F.throwArgumentError("unsupported fragment", "value", value);
        }
        static isFragment(value) {
            return !!(value && value._isFragment);
        }
    }
    class EventFragment extends Fragment {
        format(format) {
            if (!format) {
                format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
                logger$F.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
                return JSON.stringify({
                    type: "event",
                    anonymous: this.anonymous,
                    name: this.name,
                    inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
                });
            }
            let result = "";
            if (format !== FormatTypes.sighash) {
                result += "event ";
            }
            result += this.name + "(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
            if (format !== FormatTypes.sighash) {
                if (this.anonymous) {
                    result += "anonymous ";
                }
            }
            return result.trim();
        }
        static from(value) {
            if (typeof (value) === "string") {
                return EventFragment.fromString(value);
            }
            return EventFragment.fromObject(value);
        }
        static fromObject(value) {
            if (EventFragment.isEventFragment(value)) {
                return value;
            }
            if (value.type !== "event") {
                logger$F.throwArgumentError("invalid event object", "value", value);
            }
            const params = {
                name: verifyIdentifier(value.name),
                anonymous: value.anonymous,
                inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
                type: "event"
            };
            return new EventFragment(_constructorGuard$2, params);
        }
        static fromString(value) {
            let match = value.match(regexParen);
            if (!match) {
                logger$F.throwArgumentError("invalid event string", "value", value);
            }
            let anonymous = false;
            match[3].split(" ").forEach((modifier) => {
                switch (modifier.trim()) {
                    case "anonymous":
                        anonymous = true;
                        break;
                    case "":
                        break;
                    default:
                        logger$F.warn("unknown modifier: " + modifier);
                }
            });
            return EventFragment.fromObject({
                name: match[1].trim(),
                anonymous: anonymous,
                inputs: parseParams(match[2], true),
                type: "event"
            });
        }
        static isEventFragment(value) {
            return (value && value._isFragment && value.type === "event");
        }
    }
    function parseGas(value, params) {
        params.gas = null;
        let comps = value.split("@");
        if (comps.length !== 1) {
            if (comps.length > 2) {
                logger$F.throwArgumentError("invalid human-readable ABI signature", "value", value);
            }
            if (!comps[1].match(/^[0-9]+$/)) {
                logger$F.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
            }
            params.gas = BigNumber.from(comps[1]);
            return comps[0];
        }
        return value;
    }
    function parseModifiers(value, params) {
        params.constant = false;
        params.payable = false;
        params.stateMutability = "nonpayable";
        value.split(" ").forEach((modifier) => {
            switch (modifier.trim()) {
                case "constant":
                    params.constant = true;
                    break;
                case "payable":
                    params.payable = true;
                    params.stateMutability = "payable";
                    break;
                case "nonpayable":
                    params.payable = false;
                    params.stateMutability = "nonpayable";
                    break;
                case "pure":
                    params.constant = true;
                    params.stateMutability = "pure";
                    break;
                case "view":
                    params.constant = true;
                    params.stateMutability = "view";
                    break;
                case "external":
                case "public":
                case "":
                    break;
                default:
                    console.log("unknown modifier: " + modifier);
            }
        });
    }
    function verifyState(value) {
        let result = {
            constant: false,
            payable: true,
            stateMutability: "payable"
        };
        if (value.stateMutability != null) {
            result.stateMutability = value.stateMutability;
            // Set (and check things are consistent) the constant property
            result.constant = (result.stateMutability === "view" || result.stateMutability === "pure");
            if (value.constant != null) {
                if ((!!value.constant) !== result.constant) {
                    logger$F.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
                }
            }
            // Set (and check things are consistent) the payable property
            result.payable = (result.stateMutability === "payable");
            if (value.payable != null) {
                if ((!!value.payable) !== result.payable) {
                    logger$F.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
                }
            }
        }
        else if (value.payable != null) {
            result.payable = !!value.payable;
            // If payable we can assume non-constant; otherwise we can't assume
            if (value.constant == null && !result.payable && value.type !== "constructor") {
                logger$F.throwArgumentError("unable to determine stateMutability", "value", value);
            }
            result.constant = !!value.constant;
            if (result.constant) {
                result.stateMutability = "view";
            }
            else {
                result.stateMutability = (result.payable ? "payable" : "nonpayable");
            }
            if (result.payable && result.constant) {
                logger$F.throwArgumentError("cannot have constant payable function", "value", value);
            }
        }
        else if (value.constant != null) {
            result.constant = !!value.constant;
            result.payable = !result.constant;
            result.stateMutability = (result.constant ? "view" : "payable");
        }
        else if (value.type !== "constructor") {
            logger$F.throwArgumentError("unable to determine stateMutability", "value", value);
        }
        return result;
    }
    class ConstructorFragment extends Fragment {
        format(format) {
            if (!format) {
                format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
                logger$F.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
                return JSON.stringify({
                    type: "constructor",
                    stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
                    payable: this.payable,
                    gas: (this.gas ? this.gas.toNumber() : undefined),
                    inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
                });
            }
            if (format === FormatTypes.sighash) {
                logger$F.throwError("cannot format a constructor for sighash", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "format(sighash)"
                });
            }
            let result = "constructor(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
            if (this.stateMutability && this.stateMutability !== "nonpayable") {
                result += this.stateMutability + " ";
            }
            return result.trim();
        }
        static from(value) {
            if (typeof (value) === "string") {
                return ConstructorFragment.fromString(value);
            }
            return ConstructorFragment.fromObject(value);
        }
        static fromObject(value) {
            if (ConstructorFragment.isConstructorFragment(value)) {
                return value;
            }
            if (value.type !== "constructor") {
                logger$F.throwArgumentError("invalid constructor object", "value", value);
            }
            let state = verifyState(value);
            if (state.constant) {
                logger$F.throwArgumentError("constructor cannot be constant", "value", value);
            }
            const params = {
                name: null,
                type: value.type,
                inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
                payable: state.payable,
                stateMutability: state.stateMutability,
                gas: (value.gas ? BigNumber.from(value.gas) : null)
            };
            return new ConstructorFragment(_constructorGuard$2, params);
        }
        static fromString(value) {
            let params = { type: "constructor" };
            value = parseGas(value, params);
            let parens = value.match(regexParen);
            if (!parens || parens[1].trim() !== "constructor") {
                logger$F.throwArgumentError("invalid constructor string", "value", value);
            }
            params.inputs = parseParams(parens[2].trim(), false);
            parseModifiers(parens[3].trim(), params);
            return ConstructorFragment.fromObject(params);
        }
        static isConstructorFragment(value) {
            return (value && value._isFragment && value.type === "constructor");
        }
    }
    class FunctionFragment extends ConstructorFragment {
        format(format) {
            if (!format) {
                format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
                logger$F.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
                return JSON.stringify({
                    type: "function",
                    name: this.name,
                    constant: this.constant,
                    stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
                    payable: this.payable,
                    gas: (this.gas ? this.gas.toNumber() : undefined),
                    inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
                    outputs: this.outputs.map((output) => JSON.parse(output.format(format))),
                });
            }
            let result = "";
            if (format !== FormatTypes.sighash) {
                result += "function ";
            }
            result += this.name + "(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
            if (format !== FormatTypes.sighash) {
                if (this.stateMutability) {
                    if (this.stateMutability !== "nonpayable") {
                        result += (this.stateMutability + " ");
                    }
                }
                else if (this.constant) {
                    result += "view ";
                }
                if (this.outputs && this.outputs.length) {
                    result += "returns (" + this.outputs.map((output) => output.format(format)).join(", ") + ") ";
                }
                if (this.gas != null) {
                    result += "@" + this.gas.toString() + " ";
                }
            }
            return result.trim();
        }
        static from(value) {
            if (typeof (value) === "string") {
                return FunctionFragment.fromString(value);
            }
            return FunctionFragment.fromObject(value);
        }
        static fromObject(value) {
            if (FunctionFragment.isFunctionFragment(value)) {
                return value;
            }
            if (value.type !== "function") {
                logger$F.throwArgumentError("invalid function object", "value", value);
            }
            let state = verifyState(value);
            const params = {
                type: value.type,
                name: verifyIdentifier(value.name),
                constant: state.constant,
                inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
                outputs: (value.outputs ? value.outputs.map(ParamType.fromObject) : []),
                payable: state.payable,
                stateMutability: state.stateMutability,
                gas: (value.gas ? BigNumber.from(value.gas) : null)
            };
            return new FunctionFragment(_constructorGuard$2, params);
        }
        static fromString(value) {
            let params = { type: "function" };
            value = parseGas(value, params);
            let comps = value.split(" returns ");
            if (comps.length > 2) {
                logger$F.throwArgumentError("invalid function string", "value", value);
            }
            let parens = comps[0].match(regexParen);
            if (!parens) {
                logger$F.throwArgumentError("invalid function signature", "value", value);
            }
            params.name = parens[1].trim();
            if (params.name) {
                verifyIdentifier(params.name);
            }
            params.inputs = parseParams(parens[2], false);
            parseModifiers(parens[3].trim(), params);
            // We have outputs
            if (comps.length > 1) {
                let returns = comps[1].match(regexParen);
                if (returns[1].trim() != "" || returns[3].trim() != "") {
                    logger$F.throwArgumentError("unexpected tokens", "value", value);
                }
                params.outputs = parseParams(returns[2], false);
            }
            else {
                params.outputs = [];
            }
            return FunctionFragment.fromObject(params);
        }
        static isFunctionFragment(value) {
            return (value && value._isFragment && value.type === "function");
        }
    }
    //export class StructFragment extends Fragment {
    //}
    function checkForbidden(fragment) {
        const sig = fragment.format();
        if (sig === "Error(string)" || sig === "Panic(uint256)") {
            logger$F.throwArgumentError(`cannot specify user defined ${sig} error`, "fragment", fragment);
        }
        return fragment;
    }
    class ErrorFragment extends Fragment {
        format(format) {
            if (!format) {
                format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
                logger$F.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
                return JSON.stringify({
                    type: "error",
                    name: this.name,
                    inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
                });
            }
            let result = "";
            if (format !== FormatTypes.sighash) {
                result += "error ";
            }
            result += this.name + "(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
            return result.trim();
        }
        static from(value) {
            if (typeof (value) === "string") {
                return ErrorFragment.fromString(value);
            }
            return ErrorFragment.fromObject(value);
        }
        static fromObject(value) {
            if (ErrorFragment.isErrorFragment(value)) {
                return value;
            }
            if (value.type !== "error") {
                logger$F.throwArgumentError("invalid error object", "value", value);
            }
            const params = {
                type: value.type,
                name: verifyIdentifier(value.name),
                inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : [])
            };
            return checkForbidden(new ErrorFragment(_constructorGuard$2, params));
        }
        static fromString(value) {
            let params = { type: "error" };
            let parens = value.match(regexParen);
            if (!parens) {
                logger$F.throwArgumentError("invalid error signature", "value", value);
            }
            params.name = parens[1].trim();
            if (params.name) {
                verifyIdentifier(params.name);
            }
            params.inputs = parseParams(parens[2], false);
            return checkForbidden(ErrorFragment.fromObject(params));
        }
        static isErrorFragment(value) {
            return (value && value._isFragment && value.type === "error");
        }
    }
    function verifyType(type) {
        // These need to be transformed to their full description
        if (type.match(/^uint($|[^1-9])/)) {
            type = "uint256" + type.substring(4);
        }
        else if (type.match(/^int($|[^1-9])/)) {
            type = "int256" + type.substring(3);
        }
        // @TODO: more verification
        return type;
    }
    // See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234
    const regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
    function verifyIdentifier(value) {
        if (!value || !value.match(regexIdentifier)) {
            logger$F.throwArgumentError(`invalid identifier "${value}"`, "value", value);
        }
        return value;
    }
    const regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
    function splitNesting(value) {
        value = value.trim();
        let result = [];
        let accum = "";
        let depth = 0;
        for (let offset = 0; offset < value.length; offset++) {
            let c = value[offset];
            if (c === "," && depth === 0) {
                result.push(accum);
                accum = "";
            }
            else {
                accum += c;
                if (c === "(") {
                    depth++;
                }
                else if (c === ")") {
                    depth--;
                    if (depth === -1) {
                        logger$F.throwArgumentError("unbalanced parenthesis", "value", value);
                    }
                }
            }
        }
        if (accum) {
            result.push(accum);
        }
        return result;
    }

    const logger$E = new Logger(version$n);
    function checkResultErrors(result) {
        // Find the first error (if any)
        const errors = [];
        const checkErrors = function (path, object) {
            if (!Array.isArray(object)) {
                return;
            }
            for (let key in object) {
                const childPath = path.slice();
                childPath.push(key);
                try {
                    checkErrors(childPath, object[key]);
                }
                catch (error) {
                    errors.push({ path: childPath, error: error });
                }
            }
        };
        checkErrors([], result);
        return errors;
    }
    class Coder {
        constructor(name, type, localName, dynamic) {
            // @TODO: defineReadOnly these
            this.name = name;
            this.type = type;
            this.localName = localName;
            this.dynamic = dynamic;
        }
        _throwError(message, value) {
            logger$E.throwArgumentError(message, this.localName, value);
        }
    }
    class Writer {
        constructor(wordSize) {
            defineReadOnly(this, "wordSize", wordSize || 32);
            this._data = [];
            this._dataLength = 0;
            this._padding = new Uint8Array(wordSize);
        }
        get data() {
            return hexConcat(this._data);
        }
        get length() { return this._dataLength; }
        _writeData(data) {
            this._data.push(data);
            this._dataLength += data.length;
            return data.length;
        }
        appendWriter(writer) {
            return this._writeData(concat$1(writer._data));
        }
        // Arrayish items; padded on the right to wordSize
        writeBytes(value) {
            let bytes = arrayify(value);
            const paddingOffset = bytes.length % this.wordSize;
            if (paddingOffset) {
                bytes = concat$1([bytes, this._padding.slice(paddingOffset)]);
            }
            return this._writeData(bytes);
        }
        _getValue(value) {
            let bytes = arrayify(BigNumber.from(value));
            if (bytes.length > this.wordSize) {
                logger$E.throwError("value out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
                    length: this.wordSize,
                    offset: bytes.length
                });
            }
            if (bytes.length % this.wordSize) {
                bytes = concat$1([this._padding.slice(bytes.length % this.wordSize), bytes]);
            }
            return bytes;
        }
        // BigNumberish items; padded on the left to wordSize
        writeValue(value) {
            return this._writeData(this._getValue(value));
        }
        writeUpdatableValue() {
            const offset = this._data.length;
            this._data.push(this._padding);
            this._dataLength += this.wordSize;
            return (value) => {
                this._data[offset] = this._getValue(value);
            };
        }
    }
    class Reader {
        constructor(data, wordSize, coerceFunc, allowLoose) {
            defineReadOnly(this, "_data", arrayify(data));
            defineReadOnly(this, "wordSize", wordSize || 32);
            defineReadOnly(this, "_coerceFunc", coerceFunc);
            defineReadOnly(this, "allowLoose", allowLoose);
            this._offset = 0;
        }
        get data() { return hexlify(this._data); }
        get consumed() { return this._offset; }
        // The default Coerce function
        static coerce(name, value) {
            let match = name.match("^u?int([0-9]+)$");
            if (match && parseInt(match[1]) <= 48) {
                value = value.toNumber();
            }
            return value;
        }
        coerce(name, value) {
            if (this._coerceFunc) {
                return this._coerceFunc(name, value);
            }
            return Reader.coerce(name, value);
        }
        _peekBytes(offset, length, loose) {
            let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
            if (this._offset + alignedLength > this._data.length) {
                if (this.allowLoose && loose && this._offset + length <= this._data.length) {
                    alignedLength = length;
                }
                else {
                    logger$E.throwError("data out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
                        length: this._data.length,
                        offset: this._offset + alignedLength
                    });
                }
            }
            return this._data.slice(this._offset, this._offset + alignedLength);
        }
        subReader(offset) {
            return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
        }
        readBytes(length, loose) {
            let bytes = this._peekBytes(0, length, !!loose);
            this._offset += bytes.length;
            // @TODO: Make sure the length..end bytes are all 0?
            return bytes.slice(0, length);
        }
        readValue() {
            return BigNumber.from(this.readBytes(this.wordSize));
        }
    }

    /**
     * [js-sha3]{@link https://github.com/emn178/js-sha3}
     *
     * @version 0.8.0
     * @author Chen, Yi-Cyuan [emn178@gmail.com]
     * @copyright Chen, Yi-Cyuan 2015-2018
     * @license MIT
     */

    var sha3 = createCommonjsModule$4(function (module) {
    /*jslint bitwise: true */
    (function () {

      var INPUT_ERROR = 'input is invalid type';
      var FINALIZE_ERROR = 'finalize already called';
      var WINDOW = typeof window === 'object';
      var root = WINDOW ? window : {};
      if (root.JS_SHA3_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === 'object';
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
      if (NODE_JS) {
        root = commonjsGlobal;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;
      var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
      var HEX_CHARS = '0123456789abcdef'.split('');
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
        0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
        2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
        2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
        2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
      var CSHAKE_BYTEPAD = {
        '128': 168,
        '256': 136
      };

      if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function (obj) {
          return Object.prototype.toString.call(obj) === '[object Array]';
        };
      }

      if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function (obj) {
          return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }

      var createOutputMethod = function (bits, padding, outputType) {
        return function (message) {
          return new Keccak(bits, padding, bits).update(message)[outputType]();
        };
      };

      var createShakeOutputMethod = function (bits, padding, outputType) {
        return function (message, outputBits) {
          return new Keccak(bits, padding, outputBits).update(message)[outputType]();
        };
      };

      var createCshakeOutputMethod = function (bits, padding, outputType) {
        return function (message, outputBits, n, s) {
          return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
        };
      };

      var createKmacOutputMethod = function (bits, padding, outputType) {
        return function (key, message, outputBits, s) {
          return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
        };
      };

      var createOutputMethods = function (method, createMethod, bits, padding) {
        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
          var type = OUTPUT_TYPES[i];
          method[type] = createMethod(bits, padding, type);
        }
        return method;
      };

      var createMethod = function (bits, padding) {
        var method = createOutputMethod(bits, padding, 'hex');
        method.create = function () {
          return new Keccak(bits, padding, bits);
        };
        method.update = function (message) {
          return method.create().update(message);
        };
        return createOutputMethods(method, createOutputMethod, bits, padding);
      };

      var createShakeMethod = function (bits, padding) {
        var method = createShakeOutputMethod(bits, padding, 'hex');
        method.create = function (outputBits) {
          return new Keccak(bits, padding, outputBits);
        };
        method.update = function (message, outputBits) {
          return method.create(outputBits).update(message);
        };
        return createOutputMethods(method, createShakeOutputMethod, bits, padding);
      };

      var createCshakeMethod = function (bits, padding) {
        var w = CSHAKE_BYTEPAD[bits];
        var method = createCshakeOutputMethod(bits, padding, 'hex');
        method.create = function (outputBits, n, s) {
          if (!n && !s) {
            return methods['shake' + bits].create(outputBits);
          } else {
            return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
          }
        };
        method.update = function (message, outputBits, n, s) {
          return method.create(outputBits, n, s).update(message);
        };
        return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
      };

      var createKmacMethod = function (bits, padding) {
        var w = CSHAKE_BYTEPAD[bits];
        var method = createKmacOutputMethod(bits, padding, 'hex');
        method.create = function (key, outputBits, s) {
          return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
        };
        method.update = function (key, message, outputBits, s) {
          return method.create(key, outputBits, s).update(message);
        };
        return createOutputMethods(method, createKmacOutputMethod, bits, padding);
      };

      var algorithms = [
        { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
        { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
        { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
        { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
        { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
      ];

      var methods = {}, methodNames = [];

      for (var i = 0; i < algorithms.length; ++i) {
        var algorithm = algorithms[i];
        var bits = algorithm.bits;
        for (var j = 0; j < bits.length; ++j) {
          var methodName = algorithm.name + '_' + bits[j];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
          if (algorithm.name !== 'sha3') {
            var newMethodName = algorithm.name + bits[j];
            methodNames.push(newMethodName);
            methods[newMethodName] = methods[methodName];
          }
        }
      }

      function Keccak(bits, padding, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding;
        this.outputBits = outputBits;
        this.reset = true;
        this.finalized = false;
        this.block = 0;
        this.start = 0;
        this.blockCount = (1600 - (bits << 1)) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;

        for (var i = 0; i < 50; ++i) {
          this.s[i] = 0;
        }
      }

      Keccak.prototype.update = function (message) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var notString, type = typeof message;
        if (type !== 'string') {
          if (type === 'object') {
            if (message === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
          blockCount = this.blockCount, index = 0, s = this.s, i, code;

        while (index < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i = 1; i < blockCount + 1; ++i) {
              blocks[i] = 0;
            }
          }
          if (notString) {
            for (i = this.start; index < length && i < byteCount; ++index) {
              blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
            }
          } else {
            for (i = this.start; index < length && i < byteCount; ++index) {
              code = message.charCodeAt(index);
              if (code < 0x80) {
                blocks[i >> 2] |= code << SHIFT[i++ & 3];
              } else if (code < 0x800) {
                blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else if (code < 0xd800 || code >= 0xe000) {
                blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else {
                code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
                blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              }
            }
          }
          this.lastByteIndex = i;
          if (i >= byteCount) {
            this.start = i - byteCount;
            this.block = blocks[blockCount];
            for (i = 0; i < blockCount; ++i) {
              s[i] ^= blocks[i];
            }
            f(s);
            this.reset = true;
          } else {
            this.start = i;
          }
        }
        return this;
      };

      Keccak.prototype.encode = function (x, right) {
        var o = x & 255, n = 1;
        var bytes = [o];
        x = x >> 8;
        o = x & 255;
        while (o > 0) {
          bytes.unshift(o);
          x = x >> 8;
          o = x & 255;
          ++n;
        }
        if (right) {
          bytes.push(n);
        } else {
          bytes.unshift(n);
        }
        this.update(bytes);
        return bytes.length;
      };

      Keccak.prototype.encodeString = function (str) {
        var notString, type = typeof str;
        if (type !== 'string') {
          if (type === 'object') {
            if (str === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
              str = new Uint8Array(str);
            } else if (!Array.isArray(str)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var bytes = 0, length = str.length;
        if (notString) {
          bytes = length;
        } else {
          for (var i = 0; i < str.length; ++i) {
            var code = str.charCodeAt(i);
            if (code < 0x80) {
              bytes += 1;
            } else if (code < 0x800) {
              bytes += 2;
            } else if (code < 0xd800 || code >= 0xe000) {
              bytes += 3;
            } else {
              code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
              bytes += 4;
            }
          }
        }
        bytes += this.encode(bytes * 8);
        this.update(str);
        return bytes;
      };

      Keccak.prototype.bytepad = function (strs, w) {
        var bytes = this.encode(w);
        for (var i = 0; i < strs.length; ++i) {
          bytes += this.encodeString(strs[i]);
        }
        var paddingBytes = w - bytes % w;
        var zeros = [];
        zeros.length = paddingBytes;
        this.update(zeros);
        return this;
      };

      Keccak.prototype.finalize = function () {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
        blocks[i >> 2] |= this.padding[i & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i = 1; i < blockCount + 1; ++i) {
            blocks[i] = 0;
          }
        }
        blocks[blockCount - 1] |= 0x80000000;
        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }
        f(s);
      };

      Keccak.prototype.toString = Keccak.prototype.hex = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
        var hex = '', block;
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            block = s[i];
            hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
              HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
              HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
              HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
          }
          if (j % blockCount === 0) {
            f(s);
            i = 0;
          }
        }
        if (extraBytes) {
          block = s[i];
          hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
          if (extraBytes > 1) {
            hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
          }
          if (extraBytes > 2) {
            hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
          }
        }
        return hex;
      };

      Keccak.prototype.arrayBuffer = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer((outputBlocks + 1) << 2);
        } else {
          buffer = new ArrayBuffer(bytes);
        }
        var array = new Uint32Array(buffer);
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            array[j] = s[i];
          }
          if (j % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          array[i] = s[i];
          buffer = buffer.slice(0, bytes);
        }
        return buffer;
      };

      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

      Keccak.prototype.digest = Keccak.prototype.array = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
        var array = [], offset, block;
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            offset = j << 2;
            block = s[i];
            array[offset] = block & 0xFF;
            array[offset + 1] = (block >> 8) & 0xFF;
            array[offset + 2] = (block >> 16) & 0xFF;
            array[offset + 3] = (block >> 24) & 0xFF;
          }
          if (j % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          offset = j << 2;
          block = s[i];
          array[offset] = block & 0xFF;
          if (extraBytes > 1) {
            array[offset + 1] = (block >> 8) & 0xFF;
          }
          if (extraBytes > 2) {
            array[offset + 2] = (block >> 16) & 0xFF;
          }
        }
        return array;
      };

      function Kmac(bits, padding, outputBits) {
        Keccak.call(this, bits, padding, outputBits);
      }

      Kmac.prototype = new Keccak();

      Kmac.prototype.finalize = function () {
        this.encode(this.outputBits, true);
        return Keccak.prototype.finalize.call(this);
      };

      var f = function (s) {
        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
          b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
          b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
          b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n = 0; n < 48; n += 2) {
          c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
          c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
          c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
          c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
          c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
          c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
          c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
          c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
          c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
          c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

          h = c8 ^ ((c2 << 1) | (c3 >>> 31));
          l = c9 ^ ((c3 << 1) | (c2 >>> 31));
          s[0] ^= h;
          s[1] ^= l;
          s[10] ^= h;
          s[11] ^= l;
          s[20] ^= h;
          s[21] ^= l;
          s[30] ^= h;
          s[31] ^= l;
          s[40] ^= h;
          s[41] ^= l;
          h = c0 ^ ((c4 << 1) | (c5 >>> 31));
          l = c1 ^ ((c5 << 1) | (c4 >>> 31));
          s[2] ^= h;
          s[3] ^= l;
          s[12] ^= h;
          s[13] ^= l;
          s[22] ^= h;
          s[23] ^= l;
          s[32] ^= h;
          s[33] ^= l;
          s[42] ^= h;
          s[43] ^= l;
          h = c2 ^ ((c6 << 1) | (c7 >>> 31));
          l = c3 ^ ((c7 << 1) | (c6 >>> 31));
          s[4] ^= h;
          s[5] ^= l;
          s[14] ^= h;
          s[15] ^= l;
          s[24] ^= h;
          s[25] ^= l;
          s[34] ^= h;
          s[35] ^= l;
          s[44] ^= h;
          s[45] ^= l;
          h = c4 ^ ((c8 << 1) | (c9 >>> 31));
          l = c5 ^ ((c9 << 1) | (c8 >>> 31));
          s[6] ^= h;
          s[7] ^= l;
          s[16] ^= h;
          s[17] ^= l;
          s[26] ^= h;
          s[27] ^= l;
          s[36] ^= h;
          s[37] ^= l;
          s[46] ^= h;
          s[47] ^= l;
          h = c6 ^ ((c0 << 1) | (c1 >>> 31));
          l = c7 ^ ((c1 << 1) | (c0 >>> 31));
          s[8] ^= h;
          s[9] ^= l;
          s[18] ^= h;
          s[19] ^= l;
          s[28] ^= h;
          s[29] ^= l;
          s[38] ^= h;
          s[39] ^= l;
          s[48] ^= h;
          s[49] ^= l;

          b0 = s[0];
          b1 = s[1];
          b32 = (s[11] << 4) | (s[10] >>> 28);
          b33 = (s[10] << 4) | (s[11] >>> 28);
          b14 = (s[20] << 3) | (s[21] >>> 29);
          b15 = (s[21] << 3) | (s[20] >>> 29);
          b46 = (s[31] << 9) | (s[30] >>> 23);
          b47 = (s[30] << 9) | (s[31] >>> 23);
          b28 = (s[40] << 18) | (s[41] >>> 14);
          b29 = (s[41] << 18) | (s[40] >>> 14);
          b20 = (s[2] << 1) | (s[3] >>> 31);
          b21 = (s[3] << 1) | (s[2] >>> 31);
          b2 = (s[13] << 12) | (s[12] >>> 20);
          b3 = (s[12] << 12) | (s[13] >>> 20);
          b34 = (s[22] << 10) | (s[23] >>> 22);
          b35 = (s[23] << 10) | (s[22] >>> 22);
          b16 = (s[33] << 13) | (s[32] >>> 19);
          b17 = (s[32] << 13) | (s[33] >>> 19);
          b48 = (s[42] << 2) | (s[43] >>> 30);
          b49 = (s[43] << 2) | (s[42] >>> 30);
          b40 = (s[5] << 30) | (s[4] >>> 2);
          b41 = (s[4] << 30) | (s[5] >>> 2);
          b22 = (s[14] << 6) | (s[15] >>> 26);
          b23 = (s[15] << 6) | (s[14] >>> 26);
          b4 = (s[25] << 11) | (s[24] >>> 21);
          b5 = (s[24] << 11) | (s[25] >>> 21);
          b36 = (s[34] << 15) | (s[35] >>> 17);
          b37 = (s[35] << 15) | (s[34] >>> 17);
          b18 = (s[45] << 29) | (s[44] >>> 3);
          b19 = (s[44] << 29) | (s[45] >>> 3);
          b10 = (s[6] << 28) | (s[7] >>> 4);
          b11 = (s[7] << 28) | (s[6] >>> 4);
          b42 = (s[17] << 23) | (s[16] >>> 9);
          b43 = (s[16] << 23) | (s[17] >>> 9);
          b24 = (s[26] << 25) | (s[27] >>> 7);
          b25 = (s[27] << 25) | (s[26] >>> 7);
          b6 = (s[36] << 21) | (s[37] >>> 11);
          b7 = (s[37] << 21) | (s[36] >>> 11);
          b38 = (s[47] << 24) | (s[46] >>> 8);
          b39 = (s[46] << 24) | (s[47] >>> 8);
          b30 = (s[8] << 27) | (s[9] >>> 5);
          b31 = (s[9] << 27) | (s[8] >>> 5);
          b12 = (s[18] << 20) | (s[19] >>> 12);
          b13 = (s[19] << 20) | (s[18] >>> 12);
          b44 = (s[29] << 7) | (s[28] >>> 25);
          b45 = (s[28] << 7) | (s[29] >>> 25);
          b26 = (s[38] << 8) | (s[39] >>> 24);
          b27 = (s[39] << 8) | (s[38] >>> 24);
          b8 = (s[48] << 14) | (s[49] >>> 18);
          b9 = (s[49] << 14) | (s[48] >>> 18);

          s[0] = b0 ^ (~b2 & b4);
          s[1] = b1 ^ (~b3 & b5);
          s[10] = b10 ^ (~b12 & b14);
          s[11] = b11 ^ (~b13 & b15);
          s[20] = b20 ^ (~b22 & b24);
          s[21] = b21 ^ (~b23 & b25);
          s[30] = b30 ^ (~b32 & b34);
          s[31] = b31 ^ (~b33 & b35);
          s[40] = b40 ^ (~b42 & b44);
          s[41] = b41 ^ (~b43 & b45);
          s[2] = b2 ^ (~b4 & b6);
          s[3] = b3 ^ (~b5 & b7);
          s[12] = b12 ^ (~b14 & b16);
          s[13] = b13 ^ (~b15 & b17);
          s[22] = b22 ^ (~b24 & b26);
          s[23] = b23 ^ (~b25 & b27);
          s[32] = b32 ^ (~b34 & b36);
          s[33] = b33 ^ (~b35 & b37);
          s[42] = b42 ^ (~b44 & b46);
          s[43] = b43 ^ (~b45 & b47);
          s[4] = b4 ^ (~b6 & b8);
          s[5] = b5 ^ (~b7 & b9);
          s[14] = b14 ^ (~b16 & b18);
          s[15] = b15 ^ (~b17 & b19);
          s[24] = b24 ^ (~b26 & b28);
          s[25] = b25 ^ (~b27 & b29);
          s[34] = b34 ^ (~b36 & b38);
          s[35] = b35 ^ (~b37 & b39);
          s[44] = b44 ^ (~b46 & b48);
          s[45] = b45 ^ (~b47 & b49);
          s[6] = b6 ^ (~b8 & b0);
          s[7] = b7 ^ (~b9 & b1);
          s[16] = b16 ^ (~b18 & b10);
          s[17] = b17 ^ (~b19 & b11);
          s[26] = b26 ^ (~b28 & b20);
          s[27] = b27 ^ (~b29 & b21);
          s[36] = b36 ^ (~b38 & b30);
          s[37] = b37 ^ (~b39 & b31);
          s[46] = b46 ^ (~b48 & b40);
          s[47] = b47 ^ (~b49 & b41);
          s[8] = b8 ^ (~b0 & b2);
          s[9] = b9 ^ (~b1 & b3);
          s[18] = b18 ^ (~b10 & b12);
          s[19] = b19 ^ (~b11 & b13);
          s[28] = b28 ^ (~b20 & b22);
          s[29] = b29 ^ (~b21 & b23);
          s[38] = b38 ^ (~b30 & b32);
          s[39] = b39 ^ (~b31 & b33);
          s[48] = b48 ^ (~b40 & b42);
          s[49] = b49 ^ (~b41 & b43);

          s[0] ^= RC[n];
          s[1] ^= RC[n + 1];
        }
      };

      if (COMMON_JS) {
        module.exports = methods;
      } else {
        for (i = 0; i < methodNames.length; ++i) {
          root[methodNames[i]] = methods[methodNames[i]];
        }
      }
    })();
    });

    function keccak256$1(data) {
        return '0x' + sha3.keccak_256(arrayify(data));
    }

    var lib_esm$i = /*#__PURE__*/Object.freeze({
        __proto__: null,
        keccak256: keccak256$1
    });

    const version$m = "rlp/5.7.0";

    const logger$D = new Logger(version$m);
    function arrayifyInteger(value) {
        const result = [];
        while (value) {
            result.unshift(value & 0xff);
            value >>= 8;
        }
        return result;
    }
    function unarrayifyInteger(data, offset, length) {
        let result = 0;
        for (let i = 0; i < length; i++) {
            result = (result * 256) + data[offset + i];
        }
        return result;
    }
    function _encode(object) {
        if (Array.isArray(object)) {
            let payload = [];
            object.forEach(function (child) {
                payload = payload.concat(_encode(child));
            });
            if (payload.length <= 55) {
                payload.unshift(0xc0 + payload.length);
                return payload;
            }
            const length = arrayifyInteger(payload.length);
            length.unshift(0xf7 + length.length);
            return length.concat(payload);
        }
        if (!isBytesLike(object)) {
            logger$D.throwArgumentError("RLP object must be BytesLike", "object", object);
        }
        const data = Array.prototype.slice.call(arrayify(object));
        if (data.length === 1 && data[0] <= 0x7f) {
            return data;
        }
        else if (data.length <= 55) {
            data.unshift(0x80 + data.length);
            return data;
        }
        const length = arrayifyInteger(data.length);
        length.unshift(0xb7 + length.length);
        return length.concat(data);
    }
    function encode$7(object) {
        return hexlify(_encode(object));
    }
    function _decodeChildren(data, offset, childOffset, length) {
        const result = [];
        while (childOffset < offset + 1 + length) {
            const decoded = _decode(data, childOffset);
            result.push(decoded.result);
            childOffset += decoded.consumed;
            if (childOffset > offset + 1 + length) {
                logger$D.throwError("child data too short", Logger.errors.BUFFER_OVERRUN, {});
            }
        }
        return { consumed: (1 + length), result: result };
    }
    // returns { consumed: number, result: Object }
    function _decode(data, offset) {
        if (data.length === 0) {
            logger$D.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
        }
        // Array with extra length prefix
        if (data[offset] >= 0xf8) {
            const lengthLength = data[offset] - 0xf7;
            if (offset + 1 + lengthLength > data.length) {
                logger$D.throwError("data short segment too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            const length = unarrayifyInteger(data, offset + 1, lengthLength);
            if (offset + 1 + lengthLength + length > data.length) {
                logger$D.throwError("data long segment too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
        }
        else if (data[offset] >= 0xc0) {
            const length = data[offset] - 0xc0;
            if (offset + 1 + length > data.length) {
                logger$D.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            return _decodeChildren(data, offset, offset + 1, length);
        }
        else if (data[offset] >= 0xb8) {
            const lengthLength = data[offset] - 0xb7;
            if (offset + 1 + lengthLength > data.length) {
                logger$D.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            const length = unarrayifyInteger(data, offset + 1, lengthLength);
            if (offset + 1 + lengthLength + length > data.length) {
                logger$D.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
            return { consumed: (1 + lengthLength + length), result: result };
        }
        else if (data[offset] >= 0x80) {
            const length = data[offset] - 0x80;
            if (offset + 1 + length > data.length) {
                logger$D.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            const result = hexlify(data.slice(offset + 1, offset + 1 + length));
            return { consumed: (1 + length), result: result };
        }
        return { consumed: 1, result: hexlify(data[offset]) };
    }
    function decode$6(data) {
        const bytes = arrayify(data);
        const decoded = _decode(bytes, 0);
        if (decoded.consumed !== bytes.length) {
            logger$D.throwArgumentError("invalid rlp data", "data", data);
        }
        return decoded.result;
    }

    var lib_esm$h = /*#__PURE__*/Object.freeze({
        __proto__: null,
        encode: encode$7,
        decode: decode$6
    });

    const version$l = "address/5.7.0";

    const logger$C = new Logger(version$l);
    function getChecksumAddress(address) {
        if (!isHexString(address, 20)) {
            logger$C.throwArgumentError("invalid address", "address", address);
        }
        address = address.toLowerCase();
        const chars = address.substring(2).split("");
        const expanded = new Uint8Array(40);
        for (let i = 0; i < 40; i++) {
            expanded[i] = chars[i].charCodeAt(0);
        }
        const hashed = arrayify(keccak256$1(expanded));
        for (let i = 0; i < 40; i += 2) {
            if ((hashed[i >> 1] >> 4) >= 8) {
                chars[i] = chars[i].toUpperCase();
            }
            if ((hashed[i >> 1] & 0x0f) >= 8) {
                chars[i + 1] = chars[i + 1].toUpperCase();
            }
        }
        return "0x" + chars.join("");
    }
    // Shims for environments that are missing some required constants and functions
    const MAX_SAFE_INTEGER = 0x1fffffffffffff;
    function log10(x) {
        if (Math.log10) {
            return Math.log10(x);
        }
        return Math.log(x) / Math.LN10;
    }
    // See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
    // Create lookup table
    const ibanLookup = {};
    for (let i = 0; i < 10; i++) {
        ibanLookup[String(i)] = String(i);
    }
    for (let i = 0; i < 26; i++) {
        ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
    }
    // How many decimal digits can we process? (for 64-bit float, this is 15)
    const safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
    function ibanChecksum(address) {
        address = address.toUpperCase();
        address = address.substring(4) + address.substring(0, 2) + "00";
        let expanded = address.split("").map((c) => { return ibanLookup[c]; }).join("");
        // Javascript can handle integers safely up to 15 (decimal) digits
        while (expanded.length >= safeDigits) {
            let block = expanded.substring(0, safeDigits);
            expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
        }
        let checksum = String(98 - (parseInt(expanded, 10) % 97));
        while (checksum.length < 2) {
            checksum = "0" + checksum;
        }
        return checksum;
    }
    function getAddress(address) {
        let result = null;
        if (typeof (address) !== "string") {
            logger$C.throwArgumentError("invalid address", "address", address);
        }
        if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
            // Missing the 0x prefix
            if (address.substring(0, 2) !== "0x") {
                address = "0x" + address;
            }
            result = getChecksumAddress(address);
            // It is a checksummed address with a bad checksum
            if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
                logger$C.throwArgumentError("bad address checksum", "address", address);
            }
            // Maybe ICAP? (we only support direct mode)
        }
        else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
            // It is an ICAP address with a bad checksum
            if (address.substring(2, 4) !== ibanChecksum(address)) {
                logger$C.throwArgumentError("bad icap checksum", "address", address);
            }
            result = _base36To16(address.substring(4));
            while (result.length < 40) {
                result = "0" + result;
            }
            result = getChecksumAddress("0x" + result);
        }
        else {
            logger$C.throwArgumentError("invalid address", "address", address);
        }
        return result;
    }
    function isAddress(address) {
        try {
            getAddress(address);
            return true;
        }
        catch (error) { }
        return false;
    }
    function getIcapAddress(address) {
        let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();
        while (base36.length < 30) {
            base36 = "0" + base36;
        }
        return "XE" + ibanChecksum("XE00" + base36) + base36;
    }
    // http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed
    function getContractAddress(transaction) {
        let from = null;
        try {
            from = getAddress(transaction.from);
        }
        catch (error) {
            logger$C.throwArgumentError("missing from address", "transaction", transaction);
        }
        const nonce = stripZeros(arrayify(BigNumber.from(transaction.nonce).toHexString()));
        return getAddress(hexDataSlice(keccak256$1(encode$7([from, nonce])), 12));
    }
    function getCreate2Address(from, salt, initCodeHash) {
        if (hexDataLength(salt) !== 32) {
            logger$C.throwArgumentError("salt must be 32 bytes", "salt", salt);
        }
        if (hexDataLength(initCodeHash) !== 32) {
            logger$C.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", initCodeHash);
        }
        return getAddress(hexDataSlice(keccak256$1(concat$1(["0xff", getAddress(from), salt, initCodeHash])), 12));
    }

    var lib_esm$g = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getAddress: getAddress,
        isAddress: isAddress,
        getIcapAddress: getIcapAddress,
        getContractAddress: getContractAddress,
        getCreate2Address: getCreate2Address
    });

    class AddressCoder extends Coder {
        constructor(localName) {
            super("address", "address", localName, false);
        }
        defaultValue() {
            return "0x0000000000000000000000000000000000000000";
        }
        encode(writer, value) {
            try {
                value = getAddress(value);
            }
            catch (error) {
                this._throwError(error.message, value);
            }
            return writer.writeValue(value);
        }
        decode(reader) {
            return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));
        }
    }

    // Clones the functionality of an existing Coder, but without a localName
    class AnonymousCoder extends Coder {
        constructor(coder) {
            super(coder.name, coder.type, undefined, coder.dynamic);
            this.coder = coder;
        }
        defaultValue() {
            return this.coder.defaultValue();
        }
        encode(writer, value) {
            return this.coder.encode(writer, value);
        }
        decode(reader) {
            return this.coder.decode(reader);
        }
    }

    const logger$B = new Logger(version$n);
    function pack$1(writer, coders, values) {
        let arrayValues = null;
        if (Array.isArray(values)) {
            arrayValues = values;
        }
        else if (values && typeof (values) === "object") {
            let unique = {};
            arrayValues = coders.map((coder) => {
                const name = coder.localName;
                if (!name) {
                    logger$B.throwError("cannot encode object for signature with missing names", Logger.errors.INVALID_ARGUMENT, {
                        argument: "values",
                        coder: coder,
                        value: values
                    });
                }
                if (unique[name]) {
                    logger$B.throwError("cannot encode object for signature with duplicate names", Logger.errors.INVALID_ARGUMENT, {
                        argument: "values",
                        coder: coder,
                        value: values
                    });
                }
                unique[name] = true;
                return values[name];
            });
        }
        else {
            logger$B.throwArgumentError("invalid tuple value", "tuple", values);
        }
        if (coders.length !== arrayValues.length) {
            logger$B.throwArgumentError("types/value length mismatch", "tuple", values);
        }
        let staticWriter = new Writer(writer.wordSize);
        let dynamicWriter = new Writer(writer.wordSize);
        let updateFuncs = [];
        coders.forEach((coder, index) => {
            let value = arrayValues[index];
            if (coder.dynamic) {
                // Get current dynamic offset (for the future pointer)
                let dynamicOffset = dynamicWriter.length;
                // Encode the dynamic value into the dynamicWriter
                coder.encode(dynamicWriter, value);
                // Prepare to populate the correct offset once we are done
                let updateFunc = staticWriter.writeUpdatableValue();
                updateFuncs.push((baseOffset) => {
                    updateFunc(baseOffset + dynamicOffset);
                });
            }
            else {
                coder.encode(staticWriter, value);
            }
        });
        // Backfill all the dynamic offsets, now that we know the static length
        updateFuncs.forEach((func) => { func(staticWriter.length); });
        let length = writer.appendWriter(staticWriter);
        length += writer.appendWriter(dynamicWriter);
        return length;
    }
    function unpack(reader, coders) {
        let values = [];
        // A reader anchored to this base
        let baseReader = reader.subReader(0);
        coders.forEach((coder) => {
            let value = null;
            if (coder.dynamic) {
                let offset = reader.readValue();
                let offsetReader = baseReader.subReader(offset.toNumber());
                try {
                    value = coder.decode(offsetReader);
                }
                catch (error) {
                    // Cannot recover from this
                    if (error.code === Logger.errors.BUFFER_OVERRUN) {
                        throw error;
                    }
                    value = error;
                    value.baseType = coder.name;
                    value.name = coder.localName;
                    value.type = coder.type;
                }
            }
            else {
                try {
                    value = coder.decode(reader);
                }
                catch (error) {
                    // Cannot recover from this
                    if (error.code === Logger.errors.BUFFER_OVERRUN) {
                        throw error;
                    }
                    value = error;
                    value.baseType = coder.name;
                    value.name = coder.localName;
                    value.type = coder.type;
                }
            }
            if (value != undefined) {
                values.push(value);
            }
        });
        // We only output named properties for uniquely named coders
        const uniqueNames = coders.reduce((accum, coder) => {
            const name = coder.localName;
            if (name) {
                if (!accum[name]) {
                    accum[name] = 0;
                }
                accum[name]++;
            }
            return accum;
        }, {});
        // Add any named parameters (i.e. tuples)
        coders.forEach((coder, index) => {
            let name = coder.localName;
            if (!name || uniqueNames[name] !== 1) {
                return;
            }
            if (name === "length") {
                name = "_length";
            }
            if (values[name] != null) {
                return;
            }
            const value = values[index];
            if (value instanceof Error) {
                Object.defineProperty(values, name, {
                    enumerable: true,
                    get: () => { throw value; }
                });
            }
            else {
                values[name] = value;
            }
        });
        for (let i = 0; i < values.length; i++) {
            const value = values[i];
            if (value instanceof Error) {
                Object.defineProperty(values, i, {
                    enumerable: true,
                    get: () => { throw value; }
                });
            }
        }
        return Object.freeze(values);
    }
    class ArrayCoder extends Coder {
        constructor(coder, length, localName) {
            const type = (coder.type + "[" + (length >= 0 ? length : "") + "]");
            const dynamic = (length === -1 || coder.dynamic);
            super("array", type, localName, dynamic);
            this.coder = coder;
            this.length = length;
        }
        defaultValue() {
            // Verifies the child coder is valid (even if the array is dynamic or 0-length)
            const defaultChild = this.coder.defaultValue();
            const result = [];
            for (let i = 0; i < this.length; i++) {
                result.push(defaultChild);
            }
            return result;
        }
        encode(writer, value) {
            if (!Array.isArray(value)) {
                this._throwError("expected array value", value);
            }
            let count = this.length;
            if (count === -1) {
                count = value.length;
                writer.writeValue(value.length);
            }
            logger$B.checkArgumentCount(value.length, count, "coder array" + (this.localName ? (" " + this.localName) : ""));
            let coders = [];
            for (let i = 0; i < value.length; i++) {
                coders.push(this.coder);
            }
            return pack$1(writer, coders, value);
        }
        decode(reader) {
            let count = this.length;
            if (count === -1) {
                count = reader.readValue().toNumber();
                // Check that there is *roughly* enough data to ensure
                // stray random data is not being read as a length. Each
                // slot requires at least 32 bytes for their value (or 32
                // bytes as a link to the data). This could use a much
                // tighter bound, but we are erroring on the side of safety.
                if (count * 32 > reader._data.length) {
                    logger$B.throwError("insufficient data length", Logger.errors.BUFFER_OVERRUN, {
                        length: reader._data.length,
                        count: count
                    });
                }
            }
            let coders = [];
            for (let i = 0; i < count; i++) {
                coders.push(new AnonymousCoder(this.coder));
            }
            return reader.coerce(this.name, unpack(reader, coders));
        }
    }

    class BooleanCoder extends Coder {
        constructor(localName) {
            super("bool", "bool", localName, false);
        }
        defaultValue() {
            return false;
        }
        encode(writer, value) {
            return writer.writeValue(value ? 1 : 0);
        }
        decode(reader) {
            return reader.coerce(this.type, !reader.readValue().isZero());
        }
    }

    class DynamicBytesCoder extends Coder {
        constructor(type, localName) {
            super(type, type, localName, true);
        }
        defaultValue() {
            return "0x";
        }
        encode(writer, value) {
            value = arrayify(value);
            let length = writer.writeValue(value.length);
            length += writer.writeBytes(value);
            return length;
        }
        decode(reader) {
            return reader.readBytes(reader.readValue().toNumber(), true);
        }
    }
    class BytesCoder extends DynamicBytesCoder {
        constructor(localName) {
            super("bytes", localName);
        }
        decode(reader) {
            return reader.coerce(this.name, hexlify(super.decode(reader)));
        }
    }

    // @TODO: Merge this with bytes
    class FixedBytesCoder extends Coder {
        constructor(size, localName) {
            let name = "bytes" + String(size);
            super(name, name, localName, false);
            this.size = size;
        }
        defaultValue() {
            return ("0x0000000000000000000000000000000000000000000000000000000000000000").substring(0, 2 + this.size * 2);
        }
        encode(writer, value) {
            let data = arrayify(value);
            if (data.length !== this.size) {
                this._throwError("incorrect data length", value);
            }
            return writer.writeBytes(data);
        }
        decode(reader) {
            return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));
        }
    }

    class NullCoder extends Coder {
        constructor(localName) {
            super("null", "", localName, false);
        }
        defaultValue() {
            return null;
        }
        encode(writer, value) {
            if (value != null) {
                this._throwError("not null", value);
            }
            return writer.writeBytes([]);
        }
        decode(reader) {
            reader.readBytes(0);
            return reader.coerce(this.name, null);
        }
    }

    const AddressZero = "0x0000000000000000000000000000000000000000";

    const NegativeOne$1 = ( /*#__PURE__*/BigNumber.from(-1));
    const Zero$1 = ( /*#__PURE__*/BigNumber.from(0));
    const One$1 = ( /*#__PURE__*/BigNumber.from(1));
    const Two = ( /*#__PURE__*/BigNumber.from(2));
    const WeiPerEther = ( /*#__PURE__*/BigNumber.from("1000000000000000000"));
    const MaxUint256$1 = ( /*#__PURE__*/BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));
    const MinInt256 = ( /*#__PURE__*/BigNumber.from("-0x8000000000000000000000000000000000000000000000000000000000000000"));
    const MaxInt256 = ( /*#__PURE__*/BigNumber.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));

    const HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";

    // NFKC (composed)             // (decomposed)
    const EtherSymbol = "\u039e"; // "\uD835\uDF63";

    var index$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AddressZero: AddressZero,
        NegativeOne: NegativeOne$1,
        Zero: Zero$1,
        One: One$1,
        Two: Two,
        WeiPerEther: WeiPerEther,
        MaxUint256: MaxUint256$1,
        MinInt256: MinInt256,
        MaxInt256: MaxInt256,
        HashZero: HashZero,
        EtherSymbol: EtherSymbol
    });

    class NumberCoder extends Coder {
        constructor(size, signed, localName) {
            const name = ((signed ? "int" : "uint") + (size * 8));
            super(name, name, localName, false);
            this.size = size;
            this.signed = signed;
        }
        defaultValue() {
            return 0;
        }
        encode(writer, value) {
            let v = BigNumber.from(value);
            // Check bounds are safe for encoding
            let maxUintValue = MaxUint256$1.mask(writer.wordSize * 8);
            if (this.signed) {
                let bounds = maxUintValue.mask(this.size * 8 - 1);
                if (v.gt(bounds) || v.lt(bounds.add(One$1).mul(NegativeOne$1))) {
                    this._throwError("value out-of-bounds", value);
                }
            }
            else if (v.lt(Zero$1) || v.gt(maxUintValue.mask(this.size * 8))) {
                this._throwError("value out-of-bounds", value);
            }
            v = v.toTwos(this.size * 8).mask(this.size * 8);
            if (this.signed) {
                v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
            }
            return writer.writeValue(v);
        }
        decode(reader) {
            let value = reader.readValue().mask(this.size * 8);
            if (this.signed) {
                value = value.fromTwos(this.size * 8);
            }
            return reader.coerce(this.name, value);
        }
    }

    const version$k = "strings/5.7.0";

    const logger$A = new Logger(version$k);
    ///////////////////////////////
    var UnicodeNormalizationForm;
    (function (UnicodeNormalizationForm) {
        UnicodeNormalizationForm["current"] = "";
        UnicodeNormalizationForm["NFC"] = "NFC";
        UnicodeNormalizationForm["NFD"] = "NFD";
        UnicodeNormalizationForm["NFKC"] = "NFKC";
        UnicodeNormalizationForm["NFKD"] = "NFKD";
    })(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
    var Utf8ErrorReason;
    (function (Utf8ErrorReason) {
        // A continuation byte was present where there was nothing to continue
        // - offset = the index the codepoint began in
        Utf8ErrorReason["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
        // An invalid (non-continuation) byte to start a UTF-8 codepoint was found
        // - offset = the index the codepoint began in
        Utf8ErrorReason["BAD_PREFIX"] = "bad codepoint prefix";
        // The string is too short to process the expected codepoint
        // - offset = the index the codepoint began in
        Utf8ErrorReason["OVERRUN"] = "string overrun";
        // A missing continuation byte was expected but not found
        // - offset = the index the continuation byte was expected at
        Utf8ErrorReason["MISSING_CONTINUE"] = "missing continuation byte";
        // The computed code point is outside the range for UTF-8
        // - offset       = start of this codepoint
        // - badCodepoint = the computed codepoint; outside the UTF-8 range
        Utf8ErrorReason["OUT_OF_RANGE"] = "out of UTF-8 range";
        // UTF-8 strings may not contain UTF-16 surrogate pairs
        // - offset       = start of this codepoint
        // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range
        Utf8ErrorReason["UTF16_SURROGATE"] = "UTF-16 surrogate";
        // The string is an overlong representation
        // - offset       = start of this codepoint
        // - badCodepoint = the computed codepoint; already bounds checked
        Utf8ErrorReason["OVERLONG"] = "overlong representation";
    })(Utf8ErrorReason || (Utf8ErrorReason = {}));
    function errorFunc(reason, offset, bytes, output, badCodepoint) {
        return logger$A.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
    }
    function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
        // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes
        if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
            let i = 0;
            for (let o = offset + 1; o < bytes.length; o++) {
                if (bytes[o] >> 6 !== 0x02) {
                    break;
                }
                i++;
            }
            return i;
        }
        // This byte runs us past the end of the string, so just jump to the end
        // (but the first byte was read already read and therefore skipped)
        if (reason === Utf8ErrorReason.OVERRUN) {
            return bytes.length - offset - 1;
        }
        // Nothing to skip
        return 0;
    }
    function replaceFunc(reason, offset, bytes, output, badCodepoint) {
        // Overlong representations are otherwise "valid" code points; just non-deistingtished
        if (reason === Utf8ErrorReason.OVERLONG) {
            output.push(badCodepoint);
            return 0;
        }
        // Put the replacement character into the output
        output.push(0xfffd);
        // Otherwise, process as if ignoring errors
        return ignoreFunc(reason, offset, bytes);
    }
    // Common error handing strategies
    const Utf8ErrorFuncs = Object.freeze({
        error: errorFunc,
        ignore: ignoreFunc,
        replace: replaceFunc
    });
    // http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
    function getUtf8CodePoints(bytes, onError) {
        if (onError == null) {
            onError = Utf8ErrorFuncs.error;
        }
        bytes = arrayify(bytes);
        const result = [];
        let i = 0;
        // Invalid bytes are ignored
        while (i < bytes.length) {
            const c = bytes[i++];
            // 0xxx xxxx
            if (c >> 7 === 0) {
                result.push(c);
                continue;
            }
            // Multibyte; how many bytes left for this character?
            let extraLength = null;
            let overlongMask = null;
            // 110x xxxx 10xx xxxx
            if ((c & 0xe0) === 0xc0) {
                extraLength = 1;
                overlongMask = 0x7f;
                // 1110 xxxx 10xx xxxx 10xx xxxx
            }
            else if ((c & 0xf0) === 0xe0) {
                extraLength = 2;
                overlongMask = 0x7ff;
                // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
            }
            else if ((c & 0xf8) === 0xf0) {
                extraLength = 3;
                overlongMask = 0xffff;
            }
            else {
                if ((c & 0xc0) === 0x80) {
                    i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
                }
                else {
                    i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
                }
                continue;
            }
            // Do we have enough bytes in our data?
            if (i - 1 + extraLength >= bytes.length) {
                i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
                continue;
            }
            // Remove the length prefix from the char
            let res = c & ((1 << (8 - extraLength - 1)) - 1);
            for (let j = 0; j < extraLength; j++) {
                let nextChar = bytes[i];
                // Invalid continuation byte
                if ((nextChar & 0xc0) != 0x80) {
                    i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
                    res = null;
                    break;
                }
                res = (res << 6) | (nextChar & 0x3f);
                i++;
            }
            // See above loop for invalid continuation byte
            if (res === null) {
                continue;
            }
            // Maximum code point
            if (res > 0x10ffff) {
                i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
                continue;
            }
            // Reserved for UTF-16 surrogate halves
            if (res >= 0xd800 && res <= 0xdfff) {
                i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
                continue;
            }
            // Check for overlong sequences (more bytes than needed)
            if (res <= overlongMask) {
                i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
                continue;
            }
            result.push(res);
        }
        return result;
    }
    // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
    function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
        if (form != UnicodeNormalizationForm.current) {
            logger$A.checkNormalize();
            str = str.normalize(form);
        }
        let result = [];
        for (let i = 0; i < str.length; i++) {
            const c = str.charCodeAt(i);
            if (c < 0x80) {
                result.push(c);
            }
            else if (c < 0x800) {
                result.push((c >> 6) | 0xc0);
                result.push((c & 0x3f) | 0x80);
            }
            else if ((c & 0xfc00) == 0xd800) {
                i++;
                const c2 = str.charCodeAt(i);
                if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {
                    throw new Error("invalid utf-8 string");
                }
                // Surrogate Pair
                const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
                result.push((pair >> 18) | 0xf0);
                result.push(((pair >> 12) & 0x3f) | 0x80);
                result.push(((pair >> 6) & 0x3f) | 0x80);
                result.push((pair & 0x3f) | 0x80);
            }
            else {
                result.push((c >> 12) | 0xe0);
                result.push(((c >> 6) & 0x3f) | 0x80);
                result.push((c & 0x3f) | 0x80);
            }
        }
        return arrayify(result);
    }
    function escapeChar(value) {
        const hex = ("0000" + value.toString(16));
        return "\\u" + hex.substring(hex.length - 4);
    }
    function _toEscapedUtf8String(bytes, onError) {
        return '"' + getUtf8CodePoints(bytes, onError).map((codePoint) => {
            if (codePoint < 256) {
                switch (codePoint) {
                    case 8: return "\\b";
                    case 9: return "\\t";
                    case 10: return "\\n";
                    case 13: return "\\r";
                    case 34: return "\\\"";
                    case 92: return "\\\\";
                }
                if (codePoint >= 32 && codePoint < 127) {
                    return String.fromCharCode(codePoint);
                }
            }
            if (codePoint <= 0xffff) {
                return escapeChar(codePoint);
            }
            codePoint -= 0x10000;
            return escapeChar(((codePoint >> 10) & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);
        }).join("") + '"';
    }
    function _toUtf8String(codePoints) {
        return codePoints.map((codePoint) => {
            if (codePoint <= 0xffff) {
                return String.fromCharCode(codePoint);
            }
            codePoint -= 0x10000;
            return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));
        }).join("");
    }
    function toUtf8String(bytes, onError) {
        return _toUtf8String(getUtf8CodePoints(bytes, onError));
    }
    function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {
        return getUtf8CodePoints(toUtf8Bytes(str, form));
    }

    function formatBytes32String(text) {
        // Get the bytes
        const bytes = toUtf8Bytes(text);
        // Check we have room for null-termination
        if (bytes.length > 31) {
            throw new Error("bytes32 string must be less than 32 bytes");
        }
        // Zero-pad (implicitly null-terminates)
        return hexlify(concat$1([bytes, HashZero]).slice(0, 32));
    }
    function parseBytes32String(bytes) {
        const data = arrayify(bytes);
        // Must be 32 bytes with a null-termination
        if (data.length !== 32) {
            throw new Error("invalid bytes32 - not 32 bytes long");
        }
        if (data[31] !== 0) {
            throw new Error("invalid bytes32 string - no null terminator");
        }
        // Find the null termination
        let length = 31;
        while (data[length - 1] === 0) {
            length--;
        }
        // Determine the string value
        return toUtf8String(data.slice(0, length));
    }

    function bytes2(data) {
        if ((data.length % 4) !== 0) {
            throw new Error("bad data");
        }
        let result = [];
        for (let i = 0; i < data.length; i += 4) {
            result.push(parseInt(data.substring(i, i + 4), 16));
        }
        return result;
    }
    function createTable(data, func) {
        if (!func) {
            func = function (value) { return [parseInt(value, 16)]; };
        }
        let lo = 0;
        let result = {};
        data.split(",").forEach((pair) => {
            let comps = pair.split(":");
            lo += parseInt(comps[0], 16);
            result[lo] = func(comps[1]);
        });
        return result;
    }
    function createRangeTable(data) {
        let hi = 0;
        return data.split(",").map((v) => {
            let comps = v.split("-");
            if (comps.length === 1) {
                comps[1] = "0";
            }
            else if (comps[1] === "") {
                comps[1] = "1";
            }
            let lo = hi + parseInt(comps[0], 16);
            hi = parseInt(comps[1], 16);
            return { l: lo, h: hi };
        });
    }
    function matchMap(value, ranges) {
        let lo = 0;
        for (let i = 0; i < ranges.length; i++) {
            let range = ranges[i];
            lo += range.l;
            if (value >= lo && value <= lo + range.h && ((value - lo) % (range.d || 1)) === 0) {
                if (range.e && range.e.indexOf(value - lo) !== -1) {
                    continue;
                }
                return range;
            }
        }
        return null;
    }
    const Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
    // @TODO: Make this relative...
    const Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((v) => parseInt(v, 16));
    const Table_B_2_ranges = [
        { h: 25, s: 32, l: 65 },
        { h: 30, s: 32, e: [23], l: 127 },
        { h: 54, s: 1, e: [48], l: 64, d: 2 },
        { h: 14, s: 1, l: 57, d: 2 },
        { h: 44, s: 1, l: 17, d: 2 },
        { h: 10, s: 1, e: [2, 6, 8], l: 61, d: 2 },
        { h: 16, s: 1, l: 68, d: 2 },
        { h: 84, s: 1, e: [18, 24, 66], l: 19, d: 2 },
        { h: 26, s: 32, e: [17], l: 435 },
        { h: 22, s: 1, l: 71, d: 2 },
        { h: 15, s: 80, l: 40 },
        { h: 31, s: 32, l: 16 },
        { h: 32, s: 1, l: 80, d: 2 },
        { h: 52, s: 1, l: 42, d: 2 },
        { h: 12, s: 1, l: 55, d: 2 },
        { h: 40, s: 1, e: [38], l: 15, d: 2 },
        { h: 14, s: 1, l: 48, d: 2 },
        { h: 37, s: 48, l: 49 },
        { h: 148, s: 1, l: 6351, d: 2 },
        { h: 88, s: 1, l: 160, d: 2 },
        { h: 15, s: 16, l: 704 },
        { h: 25, s: 26, l: 854 },
        { h: 25, s: 32, l: 55915 },
        { h: 37, s: 40, l: 1247 },
        { h: 25, s: -119711, l: 53248 },
        { h: 25, s: -119763, l: 52 },
        { h: 25, s: -119815, l: 52 },
        { h: 25, s: -119867, e: [1, 4, 5, 7, 8, 11, 12, 17], l: 52 },
        { h: 25, s: -119919, l: 52 },
        { h: 24, s: -119971, e: [2, 7, 8, 17], l: 52 },
        { h: 24, s: -120023, e: [2, 7, 13, 15, 16, 17], l: 52 },
        { h: 25, s: -120075, l: 52 },
        { h: 25, s: -120127, l: 52 },
        { h: 25, s: -120179, l: 52 },
        { h: 25, s: -120231, l: 52 },
        { h: 25, s: -120283, l: 52 },
        { h: 25, s: -120335, l: 52 },
        { h: 24, s: -119543, e: [17], l: 56 },
        { h: 24, s: -119601, e: [17], l: 58 },
        { h: 24, s: -119659, e: [17], l: 58 },
        { h: 24, s: -119717, e: [17], l: 58 },
        { h: 24, s: -119775, e: [17], l: 58 }
    ];
    const Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
    const Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
    const Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
    const Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
    function flatten(values) {
        return values.reduce((accum, value) => {
            value.forEach((value) => { accum.push(value); });
            return accum;
        }, []);
    }
    function _nameprepTableA1(codepoint) {
        return !!matchMap(codepoint, Table_A_1_ranges);
    }
    function _nameprepTableB2(codepoint) {
        let range = matchMap(codepoint, Table_B_2_ranges);
        if (range) {
            return [codepoint + range.s];
        }
        let codes = Table_B_2_lut_abs[codepoint];
        if (codes) {
            return codes;
        }
        let shift = Table_B_2_lut_rel[codepoint];
        if (shift) {
            return [codepoint + shift[0]];
        }
        let complex = Table_B_2_complex[codepoint];
        if (complex) {
            return complex;
        }
        return null;
    }
    function _nameprepTableC(codepoint) {
        return !!matchMap(codepoint, Table_C_ranges);
    }
    function nameprep(value) {
        // This allows platforms with incomplete normalize to bypass
        // it for very basic names which the built-in toLowerCase
        // will certainly handle correctly
        if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {
            return value.toLowerCase();
        }
        // Get the code points (keeping the current normalization)
        let codes = toUtf8CodePoints(value);
        codes = flatten(codes.map((code) => {
            // Substitute Table B.1 (Maps to Nothing)
            if (Table_B_1_flags.indexOf(code) >= 0) {
                return [];
            }
            if (code >= 0xfe00 && code <= 0xfe0f) {
                return [];
            }
            // Substitute Table B.2 (Case Folding)
            let codesTableB2 = _nameprepTableB2(code);
            if (codesTableB2) {
                return codesTableB2;
            }
            // No Substitution
            return [code];
        }));
        // Normalize using form KC
        codes = toUtf8CodePoints(_toUtf8String(codes), UnicodeNormalizationForm.NFKC);
        // Prohibit Tables C.1.2, C.2.2, C.3, C.4, C.5, C.6, C.7, C.8, C.9
        codes.forEach((code) => {
            if (_nameprepTableC(code)) {
                throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
            }
        });
        // Prohibit Unassigned Code Points (Table A.1)
        codes.forEach((code) => {
            if (_nameprepTableA1(code)) {
                throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
            }
        });
        // IDNA extras
        let name = _toUtf8String(codes);
        // IDNA: 4.2.3.1
        if (name.substring(0, 1) === "-" || name.substring(2, 4) === "--" || name.substring(name.length - 1) === "-") {
            throw new Error("invalid hyphen");
        }
        return name;
    }

    var lib_esm$f = /*#__PURE__*/Object.freeze({
        __proto__: null,
        _toEscapedUtf8String: _toEscapedUtf8String,
        toUtf8Bytes: toUtf8Bytes,
        toUtf8CodePoints: toUtf8CodePoints,
        toUtf8String: toUtf8String,
        Utf8ErrorFuncs: Utf8ErrorFuncs,
        get Utf8ErrorReason () { return Utf8ErrorReason; },
        get UnicodeNormalizationForm () { return UnicodeNormalizationForm; },
        formatBytes32String: formatBytes32String,
        parseBytes32String: parseBytes32String,
        nameprep: nameprep
    });

    class StringCoder extends DynamicBytesCoder {
        constructor(localName) {
            super("string", localName);
        }
        defaultValue() {
            return "";
        }
        encode(writer, value) {
            return super.encode(writer, toUtf8Bytes(value));
        }
        decode(reader) {
            return toUtf8String(super.decode(reader));
        }
    }

    class TupleCoder extends Coder {
        constructor(coders, localName) {
            let dynamic = false;
            const types = [];
            coders.forEach((coder) => {
                if (coder.dynamic) {
                    dynamic = true;
                }
                types.push(coder.type);
            });
            const type = ("tuple(" + types.join(",") + ")");
            super("tuple", type, localName, dynamic);
            this.coders = coders;
        }
        defaultValue() {
            const values = [];
            this.coders.forEach((coder) => {
                values.push(coder.defaultValue());
            });
            // We only output named properties for uniquely named coders
            const uniqueNames = this.coders.reduce((accum, coder) => {
                const name = coder.localName;
                if (name) {
                    if (!accum[name]) {
                        accum[name] = 0;
                    }
                    accum[name]++;
                }
                return accum;
            }, {});
            // Add named values
            this.coders.forEach((coder, index) => {
                let name = coder.localName;
                if (!name || uniqueNames[name] !== 1) {
                    return;
                }
                if (name === "length") {
                    name = "_length";
                }
                if (values[name] != null) {
                    return;
                }
                values[name] = values[index];
            });
            return Object.freeze(values);
        }
        encode(writer, value) {
            return pack$1(writer, this.coders, value);
        }
        decode(reader) {
            return reader.coerce(this.name, unpack(reader, this.coders));
        }
    }

    const logger$z = new Logger(version$n);
    const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
    const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
    class AbiCoder {
        constructor(coerceFunc) {
            defineReadOnly(this, "coerceFunc", coerceFunc || null);
        }
        _getCoder(param) {
            switch (param.baseType) {
                case "address":
                    return new AddressCoder(param.name);
                case "bool":
                    return new BooleanCoder(param.name);
                case "string":
                    return new StringCoder(param.name);
                case "bytes":
                    return new BytesCoder(param.name);
                case "array":
                    return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
                case "tuple":
                    return new TupleCoder((param.components || []).map((component) => {
                        return this._getCoder(component);
                    }), param.name);
                case "":
                    return new NullCoder(param.name);
            }
            // u?int[0-9]*
            let match = param.type.match(paramTypeNumber);
            if (match) {
                let size = parseInt(match[2] || "256");
                if (size === 0 || size > 256 || (size % 8) !== 0) {
                    logger$z.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
                }
                return new NumberCoder(size / 8, (match[1] === "int"), param.name);
            }
            // bytes[0-9]+
            match = param.type.match(paramTypeBytes);
            if (match) {
                let size = parseInt(match[1]);
                if (size === 0 || size > 32) {
                    logger$z.throwArgumentError("invalid bytes length", "param", param);
                }
                return new FixedBytesCoder(size, param.name);
            }
            return logger$z.throwArgumentError("invalid type", "type", param.type);
        }
        _getWordSize() { return 32; }
        _getReader(data, allowLoose) {
            return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
        }
        _getWriter() {
            return new Writer(this._getWordSize());
        }
        getDefaultValue(types) {
            const coders = types.map((type) => this._getCoder(ParamType.from(type)));
            const coder = new TupleCoder(coders, "_");
            return coder.defaultValue();
        }
        encode(types, values) {
            if (types.length !== values.length) {
                logger$z.throwError("types/values length mismatch", Logger.errors.INVALID_ARGUMENT, {
                    count: { types: types.length, values: values.length },
                    value: { types: types, values: values }
                });
            }
            const coders = types.map((type) => this._getCoder(ParamType.from(type)));
            const coder = (new TupleCoder(coders, "_"));
            const writer = this._getWriter();
            coder.encode(writer, values);
            return writer.data;
        }
        decode(types, data, loose) {
            const coders = types.map((type) => this._getCoder(ParamType.from(type)));
            const coder = new TupleCoder(coders, "_");
            return coder.decode(this._getReader(arrayify(data), loose));
        }
    }
    const defaultAbiCoder = new AbiCoder();

    function id(text) {
        return keccak256$1(toUtf8Bytes(text));
    }

    const version$j = "hash/5.7.0";

    function decode$5(textData) {
        textData = atob(textData);
        const data = [];
        for (let i = 0; i < textData.length; i++) {
            data.push(textData.charCodeAt(i));
        }
        return arrayify(data);
    }
    function encode$6(data) {
        data = arrayify(data);
        let textData = "";
        for (let i = 0; i < data.length; i++) {
            textData += String.fromCharCode(data[i]);
        }
        return btoa(textData);
    }

    var lib_esm$e = /*#__PURE__*/Object.freeze({
        __proto__: null,
        decode: decode$5,
        encode: encode$6
    });

    /**
     * MIT License
     *
     * Copyright (c) 2021 Andrew Raffensperger
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     * SOFTWARE.
     *
     * This is a near carbon-copy of the original source (link below) with the
     * TypeScript typings added and a few tweaks to make it ES3-compatible.
     *
     * See: https://github.com/adraffy/ens-normalize.js
     */
    // https://github.com/behnammodi/polyfill/blob/master/array.polyfill.js
    function flat(array, depth) {
        if (depth == null) {
            depth = 1;
        }
        const result = [];
        const forEach = result.forEach;
        const flatDeep = function (arr, depth) {
            forEach.call(arr, function (val) {
                if (depth > 0 && Array.isArray(val)) {
                    flatDeep(val, depth - 1);
                }
                else {
                    result.push(val);
                }
            });
        };
        flatDeep(array, depth);
        return result;
    }
    function fromEntries(array) {
        const result = {};
        for (let i = 0; i < array.length; i++) {
            const value = array[i];
            result[value[0]] = value[1];
        }
        return result;
    }
    function decode_arithmetic(bytes) {
        let pos = 0;
        function u16() { return (bytes[pos++] << 8) | bytes[pos++]; }
        // decode the frequency table
        let symbol_count = u16();
        let total = 1;
        let acc = [0, 1]; // first symbol has frequency 1
        for (let i = 1; i < symbol_count; i++) {
            acc.push(total += u16());
        }
        // skip the sized-payload that the last 3 symbols index into
        let skip = u16();
        let pos_payload = pos;
        pos += skip;
        let read_width = 0;
        let read_buffer = 0;
        function read_bit() {
            if (read_width == 0) {
                // this will read beyond end of buffer
                // but (undefined|0) => zero pad
                read_buffer = (read_buffer << 8) | bytes[pos++];
                read_width = 8;
            }
            return (read_buffer >> --read_width) & 1;
        }
        const N = 31;
        const FULL = Math.pow(2, N);
        const HALF = FULL >>> 1;
        const QRTR = HALF >> 1;
        const MASK = FULL - 1;
        // fill register
        let register = 0;
        for (let i = 0; i < N; i++)
            register = (register << 1) | read_bit();
        let symbols = [];
        let low = 0;
        let range = FULL; // treat like a float
        while (true) {
            let value = Math.floor((((register - low + 1) * total) - 1) / range);
            let start = 0;
            let end = symbol_count;
            while (end - start > 1) { // binary search
                let mid = (start + end) >>> 1;
                if (value < acc[mid]) {
                    end = mid;
                }
                else {
                    start = mid;
                }
            }
            if (start == 0)
                break; // first symbol is end mark
            symbols.push(start);
            let a = low + Math.floor(range * acc[start] / total);
            let b = low + Math.floor(range * acc[start + 1] / total) - 1;
            while (((a ^ b) & HALF) == 0) {
                register = (register << 1) & MASK | read_bit();
                a = (a << 1) & MASK;
                b = (b << 1) & MASK | 1;
            }
            while (a & ~b & QRTR) {
                register = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();
                a = (a << 1) ^ HALF;
                b = ((b ^ HALF) << 1) | HALF | 1;
            }
            low = a;
            range = 1 + b - a;
        }
        let offset = symbol_count - 4;
        return symbols.map(x => {
            switch (x - offset) {
                case 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);
                case 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);
                case 1: return offset + bytes[pos_payload++];
                default: return x - 1;
            }
        });
    }
    // returns an iterator which returns the next symbol
    function read_payload(v) {
        let pos = 0;
        return () => v[pos++];
    }
    function read_compressed_payload(bytes) {
        return read_payload(decode_arithmetic(bytes));
    }
    // eg. [0,1,2,3...] => [0,-1,1,-2,...]
    function signed(i) {
        return (i & 1) ? (~i >> 1) : (i >> 1);
    }
    function read_counts(n, next) {
        let v = Array(n);
        for (let i = 0; i < n; i++)
            v[i] = 1 + next();
        return v;
    }
    function read_ascending(n, next) {
        let v = Array(n);
        for (let i = 0, x = -1; i < n; i++)
            v[i] = x += 1 + next();
        return v;
    }
    function read_deltas(n, next) {
        let v = Array(n);
        for (let i = 0, x = 0; i < n; i++)
            v[i] = x += signed(next());
        return v;
    }
    function read_member_array(next, lookup) {
        let v = read_ascending(next(), next);
        let n = next();
        let vX = read_ascending(n, next);
        let vN = read_counts(n, next);
        for (let i = 0; i < n; i++) {
            for (let j = 0; j < vN[i]; j++) {
                v.push(vX[i] + j);
            }
        }
        return lookup ? v.map(x => lookup[x]) : v;
    }
    // returns array of 
    // [x, ys] => single replacement rule
    // [x, ys, n, dx, dx] => linear map
    function read_mapped_map(next) {
        let ret = [];
        while (true) {
            let w = next();
            if (w == 0)
                break;
            ret.push(read_linear_table(w, next));
        }
        while (true) {
            let w = next() - 1;
            if (w < 0)
                break;
            ret.push(read_replacement_table(w, next));
        }
        return fromEntries(flat(ret));
    }
    function read_zero_terminated_array(next) {
        let v = [];
        while (true) {
            let i = next();
            if (i == 0)
                break;
            v.push(i);
        }
        return v;
    }
    function read_transposed(n, w, next) {
        let m = Array(n).fill(undefined).map(() => []);
        for (let i = 0; i < w; i++) {
            read_deltas(n, next).forEach((x, j) => m[j].push(x));
        }
        return m;
    }
    function read_linear_table(w, next) {
        let dx = 1 + next();
        let dy = next();
        let vN = read_zero_terminated_array(next);
        let m = read_transposed(vN.length, 1 + w, next);
        return flat(m.map((v, i) => {
            const x = v[0], ys = v.slice(1);
            //let [x, ...ys] = v;
            //return Array(vN[i]).fill().map((_, j) => {
            return Array(vN[i]).fill(undefined).map((_, j) => {
                let j_dy = j * dy;
                return [x + j * dx, ys.map(y => y + j_dy)];
            });
        }));
    }
    function read_replacement_table(w, next) {
        let n = 1 + next();
        let m = read_transposed(n, 1 + w, next);
        return m.map(v => [v[0], v.slice(1)]);
    }
    function read_emoji_trie(next) {
        let sorted = read_member_array(next).sort((a, b) => a - b);
        return read();
        function read() {
            let branches = [];
            while (true) {
                let keys = read_member_array(next, sorted);
                if (keys.length == 0)
                    break;
                branches.push({ set: new Set(keys), node: read() });
            }
            branches.sort((a, b) => b.set.size - a.set.size); // sort by likelihood
            let temp = next();
            let valid = temp % 3;
            temp = (temp / 3) | 0;
            let fe0f = !!(temp & 1);
            temp >>= 1;
            let save = temp == 1;
            let check = temp == 2;
            return { branches, valid, fe0f, save, check };
        }
    }

    /**
     * MIT License
     *
     * Copyright (c) 2021 Andrew Raffensperger
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     * SOFTWARE.
     *
     * This is a near carbon-copy of the original source (link below) with the
     * TypeScript typings added and a few tweaks to make it ES3-compatible.
     *
     * See: https://github.com/adraffy/ens-normalize.js
     */
    function getData() {
        return read_compressed_payload(decode$5(''));
    }

    /**
     * MIT License
     *
     * Copyright (c) 2021 Andrew Raffensperger
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     * SOFTWARE.
     *
     * This is a near carbon-copy of the original source (link below) with the
     * TypeScript typings added and a few tweaks to make it ES3-compatible.
     *
     * See: https://github.com/adraffy/ens-normalize.js
     */
    const r$6 = getData();
    // @TODO: This should be lazily loaded
    const VALID = new Set(read_member_array(r$6));
    const IGNORED = new Set(read_member_array(r$6));
    const MAPPED = read_mapped_map(r$6);
    const EMOJI_ROOT = read_emoji_trie(r$6);
    //const NFC_CHECK = new Set(read_member_array(r, Array.from(VALID.values()).sort((a, b) => a - b)));
    //const STOP = 0x2E;
    const HYPHEN = 0x2D;
    const UNDERSCORE = 0x5F;
    function explode_cp(name) {
        return toUtf8CodePoints(name);
    }
    function filter_fe0f(cps) {
        return cps.filter(cp => cp != 0xFE0F);
    }
    function ens_normalize_post_check(name) {
        for (let label of name.split('.')) {
            let cps = explode_cp(label);
            try {
                for (let i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--) {
                    if (cps[i] !== UNDERSCORE) {
                        throw new Error(`underscore only allowed at start`);
                    }
                }
                if (cps.length >= 4 && cps.every(cp => cp < 0x80) && cps[2] === HYPHEN && cps[3] === HYPHEN) {
                    throw new Error(`invalid label extension`);
                }
            }
            catch (err) {
                throw new Error(`Invalid label "${label}": ${err.message}`);
            }
        }
        return name;
    }
    function ens_normalize(name) {
        return ens_normalize_post_check(normalize(name, filter_fe0f));
    }
    function normalize(name, emoji_filter) {
        let input = explode_cp(name).reverse(); // flip for pop
        let output = [];
        while (input.length) {
            let emoji = consume_emoji_reversed(input);
            if (emoji) {
                output.push(...emoji_filter(emoji));
                continue;
            }
            let cp = input.pop();
            if (VALID.has(cp)) {
                output.push(cp);
                continue;
            }
            if (IGNORED.has(cp)) {
                continue;
            }
            let cps = MAPPED[cp];
            if (cps) {
                output.push(...cps);
                continue;
            }
            throw new Error(`Disallowed codepoint: 0x${cp.toString(16).toUpperCase()}`);
        }
        return ens_normalize_post_check(nfc(String.fromCodePoint(...output)));
    }
    function nfc(s) {
        return s.normalize('NFC');
    }
    function consume_emoji_reversed(cps, eaten) {
        var _a;
        let node = EMOJI_ROOT;
        let emoji;
        let saved;
        let stack = [];
        let pos = cps.length;
        if (eaten)
            eaten.length = 0; // clear input buffer (if needed)
        while (pos) {
            let cp = cps[--pos];
            node = (_a = node.branches.find(x => x.set.has(cp))) === null || _a === void 0 ? void 0 : _a.node;
            if (!node)
                break;
            if (node.save) { // remember
                saved = cp;
            }
            else if (node.check) { // check exclusion
                if (cp === saved)
                    break;
            }
            stack.push(cp);
            if (node.fe0f) {
                stack.push(0xFE0F);
                if (pos > 0 && cps[pos - 1] == 0xFE0F)
                    pos--; // consume optional FE0F
            }
            if (node.valid) { // this is a valid emoji (so far)
                emoji = stack.slice(); // copy stack
                if (node.valid == 2)
                    emoji.splice(1, 1); // delete FE0F at position 1 (RGI ZWJ don't follow spec!)
                if (eaten)
                    eaten.push(...cps.slice(pos).reverse()); // copy input (if needed)
                cps.length = pos; // truncate
            }
        }
        return emoji;
    }

    const logger$y = new Logger(version$j);
    const Zeros$1 = new Uint8Array(32);
    Zeros$1.fill(0);
    function checkComponent(comp) {
        if (comp.length === 0) {
            throw new Error("invalid ENS name; empty component");
        }
        return comp;
    }
    function ensNameSplit(name) {
        const bytes = toUtf8Bytes(ens_normalize(name));
        const comps = [];
        if (name.length === 0) {
            return comps;
        }
        let last = 0;
        for (let i = 0; i < bytes.length; i++) {
            const d = bytes[i];
            // A separator (i.e. "."); copy this component
            if (d === 0x2e) {
                comps.push(checkComponent(bytes.slice(last, i)));
                last = i + 1;
            }
        }
        // There was a stray separator at the end of the name
        if (last >= bytes.length) {
            throw new Error("invalid ENS name; empty component");
        }
        comps.push(checkComponent(bytes.slice(last)));
        return comps;
    }
    function ensNormalize(name) {
        return ensNameSplit(name).map((comp) => toUtf8String(comp)).join(".");
    }
    function isValidName(name) {
        try {
            return (ensNameSplit(name).length !== 0);
        }
        catch (error) { }
        return false;
    }
    function namehash(name) {
        /* istanbul ignore if */
        if (typeof (name) !== "string") {
            logger$y.throwArgumentError("invalid ENS name; not a string", "name", name);
        }
        let result = Zeros$1;
        const comps = ensNameSplit(name);
        while (comps.length) {
            result = keccak256$1(concat$1([result, keccak256$1(comps.pop())]));
        }
        return hexlify(result);
    }
    function dnsEncode(name) {
        return hexlify(concat$1(ensNameSplit(name).map((comp) => {
            // DNS does not allow components over 63 bytes in length
            if (comp.length > 63) {
                throw new Error("invalid DNS encoded entry; length exceeds 63 bytes");
            }
            const bytes = new Uint8Array(comp.length + 1);
            bytes.set(comp, 1);
            bytes[0] = bytes.length - 1;
            return bytes;
        }))) + "00";
    }

    const messagePrefix = "\x19Ethereum Signed Message:\n";
    function hashMessage(message) {
        if (typeof (message) === "string") {
            message = toUtf8Bytes(message);
        }
        return keccak256$1(concat$1([
            toUtf8Bytes(messagePrefix),
            toUtf8Bytes(String(message.length)),
            message
        ]));
    }

    var __awaiter$l = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$x = new Logger(version$j);
    const padding = new Uint8Array(32);
    padding.fill(0);
    const NegativeOne = BigNumber.from(-1);
    const Zero = BigNumber.from(0);
    const One = BigNumber.from(1);
    const MaxUint256 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    function hexPadRight(value) {
        const bytes = arrayify(value);
        const padOffset = bytes.length % 32;
        if (padOffset) {
            return hexConcat([bytes, padding.slice(padOffset)]);
        }
        return hexlify(bytes);
    }
    const hexTrue = hexZeroPad(One.toHexString(), 32);
    const hexFalse = hexZeroPad(Zero.toHexString(), 32);
    const domainFieldTypes = {
        name: "string",
        version: "string",
        chainId: "uint256",
        verifyingContract: "address",
        salt: "bytes32"
    };
    const domainFieldNames = [
        "name", "version", "chainId", "verifyingContract", "salt"
    ];
    function checkString(key) {
        return function (value) {
            if (typeof (value) !== "string") {
                logger$x.throwArgumentError(`invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
            }
            return value;
        };
    }
    const domainChecks = {
        name: checkString("name"),
        version: checkString("version"),
        chainId: function (value) {
            try {
                return BigNumber.from(value).toString();
            }
            catch (error) { }
            return logger$x.throwArgumentError(`invalid domain value for "chainId"`, "domain.chainId", value);
        },
        verifyingContract: function (value) {
            try {
                return getAddress(value).toLowerCase();
            }
            catch (error) { }
            return logger$x.throwArgumentError(`invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
        },
        salt: function (value) {
            try {
                const bytes = arrayify(value);
                if (bytes.length !== 32) {
                    throw new Error("bad length");
                }
                return hexlify(bytes);
            }
            catch (error) { }
            return logger$x.throwArgumentError(`invalid domain value "salt"`, "domain.salt", value);
        }
    };
    function getBaseEncoder(type) {
        // intXX and uintXX
        {
            const match = type.match(/^(u?)int(\d*)$/);
            if (match) {
                const signed = (match[1] === "");
                const width = parseInt(match[2] || "256");
                if (width % 8 !== 0 || width > 256 || (match[2] && match[2] !== String(width))) {
                    logger$x.throwArgumentError("invalid numeric width", "type", type);
                }
                const boundsUpper = MaxUint256.mask(signed ? (width - 1) : width);
                const boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne) : Zero;
                return function (value) {
                    const v = BigNumber.from(value);
                    if (v.lt(boundsLower) || v.gt(boundsUpper)) {
                        logger$x.throwArgumentError(`value out-of-bounds for ${type}`, "value", value);
                    }
                    return hexZeroPad(v.toTwos(256).toHexString(), 32);
                };
            }
        }
        // bytesXX
        {
            const match = type.match(/^bytes(\d+)$/);
            if (match) {
                const width = parseInt(match[1]);
                if (width === 0 || width > 32 || match[1] !== String(width)) {
                    logger$x.throwArgumentError("invalid bytes width", "type", type);
                }
                return function (value) {
                    const bytes = arrayify(value);
                    if (bytes.length !== width) {
                        logger$x.throwArgumentError(`invalid length for ${type}`, "value", value);
                    }
                    return hexPadRight(value);
                };
            }
        }
        switch (type) {
            case "address": return function (value) {
                return hexZeroPad(getAddress(value), 32);
            };
            case "bool": return function (value) {
                return ((!value) ? hexFalse : hexTrue);
            };
            case "bytes": return function (value) {
                return keccak256$1(value);
            };
            case "string": return function (value) {
                return id(value);
            };
        }
        return null;
    }
    function encodeType(name, fields) {
        return `${name}(${fields.map(({ name, type }) => (type + " " + name)).join(",")})`;
    }
    class TypedDataEncoder {
        constructor(types) {
            defineReadOnly(this, "types", Object.freeze(deepCopy(types)));
            defineReadOnly(this, "_encoderCache", {});
            defineReadOnly(this, "_types", {});
            // Link struct types to their direct child structs
            const links = {};
            // Link structs to structs which contain them as a child
            const parents = {};
            // Link all subtypes within a given struct
            const subtypes = {};
            Object.keys(types).forEach((type) => {
                links[type] = {};
                parents[type] = [];
                subtypes[type] = {};
            });
            for (const name in types) {
                const uniqueNames = {};
                types[name].forEach((field) => {
                    // Check each field has a unique name
                    if (uniqueNames[field.name]) {
                        logger$x.throwArgumentError(`duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, "types", types);
                    }
                    uniqueNames[field.name] = true;
                    // Get the base type (drop any array specifiers)
                    const baseType = field.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
                    if (baseType === name) {
                        logger$x.throwArgumentError(`circular type reference to ${JSON.stringify(baseType)}`, "types", types);
                    }
                    // Is this a base encoding type?
                    const encoder = getBaseEncoder(baseType);
                    if (encoder) {
                        return;
                    }
                    if (!parents[baseType]) {
                        logger$x.throwArgumentError(`unknown type ${JSON.stringify(baseType)}`, "types", types);
                    }
                    // Add linkage
                    parents[baseType].push(name);
                    links[name][baseType] = true;
                });
            }
            // Deduce the primary type
            const primaryTypes = Object.keys(parents).filter((n) => (parents[n].length === 0));
            if (primaryTypes.length === 0) {
                logger$x.throwArgumentError("missing primary type", "types", types);
            }
            else if (primaryTypes.length > 1) {
                logger$x.throwArgumentError(`ambiguous primary types or unused types: ${primaryTypes.map((t) => (JSON.stringify(t))).join(", ")}`, "types", types);
            }
            defineReadOnly(this, "primaryType", primaryTypes[0]);
            // Check for circular type references
            function checkCircular(type, found) {
                if (found[type]) {
                    logger$x.throwArgumentError(`circular type reference to ${JSON.stringify(type)}`, "types", types);
                }
                found[type] = true;
                Object.keys(links[type]).forEach((child) => {
                    if (!parents[child]) {
                        return;
                    }
                    // Recursively check children
                    checkCircular(child, found);
                    // Mark all ancestors as having this decendant
                    Object.keys(found).forEach((subtype) => {
                        subtypes[subtype][child] = true;
                    });
                });
                delete found[type];
            }
            checkCircular(this.primaryType, {});
            // Compute each fully describe type
            for (const name in subtypes) {
                const st = Object.keys(subtypes[name]);
                st.sort();
                this._types[name] = encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join("");
            }
        }
        getEncoder(type) {
            let encoder = this._encoderCache[type];
            if (!encoder) {
                encoder = this._encoderCache[type] = this._getEncoder(type);
            }
            return encoder;
        }
        _getEncoder(type) {
            // Basic encoder type (address, bool, uint256, etc)
            {
                const encoder = getBaseEncoder(type);
                if (encoder) {
                    return encoder;
                }
            }
            // Array
            const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
            if (match) {
                const subtype = match[1];
                const subEncoder = this.getEncoder(subtype);
                const length = parseInt(match[3]);
                return (value) => {
                    if (length >= 0 && value.length !== length) {
                        logger$x.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
                    }
                    let result = value.map(subEncoder);
                    if (this._types[subtype]) {
                        result = result.map(keccak256$1);
                    }
                    return keccak256$1(hexConcat(result));
                };
            }
            // Struct
            const fields = this.types[type];
            if (fields) {
                const encodedType = id(this._types[type]);
                return (value) => {
                    const values = fields.map(({ name, type }) => {
                        const result = this.getEncoder(type)(value[name]);
                        if (this._types[type]) {
                            return keccak256$1(result);
                        }
                        return result;
                    });
                    values.unshift(encodedType);
                    return hexConcat(values);
                };
            }
            return logger$x.throwArgumentError(`unknown type: ${type}`, "type", type);
        }
        encodeType(name) {
            const result = this._types[name];
            if (!result) {
                logger$x.throwArgumentError(`unknown type: ${JSON.stringify(name)}`, "name", name);
            }
            return result;
        }
        encodeData(type, value) {
            return this.getEncoder(type)(value);
        }
        hashStruct(name, value) {
            return keccak256$1(this.encodeData(name, value));
        }
        encode(value) {
            return this.encodeData(this.primaryType, value);
        }
        hash(value) {
            return this.hashStruct(this.primaryType, value);
        }
        _visit(type, value, callback) {
            // Basic encoder type (address, bool, uint256, etc)
            {
                const encoder = getBaseEncoder(type);
                if (encoder) {
                    return callback(type, value);
                }
            }
            // Array
            const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
            if (match) {
                const subtype = match[1];
                const length = parseInt(match[3]);
                if (length >= 0 && value.length !== length) {
                    logger$x.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
                }
                return value.map((v) => this._visit(subtype, v, callback));
            }
            // Struct
            const fields = this.types[type];
            if (fields) {
                return fields.reduce((accum, { name, type }) => {
                    accum[name] = this._visit(type, value[name], callback);
                    return accum;
                }, {});
            }
            return logger$x.throwArgumentError(`unknown type: ${type}`, "type", type);
        }
        visit(value, callback) {
            return this._visit(this.primaryType, value, callback);
        }
        static from(types) {
            return new TypedDataEncoder(types);
        }
        static getPrimaryType(types) {
            return TypedDataEncoder.from(types).primaryType;
        }
        static hashStruct(name, types, value) {
            return TypedDataEncoder.from(types).hashStruct(name, value);
        }
        static hashDomain(domain) {
            const domainFields = [];
            for (const name in domain) {
                const type = domainFieldTypes[name];
                if (!type) {
                    logger$x.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(name)}`, "domain", domain);
                }
                domainFields.push({ name, type });
            }
            domainFields.sort((a, b) => {
                return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);
            });
            return TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
        }
        static encode(domain, types, value) {
            return hexConcat([
                "0x1901",
                TypedDataEncoder.hashDomain(domain),
                TypedDataEncoder.from(types).hash(value)
            ]);
        }
        static hash(domain, types, value) {
            return keccak256$1(TypedDataEncoder.encode(domain, types, value));
        }
        // Replaces all address types with ENS names with their looked up address
        static resolveNames(domain, types, value, resolveName) {
            return __awaiter$l(this, void 0, void 0, function* () {
                // Make a copy to isolate it from the object passed in
                domain = shallowCopy(domain);
                // Look up all ENS names
                const ensCache = {};
                // Do we need to look up the domain's verifyingContract?
                if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {
                    ensCache[domain.verifyingContract] = "0x";
                }
                // We are going to use the encoder to visit all the base values
                const encoder = TypedDataEncoder.from(types);
                // Get a list of all the addresses
                encoder.visit(value, (type, value) => {
                    if (type === "address" && !isHexString(value, 20)) {
                        ensCache[value] = "0x";
                    }
                    return value;
                });
                // Lookup each name
                for (const name in ensCache) {
                    ensCache[name] = yield resolveName(name);
                }
                // Replace the domain verifyingContract if needed
                if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
                    domain.verifyingContract = ensCache[domain.verifyingContract];
                }
                // Replace all ENS names with their address
                value = encoder.visit(value, (type, value) => {
                    if (type === "address" && ensCache[value]) {
                        return ensCache[value];
                    }
                    return value;
                });
                return { domain, value };
            });
        }
        static getPayload(domain, types, value) {
            // Validate the domain fields
            TypedDataEncoder.hashDomain(domain);
            // Derive the EIP712Domain Struct reference type
            const domainValues = {};
            const domainTypes = [];
            domainFieldNames.forEach((name) => {
                const value = domain[name];
                if (value == null) {
                    return;
                }
                domainValues[name] = domainChecks[name](value);
                domainTypes.push({ name, type: domainFieldTypes[name] });
            });
            const encoder = TypedDataEncoder.from(types);
            const typesWithDomain = shallowCopy(types);
            if (typesWithDomain.EIP712Domain) {
                logger$x.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", types);
            }
            else {
                typesWithDomain.EIP712Domain = domainTypes;
            }
            // Validate the data structures and types
            encoder.encode(value);
            return {
                types: typesWithDomain,
                domain: domainValues,
                primaryType: encoder.primaryType,
                message: encoder.visit(value, (type, value) => {
                    // bytes
                    if (type.match(/^bytes(\d*)/)) {
                        return hexlify(arrayify(value));
                    }
                    // uint or int
                    if (type.match(/^u?int/)) {
                        return BigNumber.from(value).toString();
                    }
                    switch (type) {
                        case "address":
                            return value.toLowerCase();
                        case "bool":
                            return !!value;
                        case "string":
                            if (typeof (value) !== "string") {
                                logger$x.throwArgumentError(`invalid string`, "value", value);
                            }
                            return value;
                    }
                    return logger$x.throwArgumentError("unsupported type", "type", type);
                })
            };
        }
    }

    var lib_esm$d = /*#__PURE__*/Object.freeze({
        __proto__: null,
        id: id,
        dnsEncode: dnsEncode,
        namehash: namehash,
        isValidName: isValidName,
        ensNormalize: ensNormalize,
        messagePrefix: messagePrefix,
        hashMessage: hashMessage,
        _TypedDataEncoder: TypedDataEncoder
    });

    const logger$w = new Logger(version$n);
    class LogDescription extends Description {
    }
    class TransactionDescription extends Description {
    }
    class ErrorDescription extends Description {
    }
    class Indexed extends Description {
        static isIndexed(value) {
            return !!(value && value._isIndexed);
        }
    }
    const BuiltinErrors = {
        "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: true },
        "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] }
    };
    function wrapAccessError(property, error) {
        const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);
        wrap.error = error;
        return wrap;
    }
    /*
    function checkNames(fragment: Fragment, type: "input" | "output", params: Array<ParamType>): void {
        params.reduce((accum, param) => {
            if (param.name) {
                if (accum[param.name]) {
                    logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format("full") }`, "fragment", fragment);
                }
                accum[param.name] = true;
            }
            return accum;
        }, <{ [ name: string ]: boolean }>{ });
    }
    */
    class Interface {
        constructor(fragments) {
            let abi = [];
            if (typeof (fragments) === "string") {
                abi = JSON.parse(fragments);
            }
            else {
                abi = fragments;
            }
            defineReadOnly(this, "fragments", abi.map((fragment) => {
                return Fragment.from(fragment);
            }).filter((fragment) => (fragment != null)));
            defineReadOnly(this, "_abiCoder", getStatic(new.target, "getAbiCoder")());
            defineReadOnly(this, "functions", {});
            defineReadOnly(this, "errors", {});
            defineReadOnly(this, "events", {});
            defineReadOnly(this, "structs", {});
            // Add all fragments by their signature
            this.fragments.forEach((fragment) => {
                let bucket = null;
                switch (fragment.type) {
                    case "constructor":
                        if (this.deploy) {
                            logger$w.warn("duplicate definition - constructor");
                            return;
                        }
                        //checkNames(fragment, "input", fragment.inputs);
                        defineReadOnly(this, "deploy", fragment);
                        return;
                    case "function":
                        //checkNames(fragment, "input", fragment.inputs);
                        //checkNames(fragment, "output", (<FunctionFragment>fragment).outputs);
                        bucket = this.functions;
                        break;
                    case "event":
                        //checkNames(fragment, "input", fragment.inputs);
                        bucket = this.events;
                        break;
                    case "error":
                        bucket = this.errors;
                        break;
                    default:
                        return;
                }
                let signature = fragment.format();
                if (bucket[signature]) {
                    logger$w.warn("duplicate definition - " + signature);
                    return;
                }
                bucket[signature] = fragment;
            });
            // If we do not have a constructor add a default
            if (!this.deploy) {
                defineReadOnly(this, "deploy", ConstructorFragment.from({
                    payable: false,
                    type: "constructor"
                }));
            }
            defineReadOnly(this, "_isInterface", true);
        }
        format(format) {
            if (!format) {
                format = FormatTypes.full;
            }
            if (format === FormatTypes.sighash) {
                logger$w.throwArgumentError("interface does not support formatting sighash", "format", format);
            }
            const abi = this.fragments.map((fragment) => fragment.format(format));
            // We need to re-bundle the JSON fragments a bit
            if (format === FormatTypes.json) {
                return JSON.stringify(abi.map((j) => JSON.parse(j)));
            }
            return abi;
        }
        // Sub-classes can override these to handle other blockchains
        static getAbiCoder() {
            return defaultAbiCoder;
        }
        static getAddress(address) {
            return getAddress(address);
        }
        static getSighash(fragment) {
            return hexDataSlice(id(fragment.format()), 0, 4);
        }
        static getEventTopic(eventFragment) {
            return id(eventFragment.format());
        }
        // Find a function definition by any means necessary (unless it is ambiguous)
        getFunction(nameOrSignatureOrSighash) {
            if (isHexString(nameOrSignatureOrSighash)) {
                for (const name in this.functions) {
                    if (nameOrSignatureOrSighash === this.getSighash(name)) {
                        return this.functions[name];
                    }
                }
                logger$w.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
            }
            // It is a bare name, look up the function (will return null if ambiguous)
            if (nameOrSignatureOrSighash.indexOf("(") === -1) {
                const name = nameOrSignatureOrSighash.trim();
                const matching = Object.keys(this.functions).filter((f) => (f.split("(" /* fix:) */)[0] === name));
                if (matching.length === 0) {
                    logger$w.throwArgumentError("no matching function", "name", name);
                }
                else if (matching.length > 1) {
                    logger$w.throwArgumentError("multiple matching functions", "name", name);
                }
                return this.functions[matching[0]];
            }
            // Normalize the signature and lookup the function
            const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
            if (!result) {
                logger$w.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
            }
            return result;
        }
        // Find an event definition by any means necessary (unless it is ambiguous)
        getEvent(nameOrSignatureOrTopic) {
            if (isHexString(nameOrSignatureOrTopic)) {
                const topichash = nameOrSignatureOrTopic.toLowerCase();
                for (const name in this.events) {
                    if (topichash === this.getEventTopic(name)) {
                        return this.events[name];
                    }
                }
                logger$w.throwArgumentError("no matching event", "topichash", topichash);
            }
            // It is a bare name, look up the function (will return null if ambiguous)
            if (nameOrSignatureOrTopic.indexOf("(") === -1) {
                const name = nameOrSignatureOrTopic.trim();
                const matching = Object.keys(this.events).filter((f) => (f.split("(" /* fix:) */)[0] === name));
                if (matching.length === 0) {
                    logger$w.throwArgumentError("no matching event", "name", name);
                }
                else if (matching.length > 1) {
                    logger$w.throwArgumentError("multiple matching events", "name", name);
                }
                return this.events[matching[0]];
            }
            // Normalize the signature and lookup the function
            const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];
            if (!result) {
                logger$w.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
            }
            return result;
        }
        // Find a function definition by any means necessary (unless it is ambiguous)
        getError(nameOrSignatureOrSighash) {
            if (isHexString(nameOrSignatureOrSighash)) {
                const getSighash = getStatic(this.constructor, "getSighash");
                for (const name in this.errors) {
                    const error = this.errors[name];
                    if (nameOrSignatureOrSighash === getSighash(error)) {
                        return this.errors[name];
                    }
                }
                logger$w.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
            }
            // It is a bare name, look up the function (will return null if ambiguous)
            if (nameOrSignatureOrSighash.indexOf("(") === -1) {
                const name = nameOrSignatureOrSighash.trim();
                const matching = Object.keys(this.errors).filter((f) => (f.split("(" /* fix:) */)[0] === name));
                if (matching.length === 0) {
                    logger$w.throwArgumentError("no matching error", "name", name);
                }
                else if (matching.length > 1) {
                    logger$w.throwArgumentError("multiple matching errors", "name", name);
                }
                return this.errors[matching[0]];
            }
            // Normalize the signature and lookup the function
            const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
            if (!result) {
                logger$w.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
            }
            return result;
        }
        // Get the sighash (the bytes4 selector) used by Solidity to identify a function
        getSighash(fragment) {
            if (typeof (fragment) === "string") {
                try {
                    fragment = this.getFunction(fragment);
                }
                catch (error) {
                    try {
                        fragment = this.getError(fragment);
                    }
                    catch (_) {
                        throw error;
                    }
                }
            }
            return getStatic(this.constructor, "getSighash")(fragment);
        }
        // Get the topic (the bytes32 hash) used by Solidity to identify an event
        getEventTopic(eventFragment) {
            if (typeof (eventFragment) === "string") {
                eventFragment = this.getEvent(eventFragment);
            }
            return getStatic(this.constructor, "getEventTopic")(eventFragment);
        }
        _decodeParams(params, data) {
            return this._abiCoder.decode(params, data);
        }
        _encodeParams(params, values) {
            return this._abiCoder.encode(params, values);
        }
        encodeDeploy(values) {
            return this._encodeParams(this.deploy.inputs, values || []);
        }
        decodeErrorResult(fragment, data) {
            if (typeof (fragment) === "string") {
                fragment = this.getError(fragment);
            }
            const bytes = arrayify(data);
            if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {
                logger$w.throwArgumentError(`data signature does not match error ${fragment.name}.`, "data", hexlify(bytes));
            }
            return this._decodeParams(fragment.inputs, bytes.slice(4));
        }
        encodeErrorResult(fragment, values) {
            if (typeof (fragment) === "string") {
                fragment = this.getError(fragment);
            }
            return hexlify(concat$1([
                this.getSighash(fragment),
                this._encodeParams(fragment.inputs, values || [])
            ]));
        }
        // Decode the data for a function call (e.g. tx.data)
        decodeFunctionData(functionFragment, data) {
            if (typeof (functionFragment) === "string") {
                functionFragment = this.getFunction(functionFragment);
            }
            const bytes = arrayify(data);
            if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {
                logger$w.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, "data", hexlify(bytes));
            }
            return this._decodeParams(functionFragment.inputs, bytes.slice(4));
        }
        // Encode the data for a function call (e.g. tx.data)
        encodeFunctionData(functionFragment, values) {
            if (typeof (functionFragment) === "string") {
                functionFragment = this.getFunction(functionFragment);
            }
            return hexlify(concat$1([
                this.getSighash(functionFragment),
                this._encodeParams(functionFragment.inputs, values || [])
            ]));
        }
        // Decode the result from a function call (e.g. from eth_call)
        decodeFunctionResult(functionFragment, data) {
            if (typeof (functionFragment) === "string") {
                functionFragment = this.getFunction(functionFragment);
            }
            let bytes = arrayify(data);
            let reason = null;
            let message = "";
            let errorArgs = null;
            let errorName = null;
            let errorSignature = null;
            switch (bytes.length % this._abiCoder._getWordSize()) {
                case 0:
                    try {
                        return this._abiCoder.decode(functionFragment.outputs, bytes);
                    }
                    catch (error) { }
                    break;
                case 4: {
                    const selector = hexlify(bytes.slice(0, 4));
                    const builtin = BuiltinErrors[selector];
                    if (builtin) {
                        errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));
                        errorName = builtin.name;
                        errorSignature = builtin.signature;
                        if (builtin.reason) {
                            reason = errorArgs[0];
                        }
                        if (errorName === "Error") {
                            message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;
                        }
                        else if (errorName === "Panic") {
                            message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;
                        }
                    }
                    else {
                        try {
                            const error = this.getError(selector);
                            errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));
                            errorName = error.name;
                            errorSignature = error.format();
                        }
                        catch (error) { }
                    }
                    break;
                }
            }
            return logger$w.throwError("call revert exception" + message, Logger.errors.CALL_EXCEPTION, {
                method: functionFragment.format(),
                data: hexlify(data), errorArgs, errorName, errorSignature, reason
            });
        }
        // Encode the result for a function call (e.g. for eth_call)
        encodeFunctionResult(functionFragment, values) {
            if (typeof (functionFragment) === "string") {
                functionFragment = this.getFunction(functionFragment);
            }
            return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));
        }
        // Create the filter for the event with search criteria (e.g. for eth_filterLog)
        encodeFilterTopics(eventFragment, values) {
            if (typeof (eventFragment) === "string") {
                eventFragment = this.getEvent(eventFragment);
            }
            if (values.length > eventFragment.inputs.length) {
                logger$w.throwError("too many arguments for " + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {
                    argument: "values",
                    value: values
                });
            }
            let topics = [];
            if (!eventFragment.anonymous) {
                topics.push(this.getEventTopic(eventFragment));
            }
            const encodeTopic = (param, value) => {
                if (param.type === "string") {
                    return id(value);
                }
                else if (param.type === "bytes") {
                    return keccak256$1(hexlify(value));
                }
                if (param.type === "bool" && typeof (value) === "boolean") {
                    value = (value ? "0x01" : "0x00");
                }
                if (param.type.match(/^u?int/)) {
                    value = BigNumber.from(value).toHexString();
                }
                // Check addresses are valid
                if (param.type === "address") {
                    this._abiCoder.encode(["address"], [value]);
                }
                return hexZeroPad(hexlify(value), 32);
            };
            values.forEach((value, index) => {
                let param = eventFragment.inputs[index];
                if (!param.indexed) {
                    if (value != null) {
                        logger$w.throwArgumentError("cannot filter non-indexed parameters; must be null", ("contract." + param.name), value);
                    }
                    return;
                }
                if (value == null) {
                    topics.push(null);
                }
                else if (param.baseType === "array" || param.baseType === "tuple") {
                    logger$w.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
                }
                else if (Array.isArray(value)) {
                    topics.push(value.map((value) => encodeTopic(param, value)));
                }
                else {
                    topics.push(encodeTopic(param, value));
                }
            });
            // Trim off trailing nulls
            while (topics.length && topics[topics.length - 1] === null) {
                topics.pop();
            }
            return topics;
        }
        encodeEventLog(eventFragment, values) {
            if (typeof (eventFragment) === "string") {
                eventFragment = this.getEvent(eventFragment);
            }
            const topics = [];
            const dataTypes = [];
            const dataValues = [];
            if (!eventFragment.anonymous) {
                topics.push(this.getEventTopic(eventFragment));
            }
            if (values.length !== eventFragment.inputs.length) {
                logger$w.throwArgumentError("event arguments/values mismatch", "values", values);
            }
            eventFragment.inputs.forEach((param, index) => {
                const value = values[index];
                if (param.indexed) {
                    if (param.type === "string") {
                        topics.push(id(value));
                    }
                    else if (param.type === "bytes") {
                        topics.push(keccak256$1(value));
                    }
                    else if (param.baseType === "tuple" || param.baseType === "array") {
                        // @TODO
                        throw new Error("not implemented");
                    }
                    else {
                        topics.push(this._abiCoder.encode([param.type], [value]));
                    }
                }
                else {
                    dataTypes.push(param);
                    dataValues.push(value);
                }
            });
            return {
                data: this._abiCoder.encode(dataTypes, dataValues),
                topics: topics
            };
        }
        // Decode a filter for the event and the search criteria
        decodeEventLog(eventFragment, data, topics) {
            if (typeof (eventFragment) === "string") {
                eventFragment = this.getEvent(eventFragment);
            }
            if (topics != null && !eventFragment.anonymous) {
                let topicHash = this.getEventTopic(eventFragment);
                if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
                    logger$w.throwError("fragment/topic mismatch", Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
                }
                topics = topics.slice(1);
            }
            let indexed = [];
            let nonIndexed = [];
            let dynamic = [];
            eventFragment.inputs.forEach((param, index) => {
                if (param.indexed) {
                    if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
                        indexed.push(ParamType.fromObject({ type: "bytes32", name: param.name }));
                        dynamic.push(true);
                    }
                    else {
                        indexed.push(param);
                        dynamic.push(false);
                    }
                }
                else {
                    nonIndexed.push(param);
                    dynamic.push(false);
                }
            });
            let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat$1(topics)) : null;
            let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
            let result = [];
            let nonIndexedIndex = 0, indexedIndex = 0;
            eventFragment.inputs.forEach((param, index) => {
                if (param.indexed) {
                    if (resultIndexed == null) {
                        result[index] = new Indexed({ _isIndexed: true, hash: null });
                    }
                    else if (dynamic[index]) {
                        result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
                    }
                    else {
                        try {
                            result[index] = resultIndexed[indexedIndex++];
                        }
                        catch (error) {
                            result[index] = error;
                        }
                    }
                }
                else {
                    try {
                        result[index] = resultNonIndexed[nonIndexedIndex++];
                    }
                    catch (error) {
                        result[index] = error;
                    }
                }
                // Add the keyword argument if named and safe
                if (param.name && result[param.name] == null) {
                    const value = result[index];
                    // Make error named values throw on access
                    if (value instanceof Error) {
                        Object.defineProperty(result, param.name, {
                            enumerable: true,
                            get: () => { throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value); }
                        });
                    }
                    else {
                        result[param.name] = value;
                    }
                }
            });
            // Make all error indexed values throw on access
            for (let i = 0; i < result.length; i++) {
                const value = result[i];
                if (value instanceof Error) {
                    Object.defineProperty(result, i, {
                        enumerable: true,
                        get: () => { throw wrapAccessError(`index ${i}`, value); }
                    });
                }
            }
            return Object.freeze(result);
        }
        // Given a transaction, find the matching function fragment (if any) and
        // determine all its properties and call parameters
        parseTransaction(tx) {
            let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
            if (!fragment) {
                return null;
            }
            return new TransactionDescription({
                args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
                functionFragment: fragment,
                name: fragment.name,
                signature: fragment.format(),
                sighash: this.getSighash(fragment),
                value: BigNumber.from(tx.value || "0"),
            });
        }
        // @TODO
        //parseCallResult(data: BytesLike): ??
        // Given an event log, find the matching event fragment (if any) and
        // determine all its properties and values
        parseLog(log) {
            let fragment = this.getEvent(log.topics[0]);
            if (!fragment || fragment.anonymous) {
                return null;
            }
            // @TODO: If anonymous, and the only method, and the input count matches, should we parse?
            //        Probably not, because just because it is the only event in the ABI does
            //        not mean we have the full ABI; maybe just a fragment?
            return new LogDescription({
                eventFragment: fragment,
                name: fragment.name,
                signature: fragment.format(),
                topic: this.getEventTopic(fragment),
                args: this.decodeEventLog(fragment, log.data, log.topics)
            });
        }
        parseError(data) {
            const hexData = hexlify(data);
            let fragment = this.getError(hexData.substring(0, 10).toLowerCase());
            if (!fragment) {
                return null;
            }
            return new ErrorDescription({
                args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
                errorFragment: fragment,
                name: fragment.name,
                signature: fragment.format(),
                sighash: this.getSighash(fragment),
            });
        }
        /*
        static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {
            if (Interface.isInterface(value)) {
                return value;
            }
            if (typeof(value) === "string") {
                return new Interface(JSON.parse(value));
            }
            return new Interface(value);
        }
        */
        static isInterface(value) {
            return !!(value && value._isInterface);
        }
    }

    var lib_esm$c = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ConstructorFragment: ConstructorFragment,
        ErrorFragment: ErrorFragment,
        EventFragment: EventFragment,
        Fragment: Fragment,
        FunctionFragment: FunctionFragment,
        ParamType: ParamType,
        FormatTypes: FormatTypes,
        AbiCoder: AbiCoder,
        defaultAbiCoder: defaultAbiCoder,
        Interface: Interface,
        Indexed: Indexed,
        checkResultErrors: checkResultErrors,
        LogDescription: LogDescription,
        TransactionDescription: TransactionDescription
    });

    const version$i = "abstract-provider/5.7.0";

    var __awaiter$k = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$v = new Logger(version$i);
    //export type CallTransactionable = {
    //    call(transaction: TransactionRequest): Promise<TransactionResponse>;
    //};
    class ForkEvent extends Description {
        static isForkEvent(value) {
            return !!(value && value._isForkEvent);
        }
    }
    ///////////////////////////////
    // Exported Abstracts
    class Provider {
        constructor() {
            logger$v.checkAbstract(new.target, Provider);
            defineReadOnly(this, "_isProvider", true);
        }
        getFeeData() {
            return __awaiter$k(this, void 0, void 0, function* () {
                const { block, gasPrice } = yield resolveProperties({
                    block: this.getBlock("latest"),
                    gasPrice: this.getGasPrice().catch((error) => {
                        // @TODO: Why is this now failing on Calaveras?
                        //console.log(error);
                        return null;
                    })
                });
                let lastBaseFeePerGas = null, maxFeePerGas = null, maxPriorityFeePerGas = null;
                if (block && block.baseFeePerGas) {
                    // We may want to compute this more accurately in the future,
                    // using the formula "check if the base fee is correct".
                    // See: https://eips.ethereum.org/EIPS/eip-1559
                    lastBaseFeePerGas = block.baseFeePerGas;
                    maxPriorityFeePerGas = BigNumber.from("1500000000");
                    maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);
                }
                return { lastBaseFeePerGas, maxFeePerGas, maxPriorityFeePerGas, gasPrice };
            });
        }
        // Alias for "on"
        addListener(eventName, listener) {
            return this.on(eventName, listener);
        }
        // Alias for "off"
        removeListener(eventName, listener) {
            return this.off(eventName, listener);
        }
        static isProvider(value) {
            return !!(value && value._isProvider);
        }
    }

    const version$h = "abstract-signer/5.7.0";

    var __awaiter$j = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$u = new Logger(version$h);
    const allowedTransactionKeys$3 = [
        "accessList", "ccipReadEnabled", "chainId", "customData", "data", "from", "gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "to", "type", "value"
    ];
    const forwardErrors = [
        Logger.errors.INSUFFICIENT_FUNDS,
        Logger.errors.NONCE_EXPIRED,
        Logger.errors.REPLACEMENT_UNDERPRICED,
    ];
    class Signer {
        ///////////////////
        // Sub-classes MUST call super
        constructor() {
            logger$u.checkAbstract(new.target, Signer);
            defineReadOnly(this, "_isSigner", true);
        }
        ///////////////////
        // Sub-classes MAY override these
        getBalance(blockTag) {
            return __awaiter$j(this, void 0, void 0, function* () {
                this._checkProvider("getBalance");
                return yield this.provider.getBalance(this.getAddress(), blockTag);
            });
        }
        getTransactionCount(blockTag) {
            return __awaiter$j(this, void 0, void 0, function* () {
                this._checkProvider("getTransactionCount");
                return yield this.provider.getTransactionCount(this.getAddress(), blockTag);
            });
        }
        // Populates "from" if unspecified, and estimates the gas for the transaction
        estimateGas(transaction) {
            return __awaiter$j(this, void 0, void 0, function* () {
                this._checkProvider("estimateGas");
                const tx = yield resolveProperties(this.checkTransaction(transaction));
                return yield this.provider.estimateGas(tx);
            });
        }
        // Populates "from" if unspecified, and calls with the transaction
        call(transaction, blockTag) {
            return __awaiter$j(this, void 0, void 0, function* () {
                this._checkProvider("call");
                const tx = yield resolveProperties(this.checkTransaction(transaction));
                return yield this.provider.call(tx, blockTag);
            });
        }
        // Populates all fields in a transaction, signs it and sends it to the network
        sendTransaction(transaction) {
            return __awaiter$j(this, void 0, void 0, function* () {
                this._checkProvider("sendTransaction");
                const tx = yield this.populateTransaction(transaction);
                const signedTx = yield this.signTransaction(tx);
                return yield this.provider.sendTransaction(signedTx);
            });
        }
        getChainId() {
            return __awaiter$j(this, void 0, void 0, function* () {
                this._checkProvider("getChainId");
                const network = yield this.provider.getNetwork();
                return network.chainId;
            });
        }
        getGasPrice() {
            return __awaiter$j(this, void 0, void 0, function* () {
                this._checkProvider("getGasPrice");
                return yield this.provider.getGasPrice();
            });
        }
        getFeeData() {
            return __awaiter$j(this, void 0, void 0, function* () {
                this._checkProvider("getFeeData");
                return yield this.provider.getFeeData();
            });
        }
        resolveName(name) {
            return __awaiter$j(this, void 0, void 0, function* () {
                this._checkProvider("resolveName");
                return yield this.provider.resolveName(name);
            });
        }
        // Checks a transaction does not contain invalid keys and if
        // no "from" is provided, populates it.
        // - does NOT require a provider
        // - adds "from" is not present
        // - returns a COPY (safe to mutate the result)
        // By default called from: (overriding these prevents it)
        //   - call
        //   - estimateGas
        //   - populateTransaction (and therefor sendTransaction)
        checkTransaction(transaction) {
            for (const key in transaction) {
                if (allowedTransactionKeys$3.indexOf(key) === -1) {
                    logger$u.throwArgumentError("invalid transaction key: " + key, "transaction", transaction);
                }
            }
            const tx = shallowCopy(transaction);
            if (tx.from == null) {
                tx.from = this.getAddress();
            }
            else {
                // Make sure any provided address matches this signer
                tx.from = Promise.all([
                    Promise.resolve(tx.from),
                    this.getAddress()
                ]).then((result) => {
                    if (result[0].toLowerCase() !== result[1].toLowerCase()) {
                        logger$u.throwArgumentError("from address mismatch", "transaction", transaction);
                    }
                    return result[0];
                });
            }
            return tx;
        }
        // Populates ALL keys for a transaction and checks that "from" matches
        // this Signer. Should be used by sendTransaction but NOT by signTransaction.
        // By default called from: (overriding these prevents it)
        //   - sendTransaction
        //
        // Notes:
        //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas
        populateTransaction(transaction) {
            return __awaiter$j(this, void 0, void 0, function* () {
                const tx = yield resolveProperties(this.checkTransaction(transaction));
                if (tx.to != null) {
                    tx.to = Promise.resolve(tx.to).then((to) => __awaiter$j(this, void 0, void 0, function* () {
                        if (to == null) {
                            return null;
                        }
                        const address = yield this.resolveName(to);
                        if (address == null) {
                            logger$u.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                        }
                        return address;
                    }));
                    // Prevent this error from causing an UnhandledPromiseException
                    tx.to.catch((error) => { });
                }
                // Do not allow mixing pre-eip-1559 and eip-1559 properties
                const hasEip1559 = (tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null);
                if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {
                    logger$u.throwArgumentError("eip-1559 transaction do not support gasPrice", "transaction", transaction);
                }
                else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {
                    logger$u.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "transaction", transaction);
                }
                if ((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)) {
                    // Fully-formed EIP-1559 transaction (skip getFeeData)
                    tx.type = 2;
                }
                else if (tx.type === 0 || tx.type === 1) {
                    // Explicit Legacy or EIP-2930 transaction
                    // Populate missing gasPrice
                    if (tx.gasPrice == null) {
                        tx.gasPrice = this.getGasPrice();
                    }
                }
                else {
                    // We need to get fee data to determine things
                    const feeData = yield this.getFeeData();
                    if (tx.type == null) {
                        // We need to auto-detect the intended type of this transaction...
                        if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
                            // The network supports EIP-1559!
                            // Upgrade transaction from null to eip-1559
                            tx.type = 2;
                            if (tx.gasPrice != null) {
                                // Using legacy gasPrice property on an eip-1559 network,
                                // so use gasPrice as both fee properties
                                const gasPrice = tx.gasPrice;
                                delete tx.gasPrice;
                                tx.maxFeePerGas = gasPrice;
                                tx.maxPriorityFeePerGas = gasPrice;
                            }
                            else {
                                // Populate missing fee data
                                if (tx.maxFeePerGas == null) {
                                    tx.maxFeePerGas = feeData.maxFeePerGas;
                                }
                                if (tx.maxPriorityFeePerGas == null) {
                                    tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                                }
                            }
                        }
                        else if (feeData.gasPrice != null) {
                            // Network doesn't support EIP-1559...
                            // ...but they are trying to use EIP-1559 properties
                            if (hasEip1559) {
                                logger$u.throwError("network does not support EIP-1559", Logger.errors.UNSUPPORTED_OPERATION, {
                                    operation: "populateTransaction"
                                });
                            }
                            // Populate missing fee data
                            if (tx.gasPrice == null) {
                                tx.gasPrice = feeData.gasPrice;
                            }
                            // Explicitly set untyped transaction to legacy
                            tx.type = 0;
                        }
                        else {
                            // getFeeData has failed us.
                            logger$u.throwError("failed to get consistent fee data", Logger.errors.UNSUPPORTED_OPERATION, {
                                operation: "signer.getFeeData"
                            });
                        }
                    }
                    else if (tx.type === 2) {
                        // Explicitly using EIP-1559
                        // Populate missing fee data
                        if (tx.maxFeePerGas == null) {
                            tx.maxFeePerGas = feeData.maxFeePerGas;
                        }
                        if (tx.maxPriorityFeePerGas == null) {
                            tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                        }
                    }
                }
                if (tx.nonce == null) {
                    tx.nonce = this.getTransactionCount("pending");
                }
                if (tx.gasLimit == null) {
                    tx.gasLimit = this.estimateGas(tx).catch((error) => {
                        if (forwardErrors.indexOf(error.code) >= 0) {
                            throw error;
                        }
                        return logger$u.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                            error: error,
                            tx: tx
                        });
                    });
                }
                if (tx.chainId == null) {
                    tx.chainId = this.getChainId();
                }
                else {
                    tx.chainId = Promise.all([
                        Promise.resolve(tx.chainId),
                        this.getChainId()
                    ]).then((results) => {
                        if (results[1] !== 0 && results[0] !== results[1]) {
                            logger$u.throwArgumentError("chainId address mismatch", "transaction", transaction);
                        }
                        return results[0];
                    });
                }
                return yield resolveProperties(tx);
            });
        }
        ///////////////////
        // Sub-classes SHOULD leave these alone
        _checkProvider(operation) {
            if (!this.provider) {
                logger$u.throwError("missing provider", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: (operation || "_checkProvider")
                });
            }
        }
        static isSigner(value) {
            return !!(value && value._isSigner);
        }
    }
    class VoidSigner extends Signer {
        constructor(address, provider) {
            super();
            defineReadOnly(this, "address", address);
            defineReadOnly(this, "provider", provider || null);
        }
        getAddress() {
            return Promise.resolve(this.address);
        }
        _fail(message, operation) {
            return Promise.resolve().then(() => {
                logger$u.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, { operation: operation });
            });
        }
        signMessage(message) {
            return this._fail("VoidSigner cannot sign messages", "signMessage");
        }
        signTransaction(transaction) {
            return this._fail("VoidSigner cannot sign transactions", "signTransaction");
        }
        _signTypedData(domain, types, value) {
            return this._fail("VoidSigner cannot sign typed data", "signTypedData");
        }
        connect(provider) {
            return new VoidSigner(this.address, provider);
        }
    }

    var minimalisticAssert$1 = assert$6;

    function assert$6(val, msg) {
      if (!val)
        throw new Error(msg || 'Assertion failed');
    }

    assert$6.equal = function assertEqual(l, r, msg) {
      if (l != r)
        throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
    };

    var inherits_browser$1 = createCommonjsModule$4(function (module) {
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function () {};
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
    });

    var inherits_1 = inherits_browser$1;

    function isSurrogatePair(msg, i) {
      if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
        return false;
      }
      if (i < 0 || i + 1 >= msg.length) {
        return false;
      }
      return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
    }

    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg === 'string') {
        if (!enc) {
          // Inspired by stringToUtf8ByteArray() in closure-library by Google
          // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
          // Apache License 2.0
          // https://github.com/google/closure-library/blob/master/LICENSE
          var p = 0;
          for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            if (c < 128) {
              res[p++] = c;
            } else if (c < 2048) {
              res[p++] = (c >> 6) | 192;
              res[p++] = (c & 63) | 128;
            } else if (isSurrogatePair(msg, i)) {
              c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
              res[p++] = (c >> 18) | 240;
              res[p++] = ((c >> 12) & 63) | 128;
              res[p++] = ((c >> 6) & 63) | 128;
              res[p++] = (c & 63) | 128;
            } else {
              res[p++] = (c >> 12) | 224;
              res[p++] = ((c >> 6) & 63) | 128;
              res[p++] = (c & 63) | 128;
            }
          }
        } else if (enc === 'hex') {
          msg = msg.replace(/[^a-z0-9]+/ig, '');
          if (msg.length % 2 !== 0)
            msg = '0' + msg;
          for (i = 0; i < msg.length; i += 2)
            res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
      } else {
        for (i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
      }
      return res;
    }
    var toArray_1 = toArray;

    function toHex(msg) {
      var res = '';
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    var toHex_1 = toHex;

    function htonl(w) {
      var res = (w >>> 24) |
                ((w >>> 8) & 0xff00) |
                ((w << 8) & 0xff0000) |
                ((w & 0xff) << 24);
      return res >>> 0;
    }
    var htonl_1 = htonl;

    function toHex32(msg, endian) {
      var res = '';
      for (var i = 0; i < msg.length; i++) {
        var w = msg[i];
        if (endian === 'little')
          w = htonl(w);
        res += zero8(w.toString(16));
      }
      return res;
    }
    var toHex32_1 = toHex32;

    function zero2(word) {
      if (word.length === 1)
        return '0' + word;
      else
        return word;
    }
    var zero2_1 = zero2;

    function zero8(word) {
      if (word.length === 7)
        return '0' + word;
      else if (word.length === 6)
        return '00' + word;
      else if (word.length === 5)
        return '000' + word;
      else if (word.length === 4)
        return '0000' + word;
      else if (word.length === 3)
        return '00000' + word;
      else if (word.length === 2)
        return '000000' + word;
      else if (word.length === 1)
        return '0000000' + word;
      else
        return word;
    }
    var zero8_1 = zero8;

    function join32(msg, start, end, endian) {
      var len = end - start;
      minimalisticAssert$1(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i = 0, k = start; i < res.length; i++, k += 4) {
        var w;
        if (endian === 'big')
          w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
        else
          w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
        res[i] = w >>> 0;
      }
      return res;
    }
    var join32_1 = join32;

    function split32(msg, endian) {
      var res = new Array(msg.length * 4);
      for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
        var m = msg[i];
        if (endian === 'big') {
          res[k] = m >>> 24;
          res[k + 1] = (m >>> 16) & 0xff;
          res[k + 2] = (m >>> 8) & 0xff;
          res[k + 3] = m & 0xff;
        } else {
          res[k + 3] = m >>> 24;
          res[k + 2] = (m >>> 16) & 0xff;
          res[k + 1] = (m >>> 8) & 0xff;
          res[k] = m & 0xff;
        }
      }
      return res;
    }
    var split32_1 = split32;

    function rotr32$1(w, b) {
      return (w >>> b) | (w << (32 - b));
    }
    var rotr32_1 = rotr32$1;

    function rotl32$2(w, b) {
      return (w << b) | (w >>> (32 - b));
    }
    var rotl32_1 = rotl32$2;

    function sum32$3(a, b) {
      return (a + b) >>> 0;
    }
    var sum32_1 = sum32$3;

    function sum32_3$1(a, b, c) {
      return (a + b + c) >>> 0;
    }
    var sum32_3_1 = sum32_3$1;

    function sum32_4$2(a, b, c, d) {
      return (a + b + c + d) >>> 0;
    }
    var sum32_4_1 = sum32_4$2;

    function sum32_5$2(a, b, c, d, e) {
      return (a + b + c + d + e) >>> 0;
    }
    var sum32_5_1 = sum32_5$2;

    function sum64$1(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];

      var lo = (al + bl) >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo;
    }
    var sum64_1 = sum64$1;

    function sum64_hi$1(ah, al, bh, bl) {
      var lo = (al + bl) >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      return hi >>> 0;
    }
    var sum64_hi_1 = sum64_hi$1;

    function sum64_lo$1(ah, al, bh, bl) {
      var lo = al + bl;
      return lo >>> 0;
    }
    var sum64_lo_1 = sum64_lo$1;

    function sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo = al;
      lo = (lo + bl) >>> 0;
      carry += lo < al ? 1 : 0;
      lo = (lo + cl) >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = (lo + dl) >>> 0;
      carry += lo < dl ? 1 : 0;

      var hi = ah + bh + ch + dh + carry;
      return hi >>> 0;
    }
    var sum64_4_hi_1 = sum64_4_hi$1;

    function sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo = al + bl + cl + dl;
      return lo >>> 0;
    }
    var sum64_4_lo_1 = sum64_4_lo$1;

    function sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo = al;
      lo = (lo + bl) >>> 0;
      carry += lo < al ? 1 : 0;
      lo = (lo + cl) >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = (lo + dl) >>> 0;
      carry += lo < dl ? 1 : 0;
      lo = (lo + el) >>> 0;
      carry += lo < el ? 1 : 0;

      var hi = ah + bh + ch + dh + eh + carry;
      return hi >>> 0;
    }
    var sum64_5_hi_1 = sum64_5_hi$1;

    function sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo = al + bl + cl + dl + el;

      return lo >>> 0;
    }
    var sum64_5_lo_1 = sum64_5_lo$1;

    function rotr64_hi$1(ah, al, num) {
      var r = (al << (32 - num)) | (ah >>> num);
      return r >>> 0;
    }
    var rotr64_hi_1 = rotr64_hi$1;

    function rotr64_lo$1(ah, al, num) {
      var r = (ah << (32 - num)) | (al >>> num);
      return r >>> 0;
    }
    var rotr64_lo_1 = rotr64_lo$1;

    function shr64_hi$1(ah, al, num) {
      return ah >>> num;
    }
    var shr64_hi_1 = shr64_hi$1;

    function shr64_lo$1(ah, al, num) {
      var r = (ah << (32 - num)) | (al >>> num);
      return r >>> 0;
    }
    var shr64_lo_1 = shr64_lo$1;

    var utils$8 = {
    	inherits: inherits_1,
    	toArray: toArray_1,
    	toHex: toHex_1,
    	htonl: htonl_1,
    	toHex32: toHex32_1,
    	zero2: zero2_1,
    	zero8: zero8_1,
    	join32: join32_1,
    	split32: split32_1,
    	rotr32: rotr32_1,
    	rotl32: rotl32_1,
    	sum32: sum32_1,
    	sum32_3: sum32_3_1,
    	sum32_4: sum32_4_1,
    	sum32_5: sum32_5_1,
    	sum64: sum64_1,
    	sum64_hi: sum64_hi_1,
    	sum64_lo: sum64_lo_1,
    	sum64_4_hi: sum64_4_hi_1,
    	sum64_4_lo: sum64_4_lo_1,
    	sum64_5_hi: sum64_5_hi_1,
    	sum64_5_lo: sum64_5_lo_1,
    	rotr64_hi: rotr64_hi_1,
    	rotr64_lo: rotr64_lo_1,
    	shr64_hi: shr64_hi_1,
    	shr64_lo: shr64_lo_1
    };

    function BlockHash$4() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = 'big';

      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }
    var BlockHash_1 = BlockHash$4;

    BlockHash$4.prototype.update = function update(msg, enc) {
      // Convert message to array, pad it, and join into 32bit blocks
      msg = utils$8.toArray(msg, enc);
      if (!this.pending)
        this.pending = msg;
      else
        this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;

      // Enough data, try updating
      if (this.pending.length >= this._delta8) {
        msg = this.pending;

        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0)
          this.pending = null;

        msg = utils$8.join32(msg, 0, msg.length - r, this.endian);
        for (var i = 0; i < msg.length; i += this._delta32)
          this._update(msg, i, i + this._delta32);
      }

      return this;
    };

    BlockHash$4.prototype.digest = function digest(enc) {
      this.update(this._pad());
      minimalisticAssert$1(this.pending === null);

      return this._digest(enc);
    };

    BlockHash$4.prototype._pad = function pad() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k = bytes - ((len + this.padLength) % bytes);
      var res = new Array(k + this.padLength);
      res[0] = 0x80;
      for (var i = 1; i < k; i++)
        res[i] = 0;

      // Append length
      len <<= 3;
      if (this.endian === 'big') {
        for (var t = 8; t < this.padLength; t++)
          res[i++] = 0;

        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = (len >>> 24) & 0xff;
        res[i++] = (len >>> 16) & 0xff;
        res[i++] = (len >>> 8) & 0xff;
        res[i++] = len & 0xff;
      } else {
        res[i++] = len & 0xff;
        res[i++] = (len >>> 8) & 0xff;
        res[i++] = (len >>> 16) & 0xff;
        res[i++] = (len >>> 24) & 0xff;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;

        for (t = 8; t < this.padLength; t++)
          res[i++] = 0;
      }

      return res;
    };

    var common$2 = {
    	BlockHash: BlockHash_1
    };

    var rotr32 = utils$8.rotr32;

    function ft_1$1(s, x, y, z) {
      if (s === 0)
        return ch32$1(x, y, z);
      if (s === 1 || s === 3)
        return p32(x, y, z);
      if (s === 2)
        return maj32$1(x, y, z);
    }
    var ft_1_1 = ft_1$1;

    function ch32$1(x, y, z) {
      return (x & y) ^ ((~x) & z);
    }
    var ch32_1 = ch32$1;

    function maj32$1(x, y, z) {
      return (x & y) ^ (x & z) ^ (y & z);
    }
    var maj32_1 = maj32$1;

    function p32(x, y, z) {
      return x ^ y ^ z;
    }
    var p32_1 = p32;

    function s0_256$1(x) {
      return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
    }
    var s0_256_1 = s0_256$1;

    function s1_256$1(x) {
      return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
    }
    var s1_256_1 = s1_256$1;

    function g0_256$1(x) {
      return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
    }
    var g0_256_1 = g0_256$1;

    function g1_256$1(x) {
      return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
    }
    var g1_256_1 = g1_256$1;

    var common$1 = {
    	ft_1: ft_1_1,
    	ch32: ch32_1,
    	maj32: maj32_1,
    	p32: p32_1,
    	s0_256: s0_256_1,
    	s1_256: s1_256_1,
    	g0_256: g0_256_1,
    	g1_256: g1_256_1
    };

    var rotl32$1 = utils$8.rotl32;
    var sum32$2 = utils$8.sum32;
    var sum32_5$1 = utils$8.sum32_5;
    var ft_1 = common$1.ft_1;
    var BlockHash$3 = common$2.BlockHash;

    var sha1_K = [
      0x5A827999, 0x6ED9EBA1,
      0x8F1BBCDC, 0xCA62C1D6
    ];

    function SHA1() {
      if (!(this instanceof SHA1))
        return new SHA1();

      BlockHash$3.call(this);
      this.h = [
        0x67452301, 0xefcdab89, 0x98badcfe,
        0x10325476, 0xc3d2e1f0 ];
      this.W = new Array(80);
    }

    utils$8.inherits(SHA1, BlockHash$3);
    var _1 = SHA1;

    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;

    SHA1.prototype._update = function _update(msg, start) {
      var W = this.W;

      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];

      for(; i < W.length; i++)
        W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];

      for (i = 0; i < W.length; i++) {
        var s = ~~(i / 20);
        var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32$1(b, 30);
        b = a;
        a = t;
      }

      this.h[0] = sum32$2(this.h[0], a);
      this.h[1] = sum32$2(this.h[1], b);
      this.h[2] = sum32$2(this.h[2], c);
      this.h[3] = sum32$2(this.h[3], d);
      this.h[4] = sum32$2(this.h[4], e);
    };

    SHA1.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$8.toHex32(this.h, 'big');
      else
        return utils$8.split32(this.h, 'big');
    };

    var sum32$1 = utils$8.sum32;
    var sum32_4$1 = utils$8.sum32_4;
    var sum32_5 = utils$8.sum32_5;
    var ch32 = common$1.ch32;
    var maj32 = common$1.maj32;
    var s0_256 = common$1.s0_256;
    var s1_256 = common$1.s1_256;
    var g0_256 = common$1.g0_256;
    var g1_256 = common$1.g1_256;

    var BlockHash$2 = common$2.BlockHash;

    var sha256_K = [
      0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
      0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
      0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
      0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
      0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
      0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
      0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
      0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
      0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
      0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
      0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
      0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
      0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
      0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
      0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
      0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    ];

    function SHA256() {
      if (!(this instanceof SHA256))
        return new SHA256();

      BlockHash$2.call(this);
      this.h = [
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
      ];
      this.k = sha256_K;
      this.W = new Array(64);
    }
    utils$8.inherits(SHA256, BlockHash$2);
    var _256 = SHA256;

    SHA256.blockSize = 512;
    SHA256.outSize = 256;
    SHA256.hmacStrength = 192;
    SHA256.padLength = 64;

    SHA256.prototype._update = function _update(msg, start) {
      var W = this.W;

      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i++)
        W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      var f = this.h[5];
      var g = this.h[6];
      var h = this.h[7];

      minimalisticAssert$1(this.k.length === W.length);
      for (i = 0; i < W.length; i++) {
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32$1(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32$1(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32$1(T1, T2);
      }

      this.h[0] = sum32$1(this.h[0], a);
      this.h[1] = sum32$1(this.h[1], b);
      this.h[2] = sum32$1(this.h[2], c);
      this.h[3] = sum32$1(this.h[3], d);
      this.h[4] = sum32$1(this.h[4], e);
      this.h[5] = sum32$1(this.h[5], f);
      this.h[6] = sum32$1(this.h[6], g);
      this.h[7] = sum32$1(this.h[7], h);
    };

    SHA256.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$8.toHex32(this.h, 'big');
      else
        return utils$8.split32(this.h, 'big');
    };

    function SHA224() {
      if (!(this instanceof SHA224))
        return new SHA224();

      _256.call(this);
      this.h = [
        0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
        0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
    }
    utils$8.inherits(SHA224, _256);
    var _224 = SHA224;

    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;

    SHA224.prototype._digest = function digest(enc) {
      // Just truncate output
      if (enc === 'hex')
        return utils$8.toHex32(this.h.slice(0, 7), 'big');
      else
        return utils$8.split32(this.h.slice(0, 7), 'big');
    };

    var rotr64_hi = utils$8.rotr64_hi;
    var rotr64_lo = utils$8.rotr64_lo;
    var shr64_hi = utils$8.shr64_hi;
    var shr64_lo = utils$8.shr64_lo;
    var sum64 = utils$8.sum64;
    var sum64_hi = utils$8.sum64_hi;
    var sum64_lo = utils$8.sum64_lo;
    var sum64_4_hi = utils$8.sum64_4_hi;
    var sum64_4_lo = utils$8.sum64_4_lo;
    var sum64_5_hi = utils$8.sum64_5_hi;
    var sum64_5_lo = utils$8.sum64_5_lo;

    var BlockHash$1 = common$2.BlockHash;

    var sha512_K = [
      0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
      0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
      0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
      0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
      0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
      0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
      0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
      0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
      0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
      0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
      0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
      0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
      0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
      0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
      0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
      0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
      0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
      0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
      0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
      0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
      0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
      0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
      0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
      0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
      0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
      0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
      0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
      0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
      0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
      0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
      0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
      0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
      0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
      0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
      0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
      0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
      0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
      0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
      0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
      0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
    ];

    function SHA512() {
      if (!(this instanceof SHA512))
        return new SHA512();

      BlockHash$1.call(this);
      this.h = [
        0x6a09e667, 0xf3bcc908,
        0xbb67ae85, 0x84caa73b,
        0x3c6ef372, 0xfe94f82b,
        0xa54ff53a, 0x5f1d36f1,
        0x510e527f, 0xade682d1,
        0x9b05688c, 0x2b3e6c1f,
        0x1f83d9ab, 0xfb41bd6b,
        0x5be0cd19, 0x137e2179 ];
      this.k = sha512_K;
      this.W = new Array(160);
    }
    utils$8.inherits(SHA512, BlockHash$1);
    var _512 = SHA512;

    SHA512.blockSize = 1024;
    SHA512.outSize = 512;
    SHA512.hmacStrength = 192;
    SHA512.padLength = 128;

    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W = this.W;

      // 32 x 32bit words
      for (var i = 0; i < 32; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i += 2) {
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14];  // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32];  // i - 16
        var c3_lo = W[i - 31];

        W[i] = sum64_4_hi(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo);
        W[i + 1] = sum64_4_lo(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo);
      }
    };

    SHA512.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);

      var W = this.W;

      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];

      minimalisticAssert$1(this.k.length === W.length);
      for (var i = 0; i < W.length; i += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];

        var T1_hi = sum64_5_hi(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo,
          c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo,
          c4_hi, c4_lo);

        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

        hh = gh;
        hl = gl;

        gh = fh;
        gl = fl;

        fh = eh;
        fl = el;

        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);

        dh = ch;
        dl = cl;

        ch = bh;
        cl = bl;

        bh = ah;
        bl = al;

        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }

      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
    };

    SHA512.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$8.toHex32(this.h, 'big');
      else
        return utils$8.split32(this.h, 'big');
    };

    function ch64_hi(xh, xl, yh, yl, zh) {
      var r = (xh & yh) ^ ((~xh) & zh);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r = (xl & yl) ^ ((~xl) & zl);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function maj64_hi(xh, xl, yh, yl, zh) {
      var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2);  // 34
      var c2_hi = rotr64_hi(xl, xh, 7);  // 39

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2);  // 34
      var c2_lo = rotr64_lo(xl, xh, 7);  // 39

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9);  // 41

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9);  // 41

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29);  // 61
      var c2_hi = shr64_hi(xh, xl, 6);

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29);  // 61
      var c2_lo = shr64_lo(xh, xl, 6);

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function SHA384() {
      if (!(this instanceof SHA384))
        return new SHA384();

      _512.call(this);
      this.h = [
        0xcbbb9d5d, 0xc1059ed8,
        0x629a292a, 0x367cd507,
        0x9159015a, 0x3070dd17,
        0x152fecd8, 0xf70e5939,
        0x67332667, 0xffc00b31,
        0x8eb44a87, 0x68581511,
        0xdb0c2e0d, 0x64f98fa7,
        0x47b5481d, 0xbefa4fa4 ];
    }
    utils$8.inherits(SHA384, _512);
    var _384 = SHA384;

    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;

    SHA384.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$8.toHex32(this.h.slice(0, 12), 'big');
      else
        return utils$8.split32(this.h.slice(0, 12), 'big');
    };

    var sha1 = _1;
    var sha224 = _224;
    var sha256$4 = _256;
    var sha384 = _384;
    var sha512$3 = _512;

    var sha$1 = {
    	sha1: sha1,
    	sha224: sha224,
    	sha256: sha256$4,
    	sha384: sha384,
    	sha512: sha512$3
    };

    var rotl32 = utils$8.rotl32;
    var sum32 = utils$8.sum32;
    var sum32_3 = utils$8.sum32_3;
    var sum32_4 = utils$8.sum32_4;
    var BlockHash = common$2.BlockHash;

    function RIPEMD160() {
      if (!(this instanceof RIPEMD160))
        return new RIPEMD160();

      BlockHash.call(this);

      this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
      this.endian = 'little';
    }
    utils$8.inherits(RIPEMD160, BlockHash);
    var ripemd160$1 = RIPEMD160;

    RIPEMD160.blockSize = 512;
    RIPEMD160.outSize = 160;
    RIPEMD160.hmacStrength = 192;
    RIPEMD160.padLength = 64;

    RIPEMD160.prototype._update = function update(msg, start) {
      var A = this.h[0];
      var B = this.h[1];
      var C = this.h[2];
      var D = this.h[3];
      var E = this.h[4];
      var Ah = A;
      var Bh = B;
      var Ch = C;
      var Dh = D;
      var Eh = E;
      for (var j = 0; j < 80; j++) {
        var T = sum32(
          rotl32(
            sum32_4(A, f$2(j, B, C, D), msg[r$5[j] + start], K$2(j)),
            s$7[j]),
          E);
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(
          rotl32(
            sum32_4(Ah, f$2(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
            sh[j]),
          Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
      }
      T = sum32_3(this.h[1], C, Dh);
      this.h[1] = sum32_3(this.h[2], D, Eh);
      this.h[2] = sum32_3(this.h[3], E, Ah);
      this.h[3] = sum32_3(this.h[4], A, Bh);
      this.h[4] = sum32_3(this.h[0], B, Ch);
      this.h[0] = T;
    };

    RIPEMD160.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$8.toHex32(this.h, 'little');
      else
        return utils$8.split32(this.h, 'little');
    };

    function f$2(j, x, y, z) {
      if (j <= 15)
        return x ^ y ^ z;
      else if (j <= 31)
        return (x & y) | ((~x) & z);
      else if (j <= 47)
        return (x | (~y)) ^ z;
      else if (j <= 63)
        return (x & z) | (y & (~z));
      else
        return x ^ (y | (~z));
    }

    function K$2(j) {
      if (j <= 15)
        return 0x00000000;
      else if (j <= 31)
        return 0x5a827999;
      else if (j <= 47)
        return 0x6ed9eba1;
      else if (j <= 63)
        return 0x8f1bbcdc;
      else
        return 0xa953fd4e;
    }

    function Kh(j) {
      if (j <= 15)
        return 0x50a28be6;
      else if (j <= 31)
        return 0x5c4dd124;
      else if (j <= 47)
        return 0x6d703ef3;
      else if (j <= 63)
        return 0x7a6d76e9;
      else
        return 0x00000000;
    }

    var r$5 = [
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
      7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
      3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
      1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
      4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
    ];

    var rh = [
      5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
      6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
      15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
      8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
      12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
    ];

    var s$7 = [
      11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
      7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
      11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
      11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
      9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
    ];

    var sh = [
      8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
      9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
      9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
      15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
      8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
    ];

    var ripemd = {
    	ripemd160: ripemd160$1
    };

    function Hmac(hash, key, enc) {
      if (!(this instanceof Hmac))
        return new Hmac(hash, key, enc);
      this.Hash = hash;
      this.blockSize = hash.blockSize / 8;
      this.outSize = hash.outSize / 8;
      this.inner = null;
      this.outer = null;

      this._init(utils$8.toArray(key, enc));
    }
    var hmac$1 = Hmac;

    Hmac.prototype._init = function init(key) {
      // Shorten key, if needed
      if (key.length > this.blockSize)
        key = new this.Hash().update(key).digest();
      minimalisticAssert$1(key.length <= this.blockSize);

      // Add padding to key
      for (var i = key.length; i < this.blockSize; i++)
        key.push(0);

      for (i = 0; i < key.length; i++)
        key[i] ^= 0x36;
      this.inner = new this.Hash().update(key);

      // 0x36 ^ 0x5c = 0x6a
      for (i = 0; i < key.length; i++)
        key[i] ^= 0x6a;
      this.outer = new this.Hash().update(key);
    };

    Hmac.prototype.update = function update(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };

    Hmac.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };

    var hash_1$1 = createCommonjsModule$4(function (module, exports) {
    var hash = exports;

    hash.utils = utils$8;
    hash.common = common$2;
    hash.sha = sha$1;
    hash.ripemd = ripemd;
    hash.hmac = hmac$1;

    // Proxy hash functions to the main object
    hash.sha1 = hash.sha.sha1;
    hash.sha256 = hash.sha.sha256;
    hash.sha224 = hash.sha.sha224;
    hash.sha384 = hash.sha.sha384;
    hash.sha512 = hash.sha.sha512;
    hash.ripemd160 = hash.ripemd.ripemd160;
    });

    function createCommonjsModule$3(fn, basedir, module) {
    	return module = {
    		path: basedir,
    		exports: {},
    		require: function (path, base) {
    			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
    		}
    	}, fn(module, module.exports), module.exports;
    }

    function commonjsRequire () {
    	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
    }

    var minimalisticAssert = assert;

    function assert(val, msg) {
      if (!val)
        throw new Error(msg || 'Assertion failed');
    }

    assert.equal = function assertEqual(l, r, msg) {
      if (l != r)
        throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
    };

    var utils_1 = createCommonjsModule$3(function (module, exports) {

    var utils = exports;

    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg !== 'string') {
        for (var i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
        return res;
      }
      if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0)
          msg = '0' + msg;
        for (var i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      } else {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 0xff;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      }
      return res;
    }
    utils.toArray = toArray;

    function zero2(word) {
      if (word.length === 1)
        return '0' + word;
      else
        return word;
    }
    utils.zero2 = zero2;

    function toHex(msg) {
      var res = '';
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    utils.toHex = toHex;

    utils.encode = function encode(arr, enc) {
      if (enc === 'hex')
        return toHex(arr);
      else
        return arr;
    };
    });

    var utils_1$1 = createCommonjsModule$3(function (module, exports) {

    var utils = exports;




    utils.assert = minimalisticAssert;
    utils.toArray = utils_1.toArray;
    utils.zero2 = utils_1.zero2;
    utils.toHex = utils_1.toHex;
    utils.encode = utils_1.encode;

    // Represent num in a w-NAF form
    function getNAF(num, w, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      naf.fill(0);

      var ws = 1 << (w + 1);
      var k = num.clone();

      for (var i = 0; i < naf.length; i++) {
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
          if (mod > (ws >> 1) - 1)
            z = (ws >> 1) - mod;
          else
            z = mod;
          k.isubn(z);
        } else {
          z = 0;
        }

        naf[i] = z;
        k.iushrn(1);
      }

      return naf;
    }
    utils.getNAF = getNAF;

    // Represent k1, k2 in a Joint Sparse Form
    function getJSF(k1, k2) {
      var jsf = [
        [],
        [],
      ];

      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      var m8;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        // First phase
        var m14 = (k1.andln(3) + d1) & 3;
        var m24 = (k2.andln(3) + d2) & 3;
        if (m14 === 3)
          m14 = -1;
        if (m24 === 3)
          m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          m8 = (k1.andln(7) + d1) & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2)
            u1 = -m14;
          else
            u1 = m14;
        }
        jsf[0].push(u1);

        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          m8 = (k2.andln(7) + d2) & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2)
            u2 = -m24;
          else
            u2 = m24;
        }
        jsf[1].push(u2);

        // Second phase
        if (2 * d1 === u1 + 1)
          d1 = 1 - d1;
        if (2 * d2 === u2 + 1)
          d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }

      return jsf;
    }
    utils.getJSF = getJSF;

    function cachedProperty(obj, name, computer) {
      var key = '_' + name;
      obj.prototype[name] = function cachedProperty() {
        return this[key] !== undefined ? this[key] :
          this[key] = computer.call(this);
      };
    }
    utils.cachedProperty = cachedProperty;

    function parseBytes(bytes) {
      return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
        bytes;
    }
    utils.parseBytes = parseBytes;

    function intFromLE(bytes) {
      return new bn$1(bytes, 'hex', 'le');
    }
    utils.intFromLE = intFromLE;
    });



    var getNAF = utils_1$1.getNAF;
    var getJSF = utils_1$1.getJSF;
    var assert$1 = utils_1$1.assert;

    function BaseCurve(type, conf) {
      this.type = type;
      this.p = new bn$1(conf.p, 16);

      // Use Montgomery, when there is no fast reduction for the prime
      this.red = conf.prime ? bn$1.red(conf.prime) : bn$1.mont(this.p);

      // Useful for many curves
      this.zero = new bn$1(0).toRed(this.red);
      this.one = new bn$1(1).toRed(this.red);
      this.two = new bn$1(2).toRed(this.red);

      // Curve configuration, optional
      this.n = conf.n && new bn$1(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

      // Temporary arrays
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);

      this._bitLength = this.n ? this.n.bitLength() : 0;

      // Generalized Greg Maxwell's trick
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
      } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
    }
    var base$1 = BaseCurve;

    BaseCurve.prototype.point = function point() {
      throw new Error('Not implemented');
    };

    BaseCurve.prototype.validate = function validate() {
      throw new Error('Not implemented');
    };

    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
      assert$1(p.precomputed);
      var doubles = p._getDoubles();

      var naf = getNAF(k, 1, this._bitLength);
      var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
      I /= 3;

      // Translate into more windowed form
      var repr = [];
      var j;
      var nafW;
      for (j = 0; j < naf.length; j += doubles.step) {
        nafW = 0;
        for (var l = j + doubles.step - 1; l >= j; l--)
          nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
      }

      var a = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);
      for (var i = I; i > 0; i--) {
        for (j = 0; j < repr.length; j++) {
          nafW = repr[j];
          if (nafW === i)
            b = b.mixedAdd(doubles.points[j]);
          else if (nafW === -i)
            b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
      }
      return a.toP();
    };

    BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
      var w = 4;

      // Precompute window
      var nafPoints = p._getNAFPoints(w);
      w = nafPoints.wnd;
      var wnd = nafPoints.points;

      // Get NAF form
      var naf = getNAF(k, w, this._bitLength);

      // Add `this`*(N+1) for every w-NAF index
      var acc = this.jpoint(null, null, null);
      for (var i = naf.length - 1; i >= 0; i--) {
        // Count zeroes
        for (var l = 0; i >= 0 && naf[i] === 0; i--)
          l++;
        if (i >= 0)
          l++;
        acc = acc.dblp(l);

        if (i < 0)
          break;
        var z = naf[i];
        assert$1(z !== 0);
        if (p.type === 'affine') {
          // J +- P
          if (z > 0)
            acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
          else
            acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
        } else {
          // J +- J
          if (z > 0)
            acc = acc.add(wnd[(z - 1) >> 1]);
          else
            acc = acc.add(wnd[(-z - 1) >> 1].neg());
        }
      }
      return p.type === 'affine' ? acc.toP() : acc;
    };

    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
      points,
      coeffs,
      len,
      jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;

      // Fill all arrays
      var max = 0;
      var i;
      var j;
      var p;
      for (i = 0; i < len; i++) {
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
      }

      // Comb small window NAFs
      for (i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
          naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
          naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
          max = Math.max(naf[a].length, max);
          max = Math.max(naf[b].length, max);
          continue;
        }

        var comb = [
          points[a], /* 1 */
          null, /* 3 */
          null, /* 5 */
          points[b], /* 7 */
        ];

        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
          comb[1] = points[a].add(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].add(points[b].neg());
        } else {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }

        var index = [
          -3, /* -1 -1 */
          -1, /* -1 0 */
          -5, /* -1 1 */
          -7, /* 0 -1 */
          0, /* 0 0 */
          7, /* 0 1 */
          5, /* 1 -1 */
          1, /* 1 0 */
          3,  /* 1 1 */
        ];

        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for (j = 0; j < max; j++) {
          var ja = jsf[0][j] | 0;
          var jb = jsf[1][j] | 0;

          naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b][j] = 0;
          wnd[a] = comb;
        }
      }

      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (i = max; i >= 0; i--) {
        var k = 0;

        while (i >= 0) {
          var zero = true;
          for (j = 0; j < len; j++) {
            tmp[j] = naf[j][i] | 0;
            if (tmp[j] !== 0)
              zero = false;
          }
          if (!zero)
            break;
          k++;
          i--;
        }
        if (i >= 0)
          k++;
        acc = acc.dblp(k);
        if (i < 0)
          break;

        for (j = 0; j < len; j++) {
          var z = tmp[j];
          if (z === 0)
            continue;
          else if (z > 0)
            p = wnd[j][(z - 1) >> 1];
          else if (z < 0)
            p = wnd[j][(-z - 1) >> 1].neg();

          if (p.type === 'affine')
            acc = acc.mixedAdd(p);
          else
            acc = acc.add(p);
        }
      }
      // Zeroify references
      for (i = 0; i < len; i++)
        wnd[i] = null;

      if (jacobianResult)
        return acc;
      else
        return acc.toP();
    };

    function BasePoint(curve, type) {
      this.curve = curve;
      this.type = type;
      this.precomputed = null;
    }
    BaseCurve.BasePoint = BasePoint;

    BasePoint.prototype.eq = function eq(/*other*/) {
      throw new Error('Not implemented');
    };

    BasePoint.prototype.validate = function validate() {
      return this.curve.validate(this);
    };

    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils_1$1.toArray(bytes, enc);

      var len = this.p.byteLength();

      // uncompressed, hybrid-odd, hybrid-even
      if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
          bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06)
          assert$1(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 0x07)
          assert$1(bytes[bytes.length - 1] % 2 === 1);

        var res =  this.point(bytes.slice(1, 1 + len),
          bytes.slice(1 + len, 1 + 2 * len));

        return res;
      } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
                  bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
      }
      throw new Error('Unknown point format');
    };

    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };

    BasePoint.prototype._encode = function _encode(compact) {
      var len = this.curve.p.byteLength();
      var x = this.getX().toArray('be', len);

      if (compact)
        return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

      return [ 0x04 ].concat(x, this.getY().toArray('be', len));
    };

    BasePoint.prototype.encode = function encode(enc, compact) {
      return utils_1$1.encode(this._encode(compact), enc);
    };

    BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed)
        return this;

      var precomputed = {
        doubles: null,
        naf: null,
        beta: null,
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;

      return this;
    };

    BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
      if (!this.precomputed)
        return false;

      var doubles = this.precomputed.doubles;
      if (!doubles)
        return false;

      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
    };

    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;

      var doubles = [ this ];
      var acc = this;
      for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++)
          acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step: step,
        points: doubles,
      };
    };

    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;

      var res = [ this ];
      var max = (1 << wnd) - 1;
      var dbl = max === 1 ? null : this.dbl();
      for (var i = 1; i < max; i++)
        res[i] = res[i - 1].add(dbl);
      return {
        wnd: wnd,
        points: res,
      };
    };

    BasePoint.prototype._getBeta = function _getBeta() {
      return null;
    };

    BasePoint.prototype.dblp = function dblp(k) {
      var r = this;
      for (var i = 0; i < k; i++)
        r = r.dbl();
      return r;
    };

    var inherits_browser = createCommonjsModule$3(function (module) {
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function () {};
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
    });






    var assert$2 = utils_1$1.assert;

    function ShortCurve(conf) {
      base$1.call(this, 'short', conf);

      this.a = new bn$1(conf.a, 16).toRed(this.red);
      this.b = new bn$1(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();

      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

      // If the curve is endomorphic, precalculate beta and lambda
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
    }
    inherits_browser(ShortCurve, base$1);
    var short_1 = ShortCurve;

    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      // No efficient endomorphism
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;

      // Compute beta and lambda, that lambda * P = (beta * Px; Py)
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new bn$1(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new bn$1(conf.lambda, 16);
      } else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }

      // Get basis vectors, used for balanced length-two representation
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function(vec) {
          return {
            a: new bn$1(vec.a, 16),
            b: new bn$1(vec.b, 16),
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }

      return {
        beta: beta,
        lambda: lambda,
        basis: basis,
      };
    };

    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      // Find roots of for x^2 + x + 1 in F
      // Root = (-1 +- Sqrt(-3)) / 2
      //
      var red = num === this.p ? this.red : bn$1.mont(num);
      var tinv = new bn$1(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();

      var s = new bn$1(3).toRed(red).redNeg().redSqrt().redMul(tinv);

      var l1 = ntinv.redAdd(s).fromRed();
      var l2 = ntinv.redSub(s).fromRed();
      return [ l1, l2 ];
    };

    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      // aprxSqrt >= sqrt(this.n)
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

      // 3.74
      // Run EGCD, until r(L + 1) < aprxSqrt
      var u = lambda;
      var v = this.n.clone();
      var x1 = new bn$1(1);
      var y1 = new bn$1(0);
      var x2 = new bn$1(0);
      var y2 = new bn$1(1);

      // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
      var a0;
      var b0;
      // First vector
      var a1;
      var b1;
      // Second vector
      var a2;
      var b2;

      var prevR;
      var i = 0;
      var r;
      var x;
      while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));

        if (!a1 && r.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r.neg();
          b1 = x;
        } else if (a1 && ++i === 2) {
          break;
        }
        prevR = r;

        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
      }
      a2 = r.neg();
      b2 = x;

      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
      }

      // Normalize signs
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }

      return [
        { a: a1, b: b1 },
        { a: a2, b: b2 },
      ];
    };

    ShortCurve.prototype._endoSplit = function _endoSplit(k) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v2 = basis[1];

      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v1.b.neg().mul(k).divRound(this.n);

      var p1 = c1.mul(v1.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v1.b);
      var q2 = c2.mul(v2.b);

      // Calculate answer
      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
      return { k1: k1, k2: k2 };
    };

    ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new bn$1(x, 16);
      if (!x.red)
        x = x.toRed(this.red);

      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error('invalid point');

      // XXX Is there any way to tell if the number is odd without converting it
      // to non-red form?
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();

      return this.point(x, y);
    };

    ShortCurve.prototype.validate = function validate(point) {
      if (point.inf)
        return true;

      var x = point.x;
      var y = point.y;

      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
      return y.redSqr().redISub(rhs).cmpn(0) === 0;
    };

    ShortCurve.prototype._endoWnafMulAdd =
        function _endoWnafMulAdd(points, coeffs, jacobianResult) {
          var npoints = this._endoWnafT1;
          var ncoeffs = this._endoWnafT2;
          for (var i = 0; i < points.length; i++) {
            var split = this._endoSplit(coeffs[i]);
            var p = points[i];
            var beta = p._getBeta();

            if (split.k1.negative) {
              split.k1.ineg();
              p = p.neg(true);
            }
            if (split.k2.negative) {
              split.k2.ineg();
              beta = beta.neg(true);
            }

            npoints[i * 2] = p;
            npoints[i * 2 + 1] = beta;
            ncoeffs[i * 2] = split.k1;
            ncoeffs[i * 2 + 1] = split.k2;
          }
          var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

          // Clean-up references to points and coefficients
          for (var j = 0; j < i * 2; j++) {
            npoints[j] = null;
            ncoeffs[j] = null;
          }
          return res;
        };

    function Point(curve, x, y, isRed) {
      base$1.BasePoint.call(this, curve, 'affine');
      if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new bn$1(x, 16);
        this.y = new bn$1(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        this.inf = false;
      }
    }
    inherits_browser(Point, base$1.BasePoint);

    ShortCurve.prototype.point = function point(x, y, isRed) {
      return new Point(this, x, y, isRed);
    };

    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point.fromJSON(this, obj, red);
    };

    Point.prototype._getBeta = function _getBeta() {
      if (!this.curve.endo)
        return;

      var pre = this.precomputed;
      if (pre && pre.beta)
        return pre.beta;

      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
          return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul),
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul),
          },
        };
      }
      return beta;
    };

    Point.prototype.toJSON = function toJSON() {
      if (!this.precomputed)
        return [ this.x, this.y ];

      return [ this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1),
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1),
        },
      } ];
    };

    Point.fromJSON = function fromJSON(curve, obj, red) {
      if (typeof obj === 'string')
        obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2])
        return res;

      function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
      }

      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [ res ].concat(pre.doubles.points.map(obj2point)),
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [ res ].concat(pre.naf.points.map(obj2point)),
        },
      };
      return res;
    };

    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' y: ' + this.y.fromRed().toString(16, 2) + '>';
    };

    Point.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };

    Point.prototype.add = function add(p) {
      // O + P = P
      if (this.inf)
        return p;

      // P + O = P
      if (p.inf)
        return this;

      // P + P = 2P
      if (this.eq(p))
        return this.dbl();

      // P + (-P) = O
      if (this.neg().eq(p))
        return this.curve.point(null, null);

      // P + Q = O
      if (this.x.cmp(p.x) === 0)
        return this.curve.point(null, null);

      var c = this.y.redSub(p.y);
      if (c.cmpn(0) !== 0)
        c = c.redMul(this.x.redSub(p.x).redInvm());
      var nx = c.redSqr().redISub(this.x).redISub(p.x);
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };

    Point.prototype.dbl = function dbl() {
      if (this.inf)
        return this;

      // 2P = O
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);

      var a = this.curve.a;

      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

      var nx = c.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };

    Point.prototype.getX = function getX() {
      return this.x.fromRed();
    };

    Point.prototype.getY = function getY() {
      return this.y.fromRed();
    };

    Point.prototype.mul = function mul(k) {
      k = new bn$1(k, 16);
      if (this.isInfinity())
        return this;
      else if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([ this ], [ k ]);
      else
        return this.curve._wnafMul(this, k);
    };

    Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
      var points = [ this, p2 ];
      var coeffs = [ k1, k2 ];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };

    Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
      var points = [ this, p2 ];
      var coeffs = [ k1, k2 ];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };

    Point.prototype.eq = function eq(p) {
      return this === p ||
             this.inf === p.inf &&
                 (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
    };

    Point.prototype.neg = function neg(_precompute) {
      if (this.inf)
        return this;

      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
          return p.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate),
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate),
          },
        };
      }
      return res;
    };

    Point.prototype.toJ = function toJ() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);

      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };

    function JPoint(curve, x, y, z) {
      base$1.BasePoint.call(this, curve, 'jacobian');
      if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new bn$1(0);
      } else {
        this.x = new bn$1(x, 16);
        this.y = new bn$1(y, 16);
        this.z = new bn$1(z, 16);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);

      this.zOne = this.z === this.curve.one;
    }
    inherits_browser(JPoint, base$1.BasePoint);

    ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
      return new JPoint(this, x, y, z);
    };

    JPoint.prototype.toP = function toP() {
      if (this.isInfinity())
        return this.curve.point(null, null);

      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);

      return this.curve.point(ax, ay);
    };

    JPoint.prototype.neg = function neg() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };

    JPoint.prototype.add = function add(p) {
      // O + P = P
      if (this.isInfinity())
        return p;

      // P + O = P
      if (p.isInfinity())
        return this;

      // 12M + 4S + 7A
      var pz2 = p.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p.z));
      var s2 = p.y.redMul(z2.redMul(this.z));

      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }

      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);

      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p.z).redMul(h);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.mixedAdd = function mixedAdd(p) {
      // O + P = P
      if (this.isInfinity())
        return p.toJ();

      // P + O = P
      if (p.isInfinity())
        return this;

      // 8M + 3S + 7A
      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p.x.redMul(z2);
      var s1 = this.y;
      var s2 = p.y.redMul(z2).redMul(this.z);

      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }

      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);

      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.dblp = function dblp(pow) {
      if (pow === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!pow)
        return this.dbl();

      var i;
      if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for (i = 0; i < pow; i++)
          r = r.dbl();
        return r;
      }

      // 1M + 2S + 1A + N * (4S + 5M + 8A)
      // N = 1 => 6M + 6S + 9A
      var a = this.curve.a;
      var tinv = this.curve.tinv;

      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();

      // Reuse results
      var jyd = jy.redAdd(jy);
      for (i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow)
          jz4 = jz4.redMul(jyd4);

        jx = nx;
        jz = nz;
        jyd = dny;
      }

      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };

    JPoint.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;

      if (this.curve.zeroA)
        return this._zeroDbl();
      else if (this.curve.threeA)
        return this._threeDbl();
      else
        return this._dbl();
    };

    JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A

        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);

        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);

        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A

        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();

        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);

        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A

        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S

        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype._dbl = function _dbl() {
      var a = this.curve.a;

      // 4M + 6S + 10A
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();

      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();

      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);

      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);

      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
      // 5M + 10S + ...

      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // ZZ = Z1^2
      var zz = this.z.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // M = 3 * XX + a * ZZ2; a = 0
      var m = xx.redAdd(xx).redIAdd(xx);
      // MM = M^2
      var mm = m.redSqr();
      // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm);
      // EE = E^2
      var ee = e.redSqr();
      // T = 16*YYYY
      var t = yyyy.redIAdd(yyyy);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      // U = (M + E)^2 - MM - EE - T
      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
      // X3 = 4 * (X1 * EE - 4 * YY * U)
      var yyu4 = yy.redMul(u);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      // Z3 = (Z1 + E)^2 - ZZ - EE
      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.mul = function mul(k, kbase) {
      k = new bn$1(k, kbase);

      return this.curve._wnafMul(this, k);
    };

    JPoint.prototype.eq = function eq(p) {
      if (p.type === 'affine')
        return this.eq(p.toJ());

      if (this === p)
        return true;

      // x1 * z2^2 == x2 * z1^2
      var z2 = this.z.redSqr();
      var pz2 = p.z.redSqr();
      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
        return false;

      // y1 * z2^3 == y2 * z1^3
      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p.z);
      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
    };

    JPoint.prototype.eqXToP = function eqXToP(x) {
      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0)
        return true;

      var xc = x.clone();
      var t = this.curve.redN.redMul(zs);
      for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;

        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };

    JPoint.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC JPoint Infinity>';
      return '<EC JPoint x: ' + this.x.toString(16, 2) +
          ' y: ' + this.y.toString(16, 2) +
          ' z: ' + this.z.toString(16, 2) + '>';
    };

    JPoint.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.z.cmpn(0) === 0;
    };

    var curve_1 = createCommonjsModule$3(function (module, exports) {

    var curve = exports;

    curve.base = base$1;
    curve.short = short_1;
    curve.mont = /*RicMoo:ethers:require(./mont)*/(null);
    curve.edwards = /*RicMoo:ethers:require(./edwards)*/(null);
    });

    var curves_1 = createCommonjsModule$3(function (module, exports) {

    var curves = exports;





    var assert = utils_1$1.assert;

    function PresetCurve(options) {
      if (options.type === 'short')
        this.curve = new curve_1.short(options);
      else if (options.type === 'edwards')
        this.curve = new curve_1.edwards(options);
      else
        this.curve = new curve_1.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;

      assert(this.g.validate(), 'Invalid curve');
      assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
    }
    curves.PresetCurve = PresetCurve;

    function defineCurve(name, options) {
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
          var curve = new PresetCurve(options);
          Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            value: curve,
          });
          return curve;
        },
      });
    }

    defineCurve('p192', {
      type: 'short',
      prime: 'p192',
      p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
      b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
      n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
      hash: hash_1$1.sha256,
      gRed: false,
      g: [
        '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
        '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
      ],
    });

    defineCurve('p224', {
      type: 'short',
      prime: 'p224',
      p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
      b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
      n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
      hash: hash_1$1.sha256,
      gRed: false,
      g: [
        'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
        'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
      ],
    });

    defineCurve('p256', {
      type: 'short',
      prime: null,
      p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
      a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
      b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
      n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
      hash: hash_1$1.sha256,
      gRed: false,
      g: [
        '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
        '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
      ],
    });

    defineCurve('p384', {
      type: 'short',
      prime: null,
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'fffffffe ffffffff 00000000 00000000 ffffffff',
      a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'fffffffe ffffffff 00000000 00000000 fffffffc',
      b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
         '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
      n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
         'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
      hash: hash_1$1.sha384,
      gRed: false,
      g: [
        'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
        '5502f25d bf55296c 3a545e38 72760ab7',
        '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
        '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
      ],
    });

    defineCurve('p521', {
      type: 'short',
      prime: null,
      p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff ffffffff',
      a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff fffffffc',
      b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
         '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
         '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
      n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
         'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
      hash: hash_1$1.sha512,
      gRed: false,
      g: [
        '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
        '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
        'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
        '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
        '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
        '3fad0761 353c7086 a272c240 88be9476 9fd16650',
      ],
    });

    defineCurve('curve25519', {
      type: 'mont',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '76d06',
      b: '1',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash_1$1.sha256,
      gRed: false,
      g: [
        '9',
      ],
    });

    defineCurve('ed25519', {
      type: 'edwards',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '-1',
      c: '1',
      // -121665 * (121666^(-1)) (mod P)
      d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash_1$1.sha256,
      gRed: false,
      g: [
        '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

        // 4/5
        '6666666666666666666666666666666666666666666666666666666666666658',
      ],
    });

    var pre;
    try {
      pre = /*RicMoo:ethers:require(./precomputed/secp256k1)*/(null).crash();
    } catch (e) {
      pre = undefined;
    }

    defineCurve('secp256k1', {
      type: 'short',
      prime: 'k256',
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
      a: '0',
      b: '7',
      n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
      h: '1',
      hash: hash_1$1.sha256,

      // Precomputed endomorphism
      beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
      lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
      basis: [
        {
          a: '3086d221a7d46bcde86c90e49284eb15',
          b: '-e4437ed6010e88286f547fa90abfe4c3',
        },
        {
          a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
          b: '3086d221a7d46bcde86c90e49284eb15',
        },
      ],

      gRed: false,
      g: [
        '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
        '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
        pre,
      ],
    });
    });





    function HmacDRBG(options) {
      if (!(this instanceof HmacDRBG))
        return new HmacDRBG(options);
      this.hash = options.hash;
      this.predResist = !!options.predResist;

      this.outLen = this.hash.outSize;
      this.minEntropy = options.minEntropy || this.hash.hmacStrength;

      this._reseed = null;
      this.reseedInterval = null;
      this.K = null;
      this.V = null;

      var entropy = utils_1.toArray(options.entropy, options.entropyEnc || 'hex');
      var nonce = utils_1.toArray(options.nonce, options.nonceEnc || 'hex');
      var pers = utils_1.toArray(options.pers, options.persEnc || 'hex');
      minimalisticAssert(entropy.length >= (this.minEntropy / 8),
             'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
      this._init(entropy, nonce, pers);
    }
    var hmacDrbg = HmacDRBG;

    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);

      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i = 0; i < this.V.length; i++) {
        this.K[i] = 0x00;
        this.V[i] = 0x01;
      }

      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 0x1000000000000;  // 2^48
    };

    HmacDRBG.prototype._hmac = function hmac() {
      return new hash_1$1.hmac(this.hash, this.K);
    };

    HmacDRBG.prototype._update = function update(seed) {
      var kmac = this._hmac()
                     .update(this.V)
                     .update([ 0x00 ]);
      if (seed)
        kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed)
        return;

      this.K = this._hmac()
                   .update(this.V)
                   .update([ 0x01 ])
                   .update(seed)
                   .digest();
      this.V = this._hmac().update(this.V).digest();
    };

    HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
      // Optional entropy enc
      if (typeof entropyEnc !== 'string') {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
      }

      entropy = utils_1.toArray(entropy, entropyEnc);
      add = utils_1.toArray(add, addEnc);

      minimalisticAssert(entropy.length >= (this.minEntropy / 8),
             'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

      this._update(entropy.concat(add || []));
      this._reseed = 1;
    };

    HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
      if (this._reseed > this.reseedInterval)
        throw new Error('Reseed is required');

      // Optional encoding
      if (typeof enc !== 'string') {
        addEnc = add;
        add = enc;
        enc = null;
      }

      // Optional additional data
      if (add) {
        add = utils_1.toArray(add, addEnc || 'hex');
        this._update(add);
      }

      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }

      var res = temp.slice(0, len);
      this._update(add);
      this._reseed++;
      return utils_1.encode(res, enc);
    };



    var assert$3 = utils_1$1.assert;

    function KeyPair(ec, options) {
      this.ec = ec;
      this.priv = null;
      this.pub = null;

      // KeyPair(ec, { priv: ..., pub: ... })
      if (options.priv)
        this._importPrivate(options.priv, options.privEnc);
      if (options.pub)
        this._importPublic(options.pub, options.pubEnc);
    }
    var key = KeyPair;

    KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
      if (pub instanceof KeyPair)
        return pub;

      return new KeyPair(ec, {
        pub: pub,
        pubEnc: enc,
      });
    };

    KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
      if (priv instanceof KeyPair)
        return priv;

      return new KeyPair(ec, {
        priv: priv,
        privEnc: enc,
      });
    };

    KeyPair.prototype.validate = function validate() {
      var pub = this.getPublic();

      if (pub.isInfinity())
        return { result: false, reason: 'Invalid public key' };
      if (!pub.validate())
        return { result: false, reason: 'Public key is not a point' };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: 'Public key * N != O' };

      return { result: true, reason: null };
    };

    KeyPair.prototype.getPublic = function getPublic(compact, enc) {
      // compact is optional argument
      if (typeof compact === 'string') {
        enc = compact;
        compact = null;
      }

      if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);

      if (!enc)
        return this.pub;

      return this.pub.encode(enc, compact);
    };

    KeyPair.prototype.getPrivate = function getPrivate(enc) {
      if (enc === 'hex')
        return this.priv.toString(16, 2);
      else
        return this.priv;
    };

    KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
      this.priv = new bn$1(key, enc || 16);

      // Ensure that the priv won't be bigger than n, otherwise we may fail
      // in fixed multiplication method
      this.priv = this.priv.umod(this.ec.curve.n);
    };

    KeyPair.prototype._importPublic = function _importPublic(key, enc) {
      if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === 'mont') {
          assert$3(key.x, 'Need x coordinate');
        } else if (this.ec.curve.type === 'short' ||
                   this.ec.curve.type === 'edwards') {
          assert$3(key.x && key.y, 'Need both x and y coordinate');
        }
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key, enc);
    };

    // ECDH
    KeyPair.prototype.derive = function derive(pub) {
      if(!pub.validate()) {
        assert$3(pub.validate(), 'public point not validated');
      }
      return pub.mul(this.priv).getX();
    };

    // ECDSA
    KeyPair.prototype.sign = function sign(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };

    KeyPair.prototype.verify = function verify(msg, signature) {
      return this.ec.verify(msg, signature, this);
    };

    KeyPair.prototype.inspect = function inspect() {
      return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
             ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
    };




    var assert$4 = utils_1$1.assert;

    function Signature(options, enc) {
      if (options instanceof Signature)
        return options;

      if (this._importDER(options, enc))
        return;

      assert$4(options.r && options.s, 'Signature without r or s');
      this.r = new bn$1(options.r, 16);
      this.s = new bn$1(options.s, 16);
      if (options.recoveryParam === undefined)
        this.recoveryParam = null;
      else
        this.recoveryParam = options.recoveryParam;
    }
    var signature = Signature;

    function Position() {
      this.place = 0;
    }

    function getLength(buf, p) {
      var initial = buf[p.place++];
      if (!(initial & 0x80)) {
        return initial;
      }
      var octetLen = initial & 0xf;

      // Indefinite length or overflow
      if (octetLen === 0 || octetLen > 4) {
        return false;
      }

      var val = 0;
      for (var i = 0, off = p.place; i < octetLen; i++, off++) {
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
      }

      // Leading zeroes
      if (val <= 0x7f) {
        return false;
      }

      p.place = off;
      return val;
    }

    function rmPadding(buf) {
      var i = 0;
      var len = buf.length - 1;
      while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
        i++;
      }
      if (i === 0) {
        return buf;
      }
      return buf.slice(i);
    }

    Signature.prototype._importDER = function _importDER(data, enc) {
      data = utils_1$1.toArray(data, enc);
      var p = new Position();
      if (data[p.place++] !== 0x30) {
        return false;
      }
      var len = getLength(data, p);
      if (len === false) {
        return false;
      }
      if ((len + p.place) !== data.length) {
        return false;
      }
      if (data[p.place++] !== 0x02) {
        return false;
      }
      var rlen = getLength(data, p);
      if (rlen === false) {
        return false;
      }
      var r = data.slice(p.place, rlen + p.place);
      p.place += rlen;
      if (data[p.place++] !== 0x02) {
        return false;
      }
      var slen = getLength(data, p);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p.place) {
        return false;
      }
      var s = data.slice(p.place, slen + p.place);
      if (r[0] === 0) {
        if (r[1] & 0x80) {
          r = r.slice(1);
        } else {
          // Leading zeroes
          return false;
        }
      }
      if (s[0] === 0) {
        if (s[1] & 0x80) {
          s = s.slice(1);
        } else {
          // Leading zeroes
          return false;
        }
      }

      this.r = new bn$1(r);
      this.s = new bn$1(s);
      this.recoveryParam = null;

      return true;
    };

    function constructLength(arr, len) {
      if (len < 0x80) {
        arr.push(len);
        return;
      }
      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
      arr.push(octets | 0x80);
      while (--octets) {
        arr.push((len >>> (octets << 3)) & 0xff);
      }
      arr.push(len);
    }

    Signature.prototype.toDER = function toDER(enc) {
      var r = this.r.toArray();
      var s = this.s.toArray();

      // Pad values
      if (r[0] & 0x80)
        r = [ 0 ].concat(r);
      // Pad values
      if (s[0] & 0x80)
        s = [ 0 ].concat(s);

      r = rmPadding(r);
      s = rmPadding(s);

      while (!s[0] && !(s[1] & 0x80)) {
        s = s.slice(1);
      }
      var arr = [ 0x02 ];
      constructLength(arr, r.length);
      arr = arr.concat(r);
      arr.push(0x02);
      constructLength(arr, s.length);
      var backHalf = arr.concat(s);
      var res = [ 0x30 ];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils_1$1.encode(res, enc);
    };





    var rand = /*RicMoo:ethers:require(brorand)*/(function() { throw new Error('unsupported'); });
    var assert$5 = utils_1$1.assert;




    function EC(options) {
      if (!(this instanceof EC))
        return new EC(options);

      // Shortcut `elliptic.ec(curve-name)`
      if (typeof options === 'string') {
        assert$5(Object.prototype.hasOwnProperty.call(curves_1, options),
          'Unknown curve ' + options);

        options = curves_1[options];
      }

      // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
      if (options instanceof curves_1.PresetCurve)
        options = { curve: options };

      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;

      // Point on curve
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);

      // Hash for function for DRBG
      this.hash = options.hash || options.curve.hash;
    }
    var ec = EC;

    EC.prototype.keyPair = function keyPair(options) {
      return new key(this, options);
    };

    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return key.fromPrivate(this, priv, enc);
    };

    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return key.fromPublic(this, pub, enc);
    };

    EC.prototype.genKeyPair = function genKeyPair(options) {
      if (!options)
        options = {};

      // Instantiate Hmac_DRBG
      var drbg = new hmacDrbg({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || 'utf8',
        nonce: this.n.toArray(),
      });

      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new bn$1(2));
      for (;;) {
        var priv = new bn$1(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
          continue;

        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      }
    };

    EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
      var delta = msg.byteLength() * 8 - this.n.bitLength();
      if (delta > 0)
        msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
      else
        return msg;
    };

    EC.prototype.sign = function sign(msg, key, enc, options) {
      if (typeof enc === 'object') {
        options = enc;
        enc = null;
      }
      if (!options)
        options = {};

      key = this.keyFromPrivate(key, enc);
      msg = this._truncateToN(new bn$1(msg, 16));

      // Zero-extend key to provide enough entropy
      var bytes = this.n.byteLength();
      var bkey = key.getPrivate().toArray('be', bytes);

      // Zero-extend nonce to have the same byte size as N
      var nonce = msg.toArray('be', bytes);

      // Instantiate Hmac_DRBG
      var drbg = new hmacDrbg({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
      });

      // Number of bytes to generate
      var ns1 = this.n.sub(new bn$1(1));

      for (var iter = 0; ; iter++) {
        var k = options.k ?
          options.k(iter) :
          new bn$1(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
          continue;

        var kp = this.g.mul(k);
        if (kp.isInfinity())
          continue;

        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0)
          continue;

        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0)
          continue;

        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                            (kpX.cmp(r) !== 0 ? 2 : 0);

        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
          s = this.n.sub(s);
          recoveryParam ^= 1;
        }

        return new signature({ r: r, s: s, recoveryParam: recoveryParam });
      }
    };

    EC.prototype.verify = function verify(msg, signature$1, key, enc) {
      msg = this._truncateToN(new bn$1(msg, 16));
      key = this.keyFromPublic(key, enc);
      signature$1 = new signature(signature$1, 'hex');

      // Perform primitive values validation
      var r = signature$1.r;
      var s = signature$1.s;
      if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
        return false;
      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
        return false;

      // Validate signature
      var sinv = s.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r).umod(this.n);
      var p;

      if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity())
          return false;

        return p.getX().umod(this.n).cmp(r) === 0;
      }

      // NOTE: Greg Maxwell's trick, inspired by:
      // https://git.io/vad3K

      p = this.g.jmulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity())
        return false;

      // Compare `p.x` of Jacobian point with `r`,
      // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
      // inverse of `p.z^2`
      return p.eqXToP(r);
    };

    EC.prototype.recoverPubKey = function(msg, signature$1, j, enc) {
      assert$5((3 & j) === j, 'The recovery param is more than two bits');
      signature$1 = new signature(signature$1, enc);

      var n = this.n;
      var e = new bn$1(msg);
      var r = signature$1.r;
      var s = signature$1.s;

      // A set LSB signifies that the y-coordinate is odd
      var isYOdd = j & 1;
      var isSecondKey = j >> 1;
      if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error('Unable to find sencond key candinate');

      // 1.1. Let x = r + jn.
      if (isSecondKey)
        r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
      else
        r = this.curve.pointFromX(r, isYOdd);

      var rInv = signature$1.r.invm(n);
      var s1 = n.sub(e).mul(rInv).umod(n);
      var s2 = s.mul(rInv).umod(n);

      // 1.6.1 Compute Q = r^-1 (sR -  eG)
      //               Q = r^-1 (sR + -eG)
      return this.g.mulAdd(s1, r, s2);
    };

    EC.prototype.getKeyRecoveryParam = function(e, signature$1, Q, enc) {
      signature$1 = new signature(signature$1, enc);
      if (signature$1.recoveryParam !== null)
        return signature$1.recoveryParam;

      for (var i = 0; i < 4; i++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e, signature$1, i);
        } catch (e) {
          continue;
        }

        if (Qprime.eq(Q))
          return i;
      }
      throw new Error('Unable to find valid recovery factor');
    };

    var elliptic_1 = createCommonjsModule$3(function (module, exports) {

    var elliptic = exports;

    elliptic.version = /*RicMoo:ethers*/{ version: "6.5.4" }.version;
    elliptic.utils = utils_1$1;
    elliptic.rand = /*RicMoo:ethers:require(brorand)*/(function() { throw new Error('unsupported'); });
    elliptic.curve = curve_1;
    elliptic.curves = curves_1;

    // Protocols
    elliptic.ec = ec;
    elliptic.eddsa = /*RicMoo:ethers:require(./elliptic/eddsa)*/(null);
    });

    var EC$1 = elliptic_1.ec;

    const version$g = "signing-key/5.7.0";

    const logger$t = new Logger(version$g);
    let _curve = null;
    function getCurve() {
        if (!_curve) {
            _curve = new EC$1("secp256k1");
        }
        return _curve;
    }
    class SigningKey {
        constructor(privateKey) {
            defineReadOnly(this, "curve", "secp256k1");
            defineReadOnly(this, "privateKey", hexlify(privateKey));
            if (hexDataLength(this.privateKey) !== 32) {
                logger$t.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
            }
            const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
            defineReadOnly(this, "publicKey", "0x" + keyPair.getPublic(false, "hex"));
            defineReadOnly(this, "compressedPublicKey", "0x" + keyPair.getPublic(true, "hex"));
            defineReadOnly(this, "_isSigningKey", true);
        }
        _addPoint(other) {
            const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));
            const p1 = getCurve().keyFromPublic(arrayify(other));
            return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
        }
        signDigest(digest) {
            const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
            const digestBytes = arrayify(digest);
            if (digestBytes.length !== 32) {
                logger$t.throwArgumentError("bad digest length", "digest", digest);
            }
            const signature = keyPair.sign(digestBytes, { canonical: true });
            return splitSignature({
                recoveryParam: signature.recoveryParam,
                r: hexZeroPad("0x" + signature.r.toString(16), 32),
                s: hexZeroPad("0x" + signature.s.toString(16), 32),
            });
        }
        computeSharedSecret(otherKey) {
            const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
            const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));
            return hexZeroPad("0x" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);
        }
        static isSigningKey(value) {
            return !!(value && value._isSigningKey);
        }
    }
    function recoverPublicKey(digest, signature) {
        const sig = splitSignature(signature);
        const rs = { r: arrayify(sig.r), s: arrayify(sig.s) };
        return "0x" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode("hex", false);
    }
    function computePublicKey(key, compressed) {
        const bytes = arrayify(key);
        if (bytes.length === 32) {
            const signingKey = new SigningKey(bytes);
            if (compressed) {
                return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
            }
            return signingKey.publicKey;
        }
        else if (bytes.length === 33) {
            if (compressed) {
                return hexlify(bytes);
            }
            return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
        }
        else if (bytes.length === 65) {
            if (!compressed) {
                return hexlify(bytes);
            }
            return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
        }
        return logger$t.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
    }

    var lib_esm$b = /*#__PURE__*/Object.freeze({
        __proto__: null,
        SigningKey: SigningKey,
        recoverPublicKey: recoverPublicKey,
        computePublicKey: computePublicKey
    });

    const version$f = "transactions/5.7.0";

    const logger$s = new Logger(version$f);
    var TransactionTypes;
    (function (TransactionTypes) {
        TransactionTypes[TransactionTypes["legacy"] = 0] = "legacy";
        TransactionTypes[TransactionTypes["eip2930"] = 1] = "eip2930";
        TransactionTypes[TransactionTypes["eip1559"] = 2] = "eip1559";
    })(TransactionTypes || (TransactionTypes = {}));
    ///////////////////////////////
    function handleAddress(value) {
        if (value === "0x") {
            return null;
        }
        return getAddress(value);
    }
    function handleNumber(value) {
        if (value === "0x") {
            return Zero$1;
        }
        return BigNumber.from(value);
    }
    // Legacy Transaction Fields
    const transactionFields = [
        { name: "nonce", maxLength: 32, numeric: true },
        { name: "gasPrice", maxLength: 32, numeric: true },
        { name: "gasLimit", maxLength: 32, numeric: true },
        { name: "to", length: 20 },
        { name: "value", maxLength: 32, numeric: true },
        { name: "data" },
    ];
    const allowedTransactionKeys$2 = {
        chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, type: true, value: true
    };
    function computeAddress(key) {
        const publicKey = computePublicKey(key);
        return getAddress(hexDataSlice(keccak256$1(hexDataSlice(publicKey, 1)), 12));
    }
    function recoverAddress(digest, signature) {
        return computeAddress(recoverPublicKey(arrayify(digest), signature));
    }
    function formatNumber(value, name) {
        const result = stripZeros(BigNumber.from(value).toHexString());
        if (result.length > 32) {
            logger$s.throwArgumentError("invalid length for " + name, ("transaction:" + name), value);
        }
        return result;
    }
    function accessSetify(addr, storageKeys) {
        return {
            address: getAddress(addr),
            storageKeys: (storageKeys || []).map((storageKey, index) => {
                if (hexDataLength(storageKey) !== 32) {
                    logger$s.throwArgumentError("invalid access list storageKey", `accessList[${addr}:${index}]`, storageKey);
                }
                return storageKey.toLowerCase();
            })
        };
    }
    function accessListify(value) {
        if (Array.isArray(value)) {
            return value.map((set, index) => {
                if (Array.isArray(set)) {
                    if (set.length > 2) {
                        logger$s.throwArgumentError("access list expected to be [ address, storageKeys[] ]", `value[${index}]`, set);
                    }
                    return accessSetify(set[0], set[1]);
                }
                return accessSetify(set.address, set.storageKeys);
            });
        }
        const result = Object.keys(value).map((addr) => {
            const storageKeys = value[addr].reduce((accum, storageKey) => {
                accum[storageKey] = true;
                return accum;
            }, {});
            return accessSetify(addr, Object.keys(storageKeys).sort());
        });
        result.sort((a, b) => (a.address.localeCompare(b.address)));
        return result;
    }
    function formatAccessList(value) {
        return accessListify(value).map((set) => [set.address, set.storageKeys]);
    }
    function _serializeEip1559(transaction, signature) {
        // If there is an explicit gasPrice, make sure it matches the
        // EIP-1559 fees; otherwise they may not understand what they
        // think they are setting in terms of fee.
        if (transaction.gasPrice != null) {
            const gasPrice = BigNumber.from(transaction.gasPrice);
            const maxFeePerGas = BigNumber.from(transaction.maxFeePerGas || 0);
            if (!gasPrice.eq(maxFeePerGas)) {
                logger$s.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
                    gasPrice, maxFeePerGas
                });
            }
        }
        const fields = [
            formatNumber(transaction.chainId || 0, "chainId"),
            formatNumber(transaction.nonce || 0, "nonce"),
            formatNumber(transaction.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
            formatNumber(transaction.maxFeePerGas || 0, "maxFeePerGas"),
            formatNumber(transaction.gasLimit || 0, "gasLimit"),
            ((transaction.to != null) ? getAddress(transaction.to) : "0x"),
            formatNumber(transaction.value || 0, "value"),
            (transaction.data || "0x"),
            (formatAccessList(transaction.accessList || []))
        ];
        if (signature) {
            const sig = splitSignature(signature);
            fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
            fields.push(stripZeros(sig.r));
            fields.push(stripZeros(sig.s));
        }
        return hexConcat(["0x02", encode$7(fields)]);
    }
    function _serializeEip2930(transaction, signature) {
        const fields = [
            formatNumber(transaction.chainId || 0, "chainId"),
            formatNumber(transaction.nonce || 0, "nonce"),
            formatNumber(transaction.gasPrice || 0, "gasPrice"),
            formatNumber(transaction.gasLimit || 0, "gasLimit"),
            ((transaction.to != null) ? getAddress(transaction.to) : "0x"),
            formatNumber(transaction.value || 0, "value"),
            (transaction.data || "0x"),
            (formatAccessList(transaction.accessList || []))
        ];
        if (signature) {
            const sig = splitSignature(signature);
            fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
            fields.push(stripZeros(sig.r));
            fields.push(stripZeros(sig.s));
        }
        return hexConcat(["0x01", encode$7(fields)]);
    }
    // Legacy Transactions and EIP-155
    function _serialize(transaction, signature) {
        checkProperties(transaction, allowedTransactionKeys$2);
        const raw = [];
        transactionFields.forEach(function (fieldInfo) {
            let value = transaction[fieldInfo.name] || ([]);
            const options = {};
            if (fieldInfo.numeric) {
                options.hexPad = "left";
            }
            value = arrayify(hexlify(value, options));
            // Fixed-width field
            if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {
                logger$s.throwArgumentError("invalid length for " + fieldInfo.name, ("transaction:" + fieldInfo.name), value);
            }
            // Variable-width (with a maximum)
            if (fieldInfo.maxLength) {
                value = stripZeros(value);
                if (value.length > fieldInfo.maxLength) {
                    logger$s.throwArgumentError("invalid length for " + fieldInfo.name, ("transaction:" + fieldInfo.name), value);
                }
            }
            raw.push(hexlify(value));
        });
        let chainId = 0;
        if (transaction.chainId != null) {
            // A chainId was provided; if non-zero we'll use EIP-155
            chainId = transaction.chainId;
            if (typeof (chainId) !== "number") {
                logger$s.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
            }
        }
        else if (signature && !isBytesLike(signature) && signature.v > 28) {
            // No chainId provided, but the signature is signing with EIP-155; derive chainId
            chainId = Math.floor((signature.v - 35) / 2);
        }
        // We have an EIP-155 transaction (chainId was specified and non-zero)
        if (chainId !== 0) {
            raw.push(hexlify(chainId)); // @TODO: hexValue?
            raw.push("0x");
            raw.push("0x");
        }
        // Requesting an unsigned transaction
        if (!signature) {
            return encode$7(raw);
        }
        // The splitSignature will ensure the transaction has a recoveryParam in the
        // case that the signTransaction function only adds a v.
        const sig = splitSignature(signature);
        // We pushed a chainId and null r, s on for hashing only; remove those
        let v = 27 + sig.recoveryParam;
        if (chainId !== 0) {
            raw.pop();
            raw.pop();
            raw.pop();
            v += chainId * 2 + 8;
            // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!
            if (sig.v > 28 && sig.v !== v) {
                logger$s.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
            }
        }
        else if (sig.v !== v) {
            logger$s.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
        }
        raw.push(hexlify(v));
        raw.push(stripZeros(arrayify(sig.r)));
        raw.push(stripZeros(arrayify(sig.s)));
        return encode$7(raw);
    }
    function serialize$1(transaction, signature) {
        // Legacy and EIP-155 Transactions
        if (transaction.type == null || transaction.type === 0) {
            if (transaction.accessList != null) {
                logger$s.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", transaction);
            }
            return _serialize(transaction, signature);
        }
        // Typed Transactions (EIP-2718)
        switch (transaction.type) {
            case 1:
                return _serializeEip2930(transaction, signature);
            case 2:
                return _serializeEip1559(transaction, signature);
        }
        return logger$s.throwError(`unsupported transaction type: ${transaction.type}`, Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "serializeTransaction",
            transactionType: transaction.type
        });
    }
    function _parseEipSignature(tx, fields, serialize) {
        try {
            const recid = handleNumber(fields[0]).toNumber();
            if (recid !== 0 && recid !== 1) {
                throw new Error("bad recid");
            }
            tx.v = recid;
        }
        catch (error) {
            logger$s.throwArgumentError("invalid v for transaction type: 1", "v", fields[0]);
        }
        tx.r = hexZeroPad(fields[1], 32);
        tx.s = hexZeroPad(fields[2], 32);
        try {
            const digest = keccak256$1(serialize(tx));
            tx.from = recoverAddress(digest, { r: tx.r, s: tx.s, recoveryParam: tx.v });
        }
        catch (error) { }
    }
    function _parseEip1559(payload) {
        const transaction = decode$6(payload.slice(1));
        if (transaction.length !== 9 && transaction.length !== 12) {
            logger$s.throwArgumentError("invalid component count for transaction type: 2", "payload", hexlify(payload));
        }
        const maxPriorityFeePerGas = handleNumber(transaction[2]);
        const maxFeePerGas = handleNumber(transaction[3]);
        const tx = {
            type: 2,
            chainId: handleNumber(transaction[0]).toNumber(),
            nonce: handleNumber(transaction[1]).toNumber(),
            maxPriorityFeePerGas: maxPriorityFeePerGas,
            maxFeePerGas: maxFeePerGas,
            gasPrice: null,
            gasLimit: handleNumber(transaction[4]),
            to: handleAddress(transaction[5]),
            value: handleNumber(transaction[6]),
            data: transaction[7],
            accessList: accessListify(transaction[8]),
        };
        // Unsigned EIP-1559 Transaction
        if (transaction.length === 9) {
            return tx;
        }
        tx.hash = keccak256$1(payload);
        _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);
        return tx;
    }
    function _parseEip2930(payload) {
        const transaction = decode$6(payload.slice(1));
        if (transaction.length !== 8 && transaction.length !== 11) {
            logger$s.throwArgumentError("invalid component count for transaction type: 1", "payload", hexlify(payload));
        }
        const tx = {
            type: 1,
            chainId: handleNumber(transaction[0]).toNumber(),
            nonce: handleNumber(transaction[1]).toNumber(),
            gasPrice: handleNumber(transaction[2]),
            gasLimit: handleNumber(transaction[3]),
            to: handleAddress(transaction[4]),
            value: handleNumber(transaction[5]),
            data: transaction[6],
            accessList: accessListify(transaction[7])
        };
        // Unsigned EIP-2930 Transaction
        if (transaction.length === 8) {
            return tx;
        }
        tx.hash = keccak256$1(payload);
        _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);
        return tx;
    }
    // Legacy Transactions and EIP-155
    function _parse(rawTransaction) {
        const transaction = decode$6(rawTransaction);
        if (transaction.length !== 9 && transaction.length !== 6) {
            logger$s.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
        }
        const tx = {
            nonce: handleNumber(transaction[0]).toNumber(),
            gasPrice: handleNumber(transaction[1]),
            gasLimit: handleNumber(transaction[2]),
            to: handleAddress(transaction[3]),
            value: handleNumber(transaction[4]),
            data: transaction[5],
            chainId: 0
        };
        // Legacy unsigned transaction
        if (transaction.length === 6) {
            return tx;
        }
        try {
            tx.v = BigNumber.from(transaction[6]).toNumber();
        }
        catch (error) {
            // @TODO: What makes snese to do? The v is too big
            return tx;
        }
        tx.r = hexZeroPad(transaction[7], 32);
        tx.s = hexZeroPad(transaction[8], 32);
        if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {
            // EIP-155 unsigned transaction
            tx.chainId = tx.v;
            tx.v = 0;
        }
        else {
            // Signed Transaction
            tx.chainId = Math.floor((tx.v - 35) / 2);
            if (tx.chainId < 0) {
                tx.chainId = 0;
            }
            let recoveryParam = tx.v - 27;
            const raw = transaction.slice(0, 6);
            if (tx.chainId !== 0) {
                raw.push(hexlify(tx.chainId));
                raw.push("0x");
                raw.push("0x");
                recoveryParam -= tx.chainId * 2 + 8;
            }
            const digest = keccak256$1(encode$7(raw));
            try {
                tx.from = recoverAddress(digest, { r: hexlify(tx.r), s: hexlify(tx.s), recoveryParam: recoveryParam });
            }
            catch (error) { }
            tx.hash = keccak256$1(rawTransaction);
        }
        tx.type = null;
        return tx;
    }
    function parse$1(rawTransaction) {
        const payload = arrayify(rawTransaction);
        // Legacy and EIP-155 Transactions
        if (payload[0] > 0x7f) {
            return _parse(payload);
        }
        // Typed Transaction (EIP-2718)
        switch (payload[0]) {
            case 1:
                return _parseEip2930(payload);
            case 2:
                return _parseEip1559(payload);
        }
        return logger$s.throwError(`unsupported transaction type: ${payload[0]}`, Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "parseTransaction",
            transactionType: payload[0]
        });
    }

    var lib_esm$a = /*#__PURE__*/Object.freeze({
        __proto__: null,
        get TransactionTypes () { return TransactionTypes; },
        computeAddress: computeAddress,
        recoverAddress: recoverAddress,
        accessListify: accessListify,
        serialize: serialize$1,
        parse: parse$1
    });

    const version$e = "contracts/5.7.0";

    var __awaiter$i = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$r = new Logger(version$e);
    ///////////////////////////////
    const allowedTransactionKeys$1 = {
        chainId: true, data: true, from: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,
        type: true, accessList: true,
        maxFeePerGas: true, maxPriorityFeePerGas: true,
        customData: true,
        ccipReadEnabled: true
    };
    function resolveName(resolver, nameOrPromise) {
        return __awaiter$i(this, void 0, void 0, function* () {
            const name = yield nameOrPromise;
            if (typeof (name) !== "string") {
                logger$r.throwArgumentError("invalid address or ENS name", "name", name);
            }
            // If it is already an address, just use it (after adding checksum)
            try {
                return getAddress(name);
            }
            catch (error) { }
            if (!resolver) {
                logger$r.throwError("a provider or signer is needed to resolve ENS names", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "resolveName"
                });
            }
            const address = yield resolver.resolveName(name);
            if (address == null) {
                logger$r.throwArgumentError("resolver or addr is not configured for ENS name", "name", name);
            }
            return address;
        });
    }
    // Recursively replaces ENS names with promises to resolve the name and resolves all properties
    function resolveAddresses(resolver, value, paramType) {
        return __awaiter$i(this, void 0, void 0, function* () {
            if (Array.isArray(paramType)) {
                return yield Promise.all(paramType.map((paramType, index) => {
                    return resolveAddresses(resolver, ((Array.isArray(value)) ? value[index] : value[paramType.name]), paramType);
                }));
            }
            if (paramType.type === "address") {
                return yield resolveName(resolver, value);
            }
            if (paramType.type === "tuple") {
                return yield resolveAddresses(resolver, value, paramType.components);
            }
            if (paramType.baseType === "array") {
                if (!Array.isArray(value)) {
                    return Promise.reject(logger$r.makeError("invalid value for array", Logger.errors.INVALID_ARGUMENT, {
                        argument: "value",
                        value
                    }));
                }
                return yield Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));
            }
            return value;
        });
    }
    function populateTransaction(contract, fragment, args) {
        return __awaiter$i(this, void 0, void 0, function* () {
            // If an extra argument is given, it is overrides
            let overrides = {};
            if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === "object") {
                overrides = shallowCopy(args.pop());
            }
            // Make sure the parameter count matches
            logger$r.checkArgumentCount(args.length, fragment.inputs.length, "passed to contract");
            // Populate "from" override (allow promises)
            if (contract.signer) {
                if (overrides.from) {
                    // Contracts with a Signer are from the Signer's frame-of-reference;
                    // but we allow overriding "from" if it matches the signer
                    overrides.from = resolveProperties({
                        override: resolveName(contract.signer, overrides.from),
                        signer: contract.signer.getAddress()
                    }).then((check) => __awaiter$i(this, void 0, void 0, function* () {
                        if (getAddress(check.signer) !== check.override) {
                            logger$r.throwError("Contract with a Signer cannot override from", Logger.errors.UNSUPPORTED_OPERATION, {
                                operation: "overrides.from"
                            });
                        }
                        return check.override;
                    }));
                }
                else {
                    overrides.from = contract.signer.getAddress();
                }
            }
            else if (overrides.from) {
                overrides.from = resolveName(contract.provider, overrides.from);
                //} else {
                // Contracts without a signer can override "from", and if
                // unspecified the zero address is used
                //overrides.from = AddressZero;
            }
            // Wait for all dependencies to be resolved (prefer the signer over the provider)
            const resolved = yield resolveProperties({
                args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),
                address: contract.resolvedAddress,
                overrides: (resolveProperties(overrides) || {})
            });
            // The ABI coded transaction
            const data = contract.interface.encodeFunctionData(fragment, resolved.args);
            const tx = {
                data: data,
                to: resolved.address
            };
            // Resolved Overrides
            const ro = resolved.overrides;
            // Populate simple overrides
            if (ro.nonce != null) {
                tx.nonce = BigNumber.from(ro.nonce).toNumber();
            }
            if (ro.gasLimit != null) {
                tx.gasLimit = BigNumber.from(ro.gasLimit);
            }
            if (ro.gasPrice != null) {
                tx.gasPrice = BigNumber.from(ro.gasPrice);
            }
            if (ro.maxFeePerGas != null) {
                tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);
            }
            if (ro.maxPriorityFeePerGas != null) {
                tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);
            }
            if (ro.from != null) {
                tx.from = ro.from;
            }
            if (ro.type != null) {
                tx.type = ro.type;
            }
            if (ro.accessList != null) {
                tx.accessList = accessListify(ro.accessList);
            }
            // If there was no "gasLimit" override, but the ABI specifies a default, use it
            if (tx.gasLimit == null && fragment.gas != null) {
                // Compute the intrinsic gas cost for this transaction
                // @TODO: This is based on the yellow paper as of Petersburg; this is something
                // we may wish to parameterize in v6 as part of the Network object. Since this
                // is always a non-nil to address, we can ignore G_create, but may wish to add
                // similar logic to the ContractFactory.
                let intrinsic = 21000;
                const bytes = arrayify(data);
                for (let i = 0; i < bytes.length; i++) {
                    intrinsic += 4;
                    if (bytes[i]) {
                        intrinsic += 64;
                    }
                }
                tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);
            }
            // Populate "value" override
            if (ro.value) {
                const roValue = BigNumber.from(ro.value);
                if (!roValue.isZero() && !fragment.payable) {
                    logger$r.throwError("non-payable method cannot override value", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "overrides.value",
                        value: overrides.value
                    });
                }
                tx.value = roValue;
            }
            if (ro.customData) {
                tx.customData = shallowCopy(ro.customData);
            }
            if (ro.ccipReadEnabled) {
                tx.ccipReadEnabled = !!ro.ccipReadEnabled;
            }
            // Remove the overrides
            delete overrides.nonce;
            delete overrides.gasLimit;
            delete overrides.gasPrice;
            delete overrides.from;
            delete overrides.value;
            delete overrides.type;
            delete overrides.accessList;
            delete overrides.maxFeePerGas;
            delete overrides.maxPriorityFeePerGas;
            delete overrides.customData;
            delete overrides.ccipReadEnabled;
            // Make sure there are no stray overrides, which may indicate a
            // typo or using an unsupported key.
            const leftovers = Object.keys(overrides).filter((key) => (overrides[key] != null));
            if (leftovers.length) {
                logger$r.throwError(`cannot override ${leftovers.map((l) => JSON.stringify(l)).join(",")}`, Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "overrides",
                    overrides: leftovers
                });
            }
            return tx;
        });
    }
    function buildPopulate(contract, fragment) {
        return function (...args) {
            return populateTransaction(contract, fragment, args);
        };
    }
    function buildEstimate(contract, fragment) {
        const signerOrProvider = (contract.signer || contract.provider);
        return function (...args) {
            return __awaiter$i(this, void 0, void 0, function* () {
                if (!signerOrProvider) {
                    logger$r.throwError("estimate require a provider or signer", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "estimateGas"
                    });
                }
                const tx = yield populateTransaction(contract, fragment, args);
                return yield signerOrProvider.estimateGas(tx);
            });
        };
    }
    function addContractWait(contract, tx) {
        const wait = tx.wait.bind(tx);
        tx.wait = (confirmations) => {
            return wait(confirmations).then((receipt) => {
                receipt.events = receipt.logs.map((log) => {
                    let event = deepCopy(log);
                    let parsed = null;
                    try {
                        parsed = contract.interface.parseLog(log);
                    }
                    catch (e) { }
                    // Successfully parsed the event log; include it
                    if (parsed) {
                        event.args = parsed.args;
                        event.decode = (data, topics) => {
                            return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);
                        };
                        event.event = parsed.name;
                        event.eventSignature = parsed.signature;
                    }
                    // Useful operations
                    event.removeListener = () => { return contract.provider; };
                    event.getBlock = () => {
                        return contract.provider.getBlock(receipt.blockHash);
                    };
                    event.getTransaction = () => {
                        return contract.provider.getTransaction(receipt.transactionHash);
                    };
                    event.getTransactionReceipt = () => {
                        return Promise.resolve(receipt);
                    };
                    return event;
                });
                return receipt;
            });
        };
    }
    function buildCall(contract, fragment, collapseSimple) {
        const signerOrProvider = (contract.signer || contract.provider);
        return function (...args) {
            return __awaiter$i(this, void 0, void 0, function* () {
                // Extract the "blockTag" override if present
                let blockTag = undefined;
                if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === "object") {
                    const overrides = shallowCopy(args.pop());
                    if (overrides.blockTag != null) {
                        blockTag = yield overrides.blockTag;
                    }
                    delete overrides.blockTag;
                    args.push(overrides);
                }
                // If the contract was just deployed, wait until it is mined
                if (contract.deployTransaction != null) {
                    yield contract._deployed(blockTag);
                }
                // Call a node and get the result
                const tx = yield populateTransaction(contract, fragment, args);
                const result = yield signerOrProvider.call(tx, blockTag);
                try {
                    let value = contract.interface.decodeFunctionResult(fragment, result);
                    if (collapseSimple && fragment.outputs.length === 1) {
                        value = value[0];
                    }
                    return value;
                }
                catch (error) {
                    if (error.code === Logger.errors.CALL_EXCEPTION) {
                        error.address = contract.address;
                        error.args = args;
                        error.transaction = tx;
                    }
                    throw error;
                }
            });
        };
    }
    function buildSend(contract, fragment) {
        return function (...args) {
            return __awaiter$i(this, void 0, void 0, function* () {
                if (!contract.signer) {
                    logger$r.throwError("sending a transaction requires a signer", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "sendTransaction"
                    });
                }
                // If the contract was just deployed, wait until it is mined
                if (contract.deployTransaction != null) {
                    yield contract._deployed();
                }
                const txRequest = yield populateTransaction(contract, fragment, args);
                const tx = yield contract.signer.sendTransaction(txRequest);
                // Tweak the tx.wait so the receipt has extra properties
                addContractWait(contract, tx);
                return tx;
            });
        };
    }
    function buildDefault(contract, fragment, collapseSimple) {
        if (fragment.constant) {
            return buildCall(contract, fragment, collapseSimple);
        }
        return buildSend(contract, fragment);
    }
    function getEventTag$1(filter) {
        if (filter.address && (filter.topics == null || filter.topics.length === 0)) {
            return "*";
        }
        return (filter.address || "*") + "@" + (filter.topics ? filter.topics.map((topic) => {
            if (Array.isArray(topic)) {
                return topic.join("|");
            }
            return topic;
        }).join(":") : "");
    }
    class RunningEvent {
        constructor(tag, filter) {
            defineReadOnly(this, "tag", tag);
            defineReadOnly(this, "filter", filter);
            this._listeners = [];
        }
        addListener(listener, once) {
            this._listeners.push({ listener: listener, once: once });
        }
        removeListener(listener) {
            let done = false;
            this._listeners = this._listeners.filter((item) => {
                if (done || item.listener !== listener) {
                    return true;
                }
                done = true;
                return false;
            });
        }
        removeAllListeners() {
            this._listeners = [];
        }
        listeners() {
            return this._listeners.map((i) => i.listener);
        }
        listenerCount() {
            return this._listeners.length;
        }
        run(args) {
            const listenerCount = this.listenerCount();
            this._listeners = this._listeners.filter((item) => {
                const argsCopy = args.slice();
                // Call the callback in the next event loop
                setTimeout(() => {
                    item.listener.apply(this, argsCopy);
                }, 0);
                // Reschedule it if it not "once"
                return !(item.once);
            });
            return listenerCount;
        }
        prepareEvent(event) {
        }
        // Returns the array that will be applied to an emit
        getEmit(event) {
            return [event];
        }
    }
    class ErrorRunningEvent extends RunningEvent {
        constructor() {
            super("error", null);
        }
    }
    // @TODO Fragment should inherit Wildcard? and just override getEmit?
    //       or have a common abstract super class, with enough constructor
    //       options to configure both.
    // A Fragment Event will populate all the properties that Wildcard
    // will, and additionally dereference the arguments when emitting
    class FragmentRunningEvent extends RunningEvent {
        constructor(address, contractInterface, fragment, topics) {
            const filter = {
                address: address
            };
            let topic = contractInterface.getEventTopic(fragment);
            if (topics) {
                if (topic !== topics[0]) {
                    logger$r.throwArgumentError("topic mismatch", "topics", topics);
                }
                filter.topics = topics.slice();
            }
            else {
                filter.topics = [topic];
            }
            super(getEventTag$1(filter), filter);
            defineReadOnly(this, "address", address);
            defineReadOnly(this, "interface", contractInterface);
            defineReadOnly(this, "fragment", fragment);
        }
        prepareEvent(event) {
            super.prepareEvent(event);
            event.event = this.fragment.name;
            event.eventSignature = this.fragment.format();
            event.decode = (data, topics) => {
                return this.interface.decodeEventLog(this.fragment, data, topics);
            };
            try {
                event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);
            }
            catch (error) {
                event.args = null;
                event.decodeError = error;
            }
        }
        getEmit(event) {
            const errors = checkResultErrors(event.args);
            if (errors.length) {
                throw errors[0].error;
            }
            const args = (event.args || []).slice();
            args.push(event);
            return args;
        }
    }
    // A Wildcard Event will attempt to populate:
    //  - event            The name of the event name
    //  - eventSignature   The full signature of the event
    //  - decode           A function to decode data and topics
    //  - args             The decoded data and topics
    class WildcardRunningEvent extends RunningEvent {
        constructor(address, contractInterface) {
            super("*", { address: address });
            defineReadOnly(this, "address", address);
            defineReadOnly(this, "interface", contractInterface);
        }
        prepareEvent(event) {
            super.prepareEvent(event);
            try {
                const parsed = this.interface.parseLog(event);
                event.event = parsed.name;
                event.eventSignature = parsed.signature;
                event.decode = (data, topics) => {
                    return this.interface.decodeEventLog(parsed.eventFragment, data, topics);
                };
                event.args = parsed.args;
            }
            catch (error) {
                // No matching event
            }
        }
    }
    class BaseContract {
        constructor(addressOrName, contractInterface, signerOrProvider) {
            // @TODO: Maybe still check the addressOrName looks like a valid address or name?
            //address = getAddress(address);
            defineReadOnly(this, "interface", getStatic(new.target, "getInterface")(contractInterface));
            if (signerOrProvider == null) {
                defineReadOnly(this, "provider", null);
                defineReadOnly(this, "signer", null);
            }
            else if (Signer.isSigner(signerOrProvider)) {
                defineReadOnly(this, "provider", signerOrProvider.provider || null);
                defineReadOnly(this, "signer", signerOrProvider);
            }
            else if (Provider.isProvider(signerOrProvider)) {
                defineReadOnly(this, "provider", signerOrProvider);
                defineReadOnly(this, "signer", null);
            }
            else {
                logger$r.throwArgumentError("invalid signer or provider", "signerOrProvider", signerOrProvider);
            }
            defineReadOnly(this, "callStatic", {});
            defineReadOnly(this, "estimateGas", {});
            defineReadOnly(this, "functions", {});
            defineReadOnly(this, "populateTransaction", {});
            defineReadOnly(this, "filters", {});
            {
                const uniqueFilters = {};
                Object.keys(this.interface.events).forEach((eventSignature) => {
                    const event = this.interface.events[eventSignature];
                    defineReadOnly(this.filters, eventSignature, (...args) => {
                        return {
                            address: this.address,
                            topics: this.interface.encodeFilterTopics(event, args)
                        };
                    });
                    if (!uniqueFilters[event.name]) {
                        uniqueFilters[event.name] = [];
                    }
                    uniqueFilters[event.name].push(eventSignature);
                });
                Object.keys(uniqueFilters).forEach((name) => {
                    const filters = uniqueFilters[name];
                    if (filters.length === 1) {
                        defineReadOnly(this.filters, name, this.filters[filters[0]]);
                    }
                    else {
                        logger$r.warn(`Duplicate definition of ${name} (${filters.join(", ")})`);
                    }
                });
            }
            defineReadOnly(this, "_runningEvents", {});
            defineReadOnly(this, "_wrappedEmits", {});
            if (addressOrName == null) {
                logger$r.throwArgumentError("invalid contract address or ENS name", "addressOrName", addressOrName);
            }
            defineReadOnly(this, "address", addressOrName);
            if (this.provider) {
                defineReadOnly(this, "resolvedAddress", resolveName(this.provider, addressOrName));
            }
            else {
                try {
                    defineReadOnly(this, "resolvedAddress", Promise.resolve(getAddress(addressOrName)));
                }
                catch (error) {
                    // Without a provider, we cannot use ENS names
                    logger$r.throwError("provider is required to use ENS name as contract address", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "new Contract"
                    });
                }
            }
            // Swallow bad ENS names to prevent Unhandled Exceptions
            this.resolvedAddress.catch((e) => { });
            const uniqueNames = {};
            const uniqueSignatures = {};
            Object.keys(this.interface.functions).forEach((signature) => {
                const fragment = this.interface.functions[signature];
                // Check that the signature is unique; if not the ABI generation has
                // not been cleaned or may be incorrectly generated
                if (uniqueSignatures[signature]) {
                    logger$r.warn(`Duplicate ABI entry for ${JSON.stringify(signature)}`);
                    return;
                }
                uniqueSignatures[signature] = true;
                // Track unique names; we only expose bare named functions if they
                // are ambiguous
                {
                    const name = fragment.name;
                    if (!uniqueNames[`%${name}`]) {
                        uniqueNames[`%${name}`] = [];
                    }
                    uniqueNames[`%${name}`].push(signature);
                }
                if (this[signature] == null) {
                    defineReadOnly(this, signature, buildDefault(this, fragment, true));
                }
                // We do not collapse simple calls on this bucket, which allows
                // frameworks to safely use this without introspection as well as
                // allows decoding error recovery.
                if (this.functions[signature] == null) {
                    defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));
                }
                if (this.callStatic[signature] == null) {
                    defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));
                }
                if (this.populateTransaction[signature] == null) {
                    defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));
                }
                if (this.estimateGas[signature] == null) {
                    defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));
                }
            });
            Object.keys(uniqueNames).forEach((name) => {
                // Ambiguous names to not get attached as bare names
                const signatures = uniqueNames[name];
                if (signatures.length > 1) {
                    return;
                }
                // Strip off the leading "%" used for prototype protection
                name = name.substring(1);
                const signature = signatures[0];
                // If overwriting a member property that is null, swallow the error
                try {
                    if (this[name] == null) {
                        defineReadOnly(this, name, this[signature]);
                    }
                }
                catch (e) { }
                if (this.functions[name] == null) {
                    defineReadOnly(this.functions, name, this.functions[signature]);
                }
                if (this.callStatic[name] == null) {
                    defineReadOnly(this.callStatic, name, this.callStatic[signature]);
                }
                if (this.populateTransaction[name] == null) {
                    defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);
                }
                if (this.estimateGas[name] == null) {
                    defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);
                }
            });
        }
        static getContractAddress(transaction) {
            return getContractAddress(transaction);
        }
        static getInterface(contractInterface) {
            if (Interface.isInterface(contractInterface)) {
                return contractInterface;
            }
            return new Interface(contractInterface);
        }
        // @TODO: Allow timeout?
        deployed() {
            return this._deployed();
        }
        _deployed(blockTag) {
            if (!this._deployedPromise) {
                // If we were just deployed, we know the transaction we should occur in
                if (this.deployTransaction) {
                    this._deployedPromise = this.deployTransaction.wait().then(() => {
                        return this;
                    });
                }
                else {
                    // @TODO: Once we allow a timeout to be passed in, we will wait
                    // up to that many blocks for getCode
                    // Otherwise, poll for our code to be deployed
                    this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {
                        if (code === "0x") {
                            logger$r.throwError("contract not deployed", Logger.errors.UNSUPPORTED_OPERATION, {
                                contractAddress: this.address,
                                operation: "getDeployed"
                            });
                        }
                        return this;
                    });
                }
            }
            return this._deployedPromise;
        }
        // @TODO:
        // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>
        // @TODO:
        // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>
        fallback(overrides) {
            if (!this.signer) {
                logger$r.throwError("sending a transactions require a signer", Logger.errors.UNSUPPORTED_OPERATION, { operation: "sendTransaction(fallback)" });
            }
            const tx = shallowCopy(overrides || {});
            ["from", "to"].forEach(function (key) {
                if (tx[key] == null) {
                    return;
                }
                logger$r.throwError("cannot override " + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });
            });
            tx.to = this.resolvedAddress;
            return this.deployed().then(() => {
                return this.signer.sendTransaction(tx);
            });
        }
        // Reconnect to a different signer or provider
        connect(signerOrProvider) {
            if (typeof (signerOrProvider) === "string") {
                signerOrProvider = new VoidSigner(signerOrProvider, this.provider);
            }
            const contract = new (this.constructor)(this.address, this.interface, signerOrProvider);
            if (this.deployTransaction) {
                defineReadOnly(contract, "deployTransaction", this.deployTransaction);
            }
            return contract;
        }
        // Re-attach to a different on-chain instance of this contract
        attach(addressOrName) {
            return new (this.constructor)(addressOrName, this.interface, this.signer || this.provider);
        }
        static isIndexed(value) {
            return Indexed.isIndexed(value);
        }
        _normalizeRunningEvent(runningEvent) {
            // Already have an instance of this event running; we can re-use it
            if (this._runningEvents[runningEvent.tag]) {
                return this._runningEvents[runningEvent.tag];
            }
            return runningEvent;
        }
        _getRunningEvent(eventName) {
            if (typeof (eventName) === "string") {
                // Listen for "error" events (if your contract has an error event, include
                // the full signature to bypass this special event keyword)
                if (eventName === "error") {
                    return this._normalizeRunningEvent(new ErrorRunningEvent());
                }
                // Listen for any event that is registered
                if (eventName === "event") {
                    return this._normalizeRunningEvent(new RunningEvent("event", null));
                }
                // Listen for any event
                if (eventName === "*") {
                    return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
                }
                // Get the event Fragment (throws if ambiguous/unknown event)
                const fragment = this.interface.getEvent(eventName);
                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));
            }
            // We have topics to filter by...
            if (eventName.topics && eventName.topics.length > 0) {
                // Is it a known topichash? (throws if no matching topichash)
                try {
                    const topic = eventName.topics[0];
                    if (typeof (topic) !== "string") {
                        throw new Error("invalid topic"); // @TODO: May happen for anonymous events
                    }
                    const fragment = this.interface.getEvent(topic);
                    return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));
                }
                catch (error) { }
                // Filter by the unknown topichash
                const filter = {
                    address: this.address,
                    topics: eventName.topics
                };
                return this._normalizeRunningEvent(new RunningEvent(getEventTag$1(filter), filter));
            }
            return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
        }
        _checkRunningEvents(runningEvent) {
            if (runningEvent.listenerCount() === 0) {
                delete this._runningEvents[runningEvent.tag];
                // If we have a poller for this, remove it
                const emit = this._wrappedEmits[runningEvent.tag];
                if (emit && runningEvent.filter) {
                    this.provider.off(runningEvent.filter, emit);
                    delete this._wrappedEmits[runningEvent.tag];
                }
            }
        }
        // Subclasses can override this to gracefully recover
        // from parse errors if they wish
        _wrapEvent(runningEvent, log, listener) {
            const event = deepCopy(log);
            event.removeListener = () => {
                if (!listener) {
                    return;
                }
                runningEvent.removeListener(listener);
                this._checkRunningEvents(runningEvent);
            };
            event.getBlock = () => { return this.provider.getBlock(log.blockHash); };
            event.getTransaction = () => { return this.provider.getTransaction(log.transactionHash); };
            event.getTransactionReceipt = () => { return this.provider.getTransactionReceipt(log.transactionHash); };
            // This may throw if the topics and data mismatch the signature
            runningEvent.prepareEvent(event);
            return event;
        }
        _addEventListener(runningEvent, listener, once) {
            if (!this.provider) {
                logger$r.throwError("events require a provider or a signer with a provider", Logger.errors.UNSUPPORTED_OPERATION, { operation: "once" });
            }
            runningEvent.addListener(listener, once);
            // Track this running event and its listeners (may already be there; but no hard in updating)
            this._runningEvents[runningEvent.tag] = runningEvent;
            // If we are not polling the provider, start polling
            if (!this._wrappedEmits[runningEvent.tag]) {
                const wrappedEmit = (log) => {
                    let event = this._wrapEvent(runningEvent, log, listener);
                    // Try to emit the result for the parameterized event...
                    if (event.decodeError == null) {
                        try {
                            const args = runningEvent.getEmit(event);
                            this.emit(runningEvent.filter, ...args);
                        }
                        catch (error) {
                            event.decodeError = error.error;
                        }
                    }
                    // Always emit "event" for fragment-base events
                    if (runningEvent.filter != null) {
                        this.emit("event", event);
                    }
                    // Emit "error" if there was an error
                    if (event.decodeError != null) {
                        this.emit("error", event.decodeError, event);
                    }
                };
                this._wrappedEmits[runningEvent.tag] = wrappedEmit;
                // Special events, like "error" do not have a filter
                if (runningEvent.filter != null) {
                    this.provider.on(runningEvent.filter, wrappedEmit);
                }
            }
        }
        queryFilter(event, fromBlockOrBlockhash, toBlock) {
            const runningEvent = this._getRunningEvent(event);
            const filter = shallowCopy(runningEvent.filter);
            if (typeof (fromBlockOrBlockhash) === "string" && isHexString(fromBlockOrBlockhash, 32)) {
                if (toBlock != null) {
                    logger$r.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", toBlock);
                }
                filter.blockHash = fromBlockOrBlockhash;
            }
            else {
                filter.fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash : 0);
                filter.toBlock = ((toBlock != null) ? toBlock : "latest");
            }
            return this.provider.getLogs(filter).then((logs) => {
                return logs.map((log) => this._wrapEvent(runningEvent, log, null));
            });
        }
        on(event, listener) {
            this._addEventListener(this._getRunningEvent(event), listener, false);
            return this;
        }
        once(event, listener) {
            this._addEventListener(this._getRunningEvent(event), listener, true);
            return this;
        }
        emit(eventName, ...args) {
            if (!this.provider) {
                return false;
            }
            const runningEvent = this._getRunningEvent(eventName);
            const result = (runningEvent.run(args) > 0);
            // May have drained all the "once" events; check for living events
            this._checkRunningEvents(runningEvent);
            return result;
        }
        listenerCount(eventName) {
            if (!this.provider) {
                return 0;
            }
            if (eventName == null) {
                return Object.keys(this._runningEvents).reduce((accum, key) => {
                    return accum + this._runningEvents[key].listenerCount();
                }, 0);
            }
            return this._getRunningEvent(eventName).listenerCount();
        }
        listeners(eventName) {
            if (!this.provider) {
                return [];
            }
            if (eventName == null) {
                const result = [];
                for (let tag in this._runningEvents) {
                    this._runningEvents[tag].listeners().forEach((listener) => {
                        result.push(listener);
                    });
                }
                return result;
            }
            return this._getRunningEvent(eventName).listeners();
        }
        removeAllListeners(eventName) {
            if (!this.provider) {
                return this;
            }
            if (eventName == null) {
                for (const tag in this._runningEvents) {
                    const runningEvent = this._runningEvents[tag];
                    runningEvent.removeAllListeners();
                    this._checkRunningEvents(runningEvent);
                }
                return this;
            }
            // Delete any listeners
            const runningEvent = this._getRunningEvent(eventName);
            runningEvent.removeAllListeners();
            this._checkRunningEvents(runningEvent);
            return this;
        }
        off(eventName, listener) {
            if (!this.provider) {
                return this;
            }
            const runningEvent = this._getRunningEvent(eventName);
            runningEvent.removeListener(listener);
            this._checkRunningEvents(runningEvent);
            return this;
        }
        removeListener(eventName, listener) {
            return this.off(eventName, listener);
        }
    }
    class Contract extends BaseContract {
    }
    class ContractFactory {
        constructor(contractInterface, bytecode, signer) {
            let bytecodeHex = null;
            if (typeof (bytecode) === "string") {
                bytecodeHex = bytecode;
            }
            else if (isBytes(bytecode)) {
                bytecodeHex = hexlify(bytecode);
            }
            else if (bytecode && typeof (bytecode.object) === "string") {
                // Allow the bytecode object from the Solidity compiler
                bytecodeHex = bytecode.object;
            }
            else {
                // Crash in the next verification step
                bytecodeHex = "!";
            }
            // Make sure it is 0x prefixed
            if (bytecodeHex.substring(0, 2) !== "0x") {
                bytecodeHex = "0x" + bytecodeHex;
            }
            // Make sure the final result is valid bytecode
            if (!isHexString(bytecodeHex) || (bytecodeHex.length % 2)) {
                logger$r.throwArgumentError("invalid bytecode", "bytecode", bytecode);
            }
            // If we have a signer, make sure it is valid
            if (signer && !Signer.isSigner(signer)) {
                logger$r.throwArgumentError("invalid signer", "signer", signer);
            }
            defineReadOnly(this, "bytecode", bytecodeHex);
            defineReadOnly(this, "interface", getStatic(new.target, "getInterface")(contractInterface));
            defineReadOnly(this, "signer", signer || null);
        }
        // @TODO: Future; rename to populateTransaction?
        getDeployTransaction(...args) {
            let tx = {};
            // If we have 1 additional argument, we allow transaction overrides
            if (args.length === this.interface.deploy.inputs.length + 1 && typeof (args[args.length - 1]) === "object") {
                tx = shallowCopy(args.pop());
                for (const key in tx) {
                    if (!allowedTransactionKeys$1[key]) {
                        throw new Error("unknown transaction override " + key);
                    }
                }
            }
            // Do not allow these to be overridden in a deployment transaction
            ["data", "from", "to"].forEach((key) => {
                if (tx[key] == null) {
                    return;
                }
                logger$r.throwError("cannot override " + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });
            });
            if (tx.value) {
                const value = BigNumber.from(tx.value);
                if (!value.isZero() && !this.interface.deploy.payable) {
                    logger$r.throwError("non-payable constructor cannot override value", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "overrides.value",
                        value: tx.value
                    });
                }
            }
            // Make sure the call matches the constructor signature
            logger$r.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
            // Set the data to the bytecode + the encoded constructor arguments
            tx.data = hexlify(concat$1([
                this.bytecode,
                this.interface.encodeDeploy(args)
            ]));
            return tx;
        }
        deploy(...args) {
            return __awaiter$i(this, void 0, void 0, function* () {
                let overrides = {};
                // If 1 extra parameter was passed in, it contains overrides
                if (args.length === this.interface.deploy.inputs.length + 1) {
                    overrides = args.pop();
                }
                // Make sure the call matches the constructor signature
                logger$r.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
                // Resolve ENS names and promises in the arguments
                const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);
                params.push(overrides);
                // Get the deployment transaction (with optional overrides)
                const unsignedTx = this.getDeployTransaction(...params);
                // Send the deployment transaction
                const tx = yield this.signer.sendTransaction(unsignedTx);
                const address = getStatic(this.constructor, "getContractAddress")(tx);
                const contract = getStatic(this.constructor, "getContract")(address, this.interface, this.signer);
                // Add the modified wait that wraps events
                addContractWait(contract, tx);
                defineReadOnly(contract, "deployTransaction", tx);
                return contract;
            });
        }
        attach(address) {
            return (this.constructor).getContract(address, this.interface, this.signer);
        }
        connect(signer) {
            return new (this.constructor)(this.interface, this.bytecode, signer);
        }
        static fromSolidity(compilerOutput, signer) {
            if (compilerOutput == null) {
                logger$r.throwError("missing compiler output", Logger.errors.MISSING_ARGUMENT, { argument: "compilerOutput" });
            }
            if (typeof (compilerOutput) === "string") {
                compilerOutput = JSON.parse(compilerOutput);
            }
            const abi = compilerOutput.abi;
            let bytecode = null;
            if (compilerOutput.bytecode) {
                bytecode = compilerOutput.bytecode;
            }
            else if (compilerOutput.evm && compilerOutput.evm.bytecode) {
                bytecode = compilerOutput.evm.bytecode;
            }
            return new this(abi, bytecode, signer);
        }
        static getInterface(contractInterface) {
            return Contract.getInterface(contractInterface);
        }
        static getContractAddress(tx) {
            return getContractAddress(tx);
        }
        static getContract(address, contractInterface, signer) {
            return new Contract(address, contractInterface, signer);
        }
    }

    /**
     * var basex = require("base-x");
     *
     * This implementation is heavily based on base-x. The main reason to
     * deviate was to prevent the dependency of Buffer.
     *
     * Contributors:
     *
     * base-x encoding
     * Forked from https://github.com/cryptocoinjs/bs58
     * Originally written by Mike Hearn for BitcoinJ
     * Copyright (c) 2011 Google Inc
     * Ported to JavaScript by Stefan Thomas
     * Merged Buffer refactorings from base58-native by Stephen Pair
     * Copyright (c) 2013 BitPay Inc
     *
     * The MIT License (MIT)
     *
     * Copyright base-x contributors (c) 2016
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.

     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
     * IN THE SOFTWARE.
     *
     */
    class BaseX {
        constructor(alphabet) {
            defineReadOnly(this, "alphabet", alphabet);
            defineReadOnly(this, "base", alphabet.length);
            defineReadOnly(this, "_alphabetMap", {});
            defineReadOnly(this, "_leader", alphabet.charAt(0));
            // pre-compute lookup table
            for (let i = 0; i < alphabet.length; i++) {
                this._alphabetMap[alphabet.charAt(i)] = i;
            }
        }
        encode(value) {
            let source = arrayify(value);
            if (source.length === 0) {
                return "";
            }
            let digits = [0];
            for (let i = 0; i < source.length; ++i) {
                let carry = source[i];
                for (let j = 0; j < digits.length; ++j) {
                    carry += digits[j] << 8;
                    digits[j] = carry % this.base;
                    carry = (carry / this.base) | 0;
                }
                while (carry > 0) {
                    digits.push(carry % this.base);
                    carry = (carry / this.base) | 0;
                }
            }
            let string = "";
            // deal with leading zeros
            for (let k = 0; source[k] === 0 && k < source.length - 1; ++k) {
                string += this._leader;
            }
            // convert digits to a string
            for (let q = digits.length - 1; q >= 0; --q) {
                string += this.alphabet[digits[q]];
            }
            return string;
        }
        decode(value) {
            if (typeof (value) !== "string") {
                throw new TypeError("Expected String");
            }
            let bytes = [];
            if (value.length === 0) {
                return new Uint8Array(bytes);
            }
            bytes.push(0);
            for (let i = 0; i < value.length; i++) {
                let byte = this._alphabetMap[value[i]];
                if (byte === undefined) {
                    throw new Error("Non-base" + this.base + " character");
                }
                let carry = byte;
                for (let j = 0; j < bytes.length; ++j) {
                    carry += bytes[j] * this.base;
                    bytes[j] = carry & 0xff;
                    carry >>= 8;
                }
                while (carry > 0) {
                    bytes.push(carry & 0xff);
                    carry >>= 8;
                }
            }
            // deal with leading zeros
            for (let k = 0; value[k] === this._leader && k < value.length - 1; ++k) {
                bytes.push(0);
            }
            return arrayify(new Uint8Array(bytes.reverse()));
        }
    }
    const Base32 = new BaseX("abcdefghijklmnopqrstuvwxyz234567");
    const Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
    //console.log(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj"))
    //console.log(Base58.encode(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj")))

    var lib_esm$9 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        BaseX: BaseX,
        Base32: Base32,
        Base58: Base58
    });

    var SupportedAlgorithm;
    (function (SupportedAlgorithm) {
        SupportedAlgorithm["sha256"] = "sha256";
        SupportedAlgorithm["sha512"] = "sha512";
    })(SupportedAlgorithm || (SupportedAlgorithm = {}));

    const version$d = "sha2/5.7.0";

    const logger$q = new Logger(version$d);
    function ripemd160(data) {
        return "0x" + (hash_1$1.ripemd160().update(arrayify(data)).digest("hex"));
    }
    function sha256$3(data) {
        return "0x" + (hash_1$1.sha256().update(arrayify(data)).digest("hex"));
    }
    function sha512$2(data) {
        return "0x" + (hash_1$1.sha512().update(arrayify(data)).digest("hex"));
    }
    function computeHmac(algorithm, key, data) {
        if (!SupportedAlgorithm[algorithm]) {
            logger$q.throwError("unsupported algorithm " + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "hmac",
                algorithm: algorithm
            });
        }
        return "0x" + hash_1$1.hmac(hash_1$1[algorithm], arrayify(key)).update(arrayify(data)).digest("hex");
    }

    var lib_esm$8 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        computeHmac: computeHmac,
        ripemd160: ripemd160,
        sha256: sha256$3,
        sha512: sha512$2,
        get SupportedAlgorithm () { return SupportedAlgorithm; }
    });

    function pbkdf2$1(password, salt, iterations, keylen, hashAlgorithm) {
        password = arrayify(password);
        salt = arrayify(salt);
        let hLen;
        let l = 1;
        const DK = new Uint8Array(keylen);
        const block1 = new Uint8Array(salt.length + 4);
        block1.set(salt);
        //salt.copy(block1, 0, 0, salt.length)
        let r;
        let T;
        for (let i = 1; i <= l; i++) {
            //block1.writeUInt32BE(i, salt.length)
            block1[salt.length] = (i >> 24) & 0xff;
            block1[salt.length + 1] = (i >> 16) & 0xff;
            block1[salt.length + 2] = (i >> 8) & 0xff;
            block1[salt.length + 3] = i & 0xff;
            //let U = createHmac(password).update(block1).digest();
            let U = arrayify(computeHmac(hashAlgorithm, password, block1));
            if (!hLen) {
                hLen = U.length;
                T = new Uint8Array(hLen);
                l = Math.ceil(keylen / hLen);
                r = keylen - (l - 1) * hLen;
            }
            //U.copy(T, 0, 0, hLen)
            T.set(U);
            for (let j = 1; j < iterations; j++) {
                //U = createHmac(password).update(U).digest();
                U = arrayify(computeHmac(hashAlgorithm, password, U));
                for (let k = 0; k < hLen; k++)
                    T[k] ^= U[k];
            }
            const destPos = (i - 1) * hLen;
            const len = (i === l ? r : hLen);
            //T.copy(DK, destPos, 0, len)
            DK.set(arrayify(T).slice(0, len), destPos);
        }
        return hexlify(DK);
    }

    const version$c = "wordlists/5.7.0";

    const logger$p = new Logger(version$c);
    class Wordlist {
        constructor(locale) {
            logger$p.checkAbstract(new.target, Wordlist);
            defineReadOnly(this, "locale", locale);
        }
        // Subclasses may override this
        split(mnemonic) {
            return mnemonic.toLowerCase().split(/ +/g);
        }
        // Subclasses may override this
        join(words) {
            return words.join(" ");
        }
        static check(wordlist) {
            const words = [];
            for (let i = 0; i < 2048; i++) {
                const word = wordlist.getWord(i);
                /* istanbul ignore if */
                if (i !== wordlist.getWordIndex(word)) {
                    return "0x";
                }
                words.push(word);
            }
            return id(words.join("\n") + "\n");
        }
        static register(lang, name) {
            if (!name) {
                name = lang.locale;
            }
        }
    }

    const words = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
    let wordlist = null;
    function loadWords(lang) {
        if (wordlist != null) {
            return;
        }
        wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
        // Verify the computed list matches the official list
        /* istanbul ignore if */
        if (Wordlist.check(lang) !== "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60") {
            wordlist = null;
            throw new Error("BIP39 Wordlist for en (English) FAILED");
        }
    }
    class LangEn extends Wordlist {
        constructor() {
            super("en");
        }
        getWord(index) {
            loadWords(this);
            return wordlist[index];
        }
        getWordIndex(word) {
            loadWords(this);
            return wordlist.indexOf(word);
        }
    }
    const langEn = new LangEn();
    Wordlist.register(langEn);

    const wordlists = {
        en: langEn
    };

    const version$b = "hdnode/5.7.0";

    const logger$o = new Logger(version$b);
    const N$3 = BigNumber.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    // "Bitcoin seed"
    const MasterSecret = toUtf8Bytes("Bitcoin seed");
    const HardenedBit = 0x80000000;
    // Returns a byte with the MSB bits set
    function getUpperMask(bits) {
        return ((1 << bits) - 1) << (8 - bits);
    }
    // Returns a byte with the LSB bits set
    function getLowerMask(bits) {
        return (1 << bits) - 1;
    }
    function bytes32(value) {
        return hexZeroPad(hexlify(value), 32);
    }
    function base58check(data) {
        return Base58.encode(concat$1([data, hexDataSlice(sha256$3(sha256$3(data)), 0, 4)]));
    }
    function getWordlist(wordlist) {
        if (wordlist == null) {
            return wordlists["en"];
        }
        if (typeof (wordlist) === "string") {
            const words = wordlists[wordlist];
            if (words == null) {
                logger$o.throwArgumentError("unknown locale", "wordlist", wordlist);
            }
            return words;
        }
        return wordlist;
    }
    const _constructorGuard$1 = {};
    const defaultPath = "m/44'/60'/0'/0/0";
    class HDNode {
        /**
         *  This constructor should not be called directly.
         *
         *  Please use:
         *   - fromMnemonic
         *   - fromSeed
         */
        constructor(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {
            /* istanbul ignore if */
            if (constructorGuard !== _constructorGuard$1) {
                throw new Error("HDNode constructor cannot be called directly");
            }
            if (privateKey) {
                const signingKey = new SigningKey(privateKey);
                defineReadOnly(this, "privateKey", signingKey.privateKey);
                defineReadOnly(this, "publicKey", signingKey.compressedPublicKey);
            }
            else {
                defineReadOnly(this, "privateKey", null);
                defineReadOnly(this, "publicKey", hexlify(publicKey));
            }
            defineReadOnly(this, "parentFingerprint", parentFingerprint);
            defineReadOnly(this, "fingerprint", hexDataSlice(ripemd160(sha256$3(this.publicKey)), 0, 4));
            defineReadOnly(this, "address", computeAddress(this.publicKey));
            defineReadOnly(this, "chainCode", chainCode);
            defineReadOnly(this, "index", index);
            defineReadOnly(this, "depth", depth);
            if (mnemonicOrPath == null) {
                // From a source that does not preserve the path (e.g. extended keys)
                defineReadOnly(this, "mnemonic", null);
                defineReadOnly(this, "path", null);
            }
            else if (typeof (mnemonicOrPath) === "string") {
                // From a source that does not preserve the mnemonic (e.g. neutered)
                defineReadOnly(this, "mnemonic", null);
                defineReadOnly(this, "path", mnemonicOrPath);
            }
            else {
                // From a fully qualified source
                defineReadOnly(this, "mnemonic", mnemonicOrPath);
                defineReadOnly(this, "path", mnemonicOrPath.path);
            }
        }
        get extendedKey() {
            // We only support the mainnet values for now, but if anyone needs
            // testnet values, let me know. I believe current sentiment is that
            // we should always use mainnet, and use BIP-44 to derive the network
            //   - Mainnet: public=0x0488B21E, private=0x0488ADE4
            //   - Testnet: public=0x043587CF, private=0x04358394
            if (this.depth >= 256) {
                throw new Error("Depth too large!");
            }
            return base58check(concat$1([
                ((this.privateKey != null) ? "0x0488ADE4" : "0x0488B21E"),
                hexlify(this.depth),
                this.parentFingerprint,
                hexZeroPad(hexlify(this.index), 4),
                this.chainCode,
                ((this.privateKey != null) ? concat$1(["0x00", this.privateKey]) : this.publicKey),
            ]));
        }
        neuter() {
            return new HDNode(_constructorGuard$1, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
        }
        _derive(index) {
            if (index > 0xffffffff) {
                throw new Error("invalid index - " + String(index));
            }
            // Base path
            let path = this.path;
            if (path) {
                path += "/" + (index & ~HardenedBit);
            }
            const data = new Uint8Array(37);
            if (index & HardenedBit) {
                if (!this.privateKey) {
                    throw new Error("cannot derive child of neutered node");
                }
                // Data = 0x00 || ser_256(k_par)
                data.set(arrayify(this.privateKey), 1);
                // Hardened path
                if (path) {
                    path += "'";
                }
            }
            else {
                // Data = ser_p(point(k_par))
                data.set(arrayify(this.publicKey));
            }
            // Data += ser_32(i)
            for (let i = 24; i >= 0; i -= 8) {
                data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff);
            }
            const I = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));
            const IL = I.slice(0, 32);
            const IR = I.slice(32);
            // The private key
            let ki = null;
            // The public key
            let Ki = null;
            if (this.privateKey) {
                ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N$3));
            }
            else {
                const ek = new SigningKey(hexlify(IL));
                Ki = ek._addPoint(this.publicKey);
            }
            let mnemonicOrPath = path;
            const srcMnemonic = this.mnemonic;
            if (srcMnemonic) {
                mnemonicOrPath = Object.freeze({
                    phrase: srcMnemonic.phrase,
                    path: path,
                    locale: (srcMnemonic.locale || "en")
                });
            }
            return new HDNode(_constructorGuard$1, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);
        }
        derivePath(path) {
            const components = path.split("/");
            if (components.length === 0 || (components[0] === "m" && this.depth !== 0)) {
                throw new Error("invalid path - " + path);
            }
            if (components[0] === "m") {
                components.shift();
            }
            let result = this;
            for (let i = 0; i < components.length; i++) {
                const component = components[i];
                if (component.match(/^[0-9]+'$/)) {
                    const index = parseInt(component.substring(0, component.length - 1));
                    if (index >= HardenedBit) {
                        throw new Error("invalid path index - " + component);
                    }
                    result = result._derive(HardenedBit + index);
                }
                else if (component.match(/^[0-9]+$/)) {
                    const index = parseInt(component);
                    if (index >= HardenedBit) {
                        throw new Error("invalid path index - " + component);
                    }
                    result = result._derive(index);
                }
                else {
                    throw new Error("invalid path component - " + component);
                }
            }
            return result;
        }
        static _fromSeed(seed, mnemonic) {
            const seedArray = arrayify(seed);
            if (seedArray.length < 16 || seedArray.length > 64) {
                throw new Error("invalid seed");
            }
            const I = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));
            return new HDNode(_constructorGuard$1, bytes32(I.slice(0, 32)), null, "0x00000000", bytes32(I.slice(32)), 0, 0, mnemonic);
        }
        static fromMnemonic(mnemonic, password, wordlist) {
            // If a locale name was passed in, find the associated wordlist
            wordlist = getWordlist(wordlist);
            // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)
            mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);
            return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {
                phrase: mnemonic,
                path: "m",
                locale: wordlist.locale
            });
        }
        static fromSeed(seed) {
            return HDNode._fromSeed(seed, null);
        }
        static fromExtendedKey(extendedKey) {
            const bytes = Base58.decode(extendedKey);
            if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {
                logger$o.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
            }
            const depth = bytes[4];
            const parentFingerprint = hexlify(bytes.slice(5, 9));
            const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);
            const chainCode = hexlify(bytes.slice(13, 45));
            const key = bytes.slice(45, 78);
            switch (hexlify(bytes.slice(0, 4))) {
                // Public Key
                case "0x0488b21e":
                case "0x043587cf":
                    return new HDNode(_constructorGuard$1, null, hexlify(key), parentFingerprint, chainCode, index, depth, null);
                // Private Key
                case "0x0488ade4":
                case "0x04358394 ":
                    if (key[0] !== 0) {
                        break;
                    }
                    return new HDNode(_constructorGuard$1, hexlify(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);
            }
            return logger$o.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
        }
    }
    function mnemonicToSeed(mnemonic, password) {
        if (!password) {
            password = "";
        }
        const salt = toUtf8Bytes("mnemonic" + password, UnicodeNormalizationForm.NFKD);
        return pbkdf2$1(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, "sha512");
    }
    function mnemonicToEntropy(mnemonic, wordlist) {
        wordlist = getWordlist(wordlist);
        logger$o.checkNormalize();
        const words = wordlist.split(mnemonic);
        if ((words.length % 3) !== 0) {
            throw new Error("invalid mnemonic");
        }
        const entropy = arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));
        let offset = 0;
        for (let i = 0; i < words.length; i++) {
            let index = wordlist.getWordIndex(words[i].normalize("NFKD"));
            if (index === -1) {
                throw new Error("invalid mnemonic");
            }
            for (let bit = 0; bit < 11; bit++) {
                if (index & (1 << (10 - bit))) {
                    entropy[offset >> 3] |= (1 << (7 - (offset % 8)));
                }
                offset++;
            }
        }
        const entropyBits = 32 * words.length / 3;
        const checksumBits = words.length / 3;
        const checksumMask = getUpperMask(checksumBits);
        const checksum = arrayify(sha256$3(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
        if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
            throw new Error("invalid checksum");
        }
        return hexlify(entropy.slice(0, entropyBits / 8));
    }
    function entropyToMnemonic(entropy, wordlist) {
        wordlist = getWordlist(wordlist);
        entropy = arrayify(entropy);
        if ((entropy.length % 4) !== 0 || entropy.length < 16 || entropy.length > 32) {
            throw new Error("invalid entropy");
        }
        const indices = [0];
        let remainingBits = 11;
        for (let i = 0; i < entropy.length; i++) {
            // Consume the whole byte (with still more to go)
            if (remainingBits > 8) {
                indices[indices.length - 1] <<= 8;
                indices[indices.length - 1] |= entropy[i];
                remainingBits -= 8;
                // This byte will complete an 11-bit index
            }
            else {
                indices[indices.length - 1] <<= remainingBits;
                indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);
                // Start the next word
                indices.push(entropy[i] & getLowerMask(8 - remainingBits));
                remainingBits += 3;
            }
        }
        // Compute the checksum bits
        const checksumBits = entropy.length / 4;
        const checksum = arrayify(sha256$3(entropy))[0] & getUpperMask(checksumBits);
        // Shift the checksum into the word indices
        indices[indices.length - 1] <<= checksumBits;
        indices[indices.length - 1] |= (checksum >> (8 - checksumBits));
        return wordlist.join(indices.map((index) => wordlist.getWord(index)));
    }
    function isValidMnemonic(mnemonic, wordlist) {
        try {
            mnemonicToEntropy(mnemonic, wordlist);
            return true;
        }
        catch (error) { }
        return false;
    }
    function getAccountPath(index) {
        if (typeof (index) !== "number" || index < 0 || index >= HardenedBit || index % 1) {
            logger$o.throwArgumentError("invalid account index", "index", index);
        }
        return `m/44'/60'/${index}'/0/0`;
    }

    var lib_esm$7 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        defaultPath: defaultPath,
        HDNode: HDNode,
        mnemonicToSeed: mnemonicToSeed,
        mnemonicToEntropy: mnemonicToEntropy,
        entropyToMnemonic: entropyToMnemonic,
        isValidMnemonic: isValidMnemonic,
        getAccountPath: getAccountPath
    });

    const version$a = "random/5.7.0";

    const logger$n = new Logger(version$a);
    // Debugging line for testing browser lib in node
    //const window = { crypto: { getRandomValues: () => { } } };
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis
    function getGlobal() {
        if (typeof self !== 'undefined') {
            return self;
        }
        if (typeof window !== 'undefined') {
            return window;
        }
        if (typeof global !== 'undefined') {
            return global;
        }
        throw new Error('unable to locate global object');
    }
    const anyGlobal = getGlobal();
    let crypto$2 = anyGlobal.crypto || anyGlobal.msCrypto;
    if (!crypto$2 || !crypto$2.getRandomValues) {
        logger$n.warn("WARNING: Missing strong random number source");
        crypto$2 = {
            getRandomValues: function (buffer) {
                return logger$n.throwError("no secure random source avaialble", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "crypto.getRandomValues"
                });
            }
        };
    }
    function randomBytes(length) {
        if (length <= 0 || length > 1024 || (length % 1) || length != length) {
            logger$n.throwArgumentError("invalid length", "length", length);
        }
        const result = new Uint8Array(length);
        crypto$2.getRandomValues(result);
        return arrayify(result);
    }

    function shuffled(array) {
        array = array.slice();
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            const tmp = array[i];
            array[i] = array[j];
            array[j] = tmp;
        }
        return array;
    }

    var lib_esm$6 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        randomBytes: randomBytes,
        shuffled: shuffled
    });

    var aesJs = createCommonjsModule$4(function (module, exports) {

    (function(root) {

        function checkInt(value) {
            return (parseInt(value) === value);
        }

        function checkInts(arrayish) {
            if (!checkInt(arrayish.length)) { return false; }

            for (var i = 0; i < arrayish.length; i++) {
                if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
                    return false;
                }
            }

            return true;
        }

        function coerceArray(arg, copy) {

            // ArrayBuffer view
            if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === 'Uint8Array') {

                if (copy) {
                    if (arg.slice) {
                        arg = arg.slice();
                    } else {
                        arg = Array.prototype.slice.call(arg);
                    }
                }

                return arg;
            }

            // It's an array; check it is a valid representation of a byte
            if (Array.isArray(arg)) {
                if (!checkInts(arg)) {
                    throw new Error('Array contains invalid value: ' + arg);
                }

                return new Uint8Array(arg);
            }

            // Something else, but behaves like an array (maybe a Buffer? Arguments?)
            if (checkInt(arg.length) && checkInts(arg)) {
                return new Uint8Array(arg);
            }

            throw new Error('unsupported array-like object');
        }

        function createArray(length) {
            return new Uint8Array(length);
        }

        function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
            if (sourceStart != null || sourceEnd != null) {
                if (sourceArray.slice) {
                    sourceArray = sourceArray.slice(sourceStart, sourceEnd);
                } else {
                    sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
                }
            }
            targetArray.set(sourceArray, targetStart);
        }



        var convertUtf8 = (function() {
            function toBytes(text) {
                var result = [], i = 0;
                text = encodeURI(text);
                while (i < text.length) {
                    var c = text.charCodeAt(i++);

                    // if it is a % sign, encode the following 2 bytes as a hex value
                    if (c === 37) {
                        result.push(parseInt(text.substr(i, 2), 16));
                        i += 2;

                    // otherwise, just the actual byte
                    } else {
                        result.push(c);
                    }
                }

                return coerceArray(result);
            }

            function fromBytes(bytes) {
                var result = [], i = 0;

                while (i < bytes.length) {
                    var c = bytes[i];

                    if (c < 128) {
                        result.push(String.fromCharCode(c));
                        i++;
                    } else if (c > 191 && c < 224) {
                        result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));
                        i += 2;
                    } else {
                        result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));
                        i += 3;
                    }
                }

                return result.join('');
            }

            return {
                toBytes: toBytes,
                fromBytes: fromBytes,
            }
        })();

        var convertHex = (function() {
            function toBytes(text) {
                var result = [];
                for (var i = 0; i < text.length; i += 2) {
                    result.push(parseInt(text.substr(i, 2), 16));
                }

                return result;
            }

            // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html
            var Hex = '0123456789abcdef';

            function fromBytes(bytes) {
                    var result = [];
                    for (var i = 0; i < bytes.length; i++) {
                        var v = bytes[i];
                        result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);
                    }
                    return result.join('');
            }

            return {
                toBytes: toBytes,
                fromBytes: fromBytes,
            }
        })();


        // Number of rounds by keysize
        var numberOfRounds = {16: 10, 24: 12, 32: 14};

        // Round constant words
        var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];

        // S-box and Inverse S-box (S is for Substitution)
        var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];
        var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];

        // Transformations for encryption
        var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];
        var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];
        var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];
        var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];

        // Transformations for decryption
        var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];
        var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];
        var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];
        var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];

        // Transformations for decryption key expansion
        var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];
        var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];
        var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];
        var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];

        function convertToInt32(bytes) {
            var result = [];
            for (var i = 0; i < bytes.length; i += 4) {
                result.push(
                    (bytes[i    ] << 24) |
                    (bytes[i + 1] << 16) |
                    (bytes[i + 2] <<  8) |
                     bytes[i + 3]
                );
            }
            return result;
        }

        var AES = function(key) {
            if (!(this instanceof AES)) {
                throw Error('AES must be instanitated with `new`');
            }

            Object.defineProperty(this, 'key', {
                value: coerceArray(key, true)
            });

            this._prepare();
        };


        AES.prototype._prepare = function() {

            var rounds = numberOfRounds[this.key.length];
            if (rounds == null) {
                throw new Error('invalid key size (must be 16, 24 or 32 bytes)');
            }

            // encryption round keys
            this._Ke = [];

            // decryption round keys
            this._Kd = [];

            for (var i = 0; i <= rounds; i++) {
                this._Ke.push([0, 0, 0, 0]);
                this._Kd.push([0, 0, 0, 0]);
            }

            var roundKeyCount = (rounds + 1) * 4;
            var KC = this.key.length / 4;

            // convert the key into ints
            var tk = convertToInt32(this.key);

            // copy values into round key arrays
            var index;
            for (var i = 0; i < KC; i++) {
                index = i >> 2;
                this._Ke[index][i % 4] = tk[i];
                this._Kd[rounds - index][i % 4] = tk[i];
            }

            // key expansion (fips-197 section 5.2)
            var rconpointer = 0;
            var t = KC, tt;
            while (t < roundKeyCount) {
                tt = tk[KC - 1];
                tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^
                          (S[(tt >>  8) & 0xFF] << 16) ^
                          (S[ tt        & 0xFF] <<  8) ^
                           S[(tt >> 24) & 0xFF]        ^
                          (rcon[rconpointer] << 24));
                rconpointer += 1;

                // key expansion (for non-256 bit)
                if (KC != 8) {
                    for (var i = 1; i < KC; i++) {
                        tk[i] ^= tk[i - 1];
                    }

                // key expansion for 256-bit keys is "slightly different" (fips-197)
                } else {
                    for (var i = 1; i < (KC / 2); i++) {
                        tk[i] ^= tk[i - 1];
                    }
                    tt = tk[(KC / 2) - 1];

                    tk[KC / 2] ^= (S[ tt        & 0xFF]        ^
                                  (S[(tt >>  8) & 0xFF] <<  8) ^
                                  (S[(tt >> 16) & 0xFF] << 16) ^
                                  (S[(tt >> 24) & 0xFF] << 24));

                    for (var i = (KC / 2) + 1; i < KC; i++) {
                        tk[i] ^= tk[i - 1];
                    }
                }

                // copy values into round key arrays
                var i = 0, r, c;
                while (i < KC && t < roundKeyCount) {
                    r = t >> 2;
                    c = t % 4;
                    this._Ke[r][c] = tk[i];
                    this._Kd[rounds - r][c] = tk[i++];
                    t++;
                }
            }

            // inverse-cipher-ify the decryption round key (fips-197 section 5.3)
            for (var r = 1; r < rounds; r++) {
                for (var c = 0; c < 4; c++) {
                    tt = this._Kd[r][c];
                    this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^
                                      U2[(tt >> 16) & 0xFF] ^
                                      U3[(tt >>  8) & 0xFF] ^
                                      U4[ tt        & 0xFF]);
                }
            }
        };

        AES.prototype.encrypt = function(plaintext) {
            if (plaintext.length != 16) {
                throw new Error('invalid plaintext size (must be 16 bytes)');
            }

            var rounds = this._Ke.length - 1;
            var a = [0, 0, 0, 0];

            // convert plaintext to (ints ^ key)
            var t = convertToInt32(plaintext);
            for (var i = 0; i < 4; i++) {
                t[i] ^= this._Ke[0][i];
            }

            // apply round transforms
            for (var r = 1; r < rounds; r++) {
                for (var i = 0; i < 4; i++) {
                    a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^
                            T2[(t[(i + 1) % 4] >> 16) & 0xff] ^
                            T3[(t[(i + 2) % 4] >>  8) & 0xff] ^
                            T4[ t[(i + 3) % 4]        & 0xff] ^
                            this._Ke[r][i]);
                }
                t = a.slice();
            }

            // the last round is special
            var result = createArray(16), tt;
            for (var i = 0; i < 4; i++) {
                tt = this._Ke[rounds][i];
                result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
                result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
                result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
                result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;
            }

            return result;
        };

        AES.prototype.decrypt = function(ciphertext) {
            if (ciphertext.length != 16) {
                throw new Error('invalid ciphertext size (must be 16 bytes)');
            }

            var rounds = this._Kd.length - 1;
            var a = [0, 0, 0, 0];

            // convert plaintext to (ints ^ key)
            var t = convertToInt32(ciphertext);
            for (var i = 0; i < 4; i++) {
                t[i] ^= this._Kd[0][i];
            }

            // apply round transforms
            for (var r = 1; r < rounds; r++) {
                for (var i = 0; i < 4; i++) {
                    a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^
                            T6[(t[(i + 3) % 4] >> 16) & 0xff] ^
                            T7[(t[(i + 2) % 4] >>  8) & 0xff] ^
                            T8[ t[(i + 1) % 4]        & 0xff] ^
                            this._Kd[r][i]);
                }
                t = a.slice();
            }

            // the last round is special
            var result = createArray(16), tt;
            for (var i = 0; i < 4; i++) {
                tt = this._Kd[rounds][i];
                result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
                result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
                result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
                result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;
            }

            return result;
        };


        /**
         *  Mode Of Operation - Electonic Codebook (ECB)
         */
        var ModeOfOperationECB = function(key) {
            if (!(this instanceof ModeOfOperationECB)) {
                throw Error('AES must be instanitated with `new`');
            }

            this.description = "Electronic Code Block";
            this.name = "ecb";

            this._aes = new AES(key);
        };

        ModeOfOperationECB.prototype.encrypt = function(plaintext) {
            plaintext = coerceArray(plaintext);

            if ((plaintext.length % 16) !== 0) {
                throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
            }

            var ciphertext = createArray(plaintext.length);
            var block = createArray(16);

            for (var i = 0; i < plaintext.length; i += 16) {
                copyArray(plaintext, block, 0, i, i + 16);
                block = this._aes.encrypt(block);
                copyArray(block, ciphertext, i);
            }

            return ciphertext;
        };

        ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
            ciphertext = coerceArray(ciphertext);

            if ((ciphertext.length % 16) !== 0) {
                throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
            }

            var plaintext = createArray(ciphertext.length);
            var block = createArray(16);

            for (var i = 0; i < ciphertext.length; i += 16) {
                copyArray(ciphertext, block, 0, i, i + 16);
                block = this._aes.decrypt(block);
                copyArray(block, plaintext, i);
            }

            return plaintext;
        };


        /**
         *  Mode Of Operation - Cipher Block Chaining (CBC)
         */
        var ModeOfOperationCBC = function(key, iv) {
            if (!(this instanceof ModeOfOperationCBC)) {
                throw Error('AES must be instanitated with `new`');
            }

            this.description = "Cipher Block Chaining";
            this.name = "cbc";

            if (!iv) {
                iv = createArray(16);

            } else if (iv.length != 16) {
                throw new Error('invalid initialation vector size (must be 16 bytes)');
            }

            this._lastCipherblock = coerceArray(iv, true);

            this._aes = new AES(key);
        };

        ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
            plaintext = coerceArray(plaintext);

            if ((plaintext.length % 16) !== 0) {
                throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
            }

            var ciphertext = createArray(plaintext.length);
            var block = createArray(16);

            for (var i = 0; i < plaintext.length; i += 16) {
                copyArray(plaintext, block, 0, i, i + 16);

                for (var j = 0; j < 16; j++) {
                    block[j] ^= this._lastCipherblock[j];
                }

                this._lastCipherblock = this._aes.encrypt(block);
                copyArray(this._lastCipherblock, ciphertext, i);
            }

            return ciphertext;
        };

        ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
            ciphertext = coerceArray(ciphertext);

            if ((ciphertext.length % 16) !== 0) {
                throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
            }

            var plaintext = createArray(ciphertext.length);
            var block = createArray(16);

            for (var i = 0; i < ciphertext.length; i += 16) {
                copyArray(ciphertext, block, 0, i, i + 16);
                block = this._aes.decrypt(block);

                for (var j = 0; j < 16; j++) {
                    plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
                }

                copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
            }

            return plaintext;
        };


        /**
         *  Mode Of Operation - Cipher Feedback (CFB)
         */
        var ModeOfOperationCFB = function(key, iv, segmentSize) {
            if (!(this instanceof ModeOfOperationCFB)) {
                throw Error('AES must be instanitated with `new`');
            }

            this.description = "Cipher Feedback";
            this.name = "cfb";

            if (!iv) {
                iv = createArray(16);

            } else if (iv.length != 16) {
                throw new Error('invalid initialation vector size (must be 16 size)');
            }

            if (!segmentSize) { segmentSize = 1; }

            this.segmentSize = segmentSize;

            this._shiftRegister = coerceArray(iv, true);

            this._aes = new AES(key);
        };

        ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
            if ((plaintext.length % this.segmentSize) != 0) {
                throw new Error('invalid plaintext size (must be segmentSize bytes)');
            }

            var encrypted = coerceArray(plaintext, true);

            var xorSegment;
            for (var i = 0; i < encrypted.length; i += this.segmentSize) {
                xorSegment = this._aes.encrypt(this._shiftRegister);
                for (var j = 0; j < this.segmentSize; j++) {
                    encrypted[i + j] ^= xorSegment[j];
                }

                // Shift the register
                copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
                copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
            }

            return encrypted;
        };

        ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
            if ((ciphertext.length % this.segmentSize) != 0) {
                throw new Error('invalid ciphertext size (must be segmentSize bytes)');
            }

            var plaintext = coerceArray(ciphertext, true);

            var xorSegment;
            for (var i = 0; i < plaintext.length; i += this.segmentSize) {
                xorSegment = this._aes.encrypt(this._shiftRegister);

                for (var j = 0; j < this.segmentSize; j++) {
                    plaintext[i + j] ^= xorSegment[j];
                }

                // Shift the register
                copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
                copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
            }

            return plaintext;
        };

        /**
         *  Mode Of Operation - Output Feedback (OFB)
         */
        var ModeOfOperationOFB = function(key, iv) {
            if (!(this instanceof ModeOfOperationOFB)) {
                throw Error('AES must be instanitated with `new`');
            }

            this.description = "Output Feedback";
            this.name = "ofb";

            if (!iv) {
                iv = createArray(16);

            } else if (iv.length != 16) {
                throw new Error('invalid initialation vector size (must be 16 bytes)');
            }

            this._lastPrecipher = coerceArray(iv, true);
            this._lastPrecipherIndex = 16;

            this._aes = new AES(key);
        };

        ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
            var encrypted = coerceArray(plaintext, true);

            for (var i = 0; i < encrypted.length; i++) {
                if (this._lastPrecipherIndex === 16) {
                    this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
                    this._lastPrecipherIndex = 0;
                }
                encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
            }

            return encrypted;
        };

        // Decryption is symetric
        ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;


        /**
         *  Counter object for CTR common mode of operation
         */
        var Counter = function(initialValue) {
            if (!(this instanceof Counter)) {
                throw Error('Counter must be instanitated with `new`');
            }

            // We allow 0, but anything false-ish uses the default 1
            if (initialValue !== 0 && !initialValue) { initialValue = 1; }

            if (typeof(initialValue) === 'number') {
                this._counter = createArray(16);
                this.setValue(initialValue);

            } else {
                this.setBytes(initialValue);
            }
        };

        Counter.prototype.setValue = function(value) {
            if (typeof(value) !== 'number' || parseInt(value) != value) {
                throw new Error('invalid counter value (must be an integer)');
            }

            for (var index = 15; index >= 0; --index) {
                this._counter[index] = value % 256;
                value = value >> 8;
            }
        };

        Counter.prototype.setBytes = function(bytes) {
            bytes = coerceArray(bytes, true);

            if (bytes.length != 16) {
                throw new Error('invalid counter bytes size (must be 16 bytes)');
            }

            this._counter = bytes;
        };

        Counter.prototype.increment = function() {
            for (var i = 15; i >= 0; i--) {
                if (this._counter[i] === 255) {
                    this._counter[i] = 0;
                } else {
                    this._counter[i]++;
                    break;
                }
            }
        };


        /**
         *  Mode Of Operation - Counter (CTR)
         */
        var ModeOfOperationCTR = function(key, counter) {
            if (!(this instanceof ModeOfOperationCTR)) {
                throw Error('AES must be instanitated with `new`');
            }

            this.description = "Counter";
            this.name = "ctr";

            if (!(counter instanceof Counter)) {
                counter = new Counter(counter);
            }

            this._counter = counter;

            this._remainingCounter = null;
            this._remainingCounterIndex = 16;

            this._aes = new AES(key);
        };

        ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
            var encrypted = coerceArray(plaintext, true);

            for (var i = 0; i < encrypted.length; i++) {
                if (this._remainingCounterIndex === 16) {
                    this._remainingCounter = this._aes.encrypt(this._counter._counter);
                    this._remainingCounterIndex = 0;
                    this._counter.increment();
                }
                encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
            }

            return encrypted;
        };

        // Decryption is symetric
        ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;


        ///////////////////////
        // Padding

        // See:https://tools.ietf.org/html/rfc2315
        function pkcs7pad(data) {
            data = coerceArray(data, true);
            var padder = 16 - (data.length % 16);
            var result = createArray(data.length + padder);
            copyArray(data, result);
            for (var i = data.length; i < result.length; i++) {
                result[i] = padder;
            }
            return result;
        }

        function pkcs7strip(data) {
            data = coerceArray(data, true);
            if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }

            var padder = data[data.length - 1];
            if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }

            var length = data.length - padder;
            for (var i = 0; i < padder; i++) {
                if (data[length + i] !== padder) {
                    throw new Error('PKCS#7 invalid padding byte');
                }
            }

            var result = createArray(length);
            copyArray(data, result, 0, 0, length);
            return result;
        }

        ///////////////////////
        // Exporting


        // The block cipher
        var aesjs = {
            AES: AES,
            Counter: Counter,

            ModeOfOperation: {
                ecb: ModeOfOperationECB,
                cbc: ModeOfOperationCBC,
                cfb: ModeOfOperationCFB,
                ofb: ModeOfOperationOFB,
                ctr: ModeOfOperationCTR
            },

            utils: {
                hex: convertHex,
                utf8: convertUtf8
            },

            padding: {
                pkcs7: {
                    pad: pkcs7pad,
                    strip: pkcs7strip
                }
            },

            _arrayTest: {
                coerceArray: coerceArray,
                createArray: createArray,
                copyArray: copyArray,
            }
        };


        // node.js
        {
            module.exports = aesjs;

        // RequireJS/AMD
        // http://www.requirejs.org/docs/api.html
        // https://github.com/amdjs/amdjs-api/wiki/AMD
        }


    })();
    });

    const version$9 = "json-wallets/5.7.0";

    function looseArrayify(hexString) {
        if (typeof (hexString) === 'string' && hexString.substring(0, 2) !== '0x') {
            hexString = '0x' + hexString;
        }
        return arrayify(hexString);
    }
    function zpad(value, length) {
        value = String(value);
        while (value.length < length) {
            value = '0' + value;
        }
        return value;
    }
    function getPassword(password) {
        if (typeof (password) === 'string') {
            return toUtf8Bytes(password, UnicodeNormalizationForm.NFKC);
        }
        return arrayify(password);
    }
    function searchPath(object, path) {
        let currentChild = object;
        const comps = path.toLowerCase().split('/');
        for (let i = 0; i < comps.length; i++) {
            // Search for a child object with a case-insensitive matching key
            let matchingChild = null;
            for (const key in currentChild) {
                if (key.toLowerCase() === comps[i]) {
                    matchingChild = currentChild[key];
                    break;
                }
            }
            // Didn't find one. :'(
            if (matchingChild === null) {
                return null;
            }
            // Now check this child...
            currentChild = matchingChild;
        }
        return currentChild;
    }
    // See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)
    function uuidV4(randomBytes) {
        const bytes = arrayify(randomBytes);
        // Section: 4.1.3:
        // - time_hi_and_version[12:16] = 0b0100
        bytes[6] = (bytes[6] & 0x0f) | 0x40;
        // Section 4.4
        // - clock_seq_hi_and_reserved[6] = 0b0
        // - clock_seq_hi_and_reserved[7] = 0b1
        bytes[8] = (bytes[8] & 0x3f) | 0x80;
        const value = hexlify(bytes);
        return [
            value.substring(2, 10),
            value.substring(10, 14),
            value.substring(14, 18),
            value.substring(18, 22),
            value.substring(22, 34),
        ].join("-");
    }

    const logger$m = new Logger(version$9);
    class CrowdsaleAccount extends Description {
        isCrowdsaleAccount(value) {
            return !!(value && value._isCrowdsaleAccount);
        }
    }
    // See: https://github.com/ethereum/pyethsaletool
    function decrypt$1(json, password) {
        const data = JSON.parse(json);
        password = getPassword(password);
        // Ethereum Address
        const ethaddr = getAddress(searchPath(data, "ethaddr"));
        // Encrypted Seed
        const encseed = looseArrayify(searchPath(data, "encseed"));
        if (!encseed || (encseed.length % 16) !== 0) {
            logger$m.throwArgumentError("invalid encseed", "json", json);
        }
        const key = arrayify(pbkdf2$1(password, password, 2000, 32, "sha256")).slice(0, 16);
        const iv = encseed.slice(0, 16);
        const encryptedSeed = encseed.slice(16);
        // Decrypt the seed
        const aesCbc = new aesJs.ModeOfOperation.cbc(key, iv);
        const seed = aesJs.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed)));
        // This wallet format is weird... Convert the binary encoded hex to a string.
        let seedHex = "";
        for (let i = 0; i < seed.length; i++) {
            seedHex += String.fromCharCode(seed[i]);
        }
        const seedHexBytes = toUtf8Bytes(seedHex);
        const privateKey = keccak256$1(seedHexBytes);
        return new CrowdsaleAccount({
            _isCrowdsaleAccount: true,
            address: ethaddr,
            privateKey: privateKey
        });
    }

    function isCrowdsaleWallet(json) {
        let data = null;
        try {
            data = JSON.parse(json);
        }
        catch (error) {
            return false;
        }
        return (data.encseed && data.ethaddr);
    }
    function isKeystoreWallet(json) {
        let data = null;
        try {
            data = JSON.parse(json);
        }
        catch (error) {
            return false;
        }
        if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {
            return false;
        }
        // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff
        return true;
    }
    //export function isJsonWallet(json: string): boolean {
    //    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));
    //}
    function getJsonWalletAddress(json) {
        if (isCrowdsaleWallet(json)) {
            try {
                return getAddress(JSON.parse(json).ethaddr);
            }
            catch (error) {
                return null;
            }
        }
        if (isKeystoreWallet(json)) {
            try {
                return getAddress(JSON.parse(json).address);
            }
            catch (error) {
                return null;
            }
        }
        return null;
    }

    var scrypt = createCommonjsModule$4(function (module, exports) {

    (function(root) {
        const MAX_VALUE = 0x7fffffff;

        // The SHA256 and PBKDF2 implementation are from scrypt-async-js:
        // See: https://github.com/dchest/scrypt-async-js
        function SHA256(m) {
            const K = new Uint32Array([
               0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
               0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
               0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
               0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
               0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
               0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
               0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
               0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
               0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
               0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
               0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
               0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
               0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
           ]);

            let h0 = 0x6a09e667, h1 = 0xbb67ae85, h2 = 0x3c6ef372, h3 = 0xa54ff53a;
            let h4 = 0x510e527f, h5 = 0x9b05688c, h6 = 0x1f83d9ab, h7 = 0x5be0cd19;
            const w = new Uint32Array(64);

            function blocks(p) {
                let off = 0, len = p.length;
                while (len >= 64) {
                    let a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7, u, i, j, t1, t2;

                    for (i = 0; i < 16; i++) {
                        j = off + i*4;
                        w[i] = ((p[j] & 0xff)<<24) | ((p[j+1] & 0xff)<<16) |
                        ((p[j+2] & 0xff)<<8) | (p[j+3] & 0xff);
                    }

                    for (i = 16; i < 64; i++) {
                        u = w[i-2];
                        t1 = ((u>>>17) | (u<<(32-17))) ^ ((u>>>19) | (u<<(32-19))) ^ (u>>>10);

                        u = w[i-15];
                        t2 = ((u>>>7) | (u<<(32-7))) ^ ((u>>>18) | (u<<(32-18))) ^ (u>>>3);

                        w[i] = (((t1 + w[i-7]) | 0) + ((t2 + w[i-16]) | 0)) | 0;
                    }

                    for (i = 0; i < 64; i++) {
                        t1 = ((((((e>>>6) | (e<<(32-6))) ^ ((e>>>11) | (e<<(32-11))) ^
                                 ((e>>>25) | (e<<(32-25)))) + ((e & f) ^ (~e & g))) | 0) +
                              ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;

                        t2 = ((((a>>>2) | (a<<(32-2))) ^ ((a>>>13) | (a<<(32-13))) ^
                               ((a>>>22) | (a<<(32-22)))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;

                        h = g;
                        g = f;
                        f = e;
                        e = (d + t1) | 0;
                        d = c;
                        c = b;
                        b = a;
                        a = (t1 + t2) | 0;
                    }

                    h0 = (h0 + a) | 0;
                    h1 = (h1 + b) | 0;
                    h2 = (h2 + c) | 0;
                    h3 = (h3 + d) | 0;
                    h4 = (h4 + e) | 0;
                    h5 = (h5 + f) | 0;
                    h6 = (h6 + g) | 0;
                    h7 = (h7 + h) | 0;

                    off += 64;
                    len -= 64;
                }
            }

            blocks(m);

            let i, bytesLeft = m.length % 64,
            bitLenHi = (m.length / 0x20000000) | 0,
            bitLenLo = m.length << 3,
            numZeros = (bytesLeft < 56) ? 56 : 120,
            p = m.slice(m.length - bytesLeft, m.length);

            p.push(0x80);
            for (i = bytesLeft + 1; i < numZeros; i++) { p.push(0); }
            p.push((bitLenHi >>> 24) & 0xff);
            p.push((bitLenHi >>> 16) & 0xff);
            p.push((bitLenHi >>> 8)  & 0xff);
            p.push((bitLenHi >>> 0)  & 0xff);
            p.push((bitLenLo >>> 24) & 0xff);
            p.push((bitLenLo >>> 16) & 0xff);
            p.push((bitLenLo >>> 8)  & 0xff);
            p.push((bitLenLo >>> 0)  & 0xff);

            blocks(p);

            return [
                (h0 >>> 24) & 0xff, (h0 >>> 16) & 0xff, (h0 >>> 8) & 0xff, (h0 >>> 0) & 0xff,
                (h1 >>> 24) & 0xff, (h1 >>> 16) & 0xff, (h1 >>> 8) & 0xff, (h1 >>> 0) & 0xff,
                (h2 >>> 24) & 0xff, (h2 >>> 16) & 0xff, (h2 >>> 8) & 0xff, (h2 >>> 0) & 0xff,
                (h3 >>> 24) & 0xff, (h3 >>> 16) & 0xff, (h3 >>> 8) & 0xff, (h3 >>> 0) & 0xff,
                (h4 >>> 24) & 0xff, (h4 >>> 16) & 0xff, (h4 >>> 8) & 0xff, (h4 >>> 0) & 0xff,
                (h5 >>> 24) & 0xff, (h5 >>> 16) & 0xff, (h5 >>> 8) & 0xff, (h5 >>> 0) & 0xff,
                (h6 >>> 24) & 0xff, (h6 >>> 16) & 0xff, (h6 >>> 8) & 0xff, (h6 >>> 0) & 0xff,
                (h7 >>> 24) & 0xff, (h7 >>> 16) & 0xff, (h7 >>> 8) & 0xff, (h7 >>> 0) & 0xff
            ];
        }

        function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
            // compress password if it's longer than hash block length
            password = (password.length <= 64) ? password : SHA256(password);

            const innerLen = 64 + salt.length + 4;
            const inner = new Array(innerLen);
            const outerKey = new Array(64);

            let i;
            let dk = [];

            // inner = (password ^ ipad) || salt || counter
            for (i = 0; i < 64; i++) { inner[i] = 0x36; }
            for (i = 0; i < password.length; i++) { inner[i] ^= password[i]; }
            for (i = 0; i < salt.length; i++) { inner[64 + i] = salt[i]; }
            for (i = innerLen - 4; i < innerLen; i++) { inner[i] = 0; }

            // outerKey = password ^ opad
            for (i = 0; i < 64; i++) outerKey[i] = 0x5c;
            for (i = 0; i < password.length; i++) outerKey[i] ^= password[i];

            // increments counter inside inner
            function incrementCounter() {
                for (let i = innerLen - 1; i >= innerLen - 4; i--) {
                    inner[i]++;
                    if (inner[i] <= 0xff) return;
                    inner[i] = 0;
                }
            }

            // output blocks = SHA256(outerKey || SHA256(inner)) ...
            while (dkLen >= 32) {
                incrementCounter();
                dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));
                dkLen -= 32;
            }
            if (dkLen > 0) {
                incrementCounter();
                dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));
            }

            return dk;
        }

        // The following is an adaptation of scryptsy
        // See: https://www.npmjs.com/package/scryptsy
        function blockmix_salsa8(BY, Yi, r, x, _X) {
            let i;

            arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);
            for (i = 0; i < 2 * r; i++) {
                blockxor(BY, i * 16, _X, 16);
                salsa20_8(_X, x);
                arraycopy(_X, 0, BY, Yi + (i * 16), 16);
            }

            for (i = 0; i < r; i++) {
                arraycopy(BY, Yi + (i * 2) * 16, BY, (i * 16), 16);
            }

            for (i = 0; i < r; i++) {
                arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);
            }
        }

        function R(a, b) {
            return (a << b) | (a >>> (32 - b));
        }

        function salsa20_8(B, x) {
            arraycopy(B, 0, x, 0, 16);

            for (let i = 8; i > 0; i -= 2) {
                x[ 4] ^= R(x[ 0] + x[12], 7);
                x[ 8] ^= R(x[ 4] + x[ 0], 9);
                x[12] ^= R(x[ 8] + x[ 4], 13);
                x[ 0] ^= R(x[12] + x[ 8], 18);
                x[ 9] ^= R(x[ 5] + x[ 1], 7);
                x[13] ^= R(x[ 9] + x[ 5], 9);
                x[ 1] ^= R(x[13] + x[ 9], 13);
                x[ 5] ^= R(x[ 1] + x[13], 18);
                x[14] ^= R(x[10] + x[ 6], 7);
                x[ 2] ^= R(x[14] + x[10], 9);
                x[ 6] ^= R(x[ 2] + x[14], 13);
                x[10] ^= R(x[ 6] + x[ 2], 18);
                x[ 3] ^= R(x[15] + x[11], 7);
                x[ 7] ^= R(x[ 3] + x[15], 9);
                x[11] ^= R(x[ 7] + x[ 3], 13);
                x[15] ^= R(x[11] + x[ 7], 18);
                x[ 1] ^= R(x[ 0] + x[ 3], 7);
                x[ 2] ^= R(x[ 1] + x[ 0], 9);
                x[ 3] ^= R(x[ 2] + x[ 1], 13);
                x[ 0] ^= R(x[ 3] + x[ 2], 18);
                x[ 6] ^= R(x[ 5] + x[ 4], 7);
                x[ 7] ^= R(x[ 6] + x[ 5], 9);
                x[ 4] ^= R(x[ 7] + x[ 6], 13);
                x[ 5] ^= R(x[ 4] + x[ 7], 18);
                x[11] ^= R(x[10] + x[ 9], 7);
                x[ 8] ^= R(x[11] + x[10], 9);
                x[ 9] ^= R(x[ 8] + x[11], 13);
                x[10] ^= R(x[ 9] + x[ 8], 18);
                x[12] ^= R(x[15] + x[14], 7);
                x[13] ^= R(x[12] + x[15], 9);
                x[14] ^= R(x[13] + x[12], 13);
                x[15] ^= R(x[14] + x[13], 18);
            }

            for (let i = 0; i < 16; ++i) {
                B[i] += x[i];
            }
        }

        // naive approach... going back to loop unrolling may yield additional performance
        function blockxor(S, Si, D, len) {
            for (let i = 0; i < len; i++) {
                D[i] ^= S[Si + i];
            }
        }

        function arraycopy(src, srcPos, dest, destPos, length) {
            while (length--) {
                dest[destPos++] = src[srcPos++];
            }
        }

        function checkBufferish(o) {
            if (!o || typeof(o.length) !== 'number') { return false; }

            for (let i = 0; i < o.length; i++) {
                const v = o[i];
                if (typeof(v) !== 'number' || v % 1 || v < 0 || v >= 256) {
                    return false;
                }
            }

            return true;
        }

        function ensureInteger(value, name) {
            if (typeof(value) !== "number" || (value % 1)) { throw new Error('invalid ' + name); }
            return value;
        }

        // N = Cpu cost, r = Memory cost, p = parallelization cost
        // callback(error, progress, key)
        function _scrypt(password, salt, N, r, p, dkLen, callback) {

            N = ensureInteger(N, 'N');
            r = ensureInteger(r, 'r');
            p = ensureInteger(p, 'p');

            dkLen = ensureInteger(dkLen, 'dkLen');

            if (N === 0 || (N & (N - 1)) !== 0) { throw new Error('N must be power of 2'); }

            if (N > MAX_VALUE / 128 / r) { throw new Error('N too large'); }
            if (r > MAX_VALUE / 128 / p) { throw new Error('r too large'); }

            if (!checkBufferish(password)) {
                throw new Error('password must be an array or buffer');
            }
            password = Array.prototype.slice.call(password);

            if (!checkBufferish(salt)) {
                throw new Error('salt must be an array or buffer');
            }
            salt = Array.prototype.slice.call(salt);

            let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);
            const B = new Uint32Array(p * 32 * r);
            for (let i = 0; i < B.length; i++) {
                const j = i * 4;
                B[i] = ((b[j + 3] & 0xff) << 24) |
                       ((b[j + 2] & 0xff) << 16) |
                       ((b[j + 1] & 0xff) << 8) |
                       ((b[j + 0] & 0xff) << 0);
            }

            const XY = new Uint32Array(64 * r);
            const V = new Uint32Array(32 * r * N);

            const Yi = 32 * r;

            // scratch space
            const x = new Uint32Array(16);       // salsa20_8
            const _X = new Uint32Array(16);      // blockmix_salsa8

            const totalOps = p * N * 2;
            let currentOp = 0;
            let lastPercent10 = null;

            // Set this to true to abandon the scrypt on the next step
            let stop = false;

            // State information
            let state = 0;
            let i0 = 0, i1;
            let Bi;

            // How many blockmix_salsa8 can we do per step?
            const limit = callback ? parseInt(1000 / r): 0xffffffff;

            // Trick from scrypt-async; if there is a setImmediate shim in place, use it
            const nextTick = (typeof(setImmediate) !== 'undefined') ? setImmediate : setTimeout;

            // This is really all I changed; making scryptsy a state machine so we occasionally
            // stop and give other evnts on the evnt loop a chance to run. ~RicMoo
            const incrementalSMix = function() {
                if (stop) {
                    return callback(new Error('cancelled'), currentOp / totalOps);
                }

                let steps;

                switch (state) {
                    case 0:
                        // for (var i = 0; i < p; i++)...
                        Bi = i0 * 32 * r;

                        arraycopy(B, Bi, XY, 0, Yi);                       // ROMix - 1

                        state = 1;                                         // Move to ROMix 2
                        i1 = 0;

                        // Fall through

                    case 1:

                        // Run up to 1000 steps of the first inner smix loop
                        steps = N - i1;
                        if (steps > limit) { steps = limit; }
                        for (let i = 0; i < steps; i++) {                  // ROMix - 2
                            arraycopy(XY, 0, V, (i1 + i) * Yi, Yi);         // ROMix - 3
                            blockmix_salsa8(XY, Yi, r, x, _X);             // ROMix - 4
                        }

                        // for (var i = 0; i < N; i++)
                        i1 += steps;
                        currentOp += steps;

                        if (callback) {
                            // Call the callback with the progress (optionally stopping us)
                            const percent10 = parseInt(1000 * currentOp / totalOps);
                            if (percent10 !== lastPercent10) {
                                stop = callback(null, currentOp / totalOps);
                                if (stop) { break; }
                                lastPercent10 = percent10;
                            }
                        }

                        if (i1 < N) { break; }

                        i1 = 0;                                          // Move to ROMix 6
                        state = 2;

                        // Fall through

                    case 2:

                        // Run up to 1000 steps of the second inner smix loop
                        steps = N - i1;
                        if (steps > limit) { steps = limit; }
                        for (let i = 0; i < steps; i++) {                // ROMix - 6
                            const offset = (2 * r - 1) * 16;             // ROMix - 7
                            const j = XY[offset] & (N - 1);
                            blockxor(V, j * Yi, XY, Yi);                 // ROMix - 8 (inner)
                            blockmix_salsa8(XY, Yi, r, x, _X);           // ROMix - 9 (outer)
                        }

                        // for (var i = 0; i < N; i++)...
                        i1 += steps;
                        currentOp += steps;

                        // Call the callback with the progress (optionally stopping us)
                        if (callback) {
                            const percent10 = parseInt(1000 * currentOp / totalOps);
                            if (percent10 !== lastPercent10) {
                                stop = callback(null, currentOp / totalOps);
                                if (stop) { break; }
                                lastPercent10 = percent10;
                            }
                        }

                        if (i1 < N) { break; }

                        arraycopy(XY, 0, B, Bi, Yi);                     // ROMix - 10

                        // for (var i = 0; i < p; i++)...
                        i0++;
                        if (i0 < p) {
                            state = 0;
                            break;
                        }

                        b = [];
                        for (let i = 0; i < B.length; i++) {
                            b.push((B[i] >>  0) & 0xff);
                            b.push((B[i] >>  8) & 0xff);
                            b.push((B[i] >> 16) & 0xff);
                            b.push((B[i] >> 24) & 0xff);
                        }

                        const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);

                        // Send the result to the callback
                        if (callback) { callback(null, 1.0, derivedKey); }

                        // Done; don't break (which would reschedule)
                        return derivedKey;
                }

                // Schedule the next steps
                if (callback) { nextTick(incrementalSMix); }
            };

            // Run the smix state machine until completion
            if (!callback) {
                while (true) {
                    const derivedKey = incrementalSMix();
                    if (derivedKey != undefined) { return derivedKey; }
                }
            }

            // Bootstrap the async incremental smix
            incrementalSMix();
        }

        const lib = {
            scrypt: function(password, salt, N, r, p, dkLen, progressCallback) {
                return new Promise(function(resolve, reject) {
                    let lastProgress = 0;
                    if (progressCallback) { progressCallback(0); }
                    _scrypt(password, salt, N, r, p, dkLen, function(error, progress, key) {
                        if (error) {
                            reject(error);
                        } else if (key) {
                            if (progressCallback && lastProgress !== 1) {
                                progressCallback(1);
                            }
                            resolve(new Uint8Array(key));
                        } else if (progressCallback && progress !== lastProgress) {
                            lastProgress = progress;
                            return progressCallback(progress);
                        }
                    });
                });
            },
            syncScrypt: function(password, salt, N, r, p, dkLen) {
                return new Uint8Array(_scrypt(password, salt, N, r, p, dkLen));
            }
        };

        // node.js
        {
           module.exports = lib;

        // RequireJS/AMD
        // http://www.requirejs.org/docs/api.html
        // https://github.com/amdjs/amdjs-api/wiki/AMD
        }

    })();
    });

    var scrypt$1 = scrypt;

    var __awaiter$h = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$l = new Logger(version$9);
    // Exported Types
    function hasMnemonic$1(value) {
        return (value != null && value.mnemonic && value.mnemonic.phrase);
    }
    class KeystoreAccount extends Description {
        isKeystoreAccount(value) {
            return !!(value && value._isKeystoreAccount);
        }
    }
    function _decrypt(data, key, ciphertext) {
        const cipher = searchPath(data, "crypto/cipher");
        if (cipher === "aes-128-ctr") {
            const iv = looseArrayify(searchPath(data, "crypto/cipherparams/iv"));
            const counter = new aesJs.Counter(iv);
            const aesCtr = new aesJs.ModeOfOperation.ctr(key, counter);
            return arrayify(aesCtr.decrypt(ciphertext));
        }
        return null;
    }
    function _getAccount(data, key) {
        const ciphertext = looseArrayify(searchPath(data, "crypto/ciphertext"));
        const computedMAC = hexlify(keccak256$1(concat$1([key.slice(16, 32), ciphertext]))).substring(2);
        if (computedMAC !== searchPath(data, "crypto/mac").toLowerCase()) {
            throw new Error("invalid password");
        }
        const privateKey = _decrypt(data, key.slice(0, 16), ciphertext);
        if (!privateKey) {
            logger$l.throwError("unsupported cipher", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "decrypt"
            });
        }
        const mnemonicKey = key.slice(32, 64);
        const address = computeAddress(privateKey);
        if (data.address) {
            let check = data.address.toLowerCase();
            if (check.substring(0, 2) !== "0x") {
                check = "0x" + check;
            }
            if (getAddress(check) !== address) {
                throw new Error("address mismatch");
            }
        }
        const account = {
            _isKeystoreAccount: true,
            address: address,
            privateKey: hexlify(privateKey)
        };
        // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase
        if (searchPath(data, "x-ethers/version") === "0.1") {
            const mnemonicCiphertext = looseArrayify(searchPath(data, "x-ethers/mnemonicCiphertext"));
            const mnemonicIv = looseArrayify(searchPath(data, "x-ethers/mnemonicCounter"));
            const mnemonicCounter = new aesJs.Counter(mnemonicIv);
            const mnemonicAesCtr = new aesJs.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
            const path = searchPath(data, "x-ethers/path") || defaultPath;
            const locale = searchPath(data, "x-ethers/locale") || "en";
            const entropy = arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));
            try {
                const mnemonic = entropyToMnemonic(entropy, locale);
                const node = HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);
                if (node.privateKey != account.privateKey) {
                    throw new Error("mnemonic mismatch");
                }
                account.mnemonic = node.mnemonic;
            }
            catch (error) {
                // If we don't have the locale wordlist installed to
                // read this mnemonic, just bail and don't set the
                // mnemonic
                if (error.code !== Logger.errors.INVALID_ARGUMENT || error.argument !== "wordlist") {
                    throw error;
                }
            }
        }
        return new KeystoreAccount(account);
    }
    function pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {
        return arrayify(pbkdf2$1(passwordBytes, salt, count, dkLen, prfFunc));
    }
    function pbkdf2(passwordBytes, salt, count, dkLen, prfFunc) {
        return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));
    }
    function _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {
        const passwordBytes = getPassword(password);
        const kdf = searchPath(data, "crypto/kdf");
        if (kdf && typeof (kdf) === "string") {
            const throwError = function (name, value) {
                return logger$l.throwArgumentError("invalid key-derivation function parameters", name, value);
            };
            if (kdf.toLowerCase() === "scrypt") {
                const salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
                const N = parseInt(searchPath(data, "crypto/kdfparams/n"));
                const r = parseInt(searchPath(data, "crypto/kdfparams/r"));
                const p = parseInt(searchPath(data, "crypto/kdfparams/p"));
                // Check for all required parameters
                if (!N || !r || !p) {
                    throwError("kdf", kdf);
                }
                // Make sure N is a power of 2
                if ((N & (N - 1)) !== 0) {
                    throwError("N", N);
                }
                const dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
                if (dkLen !== 32) {
                    throwError("dklen", dkLen);
                }
                return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);
            }
            else if (kdf.toLowerCase() === "pbkdf2") {
                const salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
                let prfFunc = null;
                const prf = searchPath(data, "crypto/kdfparams/prf");
                if (prf === "hmac-sha256") {
                    prfFunc = "sha256";
                }
                else if (prf === "hmac-sha512") {
                    prfFunc = "sha512";
                }
                else {
                    throwError("prf", prf);
                }
                const count = parseInt(searchPath(data, "crypto/kdfparams/c"));
                const dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
                if (dkLen !== 32) {
                    throwError("dklen", dkLen);
                }
                return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);
            }
        }
        return logger$l.throwArgumentError("unsupported key-derivation function", "kdf", kdf);
    }
    function decryptSync(json, password) {
        const data = JSON.parse(json);
        const key = _computeKdfKey(data, password, pbkdf2Sync, scrypt$1.syncScrypt);
        return _getAccount(data, key);
    }
    function decrypt(json, password, progressCallback) {
        return __awaiter$h(this, void 0, void 0, function* () {
            const data = JSON.parse(json);
            const key = yield _computeKdfKey(data, password, pbkdf2, scrypt$1.scrypt, progressCallback);
            return _getAccount(data, key);
        });
    }
    function encrypt(account, password, options, progressCallback) {
        try {
            // Check the address matches the private key
            if (getAddress(account.address) !== computeAddress(account.privateKey)) {
                throw new Error("address/privateKey mismatch");
            }
            // Check the mnemonic (if any) matches the private key
            if (hasMnemonic$1(account)) {
                const mnemonic = account.mnemonic;
                const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || defaultPath);
                if (node.privateKey != account.privateKey) {
                    throw new Error("mnemonic mismatch");
                }
            }
        }
        catch (e) {
            return Promise.reject(e);
        }
        // The options are optional, so adjust the call as needed
        if (typeof (options) === "function" && !progressCallback) {
            progressCallback = options;
            options = {};
        }
        if (!options) {
            options = {};
        }
        const privateKey = arrayify(account.privateKey);
        const passwordBytes = getPassword(password);
        let entropy = null;
        let path = null;
        let locale = null;
        if (hasMnemonic$1(account)) {
            const srcMnemonic = account.mnemonic;
            entropy = arrayify(mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || "en"));
            path = srcMnemonic.path || defaultPath;
            locale = srcMnemonic.locale || "en";
        }
        let client = options.client;
        if (!client) {
            client = "ethers.js";
        }
        // Check/generate the salt
        let salt = null;
        if (options.salt) {
            salt = arrayify(options.salt);
        }
        else {
            salt = randomBytes(32);
        }
        // Override initialization vector
        let iv = null;
        if (options.iv) {
            iv = arrayify(options.iv);
            if (iv.length !== 16) {
                throw new Error("invalid iv");
            }
        }
        else {
            iv = randomBytes(16);
        }
        // Override the uuid
        let uuidRandom = null;
        if (options.uuid) {
            uuidRandom = arrayify(options.uuid);
            if (uuidRandom.length !== 16) {
                throw new Error("invalid uuid");
            }
        }
        else {
            uuidRandom = randomBytes(16);
        }
        // Override the scrypt password-based key derivation function parameters
        let N = (1 << 17), r = 8, p = 1;
        if (options.scrypt) {
            if (options.scrypt.N) {
                N = options.scrypt.N;
            }
            if (options.scrypt.r) {
                r = options.scrypt.r;
            }
            if (options.scrypt.p) {
                p = options.scrypt.p;
            }
        }
        // We take 64 bytes:
        //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)
        //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)
        return scrypt$1.scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then((key) => {
            key = arrayify(key);
            // This will be used to encrypt the wallet (as per Web3 secret storage)
            const derivedKey = key.slice(0, 16);
            const macPrefix = key.slice(16, 32);
            // This will be used to encrypt the mnemonic phrase (if any)
            const mnemonicKey = key.slice(32, 64);
            // Encrypt the private key
            const counter = new aesJs.Counter(iv);
            const aesCtr = new aesJs.ModeOfOperation.ctr(derivedKey, counter);
            const ciphertext = arrayify(aesCtr.encrypt(privateKey));
            // Compute the message authentication code, used to check the password
            const mac = keccak256$1(concat$1([macPrefix, ciphertext]));
            // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition
            const data = {
                address: account.address.substring(2).toLowerCase(),
                id: uuidV4(uuidRandom),
                version: 3,
                crypto: {
                    cipher: "aes-128-ctr",
                    cipherparams: {
                        iv: hexlify(iv).substring(2),
                    },
                    ciphertext: hexlify(ciphertext).substring(2),
                    kdf: "scrypt",
                    kdfparams: {
                        salt: hexlify(salt).substring(2),
                        n: N,
                        dklen: 32,
                        p: p,
                        r: r
                    },
                    mac: mac.substring(2)
                }
            };
            // If we have a mnemonic, encrypt it into the JSON wallet
            if (entropy) {
                const mnemonicIv = randomBytes(16);
                const mnemonicCounter = new aesJs.Counter(mnemonicIv);
                const mnemonicAesCtr = new aesJs.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
                const mnemonicCiphertext = arrayify(mnemonicAesCtr.encrypt(entropy));
                const now = new Date();
                const timestamp = (now.getUTCFullYear() + "-" +
                    zpad(now.getUTCMonth() + 1, 2) + "-" +
                    zpad(now.getUTCDate(), 2) + "T" +
                    zpad(now.getUTCHours(), 2) + "-" +
                    zpad(now.getUTCMinutes(), 2) + "-" +
                    zpad(now.getUTCSeconds(), 2) + ".0Z");
                data["x-ethers"] = {
                    client: client,
                    gethFilename: ("UTC--" + timestamp + "--" + data.address),
                    mnemonicCounter: hexlify(mnemonicIv).substring(2),
                    mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),
                    path: path,
                    locale: locale,
                    version: "0.1"
                };
            }
            return JSON.stringify(data);
        });
    }

    function decryptJsonWallet(json, password, progressCallback) {
        if (isCrowdsaleWallet(json)) {
            if (progressCallback) {
                progressCallback(0);
            }
            const account = decrypt$1(json, password);
            if (progressCallback) {
                progressCallback(1);
            }
            return Promise.resolve(account);
        }
        if (isKeystoreWallet(json)) {
            return decrypt(json, password, progressCallback);
        }
        return Promise.reject(new Error("invalid JSON wallet"));
    }
    function decryptJsonWalletSync(json, password) {
        if (isCrowdsaleWallet(json)) {
            return decrypt$1(json, password);
        }
        if (isKeystoreWallet(json)) {
            return decryptSync(json, password);
        }
        throw new Error("invalid JSON wallet");
    }

    var lib_esm$5 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        decryptCrowdsale: decrypt$1,
        decryptKeystore: decrypt,
        decryptKeystoreSync: decryptSync,
        encryptKeystore: encrypt,
        isCrowdsaleWallet: isCrowdsaleWallet,
        isKeystoreWallet: isKeystoreWallet,
        getJsonWalletAddress: getJsonWalletAddress,
        decryptJsonWallet: decryptJsonWallet,
        decryptJsonWalletSync: decryptJsonWalletSync
    });

    const version$8 = "wallet/5.7.0";

    var __awaiter$g = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$k = new Logger(version$8);
    function isAccount(value) {
        return (value != null && isHexString(value.privateKey, 32) && value.address != null);
    }
    function hasMnemonic(value) {
        const mnemonic = value.mnemonic;
        return (mnemonic && mnemonic.phrase);
    }
    class Wallet extends Signer {
        constructor(privateKey, provider) {
            super();
            if (isAccount(privateKey)) {
                const signingKey = new SigningKey(privateKey.privateKey);
                defineReadOnly(this, "_signingKey", () => signingKey);
                defineReadOnly(this, "address", computeAddress(this.publicKey));
                if (this.address !== getAddress(privateKey.address)) {
                    logger$k.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]");
                }
                if (hasMnemonic(privateKey)) {
                    const srcMnemonic = privateKey.mnemonic;
                    defineReadOnly(this, "_mnemonic", () => ({
                        phrase: srcMnemonic.phrase,
                        path: srcMnemonic.path || defaultPath,
                        locale: srcMnemonic.locale || "en"
                    }));
                    const mnemonic = this.mnemonic;
                    const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);
                    if (computeAddress(node.privateKey) !== this.address) {
                        logger$k.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
                    }
                }
                else {
                    defineReadOnly(this, "_mnemonic", () => null);
                }
            }
            else {
                if (SigningKey.isSigningKey(privateKey)) {
                    /* istanbul ignore if */
                    if (privateKey.curve !== "secp256k1") {
                        logger$k.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]");
                    }
                    defineReadOnly(this, "_signingKey", () => privateKey);
                }
                else {
                    // A lot of common tools do not prefix private keys with a 0x (see: #1166)
                    if (typeof (privateKey) === "string") {
                        if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {
                            privateKey = "0x" + privateKey;
                        }
                    }
                    const signingKey = new SigningKey(privateKey);
                    defineReadOnly(this, "_signingKey", () => signingKey);
                }
                defineReadOnly(this, "_mnemonic", () => null);
                defineReadOnly(this, "address", computeAddress(this.publicKey));
            }
            /* istanbul ignore if */
            if (provider && !Provider.isProvider(provider)) {
                logger$k.throwArgumentError("invalid provider", "provider", provider);
            }
            defineReadOnly(this, "provider", provider || null);
        }
        get mnemonic() { return this._mnemonic(); }
        get privateKey() { return this._signingKey().privateKey; }
        get publicKey() { return this._signingKey().publicKey; }
        getAddress() {
            return Promise.resolve(this.address);
        }
        connect(provider) {
            return new Wallet(this, provider);
        }
        signTransaction(transaction) {
            return resolveProperties(transaction).then((tx) => {
                if (tx.from != null) {
                    if (getAddress(tx.from) !== this.address) {
                        logger$k.throwArgumentError("transaction from address mismatch", "transaction.from", transaction.from);
                    }
                    delete tx.from;
                }
                const signature = this._signingKey().signDigest(keccak256$1(serialize$1(tx)));
                return serialize$1(tx, signature);
            });
        }
        signMessage(message) {
            return __awaiter$g(this, void 0, void 0, function* () {
                return joinSignature(this._signingKey().signDigest(hashMessage(message)));
            });
        }
        _signTypedData(domain, types, value) {
            return __awaiter$g(this, void 0, void 0, function* () {
                // Populate any ENS names
                const populated = yield TypedDataEncoder.resolveNames(domain, types, value, (name) => {
                    if (this.provider == null) {
                        logger$k.throwError("cannot resolve ENS names without a provider", Logger.errors.UNSUPPORTED_OPERATION, {
                            operation: "resolveName",
                            value: name
                        });
                    }
                    return this.provider.resolveName(name);
                });
                return joinSignature(this._signingKey().signDigest(TypedDataEncoder.hash(populated.domain, types, populated.value)));
            });
        }
        encrypt(password, options, progressCallback) {
            if (typeof (options) === "function" && !progressCallback) {
                progressCallback = options;
                options = {};
            }
            if (progressCallback && typeof (progressCallback) !== "function") {
                throw new Error("invalid callback");
            }
            if (!options) {
                options = {};
            }
            return encrypt(this, password, options, progressCallback);
        }
        /**
         *  Static methods to create Wallet instances.
         */
        static createRandom(options) {
            let entropy = randomBytes(16);
            if (!options) {
                options = {};
            }
            if (options.extraEntropy) {
                entropy = arrayify(hexDataSlice(keccak256$1(concat$1([entropy, options.extraEntropy])), 0, 16));
            }
            const mnemonic = entropyToMnemonic(entropy, options.locale);
            return Wallet.fromMnemonic(mnemonic, options.path, options.locale);
        }
        static fromEncryptedJson(json, password, progressCallback) {
            return decryptJsonWallet(json, password, progressCallback).then((account) => {
                return new Wallet(account);
            });
        }
        static fromEncryptedJsonSync(json, password) {
            return new Wallet(decryptJsonWalletSync(json, password));
        }
        static fromMnemonic(mnemonic, path, wordlist) {
            if (!path) {
                path = defaultPath;
            }
            return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));
        }
    }
    function verifyMessage(message, signature) {
        return recoverAddress(hashMessage(message), signature);
    }
    function verifyTypedData(domain, types, value, signature) {
        return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature);
    }

    var lib_esm$4 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Wallet: Wallet,
        verifyMessage: verifyMessage,
        verifyTypedData: verifyTypedData
    });

    const version$7 = "networks/5.7.1";

    const logger$j = new Logger(version$7);
    function isRenetworkable(value) {
        return (value && typeof (value.renetwork) === "function");
    }
    function ethDefaultProvider(network) {
        const func = function (providers, options) {
            if (options == null) {
                options = {};
            }
            const providerList = [];
            if (providers.InfuraProvider && options.infura !== "-") {
                try {
                    providerList.push(new providers.InfuraProvider(network, options.infura));
                }
                catch (error) { }
            }
            if (providers.EtherscanProvider && options.etherscan !== "-") {
                try {
                    providerList.push(new providers.EtherscanProvider(network, options.etherscan));
                }
                catch (error) { }
            }
            if (providers.AlchemyProvider && options.alchemy !== "-") {
                try {
                    providerList.push(new providers.AlchemyProvider(network, options.alchemy));
                }
                catch (error) { }
            }
            if (providers.PocketProvider && options.pocket !== "-") {
                // These networks are currently faulty on Pocket as their
                // network does not handle the Berlin hardfork, which is
                // live on these ones.
                // @TODO: This goes away once Pocket has upgraded their nodes
                const skip = ["goerli", "ropsten", "rinkeby", "sepolia"];
                try {
                    const provider = new providers.PocketProvider(network, options.pocket);
                    if (provider.network && skip.indexOf(provider.network.name) === -1) {
                        providerList.push(provider);
                    }
                }
                catch (error) { }
            }
            if (providers.CloudflareProvider && options.cloudflare !== "-") {
                try {
                    providerList.push(new providers.CloudflareProvider(network));
                }
                catch (error) { }
            }
            if (providers.AnkrProvider && options.ankr !== "-") {
                try {
                    const skip = ["ropsten"];
                    const provider = new providers.AnkrProvider(network, options.ankr);
                    if (provider.network && skip.indexOf(provider.network.name) === -1) {
                        providerList.push(provider);
                    }
                }
                catch (error) { }
            }
            if (providerList.length === 0) {
                return null;
            }
            if (providers.FallbackProvider) {
                let quorum = 1;
                if (options.quorum != null) {
                    quorum = options.quorum;
                }
                else if (network === "homestead") {
                    quorum = 2;
                }
                return new providers.FallbackProvider(providerList, quorum);
            }
            return providerList[0];
        };
        func.renetwork = function (network) {
            return ethDefaultProvider(network);
        };
        return func;
    }
    function etcDefaultProvider(url, network) {
        const func = function (providers, options) {
            if (providers.JsonRpcProvider) {
                return new providers.JsonRpcProvider(url, network);
            }
            return null;
        };
        func.renetwork = function (network) {
            return etcDefaultProvider(url, network);
        };
        return func;
    }
    const homestead = {
        chainId: 1,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "homestead",
        _defaultProvider: ethDefaultProvider("homestead")
    };
    const ropsten = {
        chainId: 3,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "ropsten",
        _defaultProvider: ethDefaultProvider("ropsten")
    };
    const classicMordor = {
        chainId: 63,
        name: "classicMordor",
        _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/mordor", "classicMordor")
    };
    // See: https://chainlist.org
    const networks$1 = {
        unspecified: { chainId: 0, name: "unspecified" },
        homestead: homestead,
        mainnet: homestead,
        morden: { chainId: 2, name: "morden" },
        ropsten: ropsten,
        testnet: ropsten,
        rinkeby: {
            chainId: 4,
            ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
            name: "rinkeby",
            _defaultProvider: ethDefaultProvider("rinkeby")
        },
        kovan: {
            chainId: 42,
            name: "kovan",
            _defaultProvider: ethDefaultProvider("kovan")
        },
        goerli: {
            chainId: 5,
            ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
            name: "goerli",
            _defaultProvider: ethDefaultProvider("goerli")
        },
        kintsugi: { chainId: 1337702, name: "kintsugi" },
        sepolia: {
            chainId: 11155111,
            name: "sepolia",
            _defaultProvider: ethDefaultProvider("sepolia")
        },
        // ETC (See: #351)
        classic: {
            chainId: 61,
            name: "classic",
            _defaultProvider: etcDefaultProvider("https:/\/www.ethercluster.com/etc", "classic")
        },
        classicMorden: { chainId: 62, name: "classicMorden" },
        classicMordor: classicMordor,
        classicTestnet: classicMordor,
        classicKotti: {
            chainId: 6,
            name: "classicKotti",
            _defaultProvider: etcDefaultProvider("https:/\/www.ethercluster.com/kotti", "classicKotti")
        },
        xdai: { chainId: 100, name: "xdai" },
        matic: {
            chainId: 137,
            name: "matic",
            _defaultProvider: ethDefaultProvider("matic")
        },
        maticmum: { chainId: 80001, name: "maticmum" },
        optimism: {
            chainId: 10,
            name: "optimism",
            _defaultProvider: ethDefaultProvider("optimism")
        },
        "optimism-kovan": { chainId: 69, name: "optimism-kovan" },
        "optimism-goerli": { chainId: 420, name: "optimism-goerli" },
        arbitrum: { chainId: 42161, name: "arbitrum" },
        "arbitrum-rinkeby": { chainId: 421611, name: "arbitrum-rinkeby" },
        "arbitrum-goerli": { chainId: 421613, name: "arbitrum-goerli" },
        bnb: { chainId: 56, name: "bnb" },
        bnbt: { chainId: 97, name: "bnbt" },
    };
    /**
     *  getNetwork
     *
     *  Converts a named common networks or chain ID (network ID) to a Network
     *  and verifies a network is a valid Network..
     */
    function getNetwork(network) {
        // No network (null)
        if (network == null) {
            return null;
        }
        if (typeof (network) === "number") {
            for (const name in networks$1) {
                const standard = networks$1[name];
                if (standard.chainId === network) {
                    return {
                        name: standard.name,
                        chainId: standard.chainId,
                        ensAddress: (standard.ensAddress || null),
                        _defaultProvider: (standard._defaultProvider || null)
                    };
                }
            }
            return {
                chainId: network,
                name: "unknown"
            };
        }
        if (typeof (network) === "string") {
            const standard = networks$1[network];
            if (standard == null) {
                return null;
            }
            return {
                name: standard.name,
                chainId: standard.chainId,
                ensAddress: standard.ensAddress,
                _defaultProvider: (standard._defaultProvider || null)
            };
        }
        const standard = networks$1[network.name];
        // Not a standard network; check that it is a valid network in general
        if (!standard) {
            if (typeof (network.chainId) !== "number") {
                logger$j.throwArgumentError("invalid network chainId", "network", network);
            }
            return network;
        }
        // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)
        if (network.chainId !== 0 && network.chainId !== standard.chainId) {
            logger$j.throwArgumentError("network chainId mismatch", "network", network);
        }
        // @TODO: In the next major version add an attach function to a defaultProvider
        // class and move the _defaultProvider internal to this file (extend Network)
        let defaultProvider = network._defaultProvider || null;
        if (defaultProvider == null && standard._defaultProvider) {
            if (isRenetworkable(standard._defaultProvider)) {
                defaultProvider = standard._defaultProvider.renetwork(network);
            }
            else {
                defaultProvider = standard._defaultProvider;
            }
        }
        // Standard Network (allow overriding the ENS address)
        return {
            name: network.name,
            chainId: standard.chainId,
            ensAddress: (network.ensAddress || standard.ensAddress || null),
            _defaultProvider: defaultProvider
        };
    }

    const version$6 = "web/5.7.1";

    var __awaiter$f = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    function getUrl(href, options) {
        return __awaiter$f(this, void 0, void 0, function* () {
            if (options == null) {
                options = {};
            }
            const request = {
                method: (options.method || "GET"),
                headers: (options.headers || {}),
                body: (options.body || undefined),
            };
            if (options.skipFetchSetup !== true) {
                request.mode = "cors"; // no-cors, cors, *same-origin
                request.cache = "no-cache"; // *default, no-cache, reload, force-cache, only-if-cached
                request.credentials = "same-origin"; // include, *same-origin, omit
                request.redirect = "follow"; // manual, *follow, error
                request.referrer = "client"; // no-referrer, *client
            }
            if (options.fetchOptions != null) {
                const opts = options.fetchOptions;
                if (opts.mode) {
                    request.mode = (opts.mode);
                }
                if (opts.cache) {
                    request.cache = (opts.cache);
                }
                if (opts.credentials) {
                    request.credentials = (opts.credentials);
                }
                if (opts.redirect) {
                    request.redirect = (opts.redirect);
                }
                if (opts.referrer) {
                    request.referrer = opts.referrer;
                }
            }
            const response = yield fetch(href, request);
            const body = yield response.arrayBuffer();
            const headers = {};
            if (response.headers.forEach) {
                response.headers.forEach((value, key) => {
                    headers[key.toLowerCase()] = value;
                });
            }
            else {
                ((response.headers).keys)().forEach((key) => {
                    headers[key.toLowerCase()] = response.headers.get(key);
                });
            }
            return {
                headers: headers,
                statusCode: response.status,
                statusMessage: response.statusText,
                body: arrayify(new Uint8Array(body)),
            };
        });
    }

    var __awaiter$e = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$i = new Logger(version$6);
    function staller(duration) {
        return new Promise((resolve) => {
            setTimeout(resolve, duration);
        });
    }
    function bodyify(value, type) {
        if (value == null) {
            return null;
        }
        if (typeof (value) === "string") {
            return value;
        }
        if (isBytesLike(value)) {
            if (type && (type.split("/")[0] === "text" || type.split(";")[0].trim() === "application/json")) {
                try {
                    return toUtf8String(value);
                }
                catch (error) { }
            }
            return hexlify(value);
        }
        return value;
    }
    function unpercent(value) {
        return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {
            return String.fromCharCode(parseInt(code, 16));
        }));
    }
    // This API is still a work in progress; the future changes will likely be:
    // - ConnectionInfo => FetchDataRequest<T = any>
    // - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }
    //   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)
    // - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T
    // For this reason, it should be considered internal until the API is finalized
    function _fetchData(connection, body, processFunc) {
        // How many times to retry in the event of a throttle
        const attemptLimit = (typeof (connection) === "object" && connection.throttleLimit != null) ? connection.throttleLimit : 12;
        logger$i.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0), "invalid connection throttle limit", "connection.throttleLimit", attemptLimit);
        const throttleCallback = ((typeof (connection) === "object") ? connection.throttleCallback : null);
        const throttleSlotInterval = ((typeof (connection) === "object" && typeof (connection.throttleSlotInterval) === "number") ? connection.throttleSlotInterval : 100);
        logger$i.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0), "invalid connection throttle slot interval", "connection.throttleSlotInterval", throttleSlotInterval);
        const errorPassThrough = ((typeof (connection) === "object") ? !!(connection.errorPassThrough) : false);
        const headers = {};
        let url = null;
        // @TODO: Allow ConnectionInfo to override some of these values
        const options = {
            method: "GET",
        };
        let allow304 = false;
        let timeout = 2 * 60 * 1000;
        if (typeof (connection) === "string") {
            url = connection;
        }
        else if (typeof (connection) === "object") {
            if (connection == null || connection.url == null) {
                logger$i.throwArgumentError("missing URL", "connection.url", connection);
            }
            url = connection.url;
            if (typeof (connection.timeout) === "number" && connection.timeout > 0) {
                timeout = connection.timeout;
            }
            if (connection.headers) {
                for (const key in connection.headers) {
                    headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };
                    if (["if-none-match", "if-modified-since"].indexOf(key.toLowerCase()) >= 0) {
                        allow304 = true;
                    }
                }
            }
            options.allowGzip = !!connection.allowGzip;
            if (connection.user != null && connection.password != null) {
                if (url.substring(0, 6) !== "https:" && connection.allowInsecureAuthentication !== true) {
                    logger$i.throwError("basic authentication requires a secure https url", Logger.errors.INVALID_ARGUMENT, { argument: "url", url: url, user: connection.user, password: "[REDACTED]" });
                }
                const authorization = connection.user + ":" + connection.password;
                headers["authorization"] = {
                    key: "Authorization",
                    value: "Basic " + encode$6(toUtf8Bytes(authorization))
                };
            }
            if (connection.skipFetchSetup != null) {
                options.skipFetchSetup = !!connection.skipFetchSetup;
            }
            if (connection.fetchOptions != null) {
                options.fetchOptions = shallowCopy(connection.fetchOptions);
            }
        }
        const reData = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i");
        const dataMatch = ((url) ? url.match(reData) : null);
        if (dataMatch) {
            try {
                const response = {
                    statusCode: 200,
                    statusMessage: "OK",
                    headers: { "content-type": (dataMatch[1] || "text/plain") },
                    body: (dataMatch[2] ? decode$5(dataMatch[3]) : unpercent(dataMatch[3]))
                };
                let result = response.body;
                if (processFunc) {
                    result = processFunc(response.body, response);
                }
                return Promise.resolve(result);
            }
            catch (error) {
                logger$i.throwError("processing response error", Logger.errors.SERVER_ERROR, {
                    body: bodyify(dataMatch[1], dataMatch[2]),
                    error: error,
                    requestBody: null,
                    requestMethod: "GET",
                    url: url
                });
            }
        }
        if (body) {
            options.method = "POST";
            options.body = body;
            if (headers["content-type"] == null) {
                headers["content-type"] = { key: "Content-Type", value: "application/octet-stream" };
            }
            if (headers["content-length"] == null) {
                headers["content-length"] = { key: "Content-Length", value: String(body.length) };
            }
        }
        const flatHeaders = {};
        Object.keys(headers).forEach((key) => {
            const header = headers[key];
            flatHeaders[header.key] = header.value;
        });
        options.headers = flatHeaders;
        const runningTimeout = (function () {
            let timer = null;
            const promise = new Promise(function (resolve, reject) {
                if (timeout) {
                    timer = setTimeout(() => {
                        if (timer == null) {
                            return;
                        }
                        timer = null;
                        reject(logger$i.makeError("timeout", Logger.errors.TIMEOUT, {
                            requestBody: bodyify(options.body, flatHeaders["content-type"]),
                            requestMethod: options.method,
                            timeout: timeout,
                            url: url
                        }));
                    }, timeout);
                }
            });
            const cancel = function () {
                if (timer == null) {
                    return;
                }
                clearTimeout(timer);
                timer = null;
            };
            return { promise, cancel };
        })();
        const runningFetch = (function () {
            return __awaiter$e(this, void 0, void 0, function* () {
                for (let attempt = 0; attempt < attemptLimit; attempt++) {
                    let response = null;
                    try {
                        response = yield getUrl(url, options);
                        if (attempt < attemptLimit) {
                            if (response.statusCode === 301 || response.statusCode === 302) {
                                // Redirection; for now we only support absolute locataions
                                const location = response.headers.location || "";
                                if (options.method === "GET" && location.match(/^https:/)) {
                                    url = response.headers.location;
                                    continue;
                                }
                            }
                            else if (response.statusCode === 429) {
                                // Exponential back-off throttling
                                let tryAgain = true;
                                if (throttleCallback) {
                                    tryAgain = yield throttleCallback(attempt, url);
                                }
                                if (tryAgain) {
                                    let stall = 0;
                                    const retryAfter = response.headers["retry-after"];
                                    if (typeof (retryAfter) === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
                                        stall = parseInt(retryAfter) * 1000;
                                    }
                                    else {
                                        stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                                    }
                                    //console.log("Stalling 429");
                                    yield staller(stall);
                                    continue;
                                }
                            }
                        }
                    }
                    catch (error) {
                        response = error.response;
                        if (response == null) {
                            runningTimeout.cancel();
                            logger$i.throwError("missing response", Logger.errors.SERVER_ERROR, {
                                requestBody: bodyify(options.body, flatHeaders["content-type"]),
                                requestMethod: options.method,
                                serverError: error,
                                url: url
                            });
                        }
                    }
                    let body = response.body;
                    if (allow304 && response.statusCode === 304) {
                        body = null;
                    }
                    else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {
                        runningTimeout.cancel();
                        logger$i.throwError("bad response", Logger.errors.SERVER_ERROR, {
                            status: response.statusCode,
                            headers: response.headers,
                            body: bodyify(body, ((response.headers) ? response.headers["content-type"] : null)),
                            requestBody: bodyify(options.body, flatHeaders["content-type"]),
                            requestMethod: options.method,
                            url: url
                        });
                    }
                    if (processFunc) {
                        try {
                            const result = yield processFunc(body, response);
                            runningTimeout.cancel();
                            return result;
                        }
                        catch (error) {
                            // Allow the processFunc to trigger a throttle
                            if (error.throttleRetry && attempt < attemptLimit) {
                                let tryAgain = true;
                                if (throttleCallback) {
                                    tryAgain = yield throttleCallback(attempt, url);
                                }
                                if (tryAgain) {
                                    const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                                    //console.log("Stalling callback");
                                    yield staller(timeout);
                                    continue;
                                }
                            }
                            runningTimeout.cancel();
                            logger$i.throwError("processing response error", Logger.errors.SERVER_ERROR, {
                                body: bodyify(body, ((response.headers) ? response.headers["content-type"] : null)),
                                error: error,
                                requestBody: bodyify(options.body, flatHeaders["content-type"]),
                                requestMethod: options.method,
                                url: url
                            });
                        }
                    }
                    runningTimeout.cancel();
                    // If we had a processFunc, it either returned a T or threw above.
                    // The "body" is now a Uint8Array.
                    return body;
                }
                return logger$i.throwError("failed response", Logger.errors.SERVER_ERROR, {
                    requestBody: bodyify(options.body, flatHeaders["content-type"]),
                    requestMethod: options.method,
                    url: url
                });
            });
        })();
        return Promise.race([runningTimeout.promise, runningFetch]);
    }
    function fetchJson(connection, json, processFunc) {
        let processJsonFunc = (value, response) => {
            let result = null;
            if (value != null) {
                try {
                    result = JSON.parse(toUtf8String(value));
                }
                catch (error) {
                    logger$i.throwError("invalid JSON", Logger.errors.SERVER_ERROR, {
                        body: value,
                        error: error
                    });
                }
            }
            if (processFunc) {
                result = processFunc(result, response);
            }
            return result;
        };
        // If we have json to send, we must
        // - add content-type of application/json (unless already overridden)
        // - convert the json to bytes
        let body = null;
        if (json != null) {
            body = toUtf8Bytes(json);
            // Create a connection with the content-type set for JSON
            const updated = (typeof (connection) === "string") ? ({ url: connection }) : shallowCopy(connection);
            if (updated.headers) {
                const hasContentType = (Object.keys(updated.headers).filter((k) => (k.toLowerCase() === "content-type")).length) !== 0;
                if (!hasContentType) {
                    updated.headers = shallowCopy(updated.headers);
                    updated.headers["content-type"] = "application/json";
                }
            }
            else {
                updated.headers = { "content-type": "application/json" };
            }
            connection = updated;
        }
        return _fetchData(connection, body, processJsonFunc);
    }
    function poll(func, options) {
        if (!options) {
            options = {};
        }
        options = shallowCopy(options);
        if (options.floor == null) {
            options.floor = 0;
        }
        if (options.ceiling == null) {
            options.ceiling = 10000;
        }
        if (options.interval == null) {
            options.interval = 250;
        }
        return new Promise(function (resolve, reject) {
            let timer = null;
            let done = false;
            // Returns true if cancel was successful. Unsuccessful cancel means we're already done.
            const cancel = () => {
                if (done) {
                    return false;
                }
                done = true;
                if (timer) {
                    clearTimeout(timer);
                }
                return true;
            };
            if (options.timeout) {
                timer = setTimeout(() => {
                    if (cancel()) {
                        reject(new Error("timeout"));
                    }
                }, options.timeout);
            }
            const retryLimit = options.retryLimit;
            let attempt = 0;
            function check() {
                return func().then(function (result) {
                    // If we have a result, or are allowed null then we're done
                    if (result !== undefined) {
                        if (cancel()) {
                            resolve(result);
                        }
                    }
                    else if (options.oncePoll) {
                        options.oncePoll.once("poll", check);
                    }
                    else if (options.onceBlock) {
                        options.onceBlock.once("block", check);
                        // Otherwise, exponential back-off (up to 10s) our next request
                    }
                    else if (!done) {
                        attempt++;
                        if (attempt > retryLimit) {
                            if (cancel()) {
                                reject(new Error("retry limit reached"));
                            }
                            return;
                        }
                        let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                        if (timeout < options.floor) {
                            timeout = options.floor;
                        }
                        if (timeout > options.ceiling) {
                            timeout = options.ceiling;
                        }
                        setTimeout(check, timeout);
                    }
                    return null;
                }, function (error) {
                    if (cancel()) {
                        reject(error);
                    }
                });
            }
            check();
        });
    }

    var lib_esm$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        _fetchData: _fetchData,
        fetchJson: fetchJson,
        poll: poll
    });

    var ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';

    // pre-compute lookup table
    var ALPHABET_MAP = {};
    for (var z$4 = 0; z$4 < ALPHABET.length; z$4++) {
      var x$2 = ALPHABET.charAt(z$4);

      if (ALPHABET_MAP[x$2] !== undefined) throw new TypeError(x$2 + ' is ambiguous')
      ALPHABET_MAP[x$2] = z$4;
    }

    function polymodStep (pre) {
      var b = pre >> 25;
      return ((pre & 0x1FFFFFF) << 5) ^
        (-((b >> 0) & 1) & 0x3b6a57b2) ^
        (-((b >> 1) & 1) & 0x26508e6d) ^
        (-((b >> 2) & 1) & 0x1ea119fa) ^
        (-((b >> 3) & 1) & 0x3d4233dd) ^
        (-((b >> 4) & 1) & 0x2a1462b3)
    }

    function prefixChk (prefix) {
      var chk = 1;
      for (var i = 0; i < prefix.length; ++i) {
        var c = prefix.charCodeAt(i);
        if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'

        chk = polymodStep(chk) ^ (c >> 5);
      }
      chk = polymodStep(chk);

      for (i = 0; i < prefix.length; ++i) {
        var v = prefix.charCodeAt(i);
        chk = polymodStep(chk) ^ (v & 0x1f);
      }
      return chk
    }

    function encode$5 (prefix, words, LIMIT) {
      LIMIT = LIMIT || 90;
      if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')

      prefix = prefix.toLowerCase();

      // determine chk mod
      var chk = prefixChk(prefix);
      if (typeof chk === 'string') throw new Error(chk)

      var result = prefix + '1';
      for (var i = 0; i < words.length; ++i) {
        var x = words[i];
        if ((x >> 5) !== 0) throw new Error('Non 5-bit word')

        chk = polymodStep(chk) ^ x;
        result += ALPHABET.charAt(x);
      }

      for (i = 0; i < 6; ++i) {
        chk = polymodStep(chk);
      }
      chk ^= 1;

      for (i = 0; i < 6; ++i) {
        var v = (chk >> ((5 - i) * 5)) & 0x1f;
        result += ALPHABET.charAt(v);
      }

      return result
    }

    function __decode (str, LIMIT) {
      LIMIT = LIMIT || 90;
      if (str.length < 8) return str + ' too short'
      if (str.length > LIMIT) return 'Exceeds length limit'

      // don't allow mixed case
      var lowered = str.toLowerCase();
      var uppered = str.toUpperCase();
      if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str
      str = lowered;

      var split = str.lastIndexOf('1');
      if (split === -1) return 'No separator character for ' + str
      if (split === 0) return 'Missing prefix for ' + str

      var prefix = str.slice(0, split);
      var wordChars = str.slice(split + 1);
      if (wordChars.length < 6) return 'Data too short'

      var chk = prefixChk(prefix);
      if (typeof chk === 'string') return chk

      var words = [];
      for (var i = 0; i < wordChars.length; ++i) {
        var c = wordChars.charAt(i);
        var v = ALPHABET_MAP[c];
        if (v === undefined) return 'Unknown character ' + c
        chk = polymodStep(chk) ^ v;

        // not in the checksum?
        if (i + 6 >= wordChars.length) continue
        words.push(v);
      }

      if (chk !== 1) return 'Invalid checksum for ' + str
      return { prefix: prefix, words: words }
    }

    function decodeUnsafe () {
      var res = __decode.apply(null, arguments);
      if (typeof res === 'object') return res
    }

    function decode$4 (str) {
      var res = __decode.apply(null, arguments);
      if (typeof res === 'object') return res

      throw new Error(res)
    }

    function convert$1 (data, inBits, outBits, pad) {
      var value = 0;
      var bits = 0;
      var maxV = (1 << outBits) - 1;

      var result = [];
      for (var i = 0; i < data.length; ++i) {
        value = (value << inBits) | data[i];
        bits += inBits;

        while (bits >= outBits) {
          bits -= outBits;
          result.push((value >> bits) & maxV);
        }
      }

      if (pad) {
        if (bits > 0) {
          result.push((value << (outBits - bits)) & maxV);
        }
      } else {
        if (bits >= inBits) return 'Excess padding'
        if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'
      }

      return result
    }

    function toWordsUnsafe (bytes) {
      var res = convert$1(bytes, 8, 5, true);
      if (Array.isArray(res)) return res
    }

    function toWords (bytes) {
      var res = convert$1(bytes, 8, 5, true);
      if (Array.isArray(res)) return res

      throw new Error(res)
    }

    function fromWordsUnsafe (words) {
      var res = convert$1(words, 5, 8, false);
      if (Array.isArray(res)) return res
    }

    function fromWords (words) {
      var res = convert$1(words, 5, 8, false);
      if (Array.isArray(res)) return res

      throw new Error(res)
    }

    var bech32 = {
      decodeUnsafe: decodeUnsafe,
      decode: decode$4,
      encode: encode$5,
      toWordsUnsafe: toWordsUnsafe,
      toWords: toWords,
      fromWordsUnsafe: fromWordsUnsafe,
      fromWords: fromWords
    };

    var bech32$1 = bech32;

    const version$5 = "providers/5.7.2";

    const logger$h = new Logger(version$5);
    class Formatter {
        constructor() {
            this.formats = this.getDefaultFormats();
        }
        getDefaultFormats() {
            const formats = ({});
            const address = this.address.bind(this);
            const bigNumber = this.bigNumber.bind(this);
            const blockTag = this.blockTag.bind(this);
            const data = this.data.bind(this);
            const hash = this.hash.bind(this);
            const hex = this.hex.bind(this);
            const number = this.number.bind(this);
            const type = this.type.bind(this);
            const strictData = (v) => { return this.data(v, true); };
            formats.transaction = {
                hash: hash,
                type: type,
                accessList: Formatter.allowNull(this.accessList.bind(this), null),
                blockHash: Formatter.allowNull(hash, null),
                blockNumber: Formatter.allowNull(number, null),
                transactionIndex: Formatter.allowNull(number, null),
                confirmations: Formatter.allowNull(number, null),
                from: address,
                // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)
                // must be set
                gasPrice: Formatter.allowNull(bigNumber),
                maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
                maxFeePerGas: Formatter.allowNull(bigNumber),
                gasLimit: bigNumber,
                to: Formatter.allowNull(address, null),
                value: bigNumber,
                nonce: number,
                data: data,
                r: Formatter.allowNull(this.uint256),
                s: Formatter.allowNull(this.uint256),
                v: Formatter.allowNull(number),
                creates: Formatter.allowNull(address, null),
                raw: Formatter.allowNull(data),
            };
            formats.transactionRequest = {
                from: Formatter.allowNull(address),
                nonce: Formatter.allowNull(number),
                gasLimit: Formatter.allowNull(bigNumber),
                gasPrice: Formatter.allowNull(bigNumber),
                maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
                maxFeePerGas: Formatter.allowNull(bigNumber),
                to: Formatter.allowNull(address),
                value: Formatter.allowNull(bigNumber),
                data: Formatter.allowNull(strictData),
                type: Formatter.allowNull(number),
                accessList: Formatter.allowNull(this.accessList.bind(this), null),
            };
            formats.receiptLog = {
                transactionIndex: number,
                blockNumber: number,
                transactionHash: hash,
                address: address,
                topics: Formatter.arrayOf(hash),
                data: data,
                logIndex: number,
                blockHash: hash,
            };
            formats.receipt = {
                to: Formatter.allowNull(this.address, null),
                from: Formatter.allowNull(this.address, null),
                contractAddress: Formatter.allowNull(address, null),
                transactionIndex: number,
                // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
                root: Formatter.allowNull(hex),
                gasUsed: bigNumber,
                logsBloom: Formatter.allowNull(data),
                blockHash: hash,
                transactionHash: hash,
                logs: Formatter.arrayOf(this.receiptLog.bind(this)),
                blockNumber: number,
                confirmations: Formatter.allowNull(number, null),
                cumulativeGasUsed: bigNumber,
                effectiveGasPrice: Formatter.allowNull(bigNumber),
                status: Formatter.allowNull(number),
                type: type
            };
            formats.block = {
                hash: Formatter.allowNull(hash),
                parentHash: hash,
                number: number,
                timestamp: number,
                nonce: Formatter.allowNull(hex),
                difficulty: this.difficulty.bind(this),
                gasLimit: bigNumber,
                gasUsed: bigNumber,
                miner: Formatter.allowNull(address),
                extraData: data,
                transactions: Formatter.allowNull(Formatter.arrayOf(hash)),
                baseFeePerGas: Formatter.allowNull(bigNumber)
            };
            formats.blockWithTransactions = shallowCopy(formats.block);
            formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));
            formats.filter = {
                fromBlock: Formatter.allowNull(blockTag, undefined),
                toBlock: Formatter.allowNull(blockTag, undefined),
                blockHash: Formatter.allowNull(hash, undefined),
                address: Formatter.allowNull(address, undefined),
                topics: Formatter.allowNull(this.topics.bind(this), undefined),
            };
            formats.filterLog = {
                blockNumber: Formatter.allowNull(number),
                blockHash: Formatter.allowNull(hash),
                transactionIndex: number,
                removed: Formatter.allowNull(this.boolean.bind(this)),
                address: address,
                data: Formatter.allowFalsish(data, "0x"),
                topics: Formatter.arrayOf(hash),
                transactionHash: hash,
                logIndex: number,
            };
            return formats;
        }
        accessList(accessList) {
            return accessListify(accessList || []);
        }
        // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number
        // Strict! Used on input.
        number(number) {
            if (number === "0x") {
                return 0;
            }
            return BigNumber.from(number).toNumber();
        }
        type(number) {
            if (number === "0x" || number == null) {
                return 0;
            }
            return BigNumber.from(number).toNumber();
        }
        // Strict! Used on input.
        bigNumber(value) {
            return BigNumber.from(value);
        }
        // Requires a boolean, "true" or  "false"; returns a boolean
        boolean(value) {
            if (typeof (value) === "boolean") {
                return value;
            }
            if (typeof (value) === "string") {
                value = value.toLowerCase();
                if (value === "true") {
                    return true;
                }
                if (value === "false") {
                    return false;
                }
            }
            throw new Error("invalid boolean - " + value);
        }
        hex(value, strict) {
            if (typeof (value) === "string") {
                if (!strict && value.substring(0, 2) !== "0x") {
                    value = "0x" + value;
                }
                if (isHexString(value)) {
                    return value.toLowerCase();
                }
            }
            return logger$h.throwArgumentError("invalid hash", "value", value);
        }
        data(value, strict) {
            const result = this.hex(value, strict);
            if ((result.length % 2) !== 0) {
                throw new Error("invalid data; odd-length - " + value);
            }
            return result;
        }
        // Requires an address
        // Strict! Used on input.
        address(value) {
            return getAddress(value);
        }
        callAddress(value) {
            if (!isHexString(value, 32)) {
                return null;
            }
            const address = getAddress(hexDataSlice(value, 12));
            return (address === AddressZero) ? null : address;
        }
        contractAddress(value) {
            return getContractAddress(value);
        }
        // Strict! Used on input.
        blockTag(blockTag) {
            if (blockTag == null) {
                return "latest";
            }
            if (blockTag === "earliest") {
                return "0x0";
            }
            switch (blockTag) {
                case "earliest": return "0x0";
                case "latest":
                case "pending":
                case "safe":
                case "finalized":
                    return blockTag;
            }
            if (typeof (blockTag) === "number" || isHexString(blockTag)) {
                return hexValue(blockTag);
            }
            throw new Error("invalid blockTag");
        }
        // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.
        hash(value, strict) {
            const result = this.hex(value, strict);
            if (hexDataLength(result) !== 32) {
                return logger$h.throwArgumentError("invalid hash", "value", value);
            }
            return result;
        }
        // Returns the difficulty as a number, or if too large (i.e. PoA network) null
        difficulty(value) {
            if (value == null) {
                return null;
            }
            const v = BigNumber.from(value);
            try {
                return v.toNumber();
            }
            catch (error) { }
            return null;
        }
        uint256(value) {
            if (!isHexString(value)) {
                throw new Error("invalid uint256");
            }
            return hexZeroPad(value, 32);
        }
        _block(value, format) {
            if (value.author != null && value.miner == null) {
                value.miner = value.author;
            }
            // The difficulty may need to come from _difficulty in recursed blocks
            const difficulty = (value._difficulty != null) ? value._difficulty : value.difficulty;
            const result = Formatter.check(format, value);
            result._difficulty = ((difficulty == null) ? null : BigNumber.from(difficulty));
            return result;
        }
        block(value) {
            return this._block(value, this.formats.block);
        }
        blockWithTransactions(value) {
            return this._block(value, this.formats.blockWithTransactions);
        }
        // Strict! Used on input.
        transactionRequest(value) {
            return Formatter.check(this.formats.transactionRequest, value);
        }
        transactionResponse(transaction) {
            // Rename gas to gasLimit
            if (transaction.gas != null && transaction.gasLimit == null) {
                transaction.gasLimit = transaction.gas;
            }
            // Some clients (TestRPC) do strange things like return 0x0 for the
            // 0 address; correct this to be a real address
            if (transaction.to && BigNumber.from(transaction.to).isZero()) {
                transaction.to = "0x0000000000000000000000000000000000000000";
            }
            // Rename input to data
            if (transaction.input != null && transaction.data == null) {
                transaction.data = transaction.input;
            }
            // If to and creates are empty, populate the creates from the transaction
            if (transaction.to == null && transaction.creates == null) {
                transaction.creates = this.contractAddress(transaction);
            }
            if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {
                transaction.accessList = [];
            }
            const result = Formatter.check(this.formats.transaction, transaction);
            if (transaction.chainId != null) {
                let chainId = transaction.chainId;
                if (isHexString(chainId)) {
                    chainId = BigNumber.from(chainId).toNumber();
                }
                result.chainId = chainId;
            }
            else {
                let chainId = transaction.networkId;
                // geth-etc returns chainId
                if (chainId == null && result.v == null) {
                    chainId = transaction.chainId;
                }
                if (isHexString(chainId)) {
                    chainId = BigNumber.from(chainId).toNumber();
                }
                if (typeof (chainId) !== "number" && result.v != null) {
                    chainId = (result.v - 35) / 2;
                    if (chainId < 0) {
                        chainId = 0;
                    }
                    chainId = parseInt(chainId);
                }
                if (typeof (chainId) !== "number") {
                    chainId = 0;
                }
                result.chainId = chainId;
            }
            // 0x0000... should actually be null
            if (result.blockHash && result.blockHash.replace(/0/g, "") === "x") {
                result.blockHash = null;
            }
            return result;
        }
        transaction(value) {
            return parse$1(value);
        }
        receiptLog(value) {
            return Formatter.check(this.formats.receiptLog, value);
        }
        receipt(value) {
            const result = Formatter.check(this.formats.receipt, value);
            // RSK incorrectly implemented EIP-658, so we munge things a bit here for it
            if (result.root != null) {
                if (result.root.length <= 4) {
                    // Could be 0x00, 0x0, 0x01 or 0x1
                    const value = BigNumber.from(result.root).toNumber();
                    if (value === 0 || value === 1) {
                        // Make sure if both are specified, they match
                        if (result.status != null && (result.status !== value)) {
                            logger$h.throwArgumentError("alt-root-status/status mismatch", "value", { root: result.root, status: result.status });
                        }
                        result.status = value;
                        delete result.root;
                    }
                    else {
                        logger$h.throwArgumentError("invalid alt-root-status", "value.root", result.root);
                    }
                }
                else if (result.root.length !== 66) {
                    // Must be a valid bytes32
                    logger$h.throwArgumentError("invalid root hash", "value.root", result.root);
                }
            }
            if (result.status != null) {
                result.byzantium = true;
            }
            return result;
        }
        topics(value) {
            if (Array.isArray(value)) {
                return value.map((v) => this.topics(v));
            }
            else if (value != null) {
                return this.hash(value, true);
            }
            return null;
        }
        filter(value) {
            return Formatter.check(this.formats.filter, value);
        }
        filterLog(value) {
            return Formatter.check(this.formats.filterLog, value);
        }
        static check(format, object) {
            const result = {};
            for (const key in format) {
                try {
                    const value = format[key](object[key]);
                    if (value !== undefined) {
                        result[key] = value;
                    }
                }
                catch (error) {
                    error.checkKey = key;
                    error.checkValue = object[key];
                    throw error;
                }
            }
            return result;
        }
        // if value is null-ish, nullValue is returned
        static allowNull(format, nullValue) {
            return (function (value) {
                if (value == null) {
                    return nullValue;
                }
                return format(value);
            });
        }
        // If value is false-ish, replaceValue is returned
        static allowFalsish(format, replaceValue) {
            return (function (value) {
                if (!value) {
                    return replaceValue;
                }
                return format(value);
            });
        }
        // Requires an Array satisfying check
        static arrayOf(format) {
            return (function (array) {
                if (!Array.isArray(array)) {
                    throw new Error("not an array");
                }
                const result = [];
                array.forEach(function (value) {
                    result.push(format(value));
                });
                return result;
            });
        }
    }
    function isCommunityResourcable(value) {
        return (value && typeof (value.isCommunityResource) === "function");
    }
    function isCommunityResource(value) {
        return (isCommunityResourcable(value) && value.isCommunityResource());
    }
    // Show the throttle message only once
    let throttleMessage = false;
    function showThrottleMessage() {
        if (throttleMessage) {
            return;
        }
        throttleMessage = true;
        console.log("========= NOTICE =========");
        console.log("Request-Rate Exceeded  (this message will not be repeated)");
        console.log("");
        console.log("The default API keys for each service are provided as a highly-throttled,");
        console.log("community resource for low-traffic projects and early prototyping.");
        console.log("");
        console.log("While your application will continue to function, we highly recommended");
        console.log("signing up for your own API keys to improve performance, increase your");
        console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
        console.log("");
        console.log("For more details: https:/\/docs.ethers.io/api-keys/");
        console.log("==========================");
    }

    var __awaiter$d = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$g = new Logger(version$5);
    const MAX_CCIP_REDIRECTS = 10;
    //////////////////////////////
    // Event Serializeing
    function checkTopic(topic) {
        if (topic == null) {
            return "null";
        }
        if (hexDataLength(topic) !== 32) {
            logger$g.throwArgumentError("invalid topic", "topic", topic);
        }
        return topic.toLowerCase();
    }
    function serializeTopics(topics) {
        // Remove trailing null AND-topics; they are redundant
        topics = topics.slice();
        while (topics.length > 0 && topics[topics.length - 1] == null) {
            topics.pop();
        }
        return topics.map((topic) => {
            if (Array.isArray(topic)) {
                // Only track unique OR-topics
                const unique = {};
                topic.forEach((topic) => {
                    unique[checkTopic(topic)] = true;
                });
                // The order of OR-topics does not matter
                const sorted = Object.keys(unique);
                sorted.sort();
                return sorted.join("|");
            }
            else {
                return checkTopic(topic);
            }
        }).join("&");
    }
    function deserializeTopics(data) {
        if (data === "") {
            return [];
        }
        return data.split(/&/g).map((topic) => {
            if (topic === "") {
                return [];
            }
            const comps = topic.split("|").map((topic) => {
                return ((topic === "null") ? null : topic);
            });
            return ((comps.length === 1) ? comps[0] : comps);
        });
    }
    function getEventTag(eventName) {
        if (typeof (eventName) === "string") {
            eventName = eventName.toLowerCase();
            if (hexDataLength(eventName) === 32) {
                return "tx:" + eventName;
            }
            if (eventName.indexOf(":") === -1) {
                return eventName;
            }
        }
        else if (Array.isArray(eventName)) {
            return "filter:*:" + serializeTopics(eventName);
        }
        else if (ForkEvent.isForkEvent(eventName)) {
            logger$g.warn("not implemented");
            throw new Error("not implemented");
        }
        else if (eventName && typeof (eventName) === "object") {
            return "filter:" + (eventName.address || "*") + ":" + serializeTopics(eventName.topics || []);
        }
        throw new Error("invalid event - " + eventName);
    }
    //////////////////////////////
    // Helper Object
    function getTime() {
        return (new Date()).getTime();
    }
    function stall$1(duration) {
        return new Promise((resolve) => {
            setTimeout(resolve, duration);
        });
    }
    //////////////////////////////
    // Provider Object
    /**
     *  EventType
     *   - "block"
     *   - "poll"
     *   - "didPoll"
     *   - "pending"
     *   - "error"
     *   - "network"
     *   - filter
     *   - topics array
     *   - transaction hash
     */
    const PollableEvents = ["block", "network", "pending", "poll"];
    class Event$1 {
        constructor(tag, listener, once) {
            defineReadOnly(this, "tag", tag);
            defineReadOnly(this, "listener", listener);
            defineReadOnly(this, "once", once);
            this._lastBlockNumber = -2;
            this._inflight = false;
        }
        get event() {
            switch (this.type) {
                case "tx":
                    return this.hash;
                case "filter":
                    return this.filter;
            }
            return this.tag;
        }
        get type() {
            return this.tag.split(":")[0];
        }
        get hash() {
            const comps = this.tag.split(":");
            if (comps[0] !== "tx") {
                return null;
            }
            return comps[1];
        }
        get filter() {
            const comps = this.tag.split(":");
            if (comps[0] !== "filter") {
                return null;
            }
            const address = comps[1];
            const topics = deserializeTopics(comps[2]);
            const filter = {};
            if (topics.length > 0) {
                filter.topics = topics;
            }
            if (address && address !== "*") {
                filter.address = address;
            }
            return filter;
        }
        pollable() {
            return (this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0);
        }
    }
    // https://github.com/satoshilabs/slips/blob/master/slip-0044.md
    const coinInfos = {
        "0": { symbol: "btc", p2pkh: 0x00, p2sh: 0x05, prefix: "bc" },
        "2": { symbol: "ltc", p2pkh: 0x30, p2sh: 0x32, prefix: "ltc" },
        "3": { symbol: "doge", p2pkh: 0x1e, p2sh: 0x16 },
        "60": { symbol: "eth", ilk: "eth" },
        "61": { symbol: "etc", ilk: "eth" },
        "700": { symbol: "xdai", ilk: "eth" },
    };
    function bytes32ify(value) {
        return hexZeroPad(BigNumber.from(value).toHexString(), 32);
    }
    // Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)
    function base58Encode(data) {
        return Base58.encode(concat$1([data, hexDataSlice(sha256$3(sha256$3(data)), 0, 4)]));
    }
    const matcherIpfs = new RegExp("^(ipfs):/\/(.*)$", "i");
    const matchers = [
        new RegExp("^(https):/\/(.*)$", "i"),
        new RegExp("^(data):(.*)$", "i"),
        matcherIpfs,
        new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i"),
    ];
    function _parseString(result, start) {
        try {
            return toUtf8String(_parseBytes(result, start));
        }
        catch (error) { }
        return null;
    }
    function _parseBytes(result, start) {
        if (result === "0x") {
            return null;
        }
        const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();
        const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();
        return hexDataSlice(result, offset + 32, offset + 32 + length);
    }
    // Trim off the ipfs:// prefix and return the default gateway URL
    function getIpfsLink(link) {
        if (link.match(/^ipfs:\/\/ipfs\//i)) {
            link = link.substring(12);
        }
        else if (link.match(/^ipfs:\/\//i)) {
            link = link.substring(7);
        }
        else {
            logger$g.throwArgumentError("unsupported IPFS format", "link", link);
        }
        return `https:/\/gateway.ipfs.io/ipfs/${link}`;
    }
    function numPad(value) {
        const result = arrayify(value);
        if (result.length > 32) {
            throw new Error("internal; should not happen");
        }
        const padded = new Uint8Array(32);
        padded.set(result, 32 - result.length);
        return padded;
    }
    function bytesPad(value) {
        if ((value.length % 32) === 0) {
            return value;
        }
        const result = new Uint8Array(Math.ceil(value.length / 32) * 32);
        result.set(value);
        return result;
    }
    // ABI Encodes a series of (bytes, bytes, ...)
    function encodeBytes(datas) {
        const result = [];
        let byteCount = 0;
        // Add place-holders for pointers as we add items
        for (let i = 0; i < datas.length; i++) {
            result.push(null);
            byteCount += 32;
        }
        for (let i = 0; i < datas.length; i++) {
            const data = arrayify(datas[i]);
            // Update the bytes offset
            result[i] = numPad(byteCount);
            // The length and padded value of data
            result.push(numPad(data.length));
            result.push(bytesPad(data));
            byteCount += 32 + Math.ceil(data.length / 32) * 32;
        }
        return hexConcat(result);
    }
    class Resolver {
        // The resolvedAddress is only for creating a ReverseLookup resolver
        constructor(provider, address, name, resolvedAddress) {
            defineReadOnly(this, "provider", provider);
            defineReadOnly(this, "name", name);
            defineReadOnly(this, "address", provider.formatter.address(address));
            defineReadOnly(this, "_resolvedAddress", resolvedAddress);
        }
        supportsWildcard() {
            if (!this._supportsEip2544) {
                // supportsInterface(bytes4 = selector("resolve(bytes,bytes)"))
                this._supportsEip2544 = this.provider.call({
                    to: this.address,
                    data: "0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000"
                }).then((result) => {
                    return BigNumber.from(result).eq(1);
                }).catch((error) => {
                    if (error.code === Logger.errors.CALL_EXCEPTION) {
                        return false;
                    }
                    // Rethrow the error: link is down, etc. Let future attempts retry.
                    this._supportsEip2544 = null;
                    throw error;
                });
            }
            return this._supportsEip2544;
        }
        _fetch(selector, parameters) {
            return __awaiter$d(this, void 0, void 0, function* () {
                // e.g. keccak256("addr(bytes32,uint256)")
                const tx = {
                    to: this.address,
                    ccipReadEnabled: true,
                    data: hexConcat([selector, namehash(this.name), (parameters || "0x")])
                };
                // Wildcard support; use EIP-2544 to resolve the request
                let parseBytes = false;
                if (yield this.supportsWildcard()) {
                    parseBytes = true;
                    // selector("resolve(bytes,bytes)")
                    tx.data = hexConcat(["0x9061b923", encodeBytes([dnsEncode(this.name), tx.data])]);
                }
                try {
                    let result = yield this.provider.call(tx);
                    if ((arrayify(result).length % 32) === 4) {
                        logger$g.throwError("resolver threw error", Logger.errors.CALL_EXCEPTION, {
                            transaction: tx, data: result
                        });
                    }
                    if (parseBytes) {
                        result = _parseBytes(result, 0);
                    }
                    return result;
                }
                catch (error) {
                    if (error.code === Logger.errors.CALL_EXCEPTION) {
                        return null;
                    }
                    throw error;
                }
            });
        }
        _fetchBytes(selector, parameters) {
            return __awaiter$d(this, void 0, void 0, function* () {
                const result = yield this._fetch(selector, parameters);
                if (result != null) {
                    return _parseBytes(result, 0);
                }
                return null;
            });
        }
        _getAddress(coinType, hexBytes) {
            const coinInfo = coinInfos[String(coinType)];
            if (coinInfo == null) {
                logger$g.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: `getAddress(${coinType})`
                });
            }
            if (coinInfo.ilk === "eth") {
                return this.provider.formatter.address(hexBytes);
            }
            const bytes = arrayify(hexBytes);
            // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG
            if (coinInfo.p2pkh != null) {
                const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);
                if (p2pkh) {
                    const length = parseInt(p2pkh[1], 16);
                    if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {
                        return base58Encode(concat$1([[coinInfo.p2pkh], ("0x" + p2pkh[2])]));
                    }
                }
            }
            // P2SH: OP_HASH160 <scriptHash> OP_EQUAL
            if (coinInfo.p2sh != null) {
                const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);
                if (p2sh) {
                    const length = parseInt(p2sh[1], 16);
                    if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {
                        return base58Encode(concat$1([[coinInfo.p2sh], ("0x" + p2sh[2])]));
                    }
                }
            }
            // Bech32
            if (coinInfo.prefix != null) {
                const length = bytes[1];
                // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program
                let version = bytes[0];
                if (version === 0x00) {
                    if (length !== 20 && length !== 32) {
                        version = -1;
                    }
                }
                else {
                    version = -1;
                }
                if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {
                    const words = bech32$1.toWords(bytes.slice(2));
                    words.unshift(version);
                    return bech32$1.encode(coinInfo.prefix, words);
                }
            }
            return null;
        }
        getAddress(coinType) {
            return __awaiter$d(this, void 0, void 0, function* () {
                if (coinType == null) {
                    coinType = 60;
                }
                // If Ethereum, use the standard `addr(bytes32)`
                if (coinType === 60) {
                    try {
                        // keccak256("addr(bytes32)")
                        const result = yield this._fetch("0x3b3b57de");
                        // No address
                        if (result === "0x" || result === HashZero) {
                            return null;
                        }
                        return this.provider.formatter.callAddress(result);
                    }
                    catch (error) {
                        if (error.code === Logger.errors.CALL_EXCEPTION) {
                            return null;
                        }
                        throw error;
                    }
                }
                // keccak256("addr(bytes32,uint256")
                const hexBytes = yield this._fetchBytes("0xf1cb7e06", bytes32ify(coinType));
                // No address
                if (hexBytes == null || hexBytes === "0x") {
                    return null;
                }
                // Compute the address
                const address = this._getAddress(coinType, hexBytes);
                if (address == null) {
                    logger$g.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: `getAddress(${coinType})`,
                        coinType: coinType,
                        data: hexBytes
                    });
                }
                return address;
            });
        }
        getAvatar() {
            return __awaiter$d(this, void 0, void 0, function* () {
                const linkage = [{ type: "name", content: this.name }];
                try {
                    // test data for ricmoo.eth
                    //const avatar = "eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233";
                    const avatar = yield this.getText("avatar");
                    if (avatar == null) {
                        return null;
                    }
                    for (let i = 0; i < matchers.length; i++) {
                        const match = avatar.match(matchers[i]);
                        if (match == null) {
                            continue;
                        }
                        const scheme = match[1].toLowerCase();
                        switch (scheme) {
                            case "https":
                                linkage.push({ type: "url", content: avatar });
                                return { linkage, url: avatar };
                            case "data":
                                linkage.push({ type: "data", content: avatar });
                                return { linkage, url: avatar };
                            case "ipfs":
                                linkage.push({ type: "ipfs", content: avatar });
                                return { linkage, url: getIpfsLink(avatar) };
                            case "erc721":
                            case "erc1155": {
                                // Depending on the ERC type, use tokenURI(uint256) or url(uint256)
                                const selector = (scheme === "erc721") ? "0xc87b56dd" : "0x0e89341c";
                                linkage.push({ type: scheme, content: avatar });
                                // The owner of this name
                                const owner = (this._resolvedAddress || (yield this.getAddress()));
                                const comps = (match[2] || "").split("/");
                                if (comps.length !== 2) {
                                    return null;
                                }
                                const addr = yield this.provider.formatter.address(comps[0]);
                                const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);
                                // Check that this account owns the token
                                if (scheme === "erc721") {
                                    // ownerOf(uint256 tokenId)
                                    const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({
                                        to: addr, data: hexConcat(["0x6352211e", tokenId])
                                    }));
                                    if (owner !== tokenOwner) {
                                        return null;
                                    }
                                    linkage.push({ type: "owner", content: tokenOwner });
                                }
                                else if (scheme === "erc1155") {
                                    // balanceOf(address owner, uint256 tokenId)
                                    const balance = BigNumber.from(yield this.provider.call({
                                        to: addr, data: hexConcat(["0x00fdd58e", hexZeroPad(owner, 32), tokenId])
                                    }));
                                    if (balance.isZero()) {
                                        return null;
                                    }
                                    linkage.push({ type: "balance", content: balance.toString() });
                                }
                                // Call the token contract for the metadata URL
                                const tx = {
                                    to: this.provider.formatter.address(comps[0]),
                                    data: hexConcat([selector, tokenId])
                                };
                                let metadataUrl = _parseString(yield this.provider.call(tx), 0);
                                if (metadataUrl == null) {
                                    return null;
                                }
                                linkage.push({ type: "metadata-url-base", content: metadataUrl });
                                // ERC-1155 allows a generic {id} in the URL
                                if (scheme === "erc1155") {
                                    metadataUrl = metadataUrl.replace("{id}", tokenId.substring(2));
                                    linkage.push({ type: "metadata-url-expanded", content: metadataUrl });
                                }
                                // Transform IPFS metadata links
                                if (metadataUrl.match(/^ipfs:/i)) {
                                    metadataUrl = getIpfsLink(metadataUrl);
                                }
                                linkage.push({ type: "metadata-url", content: metadataUrl });
                                // Get the token metadata
                                const metadata = yield fetchJson(metadataUrl);
                                if (!metadata) {
                                    return null;
                                }
                                linkage.push({ type: "metadata", content: JSON.stringify(metadata) });
                                // Pull the image URL out
                                let imageUrl = metadata.image;
                                if (typeof (imageUrl) !== "string") {
                                    return null;
                                }
                                if (imageUrl.match(/^(https:\/\/|data:)/i)) {
                                    // Allow
                                }
                                else {
                                    // Transform IPFS link to gateway
                                    const ipfs = imageUrl.match(matcherIpfs);
                                    if (ipfs == null) {
                                        return null;
                                    }
                                    linkage.push({ type: "url-ipfs", content: imageUrl });
                                    imageUrl = getIpfsLink(imageUrl);
                                }
                                linkage.push({ type: "url", content: imageUrl });
                                return { linkage, url: imageUrl };
                            }
                        }
                    }
                }
                catch (error) { }
                return null;
            });
        }
        getContentHash() {
            return __awaiter$d(this, void 0, void 0, function* () {
                // keccak256("contenthash()")
                const hexBytes = yield this._fetchBytes("0xbc1c58d1");
                // No contenthash
                if (hexBytes == null || hexBytes === "0x") {
                    return null;
                }
                // IPFS (CID: 1, Type: DAG-PB)
                const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
                if (ipfs) {
                    const length = parseInt(ipfs[3], 16);
                    if (ipfs[4].length === length * 2) {
                        return "ipfs:/\/" + Base58.encode("0x" + ipfs[1]);
                    }
                }
                // IPNS (CID: 1, Type: libp2p-key)
                const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
                if (ipns) {
                    const length = parseInt(ipns[3], 16);
                    if (ipns[4].length === length * 2) {
                        return "ipns:/\/" + Base58.encode("0x" + ipns[1]);
                    }
                }
                // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)
                const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);
                if (swarm) {
                    if (swarm[1].length === (32 * 2)) {
                        return "bzz:/\/" + swarm[1];
                    }
                }
                const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);
                if (skynet) {
                    if (skynet[1].length === (34 * 2)) {
                        // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5
                        const urlSafe = { "=": "", "+": "-", "/": "_" };
                        const hash = encode$6("0x" + skynet[1]).replace(/[=+\/]/g, (a) => (urlSafe[a]));
                        return "sia:/\/" + hash;
                    }
                }
                return logger$g.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "getContentHash()",
                    data: hexBytes
                });
            });
        }
        getText(key) {
            return __awaiter$d(this, void 0, void 0, function* () {
                // The key encoded as parameter to fetchBytes
                let keyBytes = toUtf8Bytes(key);
                // The nodehash consumes the first slot, so the string pointer targets
                // offset 64, with the length at offset 64 and data starting at offset 96
                keyBytes = concat$1([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);
                // Pad to word-size (32 bytes)
                if ((keyBytes.length % 32) !== 0) {
                    keyBytes = concat$1([keyBytes, hexZeroPad("0x", 32 - (key.length % 32))]);
                }
                const hexBytes = yield this._fetchBytes("0x59d1d43c", hexlify(keyBytes));
                if (hexBytes == null || hexBytes === "0x") {
                    return null;
                }
                return toUtf8String(hexBytes);
            });
        }
    }
    let defaultFormatter = null;
    let nextPollId = 1;
    class BaseProvider extends Provider {
        /**
         *  ready
         *
         *  A Promise<Network> that resolves only once the provider is ready.
         *
         *  Sub-classes that call the super with a network without a chainId
         *  MUST set this. Standard named networks have a known chainId.
         *
         */
        constructor(network) {
            super();
            // Events being listened to
            this._events = [];
            this._emitted = { block: -2 };
            this.disableCcipRead = false;
            this.formatter = new.target.getFormatter();
            // If network is any, this Provider allows the underlying
            // network to change dynamically, and we auto-detect the
            // current network
            defineReadOnly(this, "anyNetwork", (network === "any"));
            if (this.anyNetwork) {
                network = this.detectNetwork();
            }
            if (network instanceof Promise) {
                this._networkPromise = network;
                // Squash any "unhandled promise" errors; that do not need to be handled
                network.catch((error) => { });
                // Trigger initial network setting (async)
                this._ready().catch((error) => { });
            }
            else {
                const knownNetwork = getStatic(new.target, "getNetwork")(network);
                if (knownNetwork) {
                    defineReadOnly(this, "_network", knownNetwork);
                    this.emit("network", knownNetwork, null);
                }
                else {
                    logger$g.throwArgumentError("invalid network", "network", network);
                }
            }
            this._maxInternalBlockNumber = -1024;
            this._lastBlockNumber = -2;
            this._maxFilterBlockRange = 10;
            this._pollingInterval = 4000;
            this._fastQueryDate = 0;
        }
        _ready() {
            return __awaiter$d(this, void 0, void 0, function* () {
                if (this._network == null) {
                    let network = null;
                    if (this._networkPromise) {
                        try {
                            network = yield this._networkPromise;
                        }
                        catch (error) { }
                    }
                    // Try the Provider's network detection (this MUST throw if it cannot)
                    if (network == null) {
                        network = yield this.detectNetwork();
                    }
                    // This should never happen; every Provider sub-class should have
                    // suggested a network by here (or have thrown).
                    if (!network) {
                        logger$g.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
                    }
                    // Possible this call stacked so do not call defineReadOnly again
                    if (this._network == null) {
                        if (this.anyNetwork) {
                            this._network = network;
                        }
                        else {
                            defineReadOnly(this, "_network", network);
                        }
                        this.emit("network", network, null);
                    }
                }
                return this._network;
            });
        }
        // This will always return the most recently established network.
        // For "any", this can change (a "network" event is emitted before
        // any change is reflected); otherwise this cannot change
        get ready() {
            return poll(() => {
                return this._ready().then((network) => {
                    return network;
                }, (error) => {
                    // If the network isn't running yet, we will wait
                    if (error.code === Logger.errors.NETWORK_ERROR && error.event === "noNetwork") {
                        return undefined;
                    }
                    throw error;
                });
            });
        }
        // @TODO: Remove this and just create a singleton formatter
        static getFormatter() {
            if (defaultFormatter == null) {
                defaultFormatter = new Formatter();
            }
            return defaultFormatter;
        }
        // @TODO: Remove this and just use getNetwork
        static getNetwork(network) {
            return getNetwork((network == null) ? "homestead" : network);
        }
        ccipReadFetch(tx, calldata, urls) {
            return __awaiter$d(this, void 0, void 0, function* () {
                if (this.disableCcipRead || urls.length === 0) {
                    return null;
                }
                const sender = tx.to.toLowerCase();
                const data = calldata.toLowerCase();
                const errorMessages = [];
                for (let i = 0; i < urls.length; i++) {
                    const url = urls[i];
                    // URL expansion
                    const href = url.replace("{sender}", sender).replace("{data}", data);
                    // If no {data} is present, use POST; otherwise GET
                    const json = (url.indexOf("{data}") >= 0) ? null : JSON.stringify({ data, sender });
                    const result = yield fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {
                        value.status = response.statusCode;
                        return value;
                    });
                    if (result.data) {
                        return result.data;
                    }
                    const errorMessage = (result.message || "unknown error");
                    // 4xx indicates the result is not present; stop
                    if (result.status >= 400 && result.status < 500) {
                        return logger$g.throwError(`response not found during CCIP fetch: ${errorMessage}`, Logger.errors.SERVER_ERROR, { url, errorMessage });
                    }
                    // 5xx indicates server issue; try the next url
                    errorMessages.push(errorMessage);
                }
                return logger$g.throwError(`error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(", ")}`, Logger.errors.SERVER_ERROR, {
                    urls, errorMessages
                });
            });
        }
        // Fetches the blockNumber, but will reuse any result that is less
        // than maxAge old or has been requested since the last request
        _getInternalBlockNumber(maxAge) {
            return __awaiter$d(this, void 0, void 0, function* () {
                yield this._ready();
                // Allowing stale data up to maxAge old
                if (maxAge > 0) {
                    // While there are pending internal block requests...
                    while (this._internalBlockNumber) {
                        // ..."remember" which fetch we started with
                        const internalBlockNumber = this._internalBlockNumber;
                        try {
                            // Check the result is not too stale
                            const result = yield internalBlockNumber;
                            if ((getTime() - result.respTime) <= maxAge) {
                                return result.blockNumber;
                            }
                            // Too old; fetch a new value
                            break;
                        }
                        catch (error) {
                            // The fetch rejected; if we are the first to get the
                            // rejection, drop through so we replace it with a new
                            // fetch; all others blocked will then get that fetch
                            // which won't match the one they "remembered" and loop
                            if (this._internalBlockNumber === internalBlockNumber) {
                                break;
                            }
                        }
                    }
                }
                const reqTime = getTime();
                const checkInternalBlockNumber = resolveProperties({
                    blockNumber: this.perform("getBlockNumber", {}),
                    networkError: this.getNetwork().then((network) => (null), (error) => (error))
                }).then(({ blockNumber, networkError }) => {
                    if (networkError) {
                        // Unremember this bad internal block number
                        if (this._internalBlockNumber === checkInternalBlockNumber) {
                            this._internalBlockNumber = null;
                        }
                        throw networkError;
                    }
                    const respTime = getTime();
                    blockNumber = BigNumber.from(blockNumber).toNumber();
                    if (blockNumber < this._maxInternalBlockNumber) {
                        blockNumber = this._maxInternalBlockNumber;
                    }
                    this._maxInternalBlockNumber = blockNumber;
                    this._setFastBlockNumber(blockNumber); // @TODO: Still need this?
                    return { blockNumber, reqTime, respTime };
                });
                this._internalBlockNumber = checkInternalBlockNumber;
                // Swallow unhandled exceptions; if needed they are handled else where
                checkInternalBlockNumber.catch((error) => {
                    // Don't null the dead (rejected) fetch, if it has already been updated
                    if (this._internalBlockNumber === checkInternalBlockNumber) {
                        this._internalBlockNumber = null;
                    }
                });
                return (yield checkInternalBlockNumber).blockNumber;
            });
        }
        poll() {
            return __awaiter$d(this, void 0, void 0, function* () {
                const pollId = nextPollId++;
                // Track all running promises, so we can trigger a post-poll once they are complete
                const runners = [];
                let blockNumber = null;
                try {
                    blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);
                }
                catch (error) {
                    this.emit("error", error);
                    return;
                }
                this._setFastBlockNumber(blockNumber);
                // Emit a poll event after we have the latest (fast) block number
                this.emit("poll", pollId, blockNumber);
                // If the block has not changed, meh.
                if (blockNumber === this._lastBlockNumber) {
                    this.emit("didPoll", pollId);
                    return;
                }
                // First polling cycle, trigger a "block" events
                if (this._emitted.block === -2) {
                    this._emitted.block = blockNumber - 1;
                }
                if (Math.abs((this._emitted.block) - blockNumber) > 1000) {
                    logger$g.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);
                    this.emit("error", logger$g.makeError("network block skew detected", Logger.errors.NETWORK_ERROR, {
                        blockNumber: blockNumber,
                        event: "blockSkew",
                        previousBlockNumber: this._emitted.block
                    }));
                    this.emit("block", blockNumber);
                }
                else {
                    // Notify all listener for each block that has passed
                    for (let i = this._emitted.block + 1; i <= blockNumber; i++) {
                        this.emit("block", i);
                    }
                }
                // The emitted block was updated, check for obsolete events
                if (this._emitted.block !== blockNumber) {
                    this._emitted.block = blockNumber;
                    Object.keys(this._emitted).forEach((key) => {
                        // The block event does not expire
                        if (key === "block") {
                            return;
                        }
                        // The block we were at when we emitted this event
                        const eventBlockNumber = this._emitted[key];
                        // We cannot garbage collect pending transactions or blocks here
                        // They should be garbage collected by the Provider when setting
                        // "pending" events
                        if (eventBlockNumber === "pending") {
                            return;
                        }
                        // Evict any transaction hashes or block hashes over 12 blocks
                        // old, since they should not return null anyways
                        if (blockNumber - eventBlockNumber > 12) {
                            delete this._emitted[key];
                        }
                    });
                }
                // First polling cycle
                if (this._lastBlockNumber === -2) {
                    this._lastBlockNumber = blockNumber - 1;
                }
                // Find all transaction hashes we are waiting on
                this._events.forEach((event) => {
                    switch (event.type) {
                        case "tx": {
                            const hash = event.hash;
                            let runner = this.getTransactionReceipt(hash).then((receipt) => {
                                if (!receipt || receipt.blockNumber == null) {
                                    return null;
                                }
                                this._emitted["t:" + hash] = receipt.blockNumber;
                                this.emit(hash, receipt);
                                return null;
                            }).catch((error) => { this.emit("error", error); });
                            runners.push(runner);
                            break;
                        }
                        case "filter": {
                            // We only allow a single getLogs to be in-flight at a time
                            if (!event._inflight) {
                                event._inflight = true;
                                // This is the first filter for this event, so we want to
                                // restrict events to events that happened no earlier than now
                                if (event._lastBlockNumber === -2) {
                                    event._lastBlockNumber = blockNumber - 1;
                                }
                                // Filter from the last *known* event; due to load-balancing
                                // and some nodes returning updated block numbers before
                                // indexing events, a logs result with 0 entries cannot be
                                // trusted and we must retry a range which includes it again
                                const filter = event.filter;
                                filter.fromBlock = event._lastBlockNumber + 1;
                                filter.toBlock = blockNumber;
                                // Prevent fitler ranges from growing too wild, since it is quite
                                // likely there just haven't been any events to move the lastBlockNumber.
                                const minFromBlock = filter.toBlock - this._maxFilterBlockRange;
                                if (minFromBlock > filter.fromBlock) {
                                    filter.fromBlock = minFromBlock;
                                }
                                if (filter.fromBlock < 0) {
                                    filter.fromBlock = 0;
                                }
                                const runner = this.getLogs(filter).then((logs) => {
                                    // Allow the next getLogs
                                    event._inflight = false;
                                    if (logs.length === 0) {
                                        return;
                                    }
                                    logs.forEach((log) => {
                                        // Only when we get an event for a given block number
                                        // can we trust the events are indexed
                                        if (log.blockNumber > event._lastBlockNumber) {
                                            event._lastBlockNumber = log.blockNumber;
                                        }
                                        // Make sure we stall requests to fetch blocks and txs
                                        this._emitted["b:" + log.blockHash] = log.blockNumber;
                                        this._emitted["t:" + log.transactionHash] = log.blockNumber;
                                        this.emit(filter, log);
                                    });
                                }).catch((error) => {
                                    this.emit("error", error);
                                    // Allow another getLogs (the range was not updated)
                                    event._inflight = false;
                                });
                                runners.push(runner);
                            }
                            break;
                        }
                    }
                });
                this._lastBlockNumber = blockNumber;
                // Once all events for this loop have been processed, emit "didPoll"
                Promise.all(runners).then(() => {
                    this.emit("didPoll", pollId);
                }).catch((error) => { this.emit("error", error); });
                return;
            });
        }
        // Deprecated; do not use this
        resetEventsBlock(blockNumber) {
            this._lastBlockNumber = blockNumber - 1;
            if (this.polling) {
                this.poll();
            }
        }
        get network() {
            return this._network;
        }
        // This method should query the network if the underlying network
        // can change, such as when connected to a JSON-RPC backend
        detectNetwork() {
            return __awaiter$d(this, void 0, void 0, function* () {
                return logger$g.throwError("provider does not support network detection", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "provider.detectNetwork"
                });
            });
        }
        getNetwork() {
            return __awaiter$d(this, void 0, void 0, function* () {
                const network = yield this._ready();
                // Make sure we are still connected to the same network; this is
                // only an external call for backends which can have the underlying
                // network change spontaneously
                const currentNetwork = yield this.detectNetwork();
                if (network.chainId !== currentNetwork.chainId) {
                    // We are allowing network changes, things can get complex fast;
                    // make sure you know what you are doing if you use "any"
                    if (this.anyNetwork) {
                        this._network = currentNetwork;
                        // Reset all internal block number guards and caches
                        this._lastBlockNumber = -2;
                        this._fastBlockNumber = null;
                        this._fastBlockNumberPromise = null;
                        this._fastQueryDate = 0;
                        this._emitted.block = -2;
                        this._maxInternalBlockNumber = -1024;
                        this._internalBlockNumber = null;
                        // The "network" event MUST happen before this method resolves
                        // so any events have a chance to unregister, so we stall an
                        // additional event loop before returning from /this/ call
                        this.emit("network", currentNetwork, network);
                        yield stall$1(0);
                        return this._network;
                    }
                    const error = logger$g.makeError("underlying network changed", Logger.errors.NETWORK_ERROR, {
                        event: "changed",
                        network: network,
                        detectedNetwork: currentNetwork
                    });
                    this.emit("error", error);
                    throw error;
                }
                return network;
            });
        }
        get blockNumber() {
            this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {
                this._setFastBlockNumber(blockNumber);
            }, (error) => { });
            return (this._fastBlockNumber != null) ? this._fastBlockNumber : -1;
        }
        get polling() {
            return (this._poller != null);
        }
        set polling(value) {
            if (value && !this._poller) {
                this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);
                if (!this._bootstrapPoll) {
                    this._bootstrapPoll = setTimeout(() => {
                        this.poll();
                        // We block additional polls until the polling interval
                        // is done, to prevent overwhelming the poll function
                        this._bootstrapPoll = setTimeout(() => {
                            // If polling was disabled, something may require a poke
                            // since starting the bootstrap poll and it was disabled
                            if (!this._poller) {
                                this.poll();
                            }
                            // Clear out the bootstrap so we can do another
                            this._bootstrapPoll = null;
                        }, this.pollingInterval);
                    }, 0);
                }
            }
            else if (!value && this._poller) {
                clearInterval(this._poller);
                this._poller = null;
            }
        }
        get pollingInterval() {
            return this._pollingInterval;
        }
        set pollingInterval(value) {
            if (typeof (value) !== "number" || value <= 0 || parseInt(String(value)) != value) {
                throw new Error("invalid polling interval");
            }
            this._pollingInterval = value;
            if (this._poller) {
                clearInterval(this._poller);
                this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);
            }
        }
        _getFastBlockNumber() {
            const now = getTime();
            // Stale block number, request a newer value
            if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {
                this._fastQueryDate = now;
                this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {
                    if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
                        this._fastBlockNumber = blockNumber;
                    }
                    return this._fastBlockNumber;
                });
            }
            return this._fastBlockNumberPromise;
        }
        _setFastBlockNumber(blockNumber) {
            // Older block, maybe a stale request
            if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {
                return;
            }
            // Update the time we updated the blocknumber
            this._fastQueryDate = getTime();
            // Newer block number, use  it
            if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
                this._fastBlockNumber = blockNumber;
                this._fastBlockNumberPromise = Promise.resolve(blockNumber);
            }
        }
        waitForTransaction(transactionHash, confirmations, timeout) {
            return __awaiter$d(this, void 0, void 0, function* () {
                return this._waitForTransaction(transactionHash, (confirmations == null) ? 1 : confirmations, timeout || 0, null);
            });
        }
        _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {
            return __awaiter$d(this, void 0, void 0, function* () {
                const receipt = yield this.getTransactionReceipt(transactionHash);
                // Receipt is already good
                if ((receipt ? receipt.confirmations : 0) >= confirmations) {
                    return receipt;
                }
                // Poll until the receipt is good...
                return new Promise((resolve, reject) => {
                    const cancelFuncs = [];
                    let done = false;
                    const alreadyDone = function () {
                        if (done) {
                            return true;
                        }
                        done = true;
                        cancelFuncs.forEach((func) => { func(); });
                        return false;
                    };
                    const minedHandler = (receipt) => {
                        if (receipt.confirmations < confirmations) {
                            return;
                        }
                        if (alreadyDone()) {
                            return;
                        }
                        resolve(receipt);
                    };
                    this.on(transactionHash, minedHandler);
                    cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });
                    if (replaceable) {
                        let lastBlockNumber = replaceable.startBlock;
                        let scannedBlock = null;
                        const replaceHandler = (blockNumber) => __awaiter$d(this, void 0, void 0, function* () {
                            if (done) {
                                return;
                            }
                            // Wait 1 second; this is only used in the case of a fault, so
                            // we will trade off a little bit of latency for more consistent
                            // results and fewer JSON-RPC calls
                            yield stall$1(1000);
                            this.getTransactionCount(replaceable.from).then((nonce) => __awaiter$d(this, void 0, void 0, function* () {
                                if (done) {
                                    return;
                                }
                                if (nonce <= replaceable.nonce) {
                                    lastBlockNumber = blockNumber;
                                }
                                else {
                                    // First check if the transaction was mined
                                    {
                                        const mined = yield this.getTransaction(transactionHash);
                                        if (mined && mined.blockNumber != null) {
                                            return;
                                        }
                                    }
                                    // First time scanning. We start a little earlier for some
                                    // wiggle room here to handle the eventually consistent nature
                                    // of blockchain (e.g. the getTransactionCount was for a
                                    // different block)
                                    if (scannedBlock == null) {
                                        scannedBlock = lastBlockNumber - 3;
                                        if (scannedBlock < replaceable.startBlock) {
                                            scannedBlock = replaceable.startBlock;
                                        }
                                    }
                                    while (scannedBlock <= blockNumber) {
                                        if (done) {
                                            return;
                                        }
                                        const block = yield this.getBlockWithTransactions(scannedBlock);
                                        for (let ti = 0; ti < block.transactions.length; ti++) {
                                            const tx = block.transactions[ti];
                                            // Successfully mined!
                                            if (tx.hash === transactionHash) {
                                                return;
                                            }
                                            // Matches our transaction from and nonce; its a replacement
                                            if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {
                                                if (done) {
                                                    return;
                                                }
                                                // Get the receipt of the replacement
                                                const receipt = yield this.waitForTransaction(tx.hash, confirmations);
                                                // Already resolved or rejected (prolly a timeout)
                                                if (alreadyDone()) {
                                                    return;
                                                }
                                                // The reason we were replaced
                                                let reason = "replaced";
                                                if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {
                                                    reason = "repriced";
                                                }
                                                else if (tx.data === "0x" && tx.from === tx.to && tx.value.isZero()) {
                                                    reason = "cancelled";
                                                }
                                                // Explain why we were replaced
                                                reject(logger$g.makeError("transaction was replaced", Logger.errors.TRANSACTION_REPLACED, {
                                                    cancelled: (reason === "replaced" || reason === "cancelled"),
                                                    reason,
                                                    replacement: this._wrapTransaction(tx),
                                                    hash: transactionHash,
                                                    receipt
                                                }));
                                                return;
                                            }
                                        }
                                        scannedBlock++;
                                    }
                                }
                                if (done) {
                                    return;
                                }
                                this.once("block", replaceHandler);
                            }), (error) => {
                                if (done) {
                                    return;
                                }
                                this.once("block", replaceHandler);
                            });
                        });
                        if (done) {
                            return;
                        }
                        this.once("block", replaceHandler);
                        cancelFuncs.push(() => {
                            this.removeListener("block", replaceHandler);
                        });
                    }
                    if (typeof (timeout) === "number" && timeout > 0) {
                        const timer = setTimeout(() => {
                            if (alreadyDone()) {
                                return;
                            }
                            reject(logger$g.makeError("timeout exceeded", Logger.errors.TIMEOUT, { timeout: timeout }));
                        }, timeout);
                        if (timer.unref) {
                            timer.unref();
                        }
                        cancelFuncs.push(() => { clearTimeout(timer); });
                    }
                });
            });
        }
        getBlockNumber() {
            return __awaiter$d(this, void 0, void 0, function* () {
                return this._getInternalBlockNumber(0);
            });
        }
        getGasPrice() {
            return __awaiter$d(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const result = yield this.perform("getGasPrice", {});
                try {
                    return BigNumber.from(result);
                }
                catch (error) {
                    return logger$g.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "getGasPrice",
                        result, error
                    });
                }
            });
        }
        getBalance(addressOrName, blockTag) {
            return __awaiter$d(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const params = yield resolveProperties({
                    address: this._getAddress(addressOrName),
                    blockTag: this._getBlockTag(blockTag)
                });
                const result = yield this.perform("getBalance", params);
                try {
                    return BigNumber.from(result);
                }
                catch (error) {
                    return logger$g.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "getBalance",
                        params, result, error
                    });
                }
            });
        }
        getTransactionCount(addressOrName, blockTag) {
            return __awaiter$d(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const params = yield resolveProperties({
                    address: this._getAddress(addressOrName),
                    blockTag: this._getBlockTag(blockTag)
                });
                const result = yield this.perform("getTransactionCount", params);
                try {
                    return BigNumber.from(result).toNumber();
                }
                catch (error) {
                    return logger$g.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "getTransactionCount",
                        params, result, error
                    });
                }
            });
        }
        getCode(addressOrName, blockTag) {
            return __awaiter$d(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const params = yield resolveProperties({
                    address: this._getAddress(addressOrName),
                    blockTag: this._getBlockTag(blockTag)
                });
                const result = yield this.perform("getCode", params);
                try {
                    return hexlify(result);
                }
                catch (error) {
                    return logger$g.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "getCode",
                        params, result, error
                    });
                }
            });
        }
        getStorageAt(addressOrName, position, blockTag) {
            return __awaiter$d(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const params = yield resolveProperties({
                    address: this._getAddress(addressOrName),
                    blockTag: this._getBlockTag(blockTag),
                    position: Promise.resolve(position).then((p) => hexValue(p))
                });
                const result = yield this.perform("getStorageAt", params);
                try {
                    return hexlify(result);
                }
                catch (error) {
                    return logger$g.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "getStorageAt",
                        params, result, error
                    });
                }
            });
        }
        // This should be called by any subclass wrapping a TransactionResponse
        _wrapTransaction(tx, hash, startBlock) {
            if (hash != null && hexDataLength(hash) !== 32) {
                throw new Error("invalid response - sendTransaction");
            }
            const result = tx;
            // Check the hash we expect is the same as the hash the server reported
            if (hash != null && tx.hash !== hash) {
                logger$g.throwError("Transaction hash mismatch from Provider.sendTransaction.", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });
            }
            result.wait = (confirms, timeout) => __awaiter$d(this, void 0, void 0, function* () {
                if (confirms == null) {
                    confirms = 1;
                }
                if (timeout == null) {
                    timeout = 0;
                }
                // Get the details to detect replacement
                let replacement = undefined;
                if (confirms !== 0 && startBlock != null) {
                    replacement = {
                        data: tx.data,
                        from: tx.from,
                        nonce: tx.nonce,
                        to: tx.to,
                        value: tx.value,
                        startBlock
                    };
                }
                const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);
                if (receipt == null && confirms === 0) {
                    return null;
                }
                // No longer pending, allow the polling loop to garbage collect this
                this._emitted["t:" + tx.hash] = receipt.blockNumber;
                if (receipt.status === 0) {
                    logger$g.throwError("transaction failed", Logger.errors.CALL_EXCEPTION, {
                        transactionHash: tx.hash,
                        transaction: tx,
                        receipt: receipt
                    });
                }
                return receipt;
            });
            return result;
        }
        sendTransaction(signedTransaction) {
            return __awaiter$d(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));
                const tx = this.formatter.transaction(signedTransaction);
                if (tx.confirmations == null) {
                    tx.confirmations = 0;
                }
                const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                try {
                    const hash = yield this.perform("sendTransaction", { signedTransaction: hexTx });
                    return this._wrapTransaction(tx, hash, blockNumber);
                }
                catch (error) {
                    error.transaction = tx;
                    error.transactionHash = tx.hash;
                    throw error;
                }
            });
        }
        _getTransactionRequest(transaction) {
            return __awaiter$d(this, void 0, void 0, function* () {
                const values = yield transaction;
                const tx = {};
                ["from", "to"].forEach((key) => {
                    if (values[key] == null) {
                        return;
                    }
                    tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v) : null));
                });
                ["gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "value"].forEach((key) => {
                    if (values[key] == null) {
                        return;
                    }
                    tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v) : null));
                });
                ["type"].forEach((key) => {
                    if (values[key] == null) {
                        return;
                    }
                    tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v : null));
                });
                if (values.accessList) {
                    tx.accessList = this.formatter.accessList(values.accessList);
                }
                ["data"].forEach((key) => {
                    if (values[key] == null) {
                        return;
                    }
                    tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v) : null));
                });
                return this.formatter.transactionRequest(yield resolveProperties(tx));
            });
        }
        _getFilter(filter) {
            return __awaiter$d(this, void 0, void 0, function* () {
                filter = yield filter;
                const result = {};
                if (filter.address != null) {
                    result.address = this._getAddress(filter.address);
                }
                ["blockHash", "topics"].forEach((key) => {
                    if (filter[key] == null) {
                        return;
                    }
                    result[key] = filter[key];
                });
                ["fromBlock", "toBlock"].forEach((key) => {
                    if (filter[key] == null) {
                        return;
                    }
                    result[key] = this._getBlockTag(filter[key]);
                });
                return this.formatter.filter(yield resolveProperties(result));
            });
        }
        _call(transaction, blockTag, attempt) {
            return __awaiter$d(this, void 0, void 0, function* () {
                if (attempt >= MAX_CCIP_REDIRECTS) {
                    logger$g.throwError("CCIP read exceeded maximum redirections", Logger.errors.SERVER_ERROR, {
                        redirects: attempt, transaction
                    });
                }
                const txSender = transaction.to;
                const result = yield this.perform("call", { transaction, blockTag });
                // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)
                if (attempt >= 0 && blockTag === "latest" && txSender != null && result.substring(0, 10) === "0x556f1830" && (hexDataLength(result) % 32 === 4)) {
                    try {
                        const data = hexDataSlice(result, 4);
                        // Check the sender of the OffchainLookup matches the transaction
                        const sender = hexDataSlice(data, 0, 32);
                        if (!BigNumber.from(sender).eq(txSender)) {
                            logger$g.throwError("CCIP Read sender did not match", Logger.errors.CALL_EXCEPTION, {
                                name: "OffchainLookup",
                                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                transaction, data: result
                            });
                        }
                        // Read the URLs from the response
                        const urls = [];
                        const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();
                        const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();
                        const urlsData = hexDataSlice(data, urlsOffset + 32);
                        for (let u = 0; u < urlsLength; u++) {
                            const url = _parseString(urlsData, u * 32);
                            if (url == null) {
                                logger$g.throwError("CCIP Read contained corrupt URL string", Logger.errors.CALL_EXCEPTION, {
                                    name: "OffchainLookup",
                                    signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                    transaction, data: result
                                });
                            }
                            urls.push(url);
                        }
                        // Get the CCIP calldata to forward
                        const calldata = _parseBytes(data, 64);
                        // Get the callbackSelector (bytes4)
                        if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {
                            logger$g.throwError("CCIP Read callback selector included junk", Logger.errors.CALL_EXCEPTION, {
                                name: "OffchainLookup",
                                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                transaction, data: result
                            });
                        }
                        const callbackSelector = hexDataSlice(data, 96, 100);
                        // Get the extra data to send back to the contract as context
                        const extraData = _parseBytes(data, 128);
                        const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);
                        if (ccipResult == null) {
                            logger$g.throwError("CCIP Read disabled or provided no URLs", Logger.errors.CALL_EXCEPTION, {
                                name: "OffchainLookup",
                                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                transaction, data: result
                            });
                        }
                        const tx = {
                            to: txSender,
                            data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])
                        };
                        return this._call(tx, blockTag, attempt + 1);
                    }
                    catch (error) {
                        if (error.code === Logger.errors.SERVER_ERROR) {
                            throw error;
                        }
                    }
                }
                try {
                    return hexlify(result);
                }
                catch (error) {
                    return logger$g.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "call",
                        params: { transaction, blockTag }, result, error
                    });
                }
            });
        }
        call(transaction, blockTag) {
            return __awaiter$d(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const resolved = yield resolveProperties({
                    transaction: this._getTransactionRequest(transaction),
                    blockTag: this._getBlockTag(blockTag),
                    ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)
                });
                return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);
            });
        }
        estimateGas(transaction) {
            return __awaiter$d(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const params = yield resolveProperties({
                    transaction: this._getTransactionRequest(transaction)
                });
                const result = yield this.perform("estimateGas", params);
                try {
                    return BigNumber.from(result);
                }
                catch (error) {
                    return logger$g.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "estimateGas",
                        params, result, error
                    });
                }
            });
        }
        _getAddress(addressOrName) {
            return __awaiter$d(this, void 0, void 0, function* () {
                addressOrName = yield addressOrName;
                if (typeof (addressOrName) !== "string") {
                    logger$g.throwArgumentError("invalid address or ENS name", "name", addressOrName);
                }
                const address = yield this.resolveName(addressOrName);
                if (address == null) {
                    logger$g.throwError("ENS name not configured", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: `resolveName(${JSON.stringify(addressOrName)})`
                    });
                }
                return address;
            });
        }
        _getBlock(blockHashOrBlockTag, includeTransactions) {
            return __awaiter$d(this, void 0, void 0, function* () {
                yield this.getNetwork();
                blockHashOrBlockTag = yield blockHashOrBlockTag;
                // If blockTag is a number (not "latest", etc), this is the block number
                let blockNumber = -128;
                const params = {
                    includeTransactions: !!includeTransactions
                };
                if (isHexString(blockHashOrBlockTag, 32)) {
                    params.blockHash = blockHashOrBlockTag;
                }
                else {
                    try {
                        params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);
                        if (isHexString(params.blockTag)) {
                            blockNumber = parseInt(params.blockTag.substring(2), 16);
                        }
                    }
                    catch (error) {
                        logger$g.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", blockHashOrBlockTag);
                    }
                }
                return poll(() => __awaiter$d(this, void 0, void 0, function* () {
                    const block = yield this.perform("getBlock", params);
                    // Block was not found
                    if (block == null) {
                        // For blockhashes, if we didn't say it existed, that blockhash may
                        // not exist. If we did see it though, perhaps from a log, we know
                        // it exists, and this node is just not caught up yet.
                        if (params.blockHash != null) {
                            if (this._emitted["b:" + params.blockHash] == null) {
                                return null;
                            }
                        }
                        // For block tags, if we are asking for a future block, we return null
                        if (params.blockTag != null) {
                            if (blockNumber > this._emitted.block) {
                                return null;
                            }
                        }
                        // Retry on the next block
                        return undefined;
                    }
                    // Add transactions
                    if (includeTransactions) {
                        let blockNumber = null;
                        for (let i = 0; i < block.transactions.length; i++) {
                            const tx = block.transactions[i];
                            if (tx.blockNumber == null) {
                                tx.confirmations = 0;
                            }
                            else if (tx.confirmations == null) {
                                if (blockNumber == null) {
                                    blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                                }
                                // Add the confirmations using the fast block number (pessimistic)
                                let confirmations = (blockNumber - tx.blockNumber) + 1;
                                if (confirmations <= 0) {
                                    confirmations = 1;
                                }
                                tx.confirmations = confirmations;
                            }
                        }
                        const blockWithTxs = this.formatter.blockWithTransactions(block);
                        blockWithTxs.transactions = blockWithTxs.transactions.map((tx) => this._wrapTransaction(tx));
                        return blockWithTxs;
                    }
                    return this.formatter.block(block);
                }), { oncePoll: this });
            });
        }
        getBlock(blockHashOrBlockTag) {
            return (this._getBlock(blockHashOrBlockTag, false));
        }
        getBlockWithTransactions(blockHashOrBlockTag) {
            return (this._getBlock(blockHashOrBlockTag, true));
        }
        getTransaction(transactionHash) {
            return __awaiter$d(this, void 0, void 0, function* () {
                yield this.getNetwork();
                transactionHash = yield transactionHash;
                const params = { transactionHash: this.formatter.hash(transactionHash, true) };
                return poll(() => __awaiter$d(this, void 0, void 0, function* () {
                    const result = yield this.perform("getTransaction", params);
                    if (result == null) {
                        if (this._emitted["t:" + transactionHash] == null) {
                            return null;
                        }
                        return undefined;
                    }
                    const tx = this.formatter.transactionResponse(result);
                    if (tx.blockNumber == null) {
                        tx.confirmations = 0;
                    }
                    else if (tx.confirmations == null) {
                        const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                        // Add the confirmations using the fast block number (pessimistic)
                        let confirmations = (blockNumber - tx.blockNumber) + 1;
                        if (confirmations <= 0) {
                            confirmations = 1;
                        }
                        tx.confirmations = confirmations;
                    }
                    return this._wrapTransaction(tx);
                }), { oncePoll: this });
            });
        }
        getTransactionReceipt(transactionHash) {
            return __awaiter$d(this, void 0, void 0, function* () {
                yield this.getNetwork();
                transactionHash = yield transactionHash;
                const params = { transactionHash: this.formatter.hash(transactionHash, true) };
                return poll(() => __awaiter$d(this, void 0, void 0, function* () {
                    const result = yield this.perform("getTransactionReceipt", params);
                    if (result == null) {
                        if (this._emitted["t:" + transactionHash] == null) {
                            return null;
                        }
                        return undefined;
                    }
                    // "geth-etc" returns receipts before they are ready
                    if (result.blockHash == null) {
                        return undefined;
                    }
                    const receipt = this.formatter.receipt(result);
                    if (receipt.blockNumber == null) {
                        receipt.confirmations = 0;
                    }
                    else if (receipt.confirmations == null) {
                        const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                        // Add the confirmations using the fast block number (pessimistic)
                        let confirmations = (blockNumber - receipt.blockNumber) + 1;
                        if (confirmations <= 0) {
                            confirmations = 1;
                        }
                        receipt.confirmations = confirmations;
                    }
                    return receipt;
                }), { oncePoll: this });
            });
        }
        getLogs(filter) {
            return __awaiter$d(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const params = yield resolveProperties({ filter: this._getFilter(filter) });
                const logs = yield this.perform("getLogs", params);
                logs.forEach((log) => {
                    if (log.removed == null) {
                        log.removed = false;
                    }
                });
                return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);
            });
        }
        getEtherPrice() {
            return __awaiter$d(this, void 0, void 0, function* () {
                yield this.getNetwork();
                return this.perform("getEtherPrice", {});
            });
        }
        _getBlockTag(blockTag) {
            return __awaiter$d(this, void 0, void 0, function* () {
                blockTag = yield blockTag;
                if (typeof (blockTag) === "number" && blockTag < 0) {
                    if (blockTag % 1) {
                        logger$g.throwArgumentError("invalid BlockTag", "blockTag", blockTag);
                    }
                    let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                    blockNumber += blockTag;
                    if (blockNumber < 0) {
                        blockNumber = 0;
                    }
                    return this.formatter.blockTag(blockNumber);
                }
                return this.formatter.blockTag(blockTag);
            });
        }
        getResolver(name) {
            return __awaiter$d(this, void 0, void 0, function* () {
                let currentName = name;
                while (true) {
                    if (currentName === "" || currentName === ".") {
                        return null;
                    }
                    // Optimization since the eth node cannot change and does
                    // not have a wildcard resolver
                    if (name !== "eth" && currentName === "eth") {
                        return null;
                    }
                    // Check the current node for a resolver
                    const addr = yield this._getResolver(currentName, "getResolver");
                    // Found a resolver!
                    if (addr != null) {
                        const resolver = new Resolver(this, addr, name);
                        // Legacy resolver found, using EIP-2544 so it isn't safe to use
                        if (currentName !== name && !(yield resolver.supportsWildcard())) {
                            return null;
                        }
                        return resolver;
                    }
                    // Get the parent node
                    currentName = currentName.split(".").slice(1).join(".");
                }
            });
        }
        _getResolver(name, operation) {
            return __awaiter$d(this, void 0, void 0, function* () {
                if (operation == null) {
                    operation = "ENS";
                }
                const network = yield this.getNetwork();
                // No ENS...
                if (!network.ensAddress) {
                    logger$g.throwError("network does not support ENS", Logger.errors.UNSUPPORTED_OPERATION, { operation, network: network.name });
                }
                try {
                    // keccak256("resolver(bytes32)")
                    const addrData = yield this.call({
                        to: network.ensAddress,
                        data: ("0x0178b8bf" + namehash(name).substring(2))
                    });
                    return this.formatter.callAddress(addrData);
                }
                catch (error) {
                    // ENS registry cannot throw errors on resolver(bytes32)
                }
                return null;
            });
        }
        resolveName(name) {
            return __awaiter$d(this, void 0, void 0, function* () {
                name = yield name;
                // If it is already an address, nothing to resolve
                try {
                    return Promise.resolve(this.formatter.address(name));
                }
                catch (error) {
                    // If is is a hexstring, the address is bad (See #694)
                    if (isHexString(name)) {
                        throw error;
                    }
                }
                if (typeof (name) !== "string") {
                    logger$g.throwArgumentError("invalid ENS name", "name", name);
                }
                // Get the addr from the resolver
                const resolver = yield this.getResolver(name);
                if (!resolver) {
                    return null;
                }
                return yield resolver.getAddress();
            });
        }
        lookupAddress(address) {
            return __awaiter$d(this, void 0, void 0, function* () {
                address = yield address;
                address = this.formatter.address(address);
                const node = address.substring(2).toLowerCase() + ".addr.reverse";
                const resolverAddr = yield this._getResolver(node, "lookupAddress");
                if (resolverAddr == null) {
                    return null;
                }
                // keccak("name(bytes32)")
                const name = _parseString(yield this.call({
                    to: resolverAddr,
                    data: ("0x691f3431" + namehash(node).substring(2))
                }), 0);
                const addr = yield this.resolveName(name);
                if (addr != address) {
                    return null;
                }
                return name;
            });
        }
        getAvatar(nameOrAddress) {
            return __awaiter$d(this, void 0, void 0, function* () {
                let resolver = null;
                if (isHexString(nameOrAddress)) {
                    // Address; reverse lookup
                    const address = this.formatter.address(nameOrAddress);
                    const node = address.substring(2).toLowerCase() + ".addr.reverse";
                    const resolverAddress = yield this._getResolver(node, "getAvatar");
                    if (!resolverAddress) {
                        return null;
                    }
                    // Try resolving the avatar against the addr.reverse resolver
                    resolver = new Resolver(this, resolverAddress, node);
                    try {
                        const avatar = yield resolver.getAvatar();
                        if (avatar) {
                            return avatar.url;
                        }
                    }
                    catch (error) {
                        if (error.code !== Logger.errors.CALL_EXCEPTION) {
                            throw error;
                        }
                    }
                    // Try getting the name and performing forward lookup; allowing wildcards
                    try {
                        // keccak("name(bytes32)")
                        const name = _parseString(yield this.call({
                            to: resolverAddress,
                            data: ("0x691f3431" + namehash(node).substring(2))
                        }), 0);
                        resolver = yield this.getResolver(name);
                    }
                    catch (error) {
                        if (error.code !== Logger.errors.CALL_EXCEPTION) {
                            throw error;
                        }
                        return null;
                    }
                }
                else {
                    // ENS name; forward lookup with wildcard
                    resolver = yield this.getResolver(nameOrAddress);
                    if (!resolver) {
                        return null;
                    }
                }
                const avatar = yield resolver.getAvatar();
                if (avatar == null) {
                    return null;
                }
                return avatar.url;
            });
        }
        perform(method, params) {
            return logger$g.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, { operation: method });
        }
        _startEvent(event) {
            this.polling = (this._events.filter((e) => e.pollable()).length > 0);
        }
        _stopEvent(event) {
            this.polling = (this._events.filter((e) => e.pollable()).length > 0);
        }
        _addEventListener(eventName, listener, once) {
            const event = new Event$1(getEventTag(eventName), listener, once);
            this._events.push(event);
            this._startEvent(event);
            return this;
        }
        on(eventName, listener) {
            return this._addEventListener(eventName, listener, false);
        }
        once(eventName, listener) {
            return this._addEventListener(eventName, listener, true);
        }
        emit(eventName, ...args) {
            let result = false;
            let stopped = [];
            let eventTag = getEventTag(eventName);
            this._events = this._events.filter((event) => {
                if (event.tag !== eventTag) {
                    return true;
                }
                setTimeout(() => {
                    event.listener.apply(this, args);
                }, 0);
                result = true;
                if (event.once) {
                    stopped.push(event);
                    return false;
                }
                return true;
            });
            stopped.forEach((event) => { this._stopEvent(event); });
            return result;
        }
        listenerCount(eventName) {
            if (!eventName) {
                return this._events.length;
            }
            let eventTag = getEventTag(eventName);
            return this._events.filter((event) => {
                return (event.tag === eventTag);
            }).length;
        }
        listeners(eventName) {
            if (eventName == null) {
                return this._events.map((event) => event.listener);
            }
            let eventTag = getEventTag(eventName);
            return this._events
                .filter((event) => (event.tag === eventTag))
                .map((event) => event.listener);
        }
        off(eventName, listener) {
            if (listener == null) {
                return this.removeAllListeners(eventName);
            }
            const stopped = [];
            let found = false;
            let eventTag = getEventTag(eventName);
            this._events = this._events.filter((event) => {
                if (event.tag !== eventTag || event.listener != listener) {
                    return true;
                }
                if (found) {
                    return true;
                }
                found = true;
                stopped.push(event);
                return false;
            });
            stopped.forEach((event) => { this._stopEvent(event); });
            return this;
        }
        removeAllListeners(eventName) {
            let stopped = [];
            if (eventName == null) {
                stopped = this._events;
                this._events = [];
            }
            else {
                const eventTag = getEventTag(eventName);
                this._events = this._events.filter((event) => {
                    if (event.tag !== eventTag) {
                        return true;
                    }
                    stopped.push(event);
                    return false;
                });
            }
            stopped.forEach((event) => { this._stopEvent(event); });
            return this;
        }
    }

    var __awaiter$c = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$f = new Logger(version$5);
    const errorGas = ["call", "estimateGas"];
    function spelunk(value, requireData) {
        if (value == null) {
            return null;
        }
        // These *are* the droids we're looking for.
        if (typeof (value.message) === "string" && value.message.match("reverted")) {
            const data = isHexString(value.data) ? value.data : null;
            if (!requireData || data) {
                return { message: value.message, data };
            }
        }
        // Spelunk further...
        if (typeof (value) === "object") {
            for (const key in value) {
                const result = spelunk(value[key], requireData);
                if (result) {
                    return result;
                }
            }
            return null;
        }
        // Might be a JSON string we can further descend...
        if (typeof (value) === "string") {
            try {
                return spelunk(JSON.parse(value), requireData);
            }
            catch (error) { }
        }
        return null;
    }
    function checkError$1(method, error, params) {
        const transaction = params.transaction || params.signedTransaction;
        // Undo the "convenience" some nodes are attempting to prevent backwards
        // incompatibility; maybe for v6 consider forwarding reverts as errors
        if (method === "call") {
            const result = spelunk(error, true);
            if (result) {
                return result.data;
            }
            // Nothing descriptive..
            logger$f.throwError("missing revert data in call exception; Transaction reverted without a reason string", Logger.errors.CALL_EXCEPTION, {
                data: "0x", transaction, error
            });
        }
        if (method === "estimateGas") {
            // Try to find something, with a preference on SERVER_ERROR body
            let result = spelunk(error.body, false);
            if (result == null) {
                result = spelunk(error, false);
            }
            // Found "reverted", this is a CALL_EXCEPTION
            if (result) {
                logger$f.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                    reason: result.message, method, transaction, error
                });
            }
        }
        // @TODO: Should we spelunk for message too?
        let message = error.message;
        if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof (error.error.message) === "string") {
            message = error.error.message;
        }
        else if (typeof (error.body) === "string") {
            message = error.body;
        }
        else if (typeof (error.responseText) === "string") {
            message = error.responseText;
        }
        message = (message || "").toLowerCase();
        // "insufficient funds for gas * price + value + cost(data)"
        if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {
            logger$f.throwError("insufficient funds for intrinsic transaction cost", Logger.errors.INSUFFICIENT_FUNDS, {
                error, method, transaction
            });
        }
        // "nonce too low"
        if (message.match(/nonce (is )?too low/i)) {
            logger$f.throwError("nonce has already been used", Logger.errors.NONCE_EXPIRED, {
                error, method, transaction
            });
        }
        // "replacement transaction underpriced"
        if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {
            logger$f.throwError("replacement fee too low", Logger.errors.REPLACEMENT_UNDERPRICED, {
                error, method, transaction
            });
        }
        // "replacement transaction underpriced"
        if (message.match(/only replay-protected/i)) {
            logger$f.throwError("legacy pre-eip-155 transactions not supported", Logger.errors.UNSUPPORTED_OPERATION, {
                error, method, transaction
            });
        }
        if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {
            logger$f.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                error, method, transaction
            });
        }
        throw error;
    }
    function timer(timeout) {
        return new Promise(function (resolve) {
            setTimeout(resolve, timeout);
        });
    }
    function getResult$1(payload) {
        if (payload.error) {
            // @TODO: not any
            const error = new Error(payload.error.message);
            error.code = payload.error.code;
            error.data = payload.error.data;
            throw error;
        }
        return payload.result;
    }
    function getLowerCase(value) {
        if (value) {
            return value.toLowerCase();
        }
        return value;
    }
    const _constructorGuard = {};
    class JsonRpcSigner extends Signer {
        constructor(constructorGuard, provider, addressOrIndex) {
            super();
            if (constructorGuard !== _constructorGuard) {
                throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
            }
            defineReadOnly(this, "provider", provider);
            if (addressOrIndex == null) {
                addressOrIndex = 0;
            }
            if (typeof (addressOrIndex) === "string") {
                defineReadOnly(this, "_address", this.provider.formatter.address(addressOrIndex));
                defineReadOnly(this, "_index", null);
            }
            else if (typeof (addressOrIndex) === "number") {
                defineReadOnly(this, "_index", addressOrIndex);
                defineReadOnly(this, "_address", null);
            }
            else {
                logger$f.throwArgumentError("invalid address or index", "addressOrIndex", addressOrIndex);
            }
        }
        connect(provider) {
            return logger$f.throwError("cannot alter JSON-RPC Signer connection", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "connect"
            });
        }
        connectUnchecked() {
            return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);
        }
        getAddress() {
            if (this._address) {
                return Promise.resolve(this._address);
            }
            return this.provider.send("eth_accounts", []).then((accounts) => {
                if (accounts.length <= this._index) {
                    logger$f.throwError("unknown account #" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "getAddress"
                    });
                }
                return this.provider.formatter.address(accounts[this._index]);
            });
        }
        sendUncheckedTransaction(transaction) {
            transaction = shallowCopy(transaction);
            const fromAddress = this.getAddress().then((address) => {
                if (address) {
                    address = address.toLowerCase();
                }
                return address;
            });
            // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user
            // wishes to use this, it is easy to specify explicitly, otherwise
            // we look it up for them.
            if (transaction.gasLimit == null) {
                const estimate = shallowCopy(transaction);
                estimate.from = fromAddress;
                transaction.gasLimit = this.provider.estimateGas(estimate);
            }
            if (transaction.to != null) {
                transaction.to = Promise.resolve(transaction.to).then((to) => __awaiter$c(this, void 0, void 0, function* () {
                    if (to == null) {
                        return null;
                    }
                    const address = yield this.provider.resolveName(to);
                    if (address == null) {
                        logger$f.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                    }
                    return address;
                }));
            }
            return resolveProperties({
                tx: resolveProperties(transaction),
                sender: fromAddress
            }).then(({ tx, sender }) => {
                if (tx.from != null) {
                    if (tx.from.toLowerCase() !== sender) {
                        logger$f.throwArgumentError("from address mismatch", "transaction", transaction);
                    }
                }
                else {
                    tx.from = sender;
                }
                const hexTx = this.provider.constructor.hexlifyTransaction(tx, { from: true });
                return this.provider.send("eth_sendTransaction", [hexTx]).then((hash) => {
                    return hash;
                }, (error) => {
                    if (typeof (error.message) === "string" && error.message.match(/user denied/i)) {
                        logger$f.throwError("user rejected transaction", Logger.errors.ACTION_REJECTED, {
                            action: "sendTransaction",
                            transaction: tx
                        });
                    }
                    return checkError$1("sendTransaction", error, hexTx);
                });
            });
        }
        signTransaction(transaction) {
            return logger$f.throwError("signing transactions is unsupported", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "signTransaction"
            });
        }
        sendTransaction(transaction) {
            return __awaiter$c(this, void 0, void 0, function* () {
                // This cannot be mined any earlier than any recent block
                const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);
                // Send the transaction
                const hash = yield this.sendUncheckedTransaction(transaction);
                try {
                    // Unfortunately, JSON-RPC only provides and opaque transaction hash
                    // for a response, and we need the actual transaction, so we poll
                    // for it; it should show up very quickly
                    return yield poll(() => __awaiter$c(this, void 0, void 0, function* () {
                        const tx = yield this.provider.getTransaction(hash);
                        if (tx === null) {
                            return undefined;
                        }
                        return this.provider._wrapTransaction(tx, hash, blockNumber);
                    }), { oncePoll: this.provider });
                }
                catch (error) {
                    error.transactionHash = hash;
                    throw error;
                }
            });
        }
        signMessage(message) {
            return __awaiter$c(this, void 0, void 0, function* () {
                const data = ((typeof (message) === "string") ? toUtf8Bytes(message) : message);
                const address = yield this.getAddress();
                try {
                    return yield this.provider.send("personal_sign", [hexlify(data), address.toLowerCase()]);
                }
                catch (error) {
                    if (typeof (error.message) === "string" && error.message.match(/user denied/i)) {
                        logger$f.throwError("user rejected signing", Logger.errors.ACTION_REJECTED, {
                            action: "signMessage",
                            from: address,
                            messageData: message
                        });
                    }
                    throw error;
                }
            });
        }
        _legacySignMessage(message) {
            return __awaiter$c(this, void 0, void 0, function* () {
                const data = ((typeof (message) === "string") ? toUtf8Bytes(message) : message);
                const address = yield this.getAddress();
                try {
                    // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
                    return yield this.provider.send("eth_sign", [address.toLowerCase(), hexlify(data)]);
                }
                catch (error) {
                    if (typeof (error.message) === "string" && error.message.match(/user denied/i)) {
                        logger$f.throwError("user rejected signing", Logger.errors.ACTION_REJECTED, {
                            action: "_legacySignMessage",
                            from: address,
                            messageData: message
                        });
                    }
                    throw error;
                }
            });
        }
        _signTypedData(domain, types, value) {
            return __awaiter$c(this, void 0, void 0, function* () {
                // Populate any ENS names (in-place)
                const populated = yield TypedDataEncoder.resolveNames(domain, types, value, (name) => {
                    return this.provider.resolveName(name);
                });
                const address = yield this.getAddress();
                try {
                    return yield this.provider.send("eth_signTypedData_v4", [
                        address.toLowerCase(),
                        JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))
                    ]);
                }
                catch (error) {
                    if (typeof (error.message) === "string" && error.message.match(/user denied/i)) {
                        logger$f.throwError("user rejected signing", Logger.errors.ACTION_REJECTED, {
                            action: "_signTypedData",
                            from: address,
                            messageData: { domain: populated.domain, types, value: populated.value }
                        });
                    }
                    throw error;
                }
            });
        }
        unlock(password) {
            return __awaiter$c(this, void 0, void 0, function* () {
                const provider = this.provider;
                const address = yield this.getAddress();
                return provider.send("personal_unlockAccount", [address.toLowerCase(), password, null]);
            });
        }
    }
    class UncheckedJsonRpcSigner extends JsonRpcSigner {
        sendTransaction(transaction) {
            return this.sendUncheckedTransaction(transaction).then((hash) => {
                return {
                    hash: hash,
                    nonce: null,
                    gasLimit: null,
                    gasPrice: null,
                    data: null,
                    value: null,
                    chainId: null,
                    confirmations: 0,
                    from: null,
                    wait: (confirmations) => { return this.provider.waitForTransaction(hash, confirmations); }
                };
            });
        }
    }
    const allowedTransactionKeys = {
        chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,
        type: true, accessList: true,
        maxFeePerGas: true, maxPriorityFeePerGas: true
    };
    class JsonRpcProvider$1 extends BaseProvider {
        constructor(url, network) {
            let networkOrReady = network;
            // The network is unknown, query the JSON-RPC for it
            if (networkOrReady == null) {
                networkOrReady = new Promise((resolve, reject) => {
                    setTimeout(() => {
                        this.detectNetwork().then((network) => {
                            resolve(network);
                        }, (error) => {
                            reject(error);
                        });
                    }, 0);
                });
            }
            super(networkOrReady);
            // Default URL
            if (!url) {
                url = getStatic(this.constructor, "defaultUrl")();
            }
            if (typeof (url) === "string") {
                defineReadOnly(this, "connection", Object.freeze({
                    url: url
                }));
            }
            else {
                defineReadOnly(this, "connection", Object.freeze(shallowCopy(url)));
            }
            this._nextId = 42;
        }
        get _cache() {
            if (this._eventLoopCache == null) {
                this._eventLoopCache = {};
            }
            return this._eventLoopCache;
        }
        static defaultUrl() {
            return "http:/\/localhost:8545";
        }
        detectNetwork() {
            if (!this._cache["detectNetwork"]) {
                this._cache["detectNetwork"] = this._uncachedDetectNetwork();
                // Clear this cache at the beginning of the next event loop
                setTimeout(() => {
                    this._cache["detectNetwork"] = null;
                }, 0);
            }
            return this._cache["detectNetwork"];
        }
        _uncachedDetectNetwork() {
            return __awaiter$c(this, void 0, void 0, function* () {
                yield timer(0);
                let chainId = null;
                try {
                    chainId = yield this.send("eth_chainId", []);
                }
                catch (error) {
                    try {
                        chainId = yield this.send("net_version", []);
                    }
                    catch (error) { }
                }
                if (chainId != null) {
                    const getNetwork = getStatic(this.constructor, "getNetwork");
                    try {
                        return getNetwork(BigNumber.from(chainId).toNumber());
                    }
                    catch (error) {
                        return logger$f.throwError("could not detect network", Logger.errors.NETWORK_ERROR, {
                            chainId: chainId,
                            event: "invalidNetwork",
                            serverError: error
                        });
                    }
                }
                return logger$f.throwError("could not detect network", Logger.errors.NETWORK_ERROR, {
                    event: "noNetwork"
                });
            });
        }
        getSigner(addressOrIndex) {
            return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);
        }
        getUncheckedSigner(addressOrIndex) {
            return this.getSigner(addressOrIndex).connectUnchecked();
        }
        listAccounts() {
            return this.send("eth_accounts", []).then((accounts) => {
                return accounts.map((a) => this.formatter.address(a));
            });
        }
        send(method, params) {
            const request = {
                method: method,
                params: params,
                id: (this._nextId++),
                jsonrpc: "2.0"
            };
            this.emit("debug", {
                action: "request",
                request: deepCopy(request),
                provider: this
            });
            // We can expand this in the future to any call, but for now these
            // are the biggest wins and do not require any serializing parameters.
            const cache = (["eth_chainId", "eth_blockNumber"].indexOf(method) >= 0);
            if (cache && this._cache[method]) {
                return this._cache[method];
            }
            const result = fetchJson(this.connection, JSON.stringify(request), getResult$1).then((result) => {
                this.emit("debug", {
                    action: "response",
                    request: request,
                    response: result,
                    provider: this
                });
                return result;
            }, (error) => {
                this.emit("debug", {
                    action: "response",
                    error: error,
                    request: request,
                    provider: this
                });
                throw error;
            });
            // Cache the fetch, but clear it on the next event loop
            if (cache) {
                this._cache[method] = result;
                setTimeout(() => {
                    this._cache[method] = null;
                }, 0);
            }
            return result;
        }
        prepareRequest(method, params) {
            switch (method) {
                case "getBlockNumber":
                    return ["eth_blockNumber", []];
                case "getGasPrice":
                    return ["eth_gasPrice", []];
                case "getBalance":
                    return ["eth_getBalance", [getLowerCase(params.address), params.blockTag]];
                case "getTransactionCount":
                    return ["eth_getTransactionCount", [getLowerCase(params.address), params.blockTag]];
                case "getCode":
                    return ["eth_getCode", [getLowerCase(params.address), params.blockTag]];
                case "getStorageAt":
                    return ["eth_getStorageAt", [getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag]];
                case "sendTransaction":
                    return ["eth_sendRawTransaction", [params.signedTransaction]];
                case "getBlock":
                    if (params.blockTag) {
                        return ["eth_getBlockByNumber", [params.blockTag, !!params.includeTransactions]];
                    }
                    else if (params.blockHash) {
                        return ["eth_getBlockByHash", [params.blockHash, !!params.includeTransactions]];
                    }
                    return null;
                case "getTransaction":
                    return ["eth_getTransactionByHash", [params.transactionHash]];
                case "getTransactionReceipt":
                    return ["eth_getTransactionReceipt", [params.transactionHash]];
                case "call": {
                    const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
                    return ["eth_call", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];
                }
                case "estimateGas": {
                    const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
                    return ["eth_estimateGas", [hexlifyTransaction(params.transaction, { from: true })]];
                }
                case "getLogs":
                    if (params.filter && params.filter.address != null) {
                        params.filter.address = getLowerCase(params.filter.address);
                    }
                    return ["eth_getLogs", [params.filter]];
            }
            return null;
        }
        perform(method, params) {
            return __awaiter$c(this, void 0, void 0, function* () {
                // Legacy networks do not like the type field being passed along (which
                // is fair), so we delete type if it is 0 and a non-EIP-1559 network
                if (method === "call" || method === "estimateGas") {
                    const tx = params.transaction;
                    if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {
                        // If there are no EIP-1559 properties, it might be non-EIP-1559
                        if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
                            const feeData = yield this.getFeeData();
                            if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
                                // Network doesn't know about EIP-1559 (and hence type)
                                params = shallowCopy(params);
                                params.transaction = shallowCopy(tx);
                                delete params.transaction.type;
                            }
                        }
                    }
                }
                const args = this.prepareRequest(method, params);
                if (args == null) {
                    logger$f.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, { operation: method });
                }
                try {
                    return yield this.send(args[0], args[1]);
                }
                catch (error) {
                    return checkError$1(method, error, params);
                }
            });
        }
        _startEvent(event) {
            if (event.tag === "pending") {
                this._startPending();
            }
            super._startEvent(event);
        }
        _startPending() {
            if (this._pendingFilter != null) {
                return;
            }
            const self = this;
            const pendingFilter = this.send("eth_newPendingTransactionFilter", []);
            this._pendingFilter = pendingFilter;
            pendingFilter.then(function (filterId) {
                function poll() {
                    self.send("eth_getFilterChanges", [filterId]).then(function (hashes) {
                        if (self._pendingFilter != pendingFilter) {
                            return null;
                        }
                        let seq = Promise.resolve();
                        hashes.forEach(function (hash) {
                            // @TODO: This should be garbage collected at some point... How? When?
                            self._emitted["t:" + hash.toLowerCase()] = "pending";
                            seq = seq.then(function () {
                                return self.getTransaction(hash).then(function (tx) {
                                    self.emit("pending", tx);
                                    return null;
                                });
                            });
                        });
                        return seq.then(function () {
                            return timer(1000);
                        });
                    }).then(function () {
                        if (self._pendingFilter != pendingFilter) {
                            self.send("eth_uninstallFilter", [filterId]);
                            return;
                        }
                        setTimeout(function () { poll(); }, 0);
                        return null;
                    }).catch((error) => { });
                }
                poll();
                return filterId;
            }).catch((error) => { });
        }
        _stopEvent(event) {
            if (event.tag === "pending" && this.listenerCount("pending") === 0) {
                this._pendingFilter = null;
            }
            super._stopEvent(event);
        }
        // Convert an ethers.js transaction into a JSON-RPC transaction
        //  - gasLimit => gas
        //  - All values hexlified
        //  - All numeric values zero-striped
        //  - All addresses are lowercased
        // NOTE: This allows a TransactionRequest, but all values should be resolved
        //       before this is called
        // @TODO: This will likely be removed in future versions and prepareRequest
        //        will be the preferred method for this.
        static hexlifyTransaction(transaction, allowExtra) {
            // Check only allowed properties are given
            const allowed = shallowCopy(allowedTransactionKeys);
            if (allowExtra) {
                for (const key in allowExtra) {
                    if (allowExtra[key]) {
                        allowed[key] = true;
                    }
                }
            }
            checkProperties(transaction, allowed);
            const result = {};
            // JSON-RPC now requires numeric values to be "quantity" values
            ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach(function (key) {
                if (transaction[key] == null) {
                    return;
                }
                const value = hexValue(BigNumber.from(transaction[key]));
                if (key === "gasLimit") {
                    key = "gas";
                }
                result[key] = value;
            });
            ["from", "to", "data"].forEach(function (key) {
                if (transaction[key] == null) {
                    return;
                }
                result[key] = hexlify(transaction[key]);
            });
            if (transaction.accessList) {
                result["accessList"] = accessListify(transaction.accessList);
            }
            return result;
        }
    }

    let WS$1 = null;
    try {
        WS$1 = WebSocket;
        if (WS$1 == null) {
            throw new Error("inject please");
        }
    }
    catch (error) {
        const logger = new Logger(version$5);
        WS$1 = function () {
            logger.throwError("WebSockets not supported in this environment", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "new WebSocket()"
            });
        };
    }

    var __awaiter$b = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$e = new Logger(version$5);
    /**
     *  Notes:
     *
     *  This provider differs a bit from the polling providers. One main
     *  difference is how it handles consistency. The polling providers
     *  will stall responses to ensure a consistent state, while this
     *  WebSocket provider assumes the connected backend will manage this.
     *
     *  For example, if a polling provider emits an event which indicates
     *  the event occurred in blockhash XXX, a call to fetch that block by
     *  its hash XXX, if not present will retry until it is present. This
     *  can occur when querying a pool of nodes that are mildly out of sync
     *  with each other.
     */
    let NextId = 1;
    // For more info about the Real-time Event API see:
    //   https://geth.ethereum.org/docs/rpc/pubsub
    class WebSocketProvider extends JsonRpcProvider$1 {
        constructor(url, network) {
            // This will be added in the future; please open an issue to expedite
            if (network === "any") {
                logger$e.throwError("WebSocketProvider does not support 'any' network yet", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "network:any"
                });
            }
            if (typeof (url) === "string") {
                super(url, network);
            }
            else {
                super("_websocket", network);
            }
            this._pollingInterval = -1;
            this._wsReady = false;
            if (typeof (url) === "string") {
                defineReadOnly(this, "_websocket", new WS$1(this.connection.url));
            }
            else {
                defineReadOnly(this, "_websocket", url);
            }
            defineReadOnly(this, "_requests", {});
            defineReadOnly(this, "_subs", {});
            defineReadOnly(this, "_subIds", {});
            defineReadOnly(this, "_detectNetwork", super.detectNetwork());
            // Stall sending requests until the socket is open...
            this.websocket.onopen = () => {
                this._wsReady = true;
                Object.keys(this._requests).forEach((id) => {
                    this.websocket.send(this._requests[id].payload);
                });
            };
            this.websocket.onmessage = (messageEvent) => {
                const data = messageEvent.data;
                const result = JSON.parse(data);
                if (result.id != null) {
                    const id = String(result.id);
                    const request = this._requests[id];
                    delete this._requests[id];
                    if (result.result !== undefined) {
                        request.callback(null, result.result);
                        this.emit("debug", {
                            action: "response",
                            request: JSON.parse(request.payload),
                            response: result.result,
                            provider: this
                        });
                    }
                    else {
                        let error = null;
                        if (result.error) {
                            error = new Error(result.error.message || "unknown error");
                            defineReadOnly(error, "code", result.error.code || null);
                            defineReadOnly(error, "response", data);
                        }
                        else {
                            error = new Error("unknown error");
                        }
                        request.callback(error, undefined);
                        this.emit("debug", {
                            action: "response",
                            error: error,
                            request: JSON.parse(request.payload),
                            provider: this
                        });
                    }
                }
                else if (result.method === "eth_subscription") {
                    // Subscription...
                    const sub = this._subs[result.params.subscription];
                    if (sub) {
                        //this.emit.apply(this,                  );
                        sub.processFunc(result.params.result);
                    }
                }
                else {
                    console.warn("this should not happen");
                }
            };
            // This Provider does not actually poll, but we want to trigger
            // poll events for things that depend on them (like stalling for
            // block and transaction lookups)
            const fauxPoll = setInterval(() => {
                this.emit("poll");
            }, 1000);
            if (fauxPoll.unref) {
                fauxPoll.unref();
            }
        }
        // Cannot narrow the type of _websocket, as that is not backwards compatible
        // so we add a getter and let the WebSocket be a public API.
        get websocket() { return this._websocket; }
        detectNetwork() {
            return this._detectNetwork;
        }
        get pollingInterval() {
            return 0;
        }
        resetEventsBlock(blockNumber) {
            logger$e.throwError("cannot reset events block on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "resetEventBlock"
            });
        }
        set pollingInterval(value) {
            logger$e.throwError("cannot set polling interval on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "setPollingInterval"
            });
        }
        poll() {
            return __awaiter$b(this, void 0, void 0, function* () {
                return null;
            });
        }
        set polling(value) {
            if (!value) {
                return;
            }
            logger$e.throwError("cannot set polling on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "setPolling"
            });
        }
        send(method, params) {
            const rid = NextId++;
            return new Promise((resolve, reject) => {
                function callback(error, result) {
                    if (error) {
                        return reject(error);
                    }
                    return resolve(result);
                }
                const payload = JSON.stringify({
                    method: method,
                    params: params,
                    id: rid,
                    jsonrpc: "2.0"
                });
                this.emit("debug", {
                    action: "request",
                    request: JSON.parse(payload),
                    provider: this
                });
                this._requests[String(rid)] = { callback, payload };
                if (this._wsReady) {
                    this.websocket.send(payload);
                }
            });
        }
        static defaultUrl() {
            return "ws:/\/localhost:8546";
        }
        _subscribe(tag, param, processFunc) {
            return __awaiter$b(this, void 0, void 0, function* () {
                let subIdPromise = this._subIds[tag];
                if (subIdPromise == null) {
                    subIdPromise = Promise.all(param).then((param) => {
                        return this.send("eth_subscribe", param);
                    });
                    this._subIds[tag] = subIdPromise;
                }
                const subId = yield subIdPromise;
                this._subs[subId] = { tag, processFunc };
            });
        }
        _startEvent(event) {
            switch (event.type) {
                case "block":
                    this._subscribe("block", ["newHeads"], (result) => {
                        const blockNumber = BigNumber.from(result.number).toNumber();
                        this._emitted.block = blockNumber;
                        this.emit("block", blockNumber);
                    });
                    break;
                case "pending":
                    this._subscribe("pending", ["newPendingTransactions"], (result) => {
                        this.emit("pending", result);
                    });
                    break;
                case "filter":
                    this._subscribe(event.tag, ["logs", this._getFilter(event.filter)], (result) => {
                        if (result.removed == null) {
                            result.removed = false;
                        }
                        this.emit(event.filter, this.formatter.filterLog(result));
                    });
                    break;
                case "tx": {
                    const emitReceipt = (event) => {
                        const hash = event.hash;
                        this.getTransactionReceipt(hash).then((receipt) => {
                            if (!receipt) {
                                return;
                            }
                            this.emit(hash, receipt);
                        });
                    };
                    // In case it is already mined
                    emitReceipt(event);
                    // To keep things simple, we start up a single newHeads subscription
                    // to keep an eye out for transactions we are watching for.
                    // Starting a subscription for an event (i.e. "tx") that is already
                    // running is (basically) a nop.
                    this._subscribe("tx", ["newHeads"], (result) => {
                        this._events.filter((e) => (e.type === "tx")).forEach(emitReceipt);
                    });
                    break;
                }
                // Nothing is needed
                case "debug":
                case "poll":
                case "willPoll":
                case "didPoll":
                case "error":
                    break;
                default:
                    console.log("unhandled:", event);
                    break;
            }
        }
        _stopEvent(event) {
            let tag = event.tag;
            if (event.type === "tx") {
                // There are remaining transaction event listeners
                if (this._events.filter((e) => (e.type === "tx")).length) {
                    return;
                }
                tag = "tx";
            }
            else if (this.listenerCount(event.event)) {
                // There are remaining event listeners
                return;
            }
            const subId = this._subIds[tag];
            if (!subId) {
                return;
            }
            delete this._subIds[tag];
            subId.then((subId) => {
                if (!this._subs[subId]) {
                    return;
                }
                delete this._subs[subId];
                this.send("eth_unsubscribe", [subId]);
            });
        }
        destroy() {
            return __awaiter$b(this, void 0, void 0, function* () {
                // Wait until we have connected before trying to disconnect
                if (this.websocket.readyState === WS$1.CONNECTING) {
                    yield (new Promise((resolve) => {
                        this.websocket.onopen = function () {
                            resolve(true);
                        };
                        this.websocket.onerror = function () {
                            resolve(false);
                        };
                    }));
                }
                // Hangup
                // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes
                this.websocket.close(1000);
            });
        }
    }

    var __awaiter$a = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$d = new Logger(version$5);
    // A StaticJsonRpcProvider is useful when you *know* for certain that
    // the backend will never change, as it never calls eth_chainId to
    // verify its backend. However, if the backend does change, the effects
    // are undefined and may include:
    // - inconsistent results
    // - locking up the UI
    // - block skew warnings
    // - wrong results
    // If the network is not explicit (i.e. auto-detection is expected), the
    // node MUST be running and available to respond to requests BEFORE this
    // is instantiated.
    class StaticJsonRpcProvider extends JsonRpcProvider$1 {
        detectNetwork() {
            const _super = Object.create(null, {
                detectNetwork: { get: () => super.detectNetwork }
            });
            return __awaiter$a(this, void 0, void 0, function* () {
                let network = this.network;
                if (network == null) {
                    network = yield _super.detectNetwork.call(this);
                    if (!network) {
                        logger$d.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
                    }
                    // If still not set, set it
                    if (this._network == null) {
                        // A static network does not support "any"
                        defineReadOnly(this, "_network", network);
                        this.emit("network", network, null);
                    }
                }
                return network;
            });
        }
    }
    class UrlJsonRpcProvider extends StaticJsonRpcProvider {
        constructor(network, apiKey) {
            logger$d.checkAbstract(new.target, UrlJsonRpcProvider);
            // Normalize the Network and API Key
            network = getStatic(new.target, "getNetwork")(network);
            apiKey = getStatic(new.target, "getApiKey")(apiKey);
            const connection = getStatic(new.target, "getUrl")(network, apiKey);
            super(connection, network);
            if (typeof (apiKey) === "string") {
                defineReadOnly(this, "apiKey", apiKey);
            }
            else if (apiKey != null) {
                Object.keys(apiKey).forEach((key) => {
                    defineReadOnly(this, key, apiKey[key]);
                });
            }
        }
        _startPending() {
            logger$d.warn("WARNING: API provider does not support pending filters");
        }
        isCommunityResource() {
            return false;
        }
        getSigner(address) {
            return logger$d.throwError("API provider does not support signing", Logger.errors.UNSUPPORTED_OPERATION, { operation: "getSigner" });
        }
        listAccounts() {
            return Promise.resolve([]);
        }
        // Return a defaultApiKey if null, otherwise validate the API key
        static getApiKey(apiKey) {
            return apiKey;
        }
        // Returns the url or connection for the given network and API key. The
        // API key will have been sanitized by the getApiKey first, so any validation
        // or transformations can be done there.
        static getUrl(network, apiKey) {
            return logger$d.throwError("not implemented; sub-classes must override getUrl", Logger.errors.NOT_IMPLEMENTED, {
                operation: "getUrl"
            });
        }
    }

    const logger$c = new Logger(version$5);
    // This key was provided to ethers.js by Alchemy to be used by the
    // default provider, but it is recommended that for your own
    // production environments, that you acquire your own API key at:
    //   https://dashboard.alchemyapi.io
    const defaultApiKey$2 = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
    class AlchemyWebSocketProvider extends WebSocketProvider {
        constructor(network, apiKey) {
            const provider = new AlchemyProvider(network, apiKey);
            const url = provider.connection.url.replace(/^http/i, "ws")
                .replace(".alchemyapi.", ".ws.alchemyapi.");
            super(url, provider.network);
            defineReadOnly(this, "apiKey", provider.apiKey);
        }
        isCommunityResource() {
            return (this.apiKey === defaultApiKey$2);
        }
    }
    class AlchemyProvider extends UrlJsonRpcProvider {
        static getWebSocketProvider(network, apiKey) {
            return new AlchemyWebSocketProvider(network, apiKey);
        }
        static getApiKey(apiKey) {
            if (apiKey == null) {
                return defaultApiKey$2;
            }
            if (apiKey && typeof (apiKey) !== "string") {
                logger$c.throwArgumentError("invalid apiKey", "apiKey", apiKey);
            }
            return apiKey;
        }
        static getUrl(network, apiKey) {
            let host = null;
            switch (network.name) {
                case "homestead":
                    host = "eth-mainnet.alchemyapi.io/v2/";
                    break;
                case "goerli":
                    host = "eth-goerli.g.alchemy.com/v2/";
                    break;
                case "matic":
                    host = "polygon-mainnet.g.alchemy.com/v2/";
                    break;
                case "maticmum":
                    host = "polygon-mumbai.g.alchemy.com/v2/";
                    break;
                case "arbitrum":
                    host = "arb-mainnet.g.alchemy.com/v2/";
                    break;
                case "arbitrum-goerli":
                    host = "arb-goerli.g.alchemy.com/v2/";
                    break;
                case "optimism":
                    host = "opt-mainnet.g.alchemy.com/v2/";
                    break;
                case "optimism-goerli":
                    host = "opt-goerli.g.alchemy.com/v2/";
                    break;
                default:
                    logger$c.throwArgumentError("unsupported network", "network", arguments[0]);
            }
            return {
                allowGzip: true,
                url: ("https:/" + "/" + host + apiKey),
                throttleCallback: (attempt, url) => {
                    if (apiKey === defaultApiKey$2) {
                        showThrottleMessage();
                    }
                    return Promise.resolve(true);
                }
            };
        }
        isCommunityResource() {
            return (this.apiKey === defaultApiKey$2);
        }
    }

    const logger$b = new Logger(version$5);
    const defaultApiKey$1 = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
    function getHost(name) {
        switch (name) {
            case "homestead":
                return "rpc.ankr.com/eth/";
            case "ropsten":
                return "rpc.ankr.com/eth_ropsten/";
            case "rinkeby":
                return "rpc.ankr.com/eth_rinkeby/";
            case "goerli":
                return "rpc.ankr.com/eth_goerli/";
            case "matic":
                return "rpc.ankr.com/polygon/";
            case "arbitrum":
                return "rpc.ankr.com/arbitrum/";
        }
        return logger$b.throwArgumentError("unsupported network", "name", name);
    }
    class AnkrProvider extends UrlJsonRpcProvider {
        isCommunityResource() {
            return (this.apiKey === defaultApiKey$1);
        }
        static getApiKey(apiKey) {
            if (apiKey == null) {
                return defaultApiKey$1;
            }
            return apiKey;
        }
        static getUrl(network, apiKey) {
            if (apiKey == null) {
                apiKey = defaultApiKey$1;
            }
            const connection = {
                allowGzip: true,
                url: ("https:/\/" + getHost(network.name) + apiKey),
                throttleCallback: (attempt, url) => {
                    if (apiKey.apiKey === defaultApiKey$1) {
                        showThrottleMessage();
                    }
                    return Promise.resolve(true);
                }
            };
            if (apiKey.projectSecret != null) {
                connection.user = "";
                connection.password = apiKey.projectSecret;
            }
            return connection;
        }
    }

    var __awaiter$9 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$a = new Logger(version$5);
    class CloudflareProvider extends UrlJsonRpcProvider {
        static getApiKey(apiKey) {
            if (apiKey != null) {
                logger$a.throwArgumentError("apiKey not supported for cloudflare", "apiKey", apiKey);
            }
            return null;
        }
        static getUrl(network, apiKey) {
            let host = null;
            switch (network.name) {
                case "homestead":
                    host = "https://cloudflare-eth.com/";
                    break;
                default:
                    logger$a.throwArgumentError("unsupported network", "network", arguments[0]);
            }
            return host;
        }
        perform(method, params) {
            const _super = Object.create(null, {
                perform: { get: () => super.perform }
            });
            return __awaiter$9(this, void 0, void 0, function* () {
                // The Cloudflare provider does not support eth_blockNumber,
                // so we get the latest block and pull it from that
                if (method === "getBlockNumber") {
                    const block = yield _super.perform.call(this, "getBlock", { blockTag: "latest" });
                    return block.number;
                }
                return _super.perform.call(this, method, params);
            });
        }
    }

    var __awaiter$8 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$9 = new Logger(version$5);
    // The transaction has already been sanitized by the calls in Provider
    function getTransactionPostData(transaction) {
        const result = {};
        for (let key in transaction) {
            if (transaction[key] == null) {
                continue;
            }
            let value = transaction[key];
            if (key === "type" && value === 0) {
                continue;
            }
            // Quantity-types require no leading zero, unless 0
            if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {
                value = hexValue(hexlify(value));
            }
            else if (key === "accessList") {
                value = "[" + accessListify(value).map((set) => {
                    return `{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`;
                }).join(",") + "]";
            }
            else {
                value = hexlify(value);
            }
            result[key] = value;
        }
        return result;
    }
    function getResult(result) {
        // getLogs, getHistory have weird success responses
        if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
            return result.result;
        }
        if (result.status != 1 || typeof (result.message) !== "string" || !result.message.match(/^OK/)) {
            const error = new Error("invalid response");
            error.result = JSON.stringify(result);
            if ((result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
                error.throttleRetry = true;
            }
            throw error;
        }
        return result.result;
    }
    function getJsonResult(result) {
        // This response indicates we are being throttled
        if (result && result.status == 0 && result.message == "NOTOK" && (result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
            const error = new Error("throttled response");
            error.result = JSON.stringify(result);
            error.throttleRetry = true;
            throw error;
        }
        if (result.jsonrpc != "2.0") {
            // @TODO: not any
            const error = new Error("invalid response");
            error.result = JSON.stringify(result);
            throw error;
        }
        if (result.error) {
            // @TODO: not any
            const error = new Error(result.error.message || "unknown error");
            if (result.error.code) {
                error.code = result.error.code;
            }
            if (result.error.data) {
                error.data = result.error.data;
            }
            throw error;
        }
        return result.result;
    }
    // The blockTag was normalized as a string by the Provider pre-perform operations
    function checkLogTag(blockTag) {
        if (blockTag === "pending") {
            throw new Error("pending not supported");
        }
        if (blockTag === "latest") {
            return blockTag;
        }
        return parseInt(blockTag.substring(2), 16);
    }
    function checkError(method, error, transaction) {
        // Undo the "convenience" some nodes are attempting to prevent backwards
        // incompatibility; maybe for v6 consider forwarding reverts as errors
        if (method === "call" && error.code === Logger.errors.SERVER_ERROR) {
            const e = error.error;
            // Etherscan keeps changing their string
            if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {
                // Etherscan prefixes the data like "Reverted 0x1234"
                let data = e.data;
                if (data) {
                    data = "0x" + data.replace(/^.*0x/i, "");
                }
                if (isHexString(data)) {
                    return data;
                }
                logger$9.throwError("missing revert data in call exception", Logger.errors.CALL_EXCEPTION, {
                    error, data: "0x"
                });
            }
        }
        // Get the message from any nested error structure
        let message = error.message;
        if (error.code === Logger.errors.SERVER_ERROR) {
            if (error.error && typeof (error.error.message) === "string") {
                message = error.error.message;
            }
            else if (typeof (error.body) === "string") {
                message = error.body;
            }
            else if (typeof (error.responseText) === "string") {
                message = error.responseText;
            }
        }
        message = (message || "").toLowerCase();
        // "Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0"
        if (message.match(/insufficient funds/)) {
            logger$9.throwError("insufficient funds for intrinsic transaction cost", Logger.errors.INSUFFICIENT_FUNDS, {
                error, method, transaction
            });
        }
        // "Transaction with the same hash was already imported."
        if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
            logger$9.throwError("nonce has already been used", Logger.errors.NONCE_EXPIRED, {
                error, method, transaction
            });
        }
        // "Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce."
        if (message.match(/another transaction with same nonce/)) {
            logger$9.throwError("replacement fee too low", Logger.errors.REPLACEMENT_UNDERPRICED, {
                error, method, transaction
            });
        }
        if (message.match(/execution failed due to an exception|execution reverted/)) {
            logger$9.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                error, method, transaction
            });
        }
        throw error;
    }
    class EtherscanProvider extends BaseProvider {
        constructor(network, apiKey) {
            super(network);
            defineReadOnly(this, "baseUrl", this.getBaseUrl());
            defineReadOnly(this, "apiKey", apiKey || null);
        }
        getBaseUrl() {
            switch (this.network ? this.network.name : "invalid") {
                case "homestead":
                    return "https:/\/api.etherscan.io";
                case "goerli":
                    return "https:/\/api-goerli.etherscan.io";
                case "sepolia":
                    return "https:/\/api-sepolia.etherscan.io";
                case "matic":
                    return "https:/\/api.polygonscan.com";
                case "maticmum":
                    return "https:/\/api-testnet.polygonscan.com";
                case "arbitrum":
                    return "https:/\/api.arbiscan.io";
                case "arbitrum-goerli":
                    return "https:/\/api-goerli.arbiscan.io";
                case "optimism":
                    return "https:/\/api-optimistic.etherscan.io";
                case "optimism-goerli":
                    return "https:/\/api-goerli-optimistic.etherscan.io";
            }
            return logger$9.throwArgumentError("unsupported network", "network", this.network.name);
        }
        getUrl(module, params) {
            const query = Object.keys(params).reduce((accum, key) => {
                const value = params[key];
                if (value != null) {
                    accum += `&${key}=${value}`;
                }
                return accum;
            }, "");
            const apiKey = ((this.apiKey) ? `&apikey=${this.apiKey}` : "");
            return `${this.baseUrl}/api?module=${module}${query}${apiKey}`;
        }
        getPostUrl() {
            return `${this.baseUrl}/api`;
        }
        getPostData(module, params) {
            params.module = module;
            params.apikey = this.apiKey;
            return params;
        }
        fetch(module, params, post) {
            return __awaiter$8(this, void 0, void 0, function* () {
                const url = (post ? this.getPostUrl() : this.getUrl(module, params));
                const payload = (post ? this.getPostData(module, params) : null);
                const procFunc = (module === "proxy") ? getJsonResult : getResult;
                this.emit("debug", {
                    action: "request",
                    request: url,
                    provider: this
                });
                const connection = {
                    url: url,
                    throttleSlotInterval: 1000,
                    throttleCallback: (attempt, url) => {
                        if (this.isCommunityResource()) {
                            showThrottleMessage();
                        }
                        return Promise.resolve(true);
                    }
                };
                let payloadStr = null;
                if (payload) {
                    connection.headers = { "content-type": "application/x-www-form-urlencoded; charset=UTF-8" };
                    payloadStr = Object.keys(payload).map((key) => {
                        return `${key}=${payload[key]}`;
                    }).join("&");
                }
                const result = yield fetchJson(connection, payloadStr, procFunc || getJsonResult);
                this.emit("debug", {
                    action: "response",
                    request: url,
                    response: deepCopy(result),
                    provider: this
                });
                return result;
            });
        }
        detectNetwork() {
            return __awaiter$8(this, void 0, void 0, function* () {
                return this.network;
            });
        }
        perform(method, params) {
            const _super = Object.create(null, {
                perform: { get: () => super.perform }
            });
            return __awaiter$8(this, void 0, void 0, function* () {
                switch (method) {
                    case "getBlockNumber":
                        return this.fetch("proxy", { action: "eth_blockNumber" });
                    case "getGasPrice":
                        return this.fetch("proxy", { action: "eth_gasPrice" });
                    case "getBalance":
                        // Returns base-10 result
                        return this.fetch("account", {
                            action: "balance",
                            address: params.address,
                            tag: params.blockTag
                        });
                    case "getTransactionCount":
                        return this.fetch("proxy", {
                            action: "eth_getTransactionCount",
                            address: params.address,
                            tag: params.blockTag
                        });
                    case "getCode":
                        return this.fetch("proxy", {
                            action: "eth_getCode",
                            address: params.address,
                            tag: params.blockTag
                        });
                    case "getStorageAt":
                        return this.fetch("proxy", {
                            action: "eth_getStorageAt",
                            address: params.address,
                            position: params.position,
                            tag: params.blockTag
                        });
                    case "sendTransaction":
                        return this.fetch("proxy", {
                            action: "eth_sendRawTransaction",
                            hex: params.signedTransaction
                        }, true).catch((error) => {
                            return checkError("sendTransaction", error, params.signedTransaction);
                        });
                    case "getBlock":
                        if (params.blockTag) {
                            return this.fetch("proxy", {
                                action: "eth_getBlockByNumber",
                                tag: params.blockTag,
                                boolean: (params.includeTransactions ? "true" : "false")
                            });
                        }
                        throw new Error("getBlock by blockHash not implemented");
                    case "getTransaction":
                        return this.fetch("proxy", {
                            action: "eth_getTransactionByHash",
                            txhash: params.transactionHash
                        });
                    case "getTransactionReceipt":
                        return this.fetch("proxy", {
                            action: "eth_getTransactionReceipt",
                            txhash: params.transactionHash
                        });
                    case "call": {
                        if (params.blockTag !== "latest") {
                            throw new Error("EtherscanProvider does not support blockTag for call");
                        }
                        const postData = getTransactionPostData(params.transaction);
                        postData.module = "proxy";
                        postData.action = "eth_call";
                        try {
                            return yield this.fetch("proxy", postData, true);
                        }
                        catch (error) {
                            return checkError("call", error, params.transaction);
                        }
                    }
                    case "estimateGas": {
                        const postData = getTransactionPostData(params.transaction);
                        postData.module = "proxy";
                        postData.action = "eth_estimateGas";
                        try {
                            return yield this.fetch("proxy", postData, true);
                        }
                        catch (error) {
                            return checkError("estimateGas", error, params.transaction);
                        }
                    }
                    case "getLogs": {
                        const args = { action: "getLogs" };
                        if (params.filter.fromBlock) {
                            args.fromBlock = checkLogTag(params.filter.fromBlock);
                        }
                        if (params.filter.toBlock) {
                            args.toBlock = checkLogTag(params.filter.toBlock);
                        }
                        if (params.filter.address) {
                            args.address = params.filter.address;
                        }
                        // @TODO: We can handle slightly more complicated logs using the logs API
                        if (params.filter.topics && params.filter.topics.length > 0) {
                            if (params.filter.topics.length > 1) {
                                logger$9.throwError("unsupported topic count", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });
                            }
                            if (params.filter.topics.length === 1) {
                                const topic0 = params.filter.topics[0];
                                if (typeof (topic0) !== "string" || topic0.length !== 66) {
                                    logger$9.throwError("unsupported topic format", Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });
                                }
                                args.topic0 = topic0;
                            }
                        }
                        const logs = yield this.fetch("logs", args);
                        // Cache txHash => blockHash
                        let blocks = {};
                        // Add any missing blockHash to the logs
                        for (let i = 0; i < logs.length; i++) {
                            const log = logs[i];
                            if (log.blockHash != null) {
                                continue;
                            }
                            if (blocks[log.blockNumber] == null) {
                                const block = yield this.getBlock(log.blockNumber);
                                if (block) {
                                    blocks[log.blockNumber] = block.hash;
                                }
                            }
                            log.blockHash = blocks[log.blockNumber];
                        }
                        return logs;
                    }
                    case "getEtherPrice":
                        if (this.network.name !== "homestead") {
                            return 0.0;
                        }
                        return parseFloat((yield this.fetch("stats", { action: "ethprice" })).ethusd);
                }
                return _super.perform.call(this, method, params);
            });
        }
        // Note: The `page` page parameter only allows pagination within the
        //       10,000 window available without a page and offset parameter
        //       Error: Result window is too large, PageNo x Offset size must
        //              be less than or equal to 10000
        getHistory(addressOrName, startBlock, endBlock) {
            return __awaiter$8(this, void 0, void 0, function* () {
                const params = {
                    action: "txlist",
                    address: (yield this.resolveName(addressOrName)),
                    startblock: ((startBlock == null) ? 0 : startBlock),
                    endblock: ((endBlock == null) ? 99999999 : endBlock),
                    sort: "asc"
                };
                const result = yield this.fetch("account", params);
                return result.map((tx) => {
                    ["contractAddress", "to"].forEach(function (key) {
                        if (tx[key] == "") {
                            delete tx[key];
                        }
                    });
                    if (tx.creates == null && tx.contractAddress != null) {
                        tx.creates = tx.contractAddress;
                    }
                    const item = this.formatter.transactionResponse(tx);
                    if (tx.timeStamp) {
                        item.timestamp = parseInt(tx.timeStamp);
                    }
                    return item;
                });
            });
        }
        isCommunityResource() {
            return (this.apiKey == null);
        }
    }

    var __awaiter$7 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$8 = new Logger(version$5);
    function now() { return (new Date()).getTime(); }
    // Returns to network as long as all agree, or null if any is null.
    // Throws an error if any two networks do not match.
    function checkNetworks(networks) {
        let result = null;
        for (let i = 0; i < networks.length; i++) {
            const network = networks[i];
            // Null! We do not know our network; bail.
            if (network == null) {
                return null;
            }
            if (result) {
                // Make sure the network matches the previous networks
                if (!(result.name === network.name && result.chainId === network.chainId &&
                    ((result.ensAddress === network.ensAddress) || (result.ensAddress == null && network.ensAddress == null)))) {
                    logger$8.throwArgumentError("provider mismatch", "networks", networks);
                }
            }
            else {
                result = network;
            }
        }
        return result;
    }
    function median(values, maxDelta) {
        values = values.slice().sort();
        const middle = Math.floor(values.length / 2);
        // Odd length; take the middle
        if (values.length % 2) {
            return values[middle];
        }
        // Even length; take the average of the two middle
        const a = values[middle - 1], b = values[middle];
        if (maxDelta != null && Math.abs(a - b) > maxDelta) {
            return null;
        }
        return (a + b) / 2;
    }
    function serialize(value) {
        if (value === null) {
            return "null";
        }
        else if (typeof (value) === "number" || typeof (value) === "boolean") {
            return JSON.stringify(value);
        }
        else if (typeof (value) === "string") {
            return value;
        }
        else if (BigNumber.isBigNumber(value)) {
            return value.toString();
        }
        else if (Array.isArray(value)) {
            return JSON.stringify(value.map((i) => serialize(i)));
        }
        else if (typeof (value) === "object") {
            const keys = Object.keys(value);
            keys.sort();
            return "{" + keys.map((key) => {
                let v = value[key];
                if (typeof (v) === "function") {
                    v = "[function]";
                }
                else {
                    v = serialize(v);
                }
                return JSON.stringify(key) + ":" + v;
            }).join(",") + "}";
        }
        throw new Error("unknown value type: " + typeof (value));
    }
    // Next request ID to use for emitting debug info
    let nextRid = 1;
    function stall(duration) {
        let cancel = null;
        let timer = null;
        let promise = (new Promise((resolve) => {
            cancel = function () {
                if (timer) {
                    clearTimeout(timer);
                    timer = null;
                }
                resolve();
            };
            timer = setTimeout(cancel, duration);
        }));
        const wait = (func) => {
            promise = promise.then(func);
            return promise;
        };
        function getPromise() {
            return promise;
        }
        return { cancel, getPromise, wait };
    }
    const ForwardErrors = [
        Logger.errors.CALL_EXCEPTION,
        Logger.errors.INSUFFICIENT_FUNDS,
        Logger.errors.NONCE_EXPIRED,
        Logger.errors.REPLACEMENT_UNDERPRICED,
        Logger.errors.UNPREDICTABLE_GAS_LIMIT
    ];
    const ForwardProperties = [
        "address",
        "args",
        "errorArgs",
        "errorSignature",
        "method",
        "transaction",
    ];
    function exposeDebugConfig(config, now) {
        const result = {
            weight: config.weight
        };
        Object.defineProperty(result, "provider", { get: () => config.provider });
        if (config.start) {
            result.start = config.start;
        }
        if (now) {
            result.duration = (now - config.start);
        }
        if (config.done) {
            if (config.error) {
                result.error = config.error;
            }
            else {
                result.result = config.result || null;
            }
        }
        return result;
    }
    function normalizedTally(normalize, quorum) {
        return function (configs) {
            // Count the votes for each result
            const tally = {};
            configs.forEach((c) => {
                const value = normalize(c.result);
                if (!tally[value]) {
                    tally[value] = { count: 0, result: c.result };
                }
                tally[value].count++;
            });
            // Check for a quorum on any given result
            const keys = Object.keys(tally);
            for (let i = 0; i < keys.length; i++) {
                const check = tally[keys[i]];
                if (check.count >= quorum) {
                    return check.result;
                }
            }
            // No quroum
            return undefined;
        };
    }
    function getProcessFunc(provider, method, params) {
        let normalize = serialize;
        switch (method) {
            case "getBlockNumber":
                // Return the median value, unless there is (median + 1) is also
                // present, in which case that is probably true and the median
                // is going to be stale soon. In the event of a malicious node,
                // the lie will be true soon enough.
                return function (configs) {
                    const values = configs.map((c) => c.result);
                    // Get the median block number
                    let blockNumber = median(configs.map((c) => c.result), 2);
                    if (blockNumber == null) {
                        return undefined;
                    }
                    blockNumber = Math.ceil(blockNumber);
                    // If the next block height is present, its prolly safe to use
                    if (values.indexOf(blockNumber + 1) >= 0) {
                        blockNumber++;
                    }
                    // Don't ever roll back the blockNumber
                    if (blockNumber >= provider._highestBlockNumber) {
                        provider._highestBlockNumber = blockNumber;
                    }
                    return provider._highestBlockNumber;
                };
            case "getGasPrice":
                // Return the middle (round index up) value, similar to median
                // but do not average even entries and choose the higher.
                // Malicious actors must compromise 50% of the nodes to lie.
                return function (configs) {
                    const values = configs.map((c) => c.result);
                    values.sort();
                    return values[Math.floor(values.length / 2)];
                };
            case "getEtherPrice":
                // Returns the median price. Malicious actors must compromise at
                // least 50% of the nodes to lie (in a meaningful way).
                return function (configs) {
                    return median(configs.map((c) => c.result));
                };
            // No additional normalizing required; serialize is enough
            case "getBalance":
            case "getTransactionCount":
            case "getCode":
            case "getStorageAt":
            case "call":
            case "estimateGas":
            case "getLogs":
                break;
            // We drop the confirmations from transactions as it is approximate
            case "getTransaction":
            case "getTransactionReceipt":
                normalize = function (tx) {
                    if (tx == null) {
                        return null;
                    }
                    tx = shallowCopy(tx);
                    tx.confirmations = -1;
                    return serialize(tx);
                };
                break;
            // We drop the confirmations from transactions as it is approximate
            case "getBlock":
                // We drop the confirmations from transactions as it is approximate
                if (params.includeTransactions) {
                    normalize = function (block) {
                        if (block == null) {
                            return null;
                        }
                        block = shallowCopy(block);
                        block.transactions = block.transactions.map((tx) => {
                            tx = shallowCopy(tx);
                            tx.confirmations = -1;
                            return tx;
                        });
                        return serialize(block);
                    };
                }
                else {
                    normalize = function (block) {
                        if (block == null) {
                            return null;
                        }
                        return serialize(block);
                    };
                }
                break;
            default:
                throw new Error("unknown method: " + method);
        }
        // Return the result if and only if the expected quorum is
        // satisfied and agreed upon for the final result.
        return normalizedTally(normalize, provider.quorum);
    }
    // If we are doing a blockTag query, we need to make sure the backend is
    // caught up to the FallbackProvider, before sending a request to it.
    function waitForSync(config, blockNumber) {
        return __awaiter$7(this, void 0, void 0, function* () {
            const provider = (config.provider);
            if ((provider.blockNumber != null && provider.blockNumber >= blockNumber) || blockNumber === -1) {
                return provider;
            }
            return poll(() => {
                return new Promise((resolve, reject) => {
                    setTimeout(function () {
                        // We are synced
                        if (provider.blockNumber >= blockNumber) {
                            return resolve(provider);
                        }
                        // We're done; just quit
                        if (config.cancelled) {
                            return resolve(null);
                        }
                        // Try again, next block
                        return resolve(undefined);
                    }, 0);
                });
            }, { oncePoll: provider });
        });
    }
    function getRunner(config, currentBlockNumber, method, params) {
        return __awaiter$7(this, void 0, void 0, function* () {
            let provider = config.provider;
            switch (method) {
                case "getBlockNumber":
                case "getGasPrice":
                    return provider[method]();
                case "getEtherPrice":
                    if (provider.getEtherPrice) {
                        return provider.getEtherPrice();
                    }
                    break;
                case "getBalance":
                case "getTransactionCount":
                case "getCode":
                    if (params.blockTag && isHexString(params.blockTag)) {
                        provider = yield waitForSync(config, currentBlockNumber);
                    }
                    return provider[method](params.address, params.blockTag || "latest");
                case "getStorageAt":
                    if (params.blockTag && isHexString(params.blockTag)) {
                        provider = yield waitForSync(config, currentBlockNumber);
                    }
                    return provider.getStorageAt(params.address, params.position, params.blockTag || "latest");
                case "getBlock":
                    if (params.blockTag && isHexString(params.blockTag)) {
                        provider = yield waitForSync(config, currentBlockNumber);
                    }
                    return provider[(params.includeTransactions ? "getBlockWithTransactions" : "getBlock")](params.blockTag || params.blockHash);
                case "call":
                case "estimateGas":
                    if (params.blockTag && isHexString(params.blockTag)) {
                        provider = yield waitForSync(config, currentBlockNumber);
                    }
                    if (method === "call" && params.blockTag) {
                        return provider[method](params.transaction, params.blockTag);
                    }
                    return provider[method](params.transaction);
                case "getTransaction":
                case "getTransactionReceipt":
                    return provider[method](params.transactionHash);
                case "getLogs": {
                    let filter = params.filter;
                    if ((filter.fromBlock && isHexString(filter.fromBlock)) || (filter.toBlock && isHexString(filter.toBlock))) {
                        provider = yield waitForSync(config, currentBlockNumber);
                    }
                    return provider.getLogs(filter);
                }
            }
            return logger$8.throwError("unknown method error", Logger.errors.UNKNOWN_ERROR, {
                method: method,
                params: params
            });
        });
    }
    class FallbackProvider extends BaseProvider {
        constructor(providers, quorum) {
            if (providers.length === 0) {
                logger$8.throwArgumentError("missing providers", "providers", providers);
            }
            const providerConfigs = providers.map((configOrProvider, index) => {
                if (Provider.isProvider(configOrProvider)) {
                    const stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;
                    const priority = 1;
                    return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });
                }
                const config = shallowCopy(configOrProvider);
                if (config.priority == null) {
                    config.priority = 1;
                }
                if (config.stallTimeout == null) {
                    config.stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;
                }
                if (config.weight == null) {
                    config.weight = 1;
                }
                const weight = config.weight;
                if (weight % 1 || weight > 512 || weight < 1) {
                    logger$8.throwArgumentError("invalid weight; must be integer in [1, 512]", `providers[${index}].weight`, weight);
                }
                return Object.freeze(config);
            });
            const total = providerConfigs.reduce((accum, c) => (accum + c.weight), 0);
            if (quorum == null) {
                quorum = total / 2;
            }
            else if (quorum > total) {
                logger$8.throwArgumentError("quorum will always fail; larger than total weight", "quorum", quorum);
            }
            // Are all providers' networks are known
            let networkOrReady = checkNetworks(providerConfigs.map((c) => (c.provider).network));
            // Not all networks are known; we must stall
            if (networkOrReady == null) {
                networkOrReady = new Promise((resolve, reject) => {
                    setTimeout(() => {
                        this.detectNetwork().then(resolve, reject);
                    }, 0);
                });
            }
            super(networkOrReady);
            // Preserve a copy, so we do not get mutated
            defineReadOnly(this, "providerConfigs", Object.freeze(providerConfigs));
            defineReadOnly(this, "quorum", quorum);
            this._highestBlockNumber = -1;
        }
        detectNetwork() {
            return __awaiter$7(this, void 0, void 0, function* () {
                const networks = yield Promise.all(this.providerConfigs.map((c) => c.provider.getNetwork()));
                return checkNetworks(networks);
            });
        }
        perform(method, params) {
            return __awaiter$7(this, void 0, void 0, function* () {
                // Sending transactions is special; always broadcast it to all backends
                if (method === "sendTransaction") {
                    const results = yield Promise.all(this.providerConfigs.map((c) => {
                        return c.provider.sendTransaction(params.signedTransaction).then((result) => {
                            return result.hash;
                        }, (error) => {
                            return error;
                        });
                    }));
                    // Any success is good enough (other errors are likely "already seen" errors
                    for (let i = 0; i < results.length; i++) {
                        const result = results[i];
                        if (typeof (result) === "string") {
                            return result;
                        }
                    }
                    // They were all an error; pick the first error
                    throw results[0];
                }
                // We need to make sure we are in sync with our backends, so we need
                // to know this before we can make a lot of calls
                if (this._highestBlockNumber === -1 && method !== "getBlockNumber") {
                    yield this.getBlockNumber();
                }
                const processFunc = getProcessFunc(this, method, params);
                // Shuffle the providers and then sort them by their priority; we
                // shallowCopy them since we will store the result in them too
                const configs = shuffled(this.providerConfigs.map(shallowCopy));
                configs.sort((a, b) => (a.priority - b.priority));
                const currentBlockNumber = this._highestBlockNumber;
                let i = 0;
                let first = true;
                while (true) {
                    const t0 = now();
                    // Compute the inflight weight (exclude anything past)
                    let inflightWeight = configs.filter((c) => (c.runner && ((t0 - c.start) < c.stallTimeout)))
                        .reduce((accum, c) => (accum + c.weight), 0);
                    // Start running enough to meet quorum
                    while (inflightWeight < this.quorum && i < configs.length) {
                        const config = configs[i++];
                        const rid = nextRid++;
                        config.start = now();
                        config.staller = stall(config.stallTimeout);
                        config.staller.wait(() => { config.staller = null; });
                        config.runner = getRunner(config, currentBlockNumber, method, params).then((result) => {
                            config.done = true;
                            config.result = result;
                            if (this.listenerCount("debug")) {
                                this.emit("debug", {
                                    action: "request",
                                    rid: rid,
                                    backend: exposeDebugConfig(config, now()),
                                    request: { method: method, params: deepCopy(params) },
                                    provider: this
                                });
                            }
                        }, (error) => {
                            config.done = true;
                            config.error = error;
                            if (this.listenerCount("debug")) {
                                this.emit("debug", {
                                    action: "request",
                                    rid: rid,
                                    backend: exposeDebugConfig(config, now()),
                                    request: { method: method, params: deepCopy(params) },
                                    provider: this
                                });
                            }
                        });
                        if (this.listenerCount("debug")) {
                            this.emit("debug", {
                                action: "request",
                                rid: rid,
                                backend: exposeDebugConfig(config, null),
                                request: { method: method, params: deepCopy(params) },
                                provider: this
                            });
                        }
                        inflightWeight += config.weight;
                    }
                    // Wait for anything meaningful to finish or stall out
                    const waiting = [];
                    configs.forEach((c) => {
                        if (c.done || !c.runner) {
                            return;
                        }
                        waiting.push(c.runner);
                        if (c.staller) {
                            waiting.push(c.staller.getPromise());
                        }
                    });
                    if (waiting.length) {
                        yield Promise.race(waiting);
                    }
                    // Check the quorum and process the results; the process function
                    // may additionally decide the quorum is not met
                    const results = configs.filter((c) => (c.done && c.error == null));
                    if (results.length >= this.quorum) {
                        const result = processFunc(results);
                        if (result !== undefined) {
                            // Shut down any stallers
                            configs.forEach(c => {
                                if (c.staller) {
                                    c.staller.cancel();
                                }
                                c.cancelled = true;
                            });
                            return result;
                        }
                        if (!first) {
                            yield stall(100).getPromise();
                        }
                        first = false;
                    }
                    // No result, check for errors that should be forwarded
                    const errors = configs.reduce((accum, c) => {
                        if (!c.done || c.error == null) {
                            return accum;
                        }
                        const code = (c.error).code;
                        if (ForwardErrors.indexOf(code) >= 0) {
                            if (!accum[code]) {
                                accum[code] = { error: c.error, weight: 0 };
                            }
                            accum[code].weight += c.weight;
                        }
                        return accum;
                    }, ({}));
                    Object.keys(errors).forEach((errorCode) => {
                        const tally = errors[errorCode];
                        if (tally.weight < this.quorum) {
                            return;
                        }
                        // Shut down any stallers
                        configs.forEach(c => {
                            if (c.staller) {
                                c.staller.cancel();
                            }
                            c.cancelled = true;
                        });
                        const e = (tally.error);
                        const props = {};
                        ForwardProperties.forEach((name) => {
                            if (e[name] == null) {
                                return;
                            }
                            props[name] = e[name];
                        });
                        logger$8.throwError(e.reason || e.message, errorCode, props);
                    });
                    // All configs have run to completion; we will never get more data
                    if (configs.filter((c) => !c.done).length === 0) {
                        break;
                    }
                }
                // Shut down any stallers; shouldn't be any
                configs.forEach(c => {
                    if (c.staller) {
                        c.staller.cancel();
                    }
                    c.cancelled = true;
                });
                return logger$8.throwError("failed to meet quorum", Logger.errors.SERVER_ERROR, {
                    method: method,
                    params: params,
                    //results: configs.map((c) => c.result),
                    //errors: configs.map((c) => c.error),
                    results: configs.map((c) => exposeDebugConfig(c)),
                    provider: this
                });
            });
        }
    }

    const IpcProvider = null;

    const logger$7 = new Logger(version$5);
    const defaultProjectId = "84842078b09946638c03157f83405213";
    class InfuraWebSocketProvider extends WebSocketProvider {
        constructor(network, apiKey) {
            const provider = new InfuraProvider(network, apiKey);
            const connection = provider.connection;
            if (connection.password) {
                logger$7.throwError("INFURA WebSocket project secrets unsupported", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "InfuraProvider.getWebSocketProvider()"
                });
            }
            const url = connection.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
            super(url, network);
            defineReadOnly(this, "apiKey", provider.projectId);
            defineReadOnly(this, "projectId", provider.projectId);
            defineReadOnly(this, "projectSecret", provider.projectSecret);
        }
        isCommunityResource() {
            return (this.projectId === defaultProjectId);
        }
    }
    class InfuraProvider extends UrlJsonRpcProvider {
        static getWebSocketProvider(network, apiKey) {
            return new InfuraWebSocketProvider(network, apiKey);
        }
        static getApiKey(apiKey) {
            const apiKeyObj = {
                apiKey: defaultProjectId,
                projectId: defaultProjectId,
                projectSecret: null
            };
            if (apiKey == null) {
                return apiKeyObj;
            }
            if (typeof (apiKey) === "string") {
                apiKeyObj.projectId = apiKey;
            }
            else if (apiKey.projectSecret != null) {
                logger$7.assertArgument((typeof (apiKey.projectId) === "string"), "projectSecret requires a projectId", "projectId", apiKey.projectId);
                logger$7.assertArgument((typeof (apiKey.projectSecret) === "string"), "invalid projectSecret", "projectSecret", "[REDACTED]");
                apiKeyObj.projectId = apiKey.projectId;
                apiKeyObj.projectSecret = apiKey.projectSecret;
            }
            else if (apiKey.projectId) {
                apiKeyObj.projectId = apiKey.projectId;
            }
            apiKeyObj.apiKey = apiKeyObj.projectId;
            return apiKeyObj;
        }
        static getUrl(network, apiKey) {
            let host = null;
            switch (network ? network.name : "unknown") {
                case "homestead":
                    host = "mainnet.infura.io";
                    break;
                case "goerli":
                    host = "goerli.infura.io";
                    break;
                case "sepolia":
                    host = "sepolia.infura.io";
                    break;
                case "matic":
                    host = "polygon-mainnet.infura.io";
                    break;
                case "maticmum":
                    host = "polygon-mumbai.infura.io";
                    break;
                case "optimism":
                    host = "optimism-mainnet.infura.io";
                    break;
                case "optimism-goerli":
                    host = "optimism-goerli.infura.io";
                    break;
                case "arbitrum":
                    host = "arbitrum-mainnet.infura.io";
                    break;
                case "arbitrum-goerli":
                    host = "arbitrum-goerli.infura.io";
                    break;
                default:
                    logger$7.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
                        argument: "network",
                        value: network
                    });
            }
            const connection = {
                allowGzip: true,
                url: ("https:/" + "/" + host + "/v3/" + apiKey.projectId),
                throttleCallback: (attempt, url) => {
                    if (apiKey.projectId === defaultProjectId) {
                        showThrottleMessage();
                    }
                    return Promise.resolve(true);
                }
            };
            if (apiKey.projectSecret != null) {
                connection.user = "";
                connection.password = apiKey.projectSecret;
            }
            return connection;
        }
        isCommunityResource() {
            return (this.projectId === defaultProjectId);
        }
    }

    // Experimental
    class JsonRpcBatchProvider extends JsonRpcProvider$1 {
        send(method, params) {
            const request = {
                method: method,
                params: params,
                id: (this._nextId++),
                jsonrpc: "2.0"
            };
            if (this._pendingBatch == null) {
                this._pendingBatch = [];
            }
            const inflightRequest = { request, resolve: null, reject: null };
            const promise = new Promise((resolve, reject) => {
                inflightRequest.resolve = resolve;
                inflightRequest.reject = reject;
            });
            this._pendingBatch.push(inflightRequest);
            if (!this._pendingBatchAggregator) {
                // Schedule batch for next event loop + short duration
                this._pendingBatchAggregator = setTimeout(() => {
                    // Get teh current batch and clear it, so new requests
                    // go into the next batch
                    const batch = this._pendingBatch;
                    this._pendingBatch = null;
                    this._pendingBatchAggregator = null;
                    // Get the request as an array of requests
                    const request = batch.map((inflight) => inflight.request);
                    this.emit("debug", {
                        action: "requestBatch",
                        request: deepCopy(request),
                        provider: this
                    });
                    return fetchJson(this.connection, JSON.stringify(request)).then((result) => {
                        this.emit("debug", {
                            action: "response",
                            request: request,
                            response: result,
                            provider: this
                        });
                        // For each result, feed it to the correct Promise, depending
                        // on whether it was a success or error
                        batch.forEach((inflightRequest, index) => {
                            const payload = result[index];
                            if (payload.error) {
                                const error = new Error(payload.error.message);
                                error.code = payload.error.code;
                                error.data = payload.error.data;
                                inflightRequest.reject(error);
                            }
                            else {
                                inflightRequest.resolve(payload.result);
                            }
                        });
                    }, (error) => {
                        this.emit("debug", {
                            action: "response",
                            error: error,
                            request: request,
                            provider: this
                        });
                        batch.forEach((inflightRequest) => {
                            inflightRequest.reject(error);
                        });
                    });
                }, 10);
            }
            return promise;
        }
    }

    /* istanbul ignore file */
    const logger$6 = new Logger(version$5);
    // Special API key provided by Nodesmith for ethers.js
    const defaultApiKey = "ETHERS_JS_SHARED";
    class NodesmithProvider extends UrlJsonRpcProvider {
        static getApiKey(apiKey) {
            if (apiKey && typeof (apiKey) !== "string") {
                logger$6.throwArgumentError("invalid apiKey", "apiKey", apiKey);
            }
            return apiKey || defaultApiKey;
        }
        static getUrl(network, apiKey) {
            logger$6.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");
            let host = null;
            switch (network.name) {
                case "homestead":
                    host = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
                    break;
                case "ropsten":
                    host = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
                    break;
                case "rinkeby":
                    host = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
                    break;
                case "goerli":
                    host = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
                    break;
                case "kovan":
                    host = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
                    break;
                default:
                    logger$6.throwArgumentError("unsupported network", "network", arguments[0]);
            }
            return (host + "?apiKey=" + apiKey);
        }
    }

    const logger$5 = new Logger(version$5);
    const defaultApplicationId = "62e1ad51b37b8e00394bda3b";
    class PocketProvider extends UrlJsonRpcProvider {
        static getApiKey(apiKey) {
            const apiKeyObj = {
                applicationId: null,
                loadBalancer: true,
                applicationSecretKey: null
            };
            // Parse applicationId and applicationSecretKey
            if (apiKey == null) {
                apiKeyObj.applicationId = defaultApplicationId;
            }
            else if (typeof (apiKey) === "string") {
                apiKeyObj.applicationId = apiKey;
            }
            else if (apiKey.applicationSecretKey != null) {
                apiKeyObj.applicationId = apiKey.applicationId;
                apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;
            }
            else if (apiKey.applicationId) {
                apiKeyObj.applicationId = apiKey.applicationId;
            }
            else {
                logger$5.throwArgumentError("unsupported PocketProvider apiKey", "apiKey", apiKey);
            }
            return apiKeyObj;
        }
        static getUrl(network, apiKey) {
            let host = null;
            switch (network ? network.name : "unknown") {
                case "goerli":
                    host = "eth-goerli.gateway.pokt.network";
                    break;
                case "homestead":
                    host = "eth-mainnet.gateway.pokt.network";
                    break;
                case "kovan":
                    host = "poa-kovan.gateway.pokt.network";
                    break;
                case "matic":
                    host = "poly-mainnet.gateway.pokt.network";
                    break;
                case "maticmum":
                    host = "polygon-mumbai-rpc.gateway.pokt.network";
                    break;
                case "rinkeby":
                    host = "eth-rinkeby.gateway.pokt.network";
                    break;
                case "ropsten":
                    host = "eth-ropsten.gateway.pokt.network";
                    break;
                default:
                    logger$5.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
                        argument: "network",
                        value: network
                    });
            }
            const url = `https:/\/${host}/v1/lb/${apiKey.applicationId}`;
            const connection = { headers: {}, url };
            if (apiKey.applicationSecretKey != null) {
                connection.user = "";
                connection.password = apiKey.applicationSecretKey;
            }
            return connection;
        }
        isCommunityResource() {
            return (this.applicationId === defaultApplicationId);
        }
    }

    const logger$4 = new Logger(version$5);
    let _nextId = 1;
    function buildWeb3LegacyFetcher(provider, sendFunc) {
        const fetcher = "Web3LegacyFetcher";
        return function (method, params) {
            const request = {
                method: method,
                params: params,
                id: (_nextId++),
                jsonrpc: "2.0"
            };
            return new Promise((resolve, reject) => {
                this.emit("debug", {
                    action: "request",
                    fetcher,
                    request: deepCopy(request),
                    provider: this
                });
                sendFunc(request, (error, response) => {
                    if (error) {
                        this.emit("debug", {
                            action: "response",
                            fetcher,
                            error,
                            request,
                            provider: this
                        });
                        return reject(error);
                    }
                    this.emit("debug", {
                        action: "response",
                        fetcher,
                        request,
                        response,
                        provider: this
                    });
                    if (response.error) {
                        const error = new Error(response.error.message);
                        error.code = response.error.code;
                        error.data = response.error.data;
                        return reject(error);
                    }
                    resolve(response.result);
                });
            });
        };
    }
    function buildEip1193Fetcher(provider) {
        return function (method, params) {
            if (params == null) {
                params = [];
            }
            const request = { method, params };
            this.emit("debug", {
                action: "request",
                fetcher: "Eip1193Fetcher",
                request: deepCopy(request),
                provider: this
            });
            return provider.request(request).then((response) => {
                this.emit("debug", {
                    action: "response",
                    fetcher: "Eip1193Fetcher",
                    request,
                    response,
                    provider: this
                });
                return response;
            }, (error) => {
                this.emit("debug", {
                    action: "response",
                    fetcher: "Eip1193Fetcher",
                    request,
                    error,
                    provider: this
                });
                throw error;
            });
        };
    }
    class Web3Provider extends JsonRpcProvider$1 {
        constructor(provider, network) {
            if (provider == null) {
                logger$4.throwArgumentError("missing provider", "provider", provider);
            }
            let path = null;
            let jsonRpcFetchFunc = null;
            let subprovider = null;
            if (typeof (provider) === "function") {
                path = "unknown:";
                jsonRpcFetchFunc = provider;
            }
            else {
                path = provider.host || provider.path || "";
                if (!path && provider.isMetaMask) {
                    path = "metamask";
                }
                subprovider = provider;
                if (provider.request) {
                    if (path === "") {
                        path = "eip-1193:";
                    }
                    jsonRpcFetchFunc = buildEip1193Fetcher(provider);
                }
                else if (provider.sendAsync) {
                    jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));
                }
                else if (provider.send) {
                    jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));
                }
                else {
                    logger$4.throwArgumentError("unsupported provider", "provider", provider);
                }
                if (!path) {
                    path = "unknown:";
                }
            }
            super(path, network);
            defineReadOnly(this, "jsonRpcFetchFunc", jsonRpcFetchFunc);
            defineReadOnly(this, "provider", subprovider);
        }
        send(method, params) {
            return this.jsonRpcFetchFunc(method, params);
        }
    }

    const logger$3 = new Logger(version$5);
    ////////////////////////
    // Helper Functions
    function getDefaultProvider(network, options) {
        if (network == null) {
            network = "homestead";
        }
        // If passed a URL, figure out the right type of provider based on the scheme
        if (typeof (network) === "string") {
            // @TODO: Add support for IpcProvider; maybe if it ends in ".ipc"?
            // Handle http and ws (and their secure variants)
            const match = network.match(/^(ws|http)s?:/i);
            if (match) {
                switch (match[1].toLowerCase()) {
                    case "http":
                    case "https":
                        return new JsonRpcProvider$1(network);
                    case "ws":
                    case "wss":
                        return new WebSocketProvider(network);
                    default:
                        logger$3.throwArgumentError("unsupported URL scheme", "network", network);
                }
            }
        }
        const n = getNetwork(network);
        if (!n || !n._defaultProvider) {
            logger$3.throwError("unsupported getDefaultProvider network", Logger.errors.NETWORK_ERROR, {
                operation: "getDefaultProvider",
                network: network
            });
        }
        return n._defaultProvider({
            FallbackProvider,
            AlchemyProvider,
            AnkrProvider,
            CloudflareProvider,
            EtherscanProvider,
            InfuraProvider,
            JsonRpcProvider: JsonRpcProvider$1,
            NodesmithProvider,
            PocketProvider,
            Web3Provider,
            IpcProvider,
        }, options);
    }

    var index$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Provider: Provider,
        BaseProvider: BaseProvider,
        Resolver: Resolver,
        UrlJsonRpcProvider: UrlJsonRpcProvider,
        FallbackProvider: FallbackProvider,
        AlchemyProvider: AlchemyProvider,
        AlchemyWebSocketProvider: AlchemyWebSocketProvider,
        AnkrProvider: AnkrProvider,
        CloudflareProvider: CloudflareProvider,
        EtherscanProvider: EtherscanProvider,
        InfuraProvider: InfuraProvider,
        InfuraWebSocketProvider: InfuraWebSocketProvider,
        JsonRpcProvider: JsonRpcProvider$1,
        JsonRpcBatchProvider: JsonRpcBatchProvider,
        NodesmithProvider: NodesmithProvider,
        PocketProvider: PocketProvider,
        StaticJsonRpcProvider: StaticJsonRpcProvider,
        Web3Provider: Web3Provider,
        WebSocketProvider: WebSocketProvider,
        IpcProvider: IpcProvider,
        JsonRpcSigner: JsonRpcSigner,
        getDefaultProvider: getDefaultProvider,
        getNetwork: getNetwork,
        isCommunityResource: isCommunityResource,
        isCommunityResourcable: isCommunityResourcable,
        showThrottleMessage: showThrottleMessage,
        Formatter: Formatter
    });

    const version$4 = "solidity/5.7.0";

    const regexBytes = new RegExp("^bytes([0-9]+)$");
    const regexNumber = new RegExp("^(u?int)([0-9]*)$");
    const regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
    const Zeros = "0000000000000000000000000000000000000000000000000000000000000000";
    const logger$2 = new Logger(version$4);
    function _pack(type, value, isArray) {
        switch (type) {
            case "address":
                if (isArray) {
                    return zeroPad(value, 32);
                }
                return arrayify(value);
            case "string":
                return toUtf8Bytes(value);
            case "bytes":
                return arrayify(value);
            case "bool":
                value = (value ? "0x01" : "0x00");
                if (isArray) {
                    return zeroPad(value, 32);
                }
                return arrayify(value);
        }
        let match = type.match(regexNumber);
        if (match) {
            //let signed = (match[1] === "int")
            let size = parseInt(match[2] || "256");
            if ((match[2] && String(size) !== match[2]) || (size % 8 !== 0) || size === 0 || size > 256) {
                logger$2.throwArgumentError("invalid number type", "type", type);
            }
            if (isArray) {
                size = 256;
            }
            value = BigNumber.from(value).toTwos(size);
            return zeroPad(value, size / 8);
        }
        match = type.match(regexBytes);
        if (match) {
            const size = parseInt(match[1]);
            if (String(size) !== match[1] || size === 0 || size > 32) {
                logger$2.throwArgumentError("invalid bytes type", "type", type);
            }
            if (arrayify(value).byteLength !== size) {
                logger$2.throwArgumentError(`invalid value for ${type}`, "value", value);
            }
            if (isArray) {
                return arrayify((value + Zeros).substring(0, 66));
            }
            return value;
        }
        match = type.match(regexArray);
        if (match && Array.isArray(value)) {
            const baseType = match[1];
            const count = parseInt(match[2] || String(value.length));
            if (count != value.length) {
                logger$2.throwArgumentError(`invalid array length for ${type}`, "value", value);
            }
            const result = [];
            value.forEach(function (value) {
                result.push(_pack(baseType, value, true));
            });
            return concat$1(result);
        }
        return logger$2.throwArgumentError("invalid type", "type", type);
    }
    // @TODO: Array Enum
    function pack(types, values) {
        if (types.length != values.length) {
            logger$2.throwArgumentError("wrong number of values; expected ${ types.length }", "values", values);
        }
        const tight = [];
        types.forEach(function (type, index) {
            tight.push(_pack(type, values[index]));
        });
        return hexlify(concat$1(tight));
    }
    function keccak256(types, values) {
        return keccak256$1(pack(types, values));
    }
    function sha256$2(types, values) {
        return sha256$3(pack(types, values));
    }

    var lib_esm$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        pack: pack,
        keccak256: keccak256,
        sha256: sha256$2
    });

    const version$3 = "units/5.7.0";

    const logger$1 = new Logger(version$3);
    const names = [
        "wei",
        "kwei",
        "mwei",
        "gwei",
        "szabo",
        "finney",
        "ether",
    ];
    // Some environments have issues with RegEx that contain back-tracking, so we cannot
    // use them.
    function commify(value) {
        const comps = String(value).split(".");
        if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || (comps[1] && !comps[1].match(/^[0-9]*$/)) || value === "." || value === "-.") {
            logger$1.throwArgumentError("invalid value", "value", value);
        }
        // Make sure we have at least one whole digit (0 if none)
        let whole = comps[0];
        let negative = "";
        if (whole.substring(0, 1) === "-") {
            negative = "-";
            whole = whole.substring(1);
        }
        // Make sure we have at least 1 whole digit with no leading zeros
        while (whole.substring(0, 1) === "0") {
            whole = whole.substring(1);
        }
        if (whole === "") {
            whole = "0";
        }
        let suffix = "";
        if (comps.length === 2) {
            suffix = "." + (comps[1] || "0");
        }
        while (suffix.length > 2 && suffix[suffix.length - 1] === "0") {
            suffix = suffix.substring(0, suffix.length - 1);
        }
        const formatted = [];
        while (whole.length) {
            if (whole.length <= 3) {
                formatted.unshift(whole);
                break;
            }
            else {
                const index = whole.length - 3;
                formatted.unshift(whole.substring(index));
                whole = whole.substring(0, index);
            }
        }
        return negative + formatted.join(",") + suffix;
    }
    function formatUnits(value, unitName) {
        if (typeof (unitName) === "string") {
            const index = names.indexOf(unitName);
            if (index !== -1) {
                unitName = 3 * index;
            }
        }
        return formatFixed(value, (unitName != null) ? unitName : 18);
    }
    function parseUnits(value, unitName) {
        if (typeof (value) !== "string") {
            logger$1.throwArgumentError("value must be a string", "value", value);
        }
        if (typeof (unitName) === "string") {
            const index = names.indexOf(unitName);
            if (index !== -1) {
                unitName = 3 * index;
            }
        }
        return parseFixed(value, (unitName != null) ? unitName : 18);
    }
    function formatEther(wei) {
        return formatUnits(wei, 18);
    }
    function parseEther(ether) {
        return parseUnits(ether, 18);
    }

    var lib_esm$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        commify: commify,
        formatUnits: formatUnits,
        parseUnits: parseUnits,
        formatEther: formatEther,
        parseEther: parseEther
    });

    var utils$7 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AbiCoder: AbiCoder,
        defaultAbiCoder: defaultAbiCoder,
        Fragment: Fragment,
        ConstructorFragment: ConstructorFragment,
        ErrorFragment: ErrorFragment,
        EventFragment: EventFragment,
        FunctionFragment: FunctionFragment,
        ParamType: ParamType,
        FormatTypes: FormatTypes,
        checkResultErrors: checkResultErrors,
        Logger: Logger,
        RLP: lib_esm$h,
        _fetchData: _fetchData,
        fetchJson: fetchJson,
        poll: poll,
        checkProperties: checkProperties,
        deepCopy: deepCopy,
        defineReadOnly: defineReadOnly,
        getStatic: getStatic,
        resolveProperties: resolveProperties,
        shallowCopy: shallowCopy,
        arrayify: arrayify,
        concat: concat$1,
        stripZeros: stripZeros,
        zeroPad: zeroPad,
        isBytes: isBytes,
        isBytesLike: isBytesLike,
        defaultPath: defaultPath,
        HDNode: HDNode,
        SigningKey: SigningKey,
        Interface: Interface,
        LogDescription: LogDescription,
        TransactionDescription: TransactionDescription,
        base58: Base58,
        base64: lib_esm$e,
        hexlify: hexlify,
        isHexString: isHexString,
        hexConcat: hexConcat,
        hexStripZeros: hexStripZeros,
        hexValue: hexValue,
        hexZeroPad: hexZeroPad,
        hexDataLength: hexDataLength,
        hexDataSlice: hexDataSlice,
        nameprep: nameprep,
        _toEscapedUtf8String: _toEscapedUtf8String,
        toUtf8Bytes: toUtf8Bytes,
        toUtf8CodePoints: toUtf8CodePoints,
        toUtf8String: toUtf8String,
        Utf8ErrorFuncs: Utf8ErrorFuncs,
        formatBytes32String: formatBytes32String,
        parseBytes32String: parseBytes32String,
        dnsEncode: dnsEncode,
        hashMessage: hashMessage,
        namehash: namehash,
        isValidName: isValidName,
        id: id,
        _TypedDataEncoder: TypedDataEncoder,
        getAddress: getAddress,
        getIcapAddress: getIcapAddress,
        getContractAddress: getContractAddress,
        getCreate2Address: getCreate2Address,
        isAddress: isAddress,
        formatEther: formatEther,
        parseEther: parseEther,
        formatUnits: formatUnits,
        parseUnits: parseUnits,
        commify: commify,
        computeHmac: computeHmac,
        keccak256: keccak256$1,
        ripemd160: ripemd160,
        sha256: sha256$3,
        sha512: sha512$2,
        randomBytes: randomBytes,
        shuffled: shuffled,
        solidityPack: pack,
        solidityKeccak256: keccak256,
        soliditySha256: sha256$2,
        splitSignature: splitSignature,
        joinSignature: joinSignature,
        accessListify: accessListify,
        parseTransaction: parse$1,
        serializeTransaction: serialize$1,
        get TransactionTypes () { return TransactionTypes; },
        getJsonWalletAddress: getJsonWalletAddress,
        computeAddress: computeAddress,
        recoverAddress: recoverAddress,
        computePublicKey: computePublicKey,
        recoverPublicKey: recoverPublicKey,
        verifyMessage: verifyMessage,
        verifyTypedData: verifyTypedData,
        getAccountPath: getAccountPath,
        mnemonicToEntropy: mnemonicToEntropy,
        entropyToMnemonic: entropyToMnemonic,
        isValidMnemonic: isValidMnemonic,
        mnemonicToSeed: mnemonicToSeed,
        get SupportedAlgorithm () { return SupportedAlgorithm; },
        get UnicodeNormalizationForm () { return UnicodeNormalizationForm; },
        get Utf8ErrorReason () { return Utf8ErrorReason; },
        Indexed: Indexed
    });

    const version$2 = "ethers/5.7.2";

    const logger = new Logger(version$2);

    var ethers$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Signer: Signer,
        Wallet: Wallet,
        VoidSigner: VoidSigner,
        getDefaultProvider: getDefaultProvider,
        providers: index$2,
        BaseContract: BaseContract,
        Contract: Contract,
        ContractFactory: ContractFactory,
        BigNumber: BigNumber,
        FixedNumber: FixedNumber,
        constants: index$3,
        get errors () { return ErrorCode; },
        logger: logger,
        utils: utils$7,
        wordlists: wordlists,
        version: version$2,
        Wordlist: Wordlist
    });

    try {
        const anyGlobal = window;
        if (anyGlobal._ethers == null) {
            anyGlobal._ethers = ethers$1;
        }
    }
    catch (error) { }

    var lib_esm = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ethers: ethers$1,
        Signer: Signer,
        Wallet: Wallet,
        VoidSigner: VoidSigner,
        getDefaultProvider: getDefaultProvider,
        providers: index$2,
        BaseContract: BaseContract,
        Contract: Contract,
        ContractFactory: ContractFactory,
        BigNumber: BigNumber,
        FixedNumber: FixedNumber,
        constants: index$3,
        get errors () { return ErrorCode; },
        logger: logger,
        utils: utils$7,
        wordlists: wordlists,
        version: version$2,
        Wordlist: Wordlist
    });

    var chains = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.chains = exports.defaultRpcEndpoints = void 0;
    /* ========================================================================================================================================================================= */
    // Default chain RPC endpoints:
    exports.defaultRpcEndpoints = {
        eth: [
            'https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161',
            'https://eth-rpc.gateway.pokt.network',
            'https://rpc.ankr.com/eth'
        ],
        bsc: [
            'https://bsc-dataseed.binance.org',
            'https://bsc-mainnet.gateway.pokt.network/v1/lb/6136201a7bad1500343e248d',
            'https://rpc.ankr.com/bsc'
        ],
        poly: [
            'https://polygon-rpc.com',
            'https://poly-rpc.gateway.pokt.network/',
            'https://rpc.ankr.com/polygon'
        ],
        ftm: [
            'https://rpc.ftm.tools/',
            'https://rpcapi.fantom.network',
            'https://rpc.ankr.com/fantom'
        ],
        avax: [
            'https://api.avax.network/ext/bc/C/rpc',
            'https://avax-mainnet.gateway.pokt.network/v1/lb/605238bf6b986eea7cf36d5e/ext/bc/C/rpc',
            'https://rpc.ankr.com/avalanche'
        ],
        cronos: [
            'https://evm-cronos.crypto.org',
            'https://rpc.vvs.finance'
        ],
        op: [
            'https://optimism-mainnet.public.blastapi.io',
            'https://mainnet.optimism.io',
            'https://rpc.ankr.com/optimism'
        ],
        arb: [
            'https://arb1.arbitrum.io/rpc',
            'https://rpc.ankr.com/arbitrum'
        ]
    };
    /* ========================================================================================================================================================================= */
    // Exporting Chain Data:
    exports.chains = {
        eth: {
            id: 1,
            name: 'Ethereum',
            token: 'ETH',
            wrappedToken: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
            usdc: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
            usdcDecimals: 6,
            inch: true,
            paraswap: true,
            rpcs: [...exports.defaultRpcEndpoints.eth],
            coingeckoIDs: {
                chainID: 'ethereum',
                nativeTokenID: 'ethereum'
            },
            multicall: '0x5ba1e12693dc8f9c48aad8770482f4739beed696'
        },
        bsc: {
            id: 56,
            name: 'BNB Chain',
            token: 'BNB',
            wrappedToken: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',
            usdc: '0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d',
            usdcDecimals: 18,
            inch: true,
            paraswap: true,
            rpcs: [...exports.defaultRpcEndpoints.bsc],
            coingeckoIDs: {
                chainID: 'binance-smart-chain',
                nativeTokenID: 'binancecoin'
            },
            multicall: '0xc50f4c1e81c873b2204d7eff7069ffec6fbe136d'
        },
        poly: {
            id: 137,
            name: 'Polygon',
            token: 'MATIC',
            wrappedToken: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',
            usdc: '0x2791bca1f2de4661ed88a30c99a7a9449aa84174',
            usdcDecimals: 6,
            inch: true,
            paraswap: true,
            rpcs: [...exports.defaultRpcEndpoints.poly],
            coingeckoIDs: {
                chainID: 'polygon-pos',
                nativeTokenID: 'matic-network'
            },
            multicall: '0x275617327c958bd06b5d6b871e7f491d76113dd8'
        },
        ftm: {
            id: 250,
            name: 'Fantom',
            token: 'FTM',
            wrappedToken: '0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83',
            usdc: '0x04068da6c83afcfa0e13ba15a6696662335d5b75',
            usdcDecimals: 6,
            inch: false,
            paraswap: true,
            rpcs: [...exports.defaultRpcEndpoints.ftm],
            coingeckoIDs: {
                chainID: 'fantom',
                nativeTokenID: 'fantom'
            },
            multicall: '0xd98e3dbe5950ca8ce5a4b59630a5652110403e5c'
        },
        avax: {
            id: 43114,
            name: 'Avalanche',
            token: 'AVAX',
            wrappedToken: '0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7',
            usdc: '0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e',
            usdcDecimals: 6,
            inch: true,
            paraswap: true,
            rpcs: [...exports.defaultRpcEndpoints.avax],
            coingeckoIDs: {
                chainID: 'avalanche',
                nativeTokenID: 'avalanche-2'
            },
            multicall: '0xed386fe855c1eff2f843b910923dd8846e45c5a4'
        },
        cronos: {
            id: 25,
            name: 'Cronos',
            token: 'CRO',
            wrappedToken: '0x5c7f8a570d578ed84e63fdfa7b1ee72deae1ae23',
            usdc: '0xc21223249ca28397b4b6541dffaecc539bff0c59',
            usdcDecimals: 6,
            inch: false,
            paraswap: false,
            rpcs: [...exports.defaultRpcEndpoints.cronos],
            coingeckoIDs: {
                chainID: 'cronos',
                nativeTokenID: 'crypto-com-chain'
            },
            multicall: '0x5e954f5972ec6bfc7decd75779f10d848230345f'
        },
        op: {
            id: 10,
            name: 'Optimism',
            token: 'ETH',
            wrappedToken: '0x4200000000000000000000000000000000000006',
            usdc: '0x7f5c764cbc14f9669b88837ca1490cca17c31607',
            usdcDecimals: 6,
            inch: true,
            paraswap: false,
            rpcs: [...exports.defaultRpcEndpoints.op],
            coingeckoIDs: {
                chainID: 'optimistic-ethereum',
                nativeTokenID: 'ethereum'
            },
            multicall: '0xeaa6877139d436dc6d1f75f3af15b74662617b2c'
        },
        arb: {
            id: 42161,
            name: 'Arbitrum',
            token: 'ETH',
            wrappedToken: '0x82af49447d8a07e3bd95bd0d56f35241523fbab1',
            usdc: '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8',
            usdcDecimals: 6,
            inch: true,
            paraswap: true,
            rpcs: [...exports.defaultRpcEndpoints.arb],
            coingeckoIDs: {
                chainID: 'arbitrum-one',
                nativeTokenID: 'ethereum'
            },
            multicall: '0x842ec2c7d803033edf55e478f461fc547bc54eb2'
        }
    };
    });

    var bind$1 = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };

    // utils is a library of generic helper functions non-specific to axios

    var toString$3 = Object.prototype.toString;

    /**
     * Determine if a value is an Array
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Array, otherwise false
     */
    function isArray(val) {
      return Array.isArray(val);
    }

    /**
     * Determine if a value is undefined
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if the value is undefined, otherwise false
     */
    function isUndefined(val) {
      return typeof val === 'undefined';
    }

    /**
     * Determine if a value is a Buffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Buffer, otherwise false
     */
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
        && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
    }

    /**
     * Determine if a value is an ArrayBuffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an ArrayBuffer, otherwise false
     */
    function isArrayBuffer(val) {
      return toString$3.call(val) === '[object ArrayBuffer]';
    }

    /**
     * Determine if a value is a FormData
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an FormData, otherwise false
     */
    function isFormData(val) {
      return toString$3.call(val) === '[object FormData]';
    }

    /**
     * Determine if a value is a view on an ArrayBuffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
     */
    function isArrayBufferView(val) {
      var result;
      if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
        result = ArrayBuffer.isView(val);
      } else {
        result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
      }
      return result;
    }

    /**
     * Determine if a value is a String
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a String, otherwise false
     */
    function isString$1(val) {
      return typeof val === 'string';
    }

    /**
     * Determine if a value is a Number
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Number, otherwise false
     */
    function isNumber$1(val) {
      return typeof val === 'number';
    }

    /**
     * Determine if a value is an Object
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Object, otherwise false
     */
    function isObject$1(val) {
      return val !== null && typeof val === 'object';
    }

    /**
     * Determine if a value is a plain Object
     *
     * @param {Object} val The value to test
     * @return {boolean} True if value is a plain Object, otherwise false
     */
    function isPlainObject(val) {
      if (toString$3.call(val) !== '[object Object]') {
        return false;
      }

      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }

    /**
     * Determine if a value is a Date
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Date, otherwise false
     */
    function isDate(val) {
      return toString$3.call(val) === '[object Date]';
    }

    /**
     * Determine if a value is a File
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a File, otherwise false
     */
    function isFile(val) {
      return toString$3.call(val) === '[object File]';
    }

    /**
     * Determine if a value is a Blob
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Blob, otherwise false
     */
    function isBlob(val) {
      return toString$3.call(val) === '[object Blob]';
    }

    /**
     * Determine if a value is a Function
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Function, otherwise false
     */
    function isFunction$1(val) {
      return toString$3.call(val) === '[object Function]';
    }

    /**
     * Determine if a value is a Stream
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Stream, otherwise false
     */
    function isStream(val) {
      return isObject$1(val) && isFunction$1(val.pipe);
    }

    /**
     * Determine if a value is a URLSearchParams object
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a URLSearchParams object, otherwise false
     */
    function isURLSearchParams(val) {
      return toString$3.call(val) === '[object URLSearchParams]';
    }

    /**
     * Trim excess whitespace off the beginning and end of a string
     *
     * @param {String} str The String to trim
     * @returns {String} The String freed of excess whitespace
     */
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
    }

    /**
     * Determine if we're running in a standard browser environment
     *
     * This allows axios to run in a web worker, and react-native.
     * Both environments support XMLHttpRequest, but not fully standard globals.
     *
     * web workers:
     *  typeof window -> undefined
     *  typeof document -> undefined
     *
     * react-native:
     *  navigator.product -> 'ReactNative'
     * nativescript
     *  navigator.product -> 'NativeScript' or 'NS'
     */
    function isStandardBrowserEnv() {
      if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                               navigator.product === 'NativeScript' ||
                                               navigator.product === 'NS')) {
        return false;
      }
      return (
        typeof window !== 'undefined' &&
        typeof document !== 'undefined'
      );
    }

    /**
     * Iterate over an Array or an Object invoking a function for each item.
     *
     * If `obj` is an Array callback will be called passing
     * the value, index, and complete array for each item.
     *
     * If 'obj' is an Object callback will be called passing
     * the value, key, and complete object for each property.
     *
     * @param {Object|Array} obj The object to iterate
     * @param {Function} fn The callback to invoke for each item
     */
    function forEach(obj, fn) {
      // Don't bother if no value provided
      if (obj === null || typeof obj === 'undefined') {
        return;
      }

      // Force an array if not already something iterable
      if (typeof obj !== 'object') {
        /*eslint no-param-reassign:0*/
        obj = [obj];
      }

      if (isArray(obj)) {
        // Iterate over array values
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        // Iterate over object keys
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }

    /**
     * Accepts varargs expecting each argument to be an object, then
     * immutably merges the properties of each object and returns result.
     *
     * When multiple objects contain the same key the later object in
     * the arguments list will take precedence.
     *
     * Example:
     *
     * ```js
     * var result = merge({foo: 123}, {foo: 456});
     * console.log(result.foo); // outputs 456
     * ```
     *
     * @param {Object} obj1 Object to merge
     * @returns {Object} Result of all merge properties
     */
    function merge(/* obj1, obj2, obj3, ... */) {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }

      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }

    /**
     * Extends object a by mutably adding to it the properties of object b.
     *
     * @param {Object} a The object to be extended
     * @param {Object} b The object to copy properties from
     * @param {Object} thisArg The object to bind function to
     * @return {Object} The resulting value of object a
     */
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === 'function') {
          a[key] = bind$1(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }

    /**
     * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
     *
     * @param {string} content with BOM
     * @return {string} content value without BOM
     */
    function stripBOM(content) {
      if (content.charCodeAt(0) === 0xFEFF) {
        content = content.slice(1);
      }
      return content;
    }

    var utils$6 = {
      isArray: isArray,
      isArrayBuffer: isArrayBuffer,
      isBuffer: isBuffer,
      isFormData: isFormData,
      isArrayBufferView: isArrayBufferView,
      isString: isString$1,
      isNumber: isNumber$1,
      isObject: isObject$1,
      isPlainObject: isPlainObject,
      isUndefined: isUndefined,
      isDate: isDate,
      isFile: isFile,
      isBlob: isBlob,
      isFunction: isFunction$1,
      isStream: isStream,
      isURLSearchParams: isURLSearchParams,
      isStandardBrowserEnv: isStandardBrowserEnv,
      forEach: forEach,
      merge: merge,
      extend: extend,
      trim: trim,
      stripBOM: stripBOM
    };

    function encode$4(val) {
      return encodeURIComponent(val).
        replace(/%3A/gi, ':').
        replace(/%24/g, '$').
        replace(/%2C/gi, ',').
        replace(/%20/g, '+').
        replace(/%5B/gi, '[').
        replace(/%5D/gi, ']');
    }

    /**
     * Build a URL by appending params to the end
     *
     * @param {string} url The base of the url (e.g., http://www.google.com)
     * @param {object} [params] The params to be appended
     * @returns {string} The formatted url
     */
    var buildURL = function buildURL(url, params, paramsSerializer) {
      /*eslint no-param-reassign:0*/
      if (!params) {
        return url;
      }

      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils$6.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];

        utils$6.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === 'undefined') {
            return;
          }

          if (utils$6.isArray(val)) {
            key = key + '[]';
          } else {
            val = [val];
          }

          utils$6.forEach(val, function parseValue(v) {
            if (utils$6.isDate(v)) {
              v = v.toISOString();
            } else if (utils$6.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode$4(key) + '=' + encode$4(v));
          });
        });

        serializedParams = parts.join('&');
      }

      if (serializedParams) {
        var hashmarkIndex = url.indexOf('#');
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }

        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
      }

      return url;
    };

    function InterceptorManager() {
      this.handlers = [];
    }

    /**
     * Add a new interceptor to the stack
     *
     * @param {Function} fulfilled The function to handle `then` for a `Promise`
     * @param {Function} rejected The function to handle `reject` for a `Promise`
     *
     * @return {Number} An ID used to remove interceptor later
     */
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled: fulfilled,
        rejected: rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };

    /**
     * Remove an interceptor from the stack
     *
     * @param {Number} id The ID that was returned by `use`
     */
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };

    /**
     * Iterate over all the registered interceptors
     *
     * This method is particularly useful for skipping over any
     * interceptors that may have become `null` calling `eject`.
     *
     * @param {Function} fn The function to call for each interceptor
     */
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils$6.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };

    var InterceptorManager_1 = InterceptorManager;

    var normalizeHeaderName = function normalizeHeaderName(headers, normalizedName) {
      utils$6.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };

    /**
     * Update an Error with the specified config, error code, and response.
     *
     * @param {Error} error The error to update.
     * @param {Object} config The config.
     * @param {string} [code] The error code (for example, 'ECONNABORTED').
     * @param {Object} [request] The request.
     * @param {Object} [response] The response.
     * @returns {Error} The error.
     */
    var enhanceError = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }

      error.request = request;
      error.response = response;
      error.isAxiosError = true;

      error.toJSON = function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      };
      return error;
    };

    var transitional = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };

    /**
     * Create an Error with the specified message, config, error code, request and response.
     *
     * @param {string} message The error message.
     * @param {Object} config The config.
     * @param {string} [code] The error code (for example, 'ECONNABORTED').
     * @param {Object} [request] The request.
     * @param {Object} [response] The response.
     * @returns {Error} The created error.
     */
    var createError = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError(error, config, code, request, response);
    };

    /**
     * Resolve or reject a Promise based on response status.
     *
     * @param {Function} resolve A function that resolves the promise.
     * @param {Function} reject A function that rejects the promise.
     * @param {object} response The response.
     */
    var settle = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError(
          'Request failed with status code ' + response.status,
          response.config,
          null,
          response.request,
          response
        ));
      }
    };

    var cookies = (
      utils$6.isStandardBrowserEnv() ?

      // Standard browser envs support document.cookie
        (function standardBrowserEnv() {
          return {
            write: function write(name, value, expires, path, domain, secure) {
              var cookie = [];
              cookie.push(name + '=' + encodeURIComponent(value));

              if (utils$6.isNumber(expires)) {
                cookie.push('expires=' + new Date(expires).toGMTString());
              }

              if (utils$6.isString(path)) {
                cookie.push('path=' + path);
              }

              if (utils$6.isString(domain)) {
                cookie.push('domain=' + domain);
              }

              if (secure === true) {
                cookie.push('secure');
              }

              document.cookie = cookie.join('; ');
            },

            read: function read(name) {
              var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
              return (match ? decodeURIComponent(match[3]) : null);
            },

            remove: function remove(name) {
              this.write(name, '', Date.now() - 86400000);
            }
          };
        })() :

      // Non standard browser env (web workers, react-native) lack needed support.
        (function nonStandardBrowserEnv() {
          return {
            write: function write() {},
            read: function read() { return null; },
            remove: function remove() {}
          };
        })()
    );

    /**
     * Determines whether the specified URL is absolute
     *
     * @param {string} url The URL to test
     * @returns {boolean} True if the specified URL is absolute, otherwise false
     */
    var isAbsoluteURL = function isAbsoluteURL(url) {
      // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
      // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
      // by any combination of letters, digits, plus, period, or hyphen.
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    };

    /**
     * Creates a new URL by combining the specified URLs
     *
     * @param {string} baseURL The base URL
     * @param {string} relativeURL The relative URL
     * @returns {string} The combined URL
     */
    var combineURLs = function combineURLs(baseURL, relativeURL) {
      return relativeURL
        ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
        : baseURL;
    };

    /**
     * Creates a new URL by combining the baseURL with the requestedURL,
     * only when the requestedURL is not already an absolute URL.
     * If the requestURL is absolute, this function returns the requestedURL untouched.
     *
     * @param {string} baseURL The base URL
     * @param {string} requestedURL Absolute or relative URL to combine
     * @returns {string} The combined full path
     */
    var buildFullPath = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };

    // Headers whose duplicates are ignored by node
    // c.f. https://nodejs.org/api/http.html#http_message_headers
    var ignoreDuplicateOf = [
      'age', 'authorization', 'content-length', 'content-type', 'etag',
      'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
      'last-modified', 'location', 'max-forwards', 'proxy-authorization',
      'referer', 'retry-after', 'user-agent'
    ];

    /**
     * Parse headers into an object
     *
     * ```
     * Date: Wed, 27 Aug 2014 08:58:49 GMT
     * Content-Type: application/json
     * Connection: keep-alive
     * Transfer-Encoding: chunked
     * ```
     *
     * @param {String} headers Headers needing to be parsed
     * @returns {Object} Headers parsed into an object
     */
    var parseHeaders = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;

      if (!headers) { return parsed; }

      utils$6.forEach(headers.split('\n'), function parser(line) {
        i = line.indexOf(':');
        key = utils$6.trim(line.substr(0, i)).toLowerCase();
        val = utils$6.trim(line.substr(i + 1));

        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === 'set-cookie') {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
          }
        }
      });

      return parsed;
    };

    var isURLSameOrigin = (
      utils$6.isStandardBrowserEnv() ?

      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
        (function standardBrowserEnv() {
          var msie = /(msie|trident)/i.test(navigator.userAgent);
          var urlParsingNode = document.createElement('a');
          var originURL;

          /**
        * Parse a URL to discover it's components
        *
        * @param {String} url The URL to be parsed
        * @returns {Object}
        */
          function resolveURL(url) {
            var href = url;

            if (msie) {
            // IE needs attribute set twice to normalize properties
              urlParsingNode.setAttribute('href', href);
              href = urlParsingNode.href;
            }

            urlParsingNode.setAttribute('href', href);

            // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
            return {
              href: urlParsingNode.href,
              protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
              host: urlParsingNode.host,
              search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
              hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
              hostname: urlParsingNode.hostname,
              port: urlParsingNode.port,
              pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                urlParsingNode.pathname :
                '/' + urlParsingNode.pathname
            };
          }

          originURL = resolveURL(window.location.href);

          /**
        * Determine if a URL shares the same origin as the current location
        *
        * @param {String} requestURL The URL to test
        * @returns {boolean} True if URL shares the same origin, otherwise false
        */
          return function isURLSameOrigin(requestURL) {
            var parsed = (utils$6.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
            return (parsed.protocol === originURL.protocol &&
                parsed.host === originURL.host);
          };
        })() :

      // Non standard browser envs (web workers, react-native) lack needed support.
        (function nonStandardBrowserEnv() {
          return function isURLSameOrigin() {
            return true;
          };
        })()
    );

    /**
     * A `Cancel` is an object that is thrown when an operation is canceled.
     *
     * @class
     * @param {string=} message The message.
     */
    function Cancel(message) {
      this.message = message;
    }

    Cancel.prototype.toString = function toString() {
      return 'Cancel' + (this.message ? ': ' + this.message : '');
    };

    Cancel.prototype.__CANCEL__ = true;

    var Cancel_1 = Cancel;

    var xhr = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }

          if (config.signal) {
            config.signal.removeEventListener('abort', onCanceled);
          }
        }

        if (utils$6.isFormData(requestData)) {
          delete requestHeaders['Content-Type']; // Let the browser set it
        }

        var request = new XMLHttpRequest();

        // HTTP basic authentication
        if (config.auth) {
          var username = config.auth.username || '';
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
          requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
        }

        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

        // Set the request timeout in MS
        request.timeout = config.timeout;

        function onloadend() {
          if (!request) {
            return;
          }
          // Prepare the response
          var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
            request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config: config,
            request: request
          };

          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);

          // Clean up request
          request = null;
        }

        if ('onloadend' in request) {
          // Use onloadend if available
          request.onloadend = onloadend;
        } else {
          // Listen for ready state to emulate onloadend
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }

            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
              return;
            }
            // readystate handler is calling before onerror or ontimeout handlers,
            // so we should call onloadend on the next 'tick'
            setTimeout(onloadend);
          };
        }

        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }

          reject(createError('Request aborted', config, 'ECONNABORTED', request));

          // Clean up request
          request = null;
        };

        // Handle low level network errors
        request.onerror = function handleError() {
          // Real errors are hidden from us by the browser
          // onerror should only fire if it's a network error
          reject(createError('Network Error', config, null, request));

          // Clean up request
          request = null;
        };

        // Handle timeout
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
          var transitional$1 = config.transitional || transitional;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(createError(
            timeoutErrorMessage,
            config,
            transitional$1.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
            request));

          // Clean up request
          request = null;
        };

        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if (utils$6.isStandardBrowserEnv()) {
          // Add xsrf header
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
            cookies.read(config.xsrfCookieName) :
            undefined;

          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }

        // Add headers to the request
        if ('setRequestHeader' in request) {
          utils$6.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
              // Remove Content-Type if data is undefined
              delete requestHeaders[key];
            } else {
              // Otherwise add header to the request
              request.setRequestHeader(key, val);
            }
          });
        }

        // Add withCredentials to request if needed
        if (!utils$6.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }

        // Add responseType to request if needed
        if (responseType && responseType !== 'json') {
          request.responseType = config.responseType;
        }

        // Handle progress if needed
        if (typeof config.onDownloadProgress === 'function') {
          request.addEventListener('progress', config.onDownloadProgress);
        }

        // Not all browsers support upload events
        if (typeof config.onUploadProgress === 'function' && request.upload) {
          request.upload.addEventListener('progress', config.onUploadProgress);
        }

        if (config.cancelToken || config.signal) {
          // Handle cancellation
          // eslint-disable-next-line func-names
          onCanceled = function(cancel) {
            if (!request) {
              return;
            }
            reject(!cancel || (cancel && cancel.type) ? new Cancel_1('canceled') : cancel);
            request.abort();
            request = null;
          };

          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
          }
        }

        if (!requestData) {
          requestData = null;
        }

        // Send the request
        request.send(requestData);
      });
    };

    var DEFAULT_CONTENT_TYPE = {
      'Content-Type': 'application/x-www-form-urlencoded'
    };

    function setContentTypeIfUnset(headers, value) {
      if (!utils$6.isUndefined(headers) && utils$6.isUndefined(headers['Content-Type'])) {
        headers['Content-Type'] = value;
      }
    }

    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== 'undefined') {
        // For browsers use XHR adapter
        adapter = xhr;
      } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
        // For node use HTTP adapter
        adapter = xhr;
      }
      return adapter;
    }

    function stringifySafely(rawValue, parser, encoder) {
      if (utils$6.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils$6.trim(rawValue);
        } catch (e) {
          if (e.name !== 'SyntaxError') {
            throw e;
          }
        }
      }

      return (encoder || JSON.stringify)(rawValue);
    }

    var defaults$2 = {

      transitional: transitional,

      adapter: getDefaultAdapter(),

      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, 'Accept');
        normalizeHeaderName(headers, 'Content-Type');

        if (utils$6.isFormData(data) ||
          utils$6.isArrayBuffer(data) ||
          utils$6.isBuffer(data) ||
          utils$6.isStream(data) ||
          utils$6.isFile(data) ||
          utils$6.isBlob(data)
        ) {
          return data;
        }
        if (utils$6.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils$6.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
          return data.toString();
        }
        if (utils$6.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
          setContentTypeIfUnset(headers, 'application/json');
          return stringifySafely(data);
        }
        return data;
      }],

      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults$2.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

        if (strictJSONParsing || (forcedJSONParsing && utils$6.isString(data) && data.length)) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === 'SyntaxError') {
                throw enhanceError(e, this, 'E_JSON_PARSE');
              }
              throw e;
            }
          }
        }

        return data;
      }],

      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,

      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',

      maxContentLength: -1,
      maxBodyLength: -1,

      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },

      headers: {
        common: {
          'Accept': 'application/json, text/plain, */*'
        }
      }
    };

    utils$6.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
      defaults$2.headers[method] = {};
    });

    utils$6.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      defaults$2.headers[method] = utils$6.merge(DEFAULT_CONTENT_TYPE);
    });

    var defaults_1 = defaults$2;

    /**
     * Transform the data for a request or a response
     *
     * @param {Object|String} data The data to be transformed
     * @param {Array} headers The headers for the request or response
     * @param {Array|Function} fns A single function or Array of functions
     * @returns {*} The resulting transformed data
     */
    var transformData = function transformData(data, headers, fns) {
      var context = this || defaults_1;
      /*eslint no-param-reassign:0*/
      utils$6.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });

      return data;
    };

    var isCancel = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };

    /**
     * Throws a `Cancel` if cancellation has been requested.
     */
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }

      if (config.signal && config.signal.aborted) {
        throw new Cancel_1('canceled');
      }
    }

    /**
     * Dispatch a request to the server using the configured adapter.
     *
     * @param {object} config The config that is to be used for the request
     * @returns {Promise} The Promise to be fulfilled
     */
    var dispatchRequest = function dispatchRequest(config) {
      throwIfCancellationRequested(config);

      // Ensure headers exist
      config.headers = config.headers || {};

      // Transform request data
      config.data = transformData.call(
        config,
        config.data,
        config.headers,
        config.transformRequest
      );

      // Flatten headers
      config.headers = utils$6.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );

      utils$6.forEach(
        ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );

      var adapter = config.adapter || defaults_1.adapter;

      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);

        // Transform response data
        response.data = transformData.call(
          config,
          response.data,
          response.headers,
          config.transformResponse
        );

        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);

          // Transform response data
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }

        return Promise.reject(reason);
      });
    };

    /**
     * Config-specific merge-function which creates a new config-object
     * by merging two configuration objects together.
     *
     * @param {Object} config1
     * @param {Object} config2
     * @returns {Object} New object resulting from merging config2 to config1
     */
    var mergeConfig = function mergeConfig(config1, config2) {
      // eslint-disable-next-line no-param-reassign
      config2 = config2 || {};
      var config = {};

      function getMergedValue(target, source) {
        if (utils$6.isPlainObject(target) && utils$6.isPlainObject(source)) {
          return utils$6.merge(target, source);
        } else if (utils$6.isPlainObject(source)) {
          return utils$6.merge({}, source);
        } else if (utils$6.isArray(source)) {
          return source.slice();
        }
        return source;
      }

      // eslint-disable-next-line consistent-return
      function mergeDeepProperties(prop) {
        if (!utils$6.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils$6.isUndefined(config1[prop])) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function valueFromConfig2(prop) {
        if (!utils$6.isUndefined(config2[prop])) {
          return getMergedValue(undefined, config2[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function defaultToConfig2(prop) {
        if (!utils$6.isUndefined(config2[prop])) {
          return getMergedValue(undefined, config2[prop]);
        } else if (!utils$6.isUndefined(config1[prop])) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      var mergeMap = {
        'url': valueFromConfig2,
        'method': valueFromConfig2,
        'data': valueFromConfig2,
        'baseURL': defaultToConfig2,
        'transformRequest': defaultToConfig2,
        'transformResponse': defaultToConfig2,
        'paramsSerializer': defaultToConfig2,
        'timeout': defaultToConfig2,
        'timeoutMessage': defaultToConfig2,
        'withCredentials': defaultToConfig2,
        'adapter': defaultToConfig2,
        'responseType': defaultToConfig2,
        'xsrfCookieName': defaultToConfig2,
        'xsrfHeaderName': defaultToConfig2,
        'onUploadProgress': defaultToConfig2,
        'onDownloadProgress': defaultToConfig2,
        'decompress': defaultToConfig2,
        'maxContentLength': defaultToConfig2,
        'maxBodyLength': defaultToConfig2,
        'transport': defaultToConfig2,
        'httpAgent': defaultToConfig2,
        'httpsAgent': defaultToConfig2,
        'cancelToken': defaultToConfig2,
        'socketPath': defaultToConfig2,
        'responseEncoding': defaultToConfig2,
        'validateStatus': mergeDirectKeys
      };

      utils$6.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        (utils$6.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
      });

      return config;
    };

    var data$1 = {
      "version": "0.26.1"
    };

    var VERSION = data$1.version;

    var validators$1 = {};

    // eslint-disable-next-line func-names
    ['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
      validators$1[type] = function validator(thing) {
        return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
      };
    });

    var deprecatedWarnings = {};

    /**
     * Transitional option validator
     * @param {function|boolean?} validator - set to false if the transitional option has been removed
     * @param {string?} version - deprecated version / removed since version
     * @param {string?} message - some message with additional info
     * @returns {function}
     */
    validators$1.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
      }

      // eslint-disable-next-line func-names
      return function(value, opt, opts) {
        if (validator === false) {
          throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));
        }

        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          // eslint-disable-next-line no-console
          console.warn(
            formatMessage(
              opt,
              ' has been deprecated since v' + version + ' and will be removed in the near future'
            )
          );
        }

        return validator ? validator(value, opt, opts) : true;
      };
    };

    /**
     * Assert object's properties type
     * @param {object} options
     * @param {object} schema
     * @param {boolean?} allowUnknown
     */

    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== 'object') {
        throw new TypeError('options must be an object');
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === undefined || validator(value, opt, options);
          if (result !== true) {
            throw new TypeError('option ' + opt + ' must be ' + result);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw Error('Unknown option ' + opt);
        }
      }
    }

    var validator = {
      assertOptions: assertOptions,
      validators: validators$1
    };

    var validators = validator.validators;
    /**
     * Create a new instance of Axios
     *
     * @param {Object} instanceConfig The default config for the instance
     */
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager_1(),
        response: new InterceptorManager_1()
      };
    }

    /**
     * Dispatch a request
     *
     * @param {Object} config The config specific for this request (merged with this.defaults)
     */
    Axios.prototype.request = function request(configOrUrl, config) {
      /*eslint no-param-reassign:0*/
      // Allow for axios('example/url'[, config]) a la fetch API
      if (typeof configOrUrl === 'string') {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }

      config = mergeConfig(this.defaults, config);

      // Set config.method
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = 'get';
      }

      var transitional = config.transitional;

      if (transitional !== undefined) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }

      // filter out skipped interceptors
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
          return;
        }

        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });

      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });

      var promise;

      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, undefined];

        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);

        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }

        return promise;
      }


      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }

      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }

      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }

      return promise;
    };

    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
    };

    // Provide aliases for supported request methods
    utils$6.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
      /*eslint func-names:0*/
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method: method,
          url: url,
          data: (config || {}).data
        }));
      };
    });

    utils$6.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      /*eslint func-names:0*/
      Axios.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig(config || {}, {
          method: method,
          url: url,
          data: data
        }));
      };
    });

    var Axios_1 = Axios;

    /**
     * A `CancelToken` is an object that can be used to request cancellation of an operation.
     *
     * @class
     * @param {Function} executor The executor function.
     */
    function CancelToken(executor) {
      if (typeof executor !== 'function') {
        throw new TypeError('executor must be a function.');
      }

      var resolvePromise;

      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });

      var token = this;

      // eslint-disable-next-line func-names
      this.promise.then(function(cancel) {
        if (!token._listeners) return;

        var i;
        var l = token._listeners.length;

        for (i = 0; i < l; i++) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });

      // eslint-disable-next-line func-names
      this.promise.then = function(onfulfilled) {
        var _resolve;
        // eslint-disable-next-line func-names
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);

        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };

        return promise;
      };

      executor(function cancel(message) {
        if (token.reason) {
          // Cancellation has already been requested
          return;
        }

        token.reason = new Cancel_1(message);
        resolvePromise(token.reason);
      });
    }

    /**
     * Throws a `Cancel` if cancellation has been requested.
     */
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };

    /**
     * Subscribe to the cancel signal
     */

    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }

      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };

    /**
     * Unsubscribe from the cancel signal
     */

    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };

    /**
     * Returns an object that contains a new `CancelToken` and a function that, when called,
     * cancels the `CancelToken`.
     */
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token: token,
        cancel: cancel
      };
    };

    var CancelToken_1 = CancelToken;

    /**
     * Syntactic sugar for invoking a function and expanding an array for arguments.
     *
     * Common use case would be to use `Function.prototype.apply`.
     *
     *  ```js
     *  function f(x, y, z) {}
     *  var args = [1, 2, 3];
     *  f.apply(null, args);
     *  ```
     *
     * With `spread` this example can be re-written.
     *
     *  ```js
     *  spread(function(x, y, z) {})([1, 2, 3]);
     *  ```
     *
     * @param {Function} callback
     * @returns {Function}
     */
    var spread = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };

    /**
     * Determines whether the payload is an error thrown by Axios
     *
     * @param {*} payload The value to test
     * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
     */
    var isAxiosError = function isAxiosError(payload) {
      return utils$6.isObject(payload) && (payload.isAxiosError === true);
    };

    /**
     * Create an instance of Axios
     *
     * @param {Object} defaultConfig The default config for the instance
     * @return {Axios} A new instance of Axios
     */
    function createInstance(defaultConfig) {
      var context = new Axios_1(defaultConfig);
      var instance = bind$1(Axios_1.prototype.request, context);

      // Copy axios.prototype to instance
      utils$6.extend(instance, Axios_1.prototype, context);

      // Copy context to instance
      utils$6.extend(instance, context);

      // Factory for creating new instances
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };

      return instance;
    }

    // Create the default instance to be exported
    var axios$1 = createInstance(defaults_1);

    // Expose Axios class to allow class inheritance
    axios$1.Axios = Axios_1;

    // Expose Cancel & CancelToken
    axios$1.Cancel = Cancel_1;
    axios$1.CancelToken = CancelToken_1;
    axios$1.isCancel = isCancel;
    axios$1.VERSION = data$1.version;

    // Expose all/spread
    axios$1.all = function all(promises) {
      return Promise.all(promises);
    };
    axios$1.spread = spread;

    // Expose isAxiosError
    axios$1.isAxiosError = isAxiosError;

    var axios_1 = axios$1;

    // Allow use of default import syntax in TypeScript
    var _default$1 = axios$1;
    axios_1.default = _default$1;

    var axios = axios_1;

    var error = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WeaverError = void 0;
    // Class to handle WeaverFi Errors:
    class WeaverError extends Error {
        constructor(chain, project, description, sourceError) {
            let message = '';
            if (project) {
                message = `Could not fetch ${project} balances on ${chain.toUpperCase()}`;
                if (description.endsWith('()')) {
                    description += ' promise rejected';
                }
            }
            else if (description.startsWith('Querying') || description.includes('multicall')) {
                message = `Could not execute query on ${chain.toUpperCase()}`;
            }
            else if (description.includes('project:')) {
                message = `Invalid project queried on ${chain.toUpperCase()}`;
            }
            super(message);
            this.chain = chain;
            this.project = project;
            this.description = description;
            this.sourceError = sourceError;
            this.isWeaverError = true;
        }
    }
    exports.WeaverError = WeaverError;
    });

    var ABIs = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pika = exports.lostworlds = exports.platypus = exports.truefi = exports.harvest = exports.paladin = exports.paraswap = exports.apwine = exports.alligator = exports.moonpot = exports.avalaunch = exports.pangolin = exports.bouje = exports.wonderland = exports.cream = exports.yieldyak = exports.sushiswap = exports.apeswap = exports.everest = exports.teddy = exports.cycle = exports.scream = exports.penguin = exports.mstable = exports.axial = exports.benqi = exports.quickswap = exports.wault = exports.beefy = exports.spookyswap = exports.venus = exports.yearn = exports.compound = exports.bzx = exports.curve = exports.alpaca = exports.belt = exports.autofarm = exports.lydia = exports.pancakeswap = exports.traderjoe = exports.snowball = exports.beethovenx = exports.balancer = exports.aave = exports.nftABI = exports.lpABI = exports.minABI = void 0;
    /* ========================================================================================================================================================================= */
    // General-Purpose Minimal ABI:
    exports.minABI = [
        { constant: true, inputs: [{ name: "", type: "address" }], name: "balanceOf", outputs: [{ name: "", type: "uint256" }], type: "function" },
        { constant: true, inputs: [], name: "symbol", outputs: [{ name: "", type: "string" }], type: "function" },
        { constant: true, inputs: [], name: "decimals", outputs: [{ name: "", type: "uint8" }], type: "function" },
        { constant: true, inputs: [], name: "totalSupply", outputs: [{ name: "", type: "uint256" }], type: "function" }
    ];
    // General-Purpose LP Token ABI:
    exports.lpABI = [
        { constant: true, inputs: [{ name: "", type: "address" }], name: "balanceOf", outputs: [{ name: "", type: "uint256" }], type: "function" },
        { constant: true, inputs: [], name: "symbol", outputs: [{ name: "", type: "string" }], type: "function" },
        { constant: true, inputs: [], name: "decimals", outputs: [{ name: "", type: "uint8" }], type: "function" },
        { constant: true, inputs: [], name: "token0", outputs: [{ name: "", type: "address" }], type: "function" },
        { constant: true, inputs: [], name: "token1", outputs: [{ name: "", type: "address" }], type: "function" },
        { constant: true, inputs: [], name: "getReserves", outputs: [{ name: "", type: "uint112" }, { name: "", type: "uint112" }, { name: "", type: "uint32" }], type: "function" },
        { constant: true, inputs: [], name: "totalSupply", outputs: [{ name: "", type: "uint256" }], type: "function" }
    ];
    // General-Purpose NFT ABI:
    exports.nftABI = [
        { constant: true, inputs: [{ name: "", type: "address" }], name: "balanceOf", outputs: [{ name: "", type: "uint256" }], type: "function" },
        { constant: true, inputs: [{ name: "tokenId", type: "uint256" }], name: "tokenURI", outputs: [{ name: "", type: "string" }], type: "function" },
        { constant: true, inputs: [{ name: "owner", type: "address" }, { name: "index", type: "uint256" }], name: "tokenOfOwnerByIndex", outputs: [{ name: "", type: "uint256" }], type: "function" },
        { constant: true, inputs: [{ name: "owner", type: "address" }], name: "tokensOfOwner", outputs: [{ name: "", type: "uint256[]" }], type: "function" }
    ];
    exports.aave = {
        stakingABI: [
            { constant: true, inputs: [], name: "STAKED_TOKEN", outputs: [{ name: "", type: "address" }], type: "function" }
        ],
        incentivesABI: [
            { constant: true, inputs: [{ name: "_user", type: "address" }], name: "getUserUnclaimedRewards", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "assets", type: "address[]" }, { name: "user", type: "address" }, { name: "reward", type: "address" }], name: "getUserRewards", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        lpABI: [
            { constant: true, inputs: [], name: "bPool", outputs: [{ name: "", type: "address" }], type: "function" }
        ],
        lendingABI: [
            { constant: true, inputs: [], name: "UNDERLYING_ASSET_ADDRESS", outputs: [{ name: "", type: "address" }], type: "function" }
        ],
        uiDataProviderABI: [
            { constant: true, inputs: [{ name: "provider", type: "address" }], name: "getReservesList", outputs: [{ name: "", type: "address[]" }], type: "function" }
        ],
        dataProviderABI: [
            { constant: true, inputs: [{ name: "asset", type: "address" }, { name: "user", type: "address" }], name: "getUserReserveData", outputs: [{ name: "currentATokenBalance", type: "uint256" }, { name: "currentStableDebt", type: "uint256" }, { name: "currentVariableDebt", type: "uint256" }, { name: "principalStableDebt", type: "uint256" }, { name: "scaledVariableDebt", type: "uint256" }, { name: "stableBorrowRate", type: "uint256" }, { name: "liquidityRate", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "asset", type: "address" }], name: "getReserveData", outputs: [{ name: "unbacked", type: "uint256" }, { name: "accruedToTreasuryScaled", type: "uint256" }, { name: "totalAToken", type: "uint256" }, { name: "totalStableDebt", type: "uint256" }, { name: "totalVariableDebt", type: "uint256" }, { name: "liquidityRate", type: "uint256" }, { name: "variableBorrowRate", type: "uint256" }, { name: "stableBorrowRate", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "asset", type: "address" }], name: "getReserveTokensAddresses", outputs: [{ name: "aTokenAddress", type: "address" }, { name: "stableDebtTokenAddress", type: "address" }, { name: "variableDebtTokenAddress", type: "address" }], type: "function" }
        ]
    };
    exports.balancer = {
        tokenABI: [
            { constant: true, inputs: [], name: "getCurrentTokens", outputs: [{ name: "", type: "address[]" }], type: "function" },
            { constant: true, inputs: [{ name: "token", type: "address" }], name: "getBalance", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        vaultABI: [
            { constant: true, inputs: [{ name: "poolId", type: "bytes32" }], name: "getPool", outputs: [{ name: "", type: "address" }, { name: "", type: "uint8" }], type: "function" },
            { constant: true, inputs: [{ name: "poolId", type: "bytes32" }], name: "getPoolTokens", outputs: [{ name: "tokens", type: "address[]" }, { name: "balances", type: "uint256[]" }], type: "function" }
        ],
        poolABI: [
            { constant: true, inputs: [], name: "getPoolId", outputs: [{ name: "", type: "bytes32" }], type: "function" }
        ]
    };
    exports.beethovenx = {
        masterChefABI: [
            { constant: true, name: "lpTokens", inputs: [{ name: "", type: "uint256" }], outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, name: "pendingBeets", inputs: [{ name: "_pid", type: "uint256" }, { name: "_user", type: "address" }], outputs: [{ name: "pending", type: "uint256" }], type: "function" },
            { constant: true, name: "poolLength", inputs: [], outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, name: "userInfo", inputs: [{ name: "_pid", type: "uint256" }, { name: "_user", type: "address" }], outputs: [{ name: "amount", type: "uint256" }, { name: "rewardDebt", type: "uint256" }], type: "function" },
        ]
    };
    exports.snowball = {
        gaugeABI: [
            { constant: true, inputs: [{ name: "account", type: "address" }], name: "earned", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        farmABI: [
            { constant: true, inputs: [], name: "getRatio", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [], name: "token", outputs: [{ name: "", type: "address" }], type: "function" }
        ],
        stakingABI: [
            { constant: true, inputs: [{ name: "arg0", type: "address" }], name: "locked", outputs: [{ name: "amount", type: "uint128" }, { name: "end", type: "uint256" }], type: "function" }
        ]
    };
    exports.traderjoe = {
        masterChefABI: [
            { constant: true, inputs: [], name: "poolLength", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "", type: "uint256" }, { name: "", type: "address" }], name: "userInfo", outputs: [{ name: "amount", type: "uint256" }, { name: "rewardDebt", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "", type: "uint256" }], name: "poolInfo", outputs: [{ name: "lpToken", type: "address" }, { name: "allocPoint", type: "uint256" }, { name: "lastRewardTimestamp", type: "uint256" }, { name: "accJoePerShare", type: "uint256" }, { name: "rewarder", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "_pid", type: "uint256" }, { name: "_user", type: "address" }], name: "pendingTokens", outputs: [{ name: "pendingJoe", type: "uint256" }, { name: "bonusTokenAddress", type: "address" }, { name: "bonusTokenSymbol", type: "string" }, { name: "pendingBonusToken", type: "uint256" }], type: "function" }
        ],
        bankControllerABI: [
            { constant: true, inputs: [], name: "getAllMarkets", outputs: [{ name: "", type: "address[]" }], type: "function" }
        ],
        marketABI: [
            { constant: true, inputs: [{ name: "account", type: "address" }], name: "getAccountSnapshot", outputs: [{ name: "", type: "uint256" }, { name: "", type: "uint256" }, { name: "", type: "uint256" }, { name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [], name: "underlying", outputs: [{ name: "", type: "address" }], type: "function" }
        ]
    };
    exports.pancakeswap = {
        registryABI: [
            { constant: true, inputs: [], name: "poolLength", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "", type: "uint256" }, { name: "", type: "address" }], name: "userInfo", outputs: [{ name: "amount", type: "uint256" }, { name: "rewardDebt", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "", type: "uint256" }], name: "poolInfo", outputs: [{ name: "lpToken", type: "address" }, { name: "allocPoint", type: "uint256" }, { name: "lastRewardBlock", type: "uint256" }, { name: "accCakePerShare", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "_pid", type: "uint256" }, { name: "_user", type: "address" }], name: "pendingCake", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }], name: "lpToken", outputs: [{ name: "", type: "address" }], type: "function" },
        ],
        autoCakePoolABI: [
            { constant: true, inputs: [{ name: "", type: "address" }], name: "userInfo", outputs: [{ name: "shares", type: "uint256" }, { name: "lastDepositedTime", type: "uint256" }, { name: "cakeAtLastUserAction", type: "uint256" }, { name: "lastUserActionTime", type: "uint256" }], type: "function" },
            { constant: true, inputs: [], name: "getPricePerFullShare", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ]
    };
    exports.lydia = {
        registryABI: [
            { constant: true, inputs: [], name: "poolLength", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "", type: "uint256" }, { name: "", type: "address" }], name: "userInfo", outputs: [{ name: "amount", type: "uint256" }, { name: "rewardDebt", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "", type: "uint256" }], name: "poolInfo", outputs: [{ name: "lpToken", type: "address" }, { name: "allocPoint", type: "uint256" }, { name: "lastRewardTimestamp", type: "uint256" }, { name: "accLydPerShare", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "_pid", type: "uint256" }, { name: "_user", type: "address" }], name: "pendingLyd", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        lydFarmABI: [
            { constant: true, inputs: [{ name: "account", type: "address" }], name: "sharesOf", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [], name: "getPricePerFullShare", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        maximusFarmABI: [
            { constant: true, inputs: [], name: "stakingToken", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "account", type: "address" }], name: "earned", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ]
    };
    exports.autofarm = {
        registryABI: [
            { constant: true, inputs: [], name: "poolLength", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "_pid", type: "uint256" }, { name: "_user", type: "address" }], name: "stakedWantTokens", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "", type: "uint256" }], name: "poolInfo", outputs: [{ name: "want", type: "address" }, { name: "allocPoint", type: "uint256" }, { name: "lastRewardBlock", type: "uint256" }, { name: "accAUTOPerShare", type: "uint256" }, { name: "strat", type: "address" }], type: "function" }
        ],
        pendingRewardsABI: [
            { constant: true, inputs: [{ name: "_pid", type: "uint256" }, { name: "_user", type: "address" }], name: "pendingAUTO", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ]
    };
    exports.belt = {
        masterBeltABI: [
            { constant: true, inputs: [{ name: "_pid", type: "uint256" }, { name: "_user", type: "address" }], name: "stakedWantTokens", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "_pid", type: "uint256" }, { name: "_user", type: "address" }], name: "pendingBELT", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        tokenABI: [
            { constant: true, inputs: [], name: "getPricePerFullShare", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [], name: "token", outputs: [{ name: "", type: "address" }], type: "function" }
        ],
        stakingABI: [
            { constant: true, inputs: [], name: "getPricePerFullShare", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "userAddr", type: "address" }], name: "getUserLockUpEndTime", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ]
    };
    exports.alpaca = {
        tokenABI: [
            { constant: true, inputs: [], name: "token", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [], name: "totalToken", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ]
    };
    exports.curve = {
        providerABI: [
            { constant: true, inputs: [{ name: "_id", type: "uint256" }], name: "get_address", outputs: [{ name: "", type: "address" }], type: "function" }
        ],
        registryABI: [
            { constant: true, inputs: [], name: "pool_count", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "arg0", type: "uint256" }], name: "pool_list", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "arg0", type: "uint256" }], name: "get_lp_token", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "_pool", type: "address" }], name: "get_gauges", outputs: [{ name: "", type: "address[10]" }, { name: "", type: "int128[10]" }], type: "function" },
            { constant: true, inputs: [{ name: "arg0", type: "address" }], name: "get_pool_from_lp_token", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "_pool", type: "address" }], name: "get_underlying_coins", outputs: [{ name: "", type: "address[8]" }], type: "function" },
            { constant: true, inputs: [{ name: "_pool", type: "address" }], name: "get_underlying_balances", outputs: [{ name: "", type: "uint256[8]" }], type: "function" },
            { constant: true, inputs: [{ name: "_token", type: "address" }], name: "get_virtual_price_from_lp_token", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        cryptoRegistryABI: [
            { constant: true, inputs: [{ name: "_pool", type: "address" }], name: "get_coins", outputs: [{ name: "", type: "address[8]" }], type: "function" },
            { constant: true, inputs: [{ name: "_pool", type: "address" }], name: "get_balances", outputs: [{ name: "", type: "uint256[8]" }], type: "function" },
            { constant: true, inputs: [{ name: "_pool", type: "address" }], name: "get_decimals", outputs: [{ name: "", type: "uint256[8]" }], type: "function" },
            { constant: true, inputs: [{ name: "_token", type: "address" }], name: "get_virtual_price_from_lp_token", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        factoryABI: [
            { constant: true, inputs: [{ name: "_pool", type: "address" }], name: "get_gauge", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "_pool", type: "address" }], name: "is_meta", outputs: [{ name: "", type: "bool" }], type: "function" },
            { constant: true, inputs: [{ name: "_pool", type: "address" }], name: "get_coins", outputs: [{ name: "", type: "address[4]" }], type: "function" },
            { constant: true, inputs: [{ name: "_pool", type: "address" }], name: "get_balances", outputs: [{ name: "", type: "uint256[4]" }], type: "function" },
            { constant: true, inputs: [{ name: "_pool", type: "address" }], name: "get_decimals", outputs: [{ name: "", type: "uint256[4]" }], type: "function" },
            { constant: true, inputs: [{ name: "_pool", type: "address" }], name: "get_underlying_coins", outputs: [{ name: "", type: "address[8]" }], type: "function" },
            { constant: true, inputs: [{ name: "_pool", type: "address" }], name: "get_underlying_balances", outputs: [{ name: "", type: "uint256[8]" }], type: "function" },
            { constant: true, inputs: [{ name: "_pool", type: "address" }], name: "get_underlying_decimals", outputs: [{ name: "", type: "uint256[8]" }], type: "function" }
        ],
        poolInfoGetterABI: [
            { constant: true, inputs: [{ name: "_pool", type: "address" }], name: "get_pool_coins", outputs: [{ name: "coins", type: "address[8]" }, { name: "underlying_coins", type: "address[8]" }, { name: "decimals", type: "uint256[8]" }, { name: "underlying_decimals", type: "uint256[8]" }], type: "function" },
            { constant: true, inputs: [{ name: "_pool", type: "address" }], name: "get_pool_info", outputs: [{ name: "balances", type: "uint256[8]" }, { name: "underlying_balances", type: "uint256[8]" }, { name: "decimals", type: "uint256[8]" }, { name: "underlying_decimals", type: "uint256[8]" }, { name: "rates", type: "uint256[8]" }, { name: "lp_token", type: "address" }], type: "function" }
        ],
        gaugeABI: [
            { constant: true, inputs: [], name: "lp_token", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "arg0", type: "uint256" }], name: "reward_tokens", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "_addr", type: "address" }, { name: "_token", type: "address" }], name: "claimable_reward", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        gaugeFactoryABI: [
            { constant: true, inputs: [], name: "get_gauge_count", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "arg0", type: "uint256" }], name: "get_gauge", outputs: [{ name: "", type: "address" }], type: "function" }
        ]
    };
    exports.bzx = {
        tokenABI: [
            { constant: true, inputs: [], name: "loanTokenAddress", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [], name: "tokenPrice", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ]
    };
    exports.compound = {
        controllerABI: [
            { constant: true, inputs: [], name: "getAllMarkets", outputs: [{ name: "", type: "address[]" }], type: "function" }
        ],
        marketABI: [
            { constant: true, inputs: [{ name: "account", type: "address" }], name: "getAccountSnapshot", outputs: [{ name: "", type: "uint256" }, { name: "", type: "uint256" }, { name: "", type: "uint256" }, { name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [], name: "underlying", outputs: [{ name: "", type: "address" }], type: "function" }
        ]
    };
    exports.yearn = {
        deployerABI: [
            { constant: true, inputs: [], name: "numTokens", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "arg0", type: "uint256" }], name: "tokens", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "arg0", type: "address" }], name: "numVaults", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "arg0", type: "address" }, { name: "arg1", type: "uint256" }], name: "vaults", outputs: [{ name: "", type: "address" }], type: "function" }
        ],
        vaultABI: [
            { constant: true, inputs: [], name: "token", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [], name: "pricePerShare", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        tokenABI: [
            { constant: true, inputs: [], name: "token", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [], name: "getPricePerFullShare", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ]
    };
    exports.venus = {
        controllerABI: [
            { constant: true, inputs: [], name: "getAllMarkets", outputs: [{ name: "", type: "address[]" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "address" }], name: "venusAccrued", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        marketABI: [
            { constant: true, inputs: [], name: "exchangeRateStored", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [], name: "underlying", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "account", type: "address" }], name: "borrowBalanceStored", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        vaultABI: [
            { constant: true, inputs: [{ name: "<input>", type: "address" }], name: "userInfo", outputs: [{ name: "amount", type: "uint256" }, { name: "rewardDebt", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "_user", type: "address" }], name: "pendingXVS", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        xvsVaultABI: [
            { constant: true, inputs: [{ name: "_rewardToken", type: "address" }, { name: "_pid", type: "uint256" }, { name: "_user", type: "address" }], name: "getUserInfo", outputs: [{ name: "amount", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "_rewardToken", type: "address" }, { name: "_pid", type: "uint256" }, { name: "_user", type: "address" }], name: "pendingReward", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ]
    };
    exports.spookyswap = {
        masterChefABI: [
            { constant: true, inputs: [], name: "poolLength", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }, { name: "<input>", type: "address" }], name: "userInfo", outputs: [{ name: "amount", type: "uint256" }, { name: "rewardDebt", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }], name: "poolInfo", outputs: [{ name: "lpToken", type: "address" }, { name: "allocPoint", type: "uint256" }, { name: "lastRewardTime", type: "uint256" }, { name: "accBOOPerShare", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "_pid", type: "uint256" }, { name: "_user", type: "address" }], name: "pendingBOO", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ]
    };
    exports.beefy = {
        vaultABI: [
            { constant: true, inputs: [], name: "getPricePerFullShare", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [], name: "want", outputs: [{ name: "", type: "address" }], type: "function" }
        ],
        stakingABI: [
            { constant: true, inputs: [{ name: "account", type: "address" }], name: "earned", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ]
    };
    exports.wault = {
        masterABI: [
            { constant: true, inputs: [], name: "poolLength", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }, { name: "<input>", type: "address" }], name: "userInfo", outputs: [{ name: "amount", type: "uint256" }, { name: "rewardDebt", type: "uint256" }, { name: "pendingRewards", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }], name: "poolInfo", outputs: [{ name: "lpToken", type: "address" }, { name: "allocPoint", type: "uint256" }, { name: "lastRewardBlock", type: "uint256" }, { name: "accWexPerShare", type: "uint256" }], type: "function" }
        ]
    };
    exports.quickswap = {
        registryABI: [
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }], name: "stakingTokens", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "address" }], name: "stakingRewardsInfoByStakingToken", outputs: [{ name: "stakingRewards", type: "address" }, { name: "rewardAmount", type: "uint256" }, { name: "duration", type: "uint256" }], type: "function" }
        ],
        dualRegistryABI: [
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }], name: "stakingTokens", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "address" }], name: "stakingRewardsInfoByStakingToken", outputs: [{ name: "stakingRewards", type: "address" }, { name: "rewardsTokenA", type: "address" }, { name: "rewardsTokenB", type: "address" }, { name: "rewardAmountA", type: "uint256" }, { name: "rewardAmountB", type: "uint256" }, { name: "duration", type: "uint256" }], type: "function" }
        ],
        farmABI: [
            { constant: true, inputs: [], name: "stakingToken", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "account", type: "address" }], name: "earned", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        dualFarmABI: [
            { constant: true, inputs: [], name: "stakingToken", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "account", type: "address" }], name: "earnedA", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "account", type: "address" }], name: "earnedB", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        stakingABI: [
            { constant: true, inputs: [{ name: "_dQuickAmount", type: "uint256" }], name: "dQUICKForQUICK", outputs: [{ name: "quickAmount_", type: "uint256" }], type: "function" }
        ]
    };
    exports.benqi = {
        controllerABI: [
            { constant: true, inputs: [], name: "getAllMarkets", outputs: [{ name: "", type: "address[]" }], type: "function" }
        ],
        marketABI: [
            { constant: true, inputs: [{ name: "account", type: "address" }], name: "getAccountSnapshot", outputs: [{ name: "", type: "uint256" }, { name: "", type: "uint256" }, { name: "", type: "uint256" }, { name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [], name: "underlying", outputs: [{ name: "", type: "address" }], type: "function" }
        ]
    };
    exports.axial = {
        masterChefABI: [
            { constant: true, inputs: [], name: "poolLength", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }, { name: "<input>", type: "address" }], name: "userInfo", outputs: [{ name: "amount", type: "uint256" }, { name: "rewardDebt", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }], name: "poolInfo", outputs: [{ name: "lpToken", type: "address" }, { name: "accAxialPerShare", type: "uint256" }, { name: "lastRewardTimestamp", type: "uint256" }, { name: "allocPoint", type: "uint256" }, { name: "rewarder", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "_pid", type: "uint256" }, { name: "_user", type: "address" }], name: "pendingTokens", outputs: [{ name: "pendingAxial", type: "uint256" }, { name: "bonusTokenAddress", type: "address" }, { name: "bonusTokenSymbol", type: "string" }, { name: "pendingBonusToken", type: "uint256" }], type: "function" }
        ],
        tokenABI: [
            { constant: true, inputs: [], name: "owner", outputs: [{ name: "", type: "address" }], type: "function" }
        ],
        swapABI: [
            { constant: true, inputs: [], name: "getVirtualPrice", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        gaugeProxyABI: [
            { constant: true, inputs: [], name: "tokens", outputs: [{ name: "", type: "address[]" }], type: "function" },
            { constant: true, inputs: [{ name: "_token", type: "address" }], name: "getGauge", outputs: [{ name: "", type: "address" }], type: "function" }
        ],
        sAxialABI: [
            { constant: true, inputs: [{ name: "_userAddr", type: "address" }], name: "getBalance", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "_userAddr", type: "address" }], name: "getLock", outputs: [{ name: "", type: "tuple", components: [{ name: "startBlockTime", type: "uint256" }, { name: "endBlockTime", type: "uint256" }, { name: "startingAmountLocked", type: "uint256" }, { name: "initialized", type: "bool" }] }], type: "function" },
            { constant: true, inputs: [{ name: "_userAddr", type: "address" }], name: "getUnclaimed", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        veAxialABI: [
            { constant: true, inputs: [{ name: "_userAddr", type: "address" }], name: "getAccrued", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "_userAddr", type: "address" }], name: "getStaked", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ]
    };
    exports.mstable = {
        assetABI: [
            { constant: true, inputs: [], name: "exchangeRate", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [], name: "underlying", outputs: [{ name: "", type: "address" }], type: "function" }
        ],
        vaultABI: [
            { constant: true, inputs: [{ name: "_account", type: "address" }], name: "rawBalanceOf", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [], name: "stakingToken", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "_account", type: "address" }], name: "earned", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        stakingABI: [
            { constant: true, inputs: [{ name: "_account", type: "address" }], name: "rawBalanceOf", outputs: [{ name: "", type: "uint256" }, { name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [], name: "STAKED_TOKEN", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "_account", type: "address" }], name: "earned", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        mbptABI: [
            { constant: true, inputs: [], name: "getPoolId", outputs: [{ name: "", type: "bytes32" }], type: "function" }
        ],
        stableABI: [
            { constant: true, inputs: [], name: "getPrice", outputs: [{ name: "price", type: "uint256" }, { name: "k", type: "uint256" }], type: "function" }
        ]
    };
    exports.penguin = {
        masterABI: [
            { constant: true, inputs: [], name: "poolLength", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "", type: "uint256" }, { name: "", type: "address" }], name: "userInfo", outputs: [{ name: "amount", type: "uint256" }, { name: "rewardDebt", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "", type: "uint256" }], name: "poolInfo", outputs: [{ name: "poolToken", type: "address" }, { name: "rewarder", type: "address" }, { name: "strategy", type: "address" }, { name: "allocPoint", type: "uint256" }, { name: "lastRewardTime", type: "uint256" }, { name: "accPEFIPerShare", type: "uint256" }, { name: "withdrawFeeBP", type: "uint16" }, { name: "totalShares", type: "uint256" }, { name: "lpPerShare", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "pid", type: "uint256" }, { name: "user", type: "address" }], name: "pendingTokens", outputs: [{ name: "", type: "address[]" }, { name: "", type: "uint256[]" }], type: "function" },
            { constant: true, inputs: [{ name: "pid", type: "uint256" }, { name: "penguin", type: "address" }], name: "totalPendingPEFI", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        nestABI: [
            { constant: true, inputs: [], name: "currentExchangeRate", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ]
    };
    exports.scream = {
        controllerABI: [
            { constant: true, inputs: [], name: "getAllMarkets", outputs: [{ name: "", type: "address[]" }], type: "function" }
        ],
        marketABI: [
            { constant: true, inputs: [{ name: "account", type: "address" }], name: "getAccountSnapshot", outputs: [{ name: "", type: "uint256" }, { name: "", type: "uint256" }, { name: "", type: "uint256" }, { name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [], name: "underlying", outputs: [{ name: "", type: "address" }], type: "function" }
        ],
        stakingABI: [
            { constant: true, inputs: [], name: "getShareValue", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ]
    };
    exports.cycle = {
        distributorABI: [
            { constant: true, inputs: [], name: "getVaultRewardsCount", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "", type: "uint256" }], name: "rewards", outputs: [{ name: "StakingRewards", type: "address" }, { name: "weight", type: "uint256" }], type: "function" }
        ],
        vaultABI: [
            { constant: true, inputs: [], name: "stakingToken", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "account", type: "address" }], name: "earned", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        intermediaryABI: [
            { constant: true, inputs: [], name: "LPtoken", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "account", type: "address" }], name: "getAccountLP", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "shares", type: "uint256" }], name: "getLPamountForShares", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        stakingABI: [
            { constant: true, inputs: [], name: "stakingToken", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "account", type: "address" }], name: "earned", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "account", type: "address" }], name: "getAccountCYCLE", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ]
    };
    exports.teddy = {
        troveABI: [
            { constant: true, inputs: [{ name: "", type: "address" }], name: "Troves", outputs: [{ name: "debt", type: "uint256" }, { name: "coll", type: "uint256" }, { name: "stake", type: "uint256" }, { name: "status", type: "uint8" }, { name: "arrayIndex", type: "uint128" }], type: "function" }
        ],
        stabilityPoolABI: [
            { constant: true, inputs: [{ name: "", type: "address" }], name: "deposits", outputs: [{ name: "initialValue", type: "uint256" }, { name: "frontEndTag", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "_depositor", type: "address" }], name: "getDepositorETHGain", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "_depositor", type: "address" }], name: "getDepositorLQTYGain", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        stakingABI: [
            { constant: true, inputs: [{ name: "", type: "address" }], name: "stakes", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "_user", type: "address" }], name: "getPendingETHGain", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "_user", type: "address" }], name: "getPendingLUSDGain", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ]
    };
    exports.everest = {
        farmABI: [
            { constant: true, inputs: [{ name: "account", type: "address" }], name: "balanceOf", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [], name: "stakingToken", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "account", type: "address" }], name: "earned", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        stakingABI: [
            { constant: true, inputs: [{ name: "account", type: "address" }], name: "balanceOf", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [], name: "currentExchangeRate", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ]
    };
    exports.apeswap = {
        masterApeABI: [
            { constant: true, inputs: [], name: "poolLength", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }, { name: "<input>", type: "address" }], name: "userInfo", outputs: [{ name: "amount", type: "uint256" }, { name: "rewardDebt", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }], name: "poolInfo", outputs: [{ name: "lpToken", type: "address" }, { name: "allocPoint", type: "uint256" }, { name: "lastRewardBlock", type: "uint256" }, { name: "accCakePerShare", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "_pid", type: "uint256" }, { name: "_user", type: "address" }], name: "pendingCake", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        polyMasterApeABI: [
            { constant: true, inputs: [], name: "poolLength", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }, { name: "<input>", type: "address" }], name: "userInfo", outputs: [{ name: "amount", type: "uint256" }, { name: "rewardDebt", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }], name: "lpToken", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "_pid", type: "uint256" }, { name: "_user", type: "address" }], name: "pendingBanana", outputs: [{ name: "pending", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }], name: "rewarder", outputs: [{ name: "", type: "address" }], type: "function" }
        ],
        rewarderABI: [
            { constant: true, inputs: [{ name: "_pid", type: "uint256" }, { name: "_user", type: "address" }], name: "pendingToken", outputs: [{ name: "pending", type: "uint256" }], type: "function" },
            { constant: true, inputs: [], name: "rewardToken", outputs: [{ name: "", type: "address" }], type: "function" }
        ],
        vaultMasterABI: [
            { constant: true, inputs: [], name: "poolLength", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "_pid", type: "uint256" }, { name: "_user", type: "address" }], name: "stakedWantTokens", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }], name: "poolInfo", outputs: [{ name: "want", type: "address" }, { name: "strat", type: "address" }], type: "function" }
        ]
    };
    exports.sushiswap = {
        masterChefABI: [
            { constant: true, inputs: [], name: "poolLength", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }, { name: "<input>", type: "address" }], name: "userInfo", outputs: [{ name: "amount", type: "uint256" }, { name: "rewardDebt", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }], name: "poolInfo", outputs: [{ name: "lpToken", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }], name: "lpToken", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "_pid", type: "uint256" }, { name: "_user", type: "address" }], name: "pendingSushi", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ]
    };
    exports.yieldyak = {
        farmABI: [
            { constant: true, inputs: [], name: "depositToken", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [], name: "totalDeposits", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        stakingABI: [
            { constant: true, inputs: [{ name: "", type: "uint256" }, { name: "", type: "address" }], name: "userInfo", outputs: [{ name: "amount", type: "uint256" }, { name: "rewardTokenDebt", type: "uint256" }], type: "function" }
        ]
    };
    exports.cream = {
        controllerABI: [
            { constant: true, inputs: [], name: "getAllMarkets", outputs: [{ name: "", type: "address[]" }], type: "function" }
        ],
        tokenABI: [
            { constant: true, inputs: [], name: "exchangeRateStored", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [], name: "underlying", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "account", type: "address" }], name: "borrowBalanceStored", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        stakingABI: [
            { constant: true, inputs: [{ name: "account", type: "address" }], name: "earned", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ]
    };
    exports.wonderland = {
        memoABI: [
            { constant: true, inputs: [{ name: "_amount", type: "uint256" }], name: "wMEMOToMEMO", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ]
    };
    exports.bouje = {
        masterChefABI: [
            { constant: true, inputs: [], name: "poolLength", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }, { name: "<input>", type: "address" }], name: "userInfo", outputs: [{ name: "amount", type: "uint256" }, { name: "rewardDebt", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }], name: "poolInfo", outputs: [{ name: "lpToken", type: "address" }, { name: "allocPoint", type: "uint256" }, { name: "lastRewardTime", type: "uint256" }, { name: "accBastillePerShare", type: "uint256" }, { name: "depositFeeBP", type: "uint16" }, { name: "lpSupply", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "_pid", type: "uint256" }, { name: "_user", type: "address" }], name: "pendingBastille", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ]
    };
    exports.pangolin = {
        controllerABI: [
            { constant: true, inputs: [], name: "poolLength", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }, { name: "<input>", type: "address" }], name: "userInfo", outputs: [{ name: "amount", type: "uint256" }, { name: "rewardDebt", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }], name: "lpToken", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "_pid", type: "uint256" }, { name: "_user", type: "address" }], name: "pendingReward", outputs: [{ name: "pending", type: "uint256" }], type: "function" }
        ]
    };
    exports.avalaunch = {
        stakingABI: [
            { constant: true, inputs: [{ name: "_pid", type: "uint256" }, { name: "_user", type: "address" }], name: "deposited", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "_pid", type: "uint256" }, { name: "_user", type: "address" }], name: "pending", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ]
    };
    exports.moonpot = {
        potABI: [
            { constant: true, inputs: [{ name: "user", type: "address" }], name: "userTotalBalance", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ]
    };
    exports.alligator = {
        factoryABI: [
            { constant: true, inputs: [], name: "allPairsLength", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }], name: "allPairs", outputs: [{ name: "", type: "address" }], type: "function" }
        ],
        masterChefABI: [
            { constant: true, inputs: [], name: "poolLength", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }, { name: "<input>", type: "address" }], name: "userInfo", outputs: [{ name: "amount", type: "uint256" }, { name: "rewardDebt", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }], name: "poolInfo", outputs: [{ name: "lpToken", type: "address" }, { name: "allocPoint", type: "uint256" }, { name: "lastRewardTimestamp", type: "uint256" }, { name: "accGtrPerShare", type: "uint256" }, { name: "rewarder", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "_pid", type: "uint256" }, { name: "_user", type: "address" }], name: "pendingTokens", outputs: [{ name: "pendingGtr", type: "uint256" }], type: "function" }
        ]
    };
    exports.apwine = {
        registryABI: [
            { constant: true, inputs: [], name: "futureVaultCount", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "_index", type: "uint256" }], name: "getFutureVaultAt", outputs: [{ name: "", type: "address" }], type: "function" }
        ],
        futureABI: [
            { constant: true, inputs: [], name: "PLATFORM_NAME", outputs: [{ name: "", type: "string" }], type: "function" },
            { constant: true, inputs: [], name: "getCurrentPeriodIndex", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [], name: "getPTAddress", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "_periodIndex", type: "uint256" }], name: "getFYTofPeriod", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [], name: "getIBTAddress", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [], name: "getUnrealisedYieldPerPT", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [], name: "getIBTRate", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        stakingABI: [
            { constant: true, inputs: [{ name: "arg0", type: "address" }], name: "locked", outputs: [{ name: "amount", type: "uint128" }, { name: "end", type: "uint256" }], type: "function" }
        ]
    };
    exports.paraswap = {
        stakingABI: [
            { constant: true, inputs: [{ name: "_sPSPAmount", type: "uint256" }], name: "PSPForSPSP", outputs: [{ name: "pspAmount", type: "uint256" }], type: "function" }
        ]
    };
    exports.paladin = {
        tokenABI: [
            { constant: true, inputs: [], name: "palPool", outputs: [{ name: "", type: "address" }], type: "function" }
        ],
        poolABI: [
            { constant: true, inputs: [], name: "underlying", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [], name: "exchangeRateStored", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ]
    };
    exports.harvest = {
        stakingABI: [
            { constant: true, inputs: [], name: "underlying", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [], name: "getPricePerFullShare", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ]
    };
    exports.truefi = {
        poolABI: [
            { constant: true, inputs: [], name: "token", outputs: [{ name: "", type: "address" }], type: "function" },
            { constant: true, inputs: [], name: "poolValue", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ]
    };
    exports.platypus = {
        stakingABI: [
            { constant: true, inputs: [{ name: "_addr", type: "address" }], name: "getStakedPtp", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        masterChefABI: [
            { constant: true, inputs: [], name: "poolLength", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }, { name: "<input>", type: "address" }], name: "userInfo", outputs: [{ name: "amount", type: "uint256" }, { name: "rewardDebt", type: "uint256" }, { name: "factor", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }], name: "poolInfo", outputs: [{ name: "lpToken", type: "address" }, { name: "allocPoint", type: "uint256" }, { name: "lastRewardTimestamp", type: "uint256" }, { name: "accPtpPerShare", type: "uint256" }, { name: "rewarder", type: "address" }, { name: "sumOfFactors", type: "uint256" }, { name: "accPtpPerFactorShare", type: "uint256" }, { name: "adjustedAllocPoint", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "_pid", type: "uint256" }, { name: "_user", type: "address" }], name: "pendingTokens", outputs: [{ name: "pendingPtp", type: "uint256" }, { name: "bonusTokenAddress", type: "address" }, { name: "bonusTokenSymbol", type: "string" }, { name: "pendingBonusToken", type: "uint256" }], type: "function" }
        ],
        factoryChefABI: [
            { constant: true, inputs: [], name: "poolLength", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }, { name: "<input>", type: "address" }], name: "userInfo", outputs: [{ name: "amount", type: "uint256" }, { name: "rewardDebt", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "<input>", type: "uint256" }], name: "poolInfo", outputs: [{ name: "lpToken", type: "address" }, { name: "baseAllocPoint", type: "uint256" }, { name: "lastRewardTimestamp", type: "uint256" }, { name: "accPtpPerShare", type: "uint256" }, { name: "rewarder", type: "address" }], type: "function" },
            { constant: true, inputs: [{ name: "_pid", type: "uint256" }, { name: "_user", type: "address" }], name: "pendingTokens", outputs: [{ name: "pendingPtp", type: "uint256" }, { name: "bonusTokenAddress", type: "address" }, { name: "bonusTokenSymbol", type: "string" }, { name: "pendingBonusToken", type: "uint256" }], type: "function" }
        ],
        tokenABI: [
            { constant: true, inputs: [], name: "underlyingToken", outputs: [{ name: "", type: "address" }], type: "function" }
        ]
    };
    exports.lostworlds = {
        stakingABI: [
            { constant: true, inputs: [{ name: "<input>", type: "address" }], name: "deposits", outputs: [{ name: "", type: "uint256" }], type: "function" },
            { constant: true, inputs: [{ name: "account", type: "address" }], name: "getPendingReward", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ]
    };
    exports.pika = {
        perpetualV2ABI: [
            { constant: true, inputs: [{ name: "stakeOwner", type: "address" }], name: "getShareBalance", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ],
        vaultFeeV2ABI: [
            { constant: true, inputs: [{ name: "account", type: "address" }], name: "getClaimableReward", outputs: [{ name: "", type: "uint256" }], type: "function" }
        ]
    };
    });

    var require$$1$1 = functions;

    var aave$4 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getIncentivesV3 = exports.getMarketBalancesV3 = exports.getIncentives = exports.getMarketBalances = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'avax';
    const project = 'aave';
    const addressProvider = '0xb6A86025F0FE1862B372cb0ca18CE3EDe02A318f';
    const incentives = '0x01D83Fe6A10D2f2B7AF17034343746188272cAc9';
    const addressProviderV3 = '0xa97684ead0e402dC232d5A977953DF7ECBaB3CDb';
    const uiDataProviderV3 = '0xdBbFaFC45983B4659E368a3025b81f69Ab6E5093';
    const dataProviderV3 = '0x69FA688f1Dc47d4B5d8029D5a35FB7a548310654';
    const incentivesV3 = '0x929EC64c34a17401F460460D4B9390518E5B473e';
    const wavax = '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7';
    const apiURL = 'https://aave-api-v2.aave.com/data/liquidity/v2';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        let markets = await (0, require$$1$1.fetchData)(`${apiURL}?poolId=${addressProvider}`);
        if (markets.length > 0) {
            balance.push(...(await (0, exports.getMarketBalances)(markets, wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getMarketBalances()', err); })));
            balance.push(...(await (0, exports.getIncentives)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getIncentives()', err); })));
            balance.push(...(await (0, exports.getMarketBalancesV3)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getMarketBalancesV3()', err); })));
        }
        else {
            throw new error.WeaverError(chain, project, 'Invalid response from Aave API');
        }
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get lending market balances:
    const getMarketBalances = async (markets, wallet) => {
        // Initializations:
        let balances = [];
        let queries = [];
        // Multicall Query Setup:
        markets.forEach(market => {
            queries.push({
                reference: 'a' + market.symbol,
                contractAddress: market.aTokenAddress,
                abi: ABIs.minABI,
                calls: [{ reference: 'balance', methodName: 'balanceOf', methodParameters: [wallet] }]
            });
            if (market.borrowingEnabled) {
                queries.push({
                    reference: 'vb' + market.symbol,
                    contractAddress: market.variableDebtTokenAddress,
                    abi: ABIs.minABI,
                    calls: [{ reference: 'balance', methodName: 'balanceOf', methodParameters: [wallet] }]
                });
            }
        });
        // Multicall Query Results:
        let multicallResults = (await (0, require$$1$1.multicallQuery)(chain, queries)).results;
        let promises = markets.map(market => (async () => {
            // Lending Balances:
            let marketLendingResults = multicallResults['a' + market.symbol].callsReturnContext[0];
            if (marketLendingResults.success) {
                let balance = (0, require$$1$1.parseBN)(marketLendingResults.returnValues[0]);
                if (balance > 0) {
                    let newToken = await (0, require$$1$1.addToken)(chain, project, 'lent', market.underlyingAsset, balance, wallet, market.aTokenAddress);
                    newToken.info = {
                        apy: market.avg7DaysLiquidityRate * 100,
                        deprecated: !market.isActive
                    };
                    balances.push(newToken);
                }
            }
            // Variable Borrowing Balances:
            if (market.borrowingEnabled) {
                let marketVariableBorrowingResults = multicallResults['vb' + market.symbol].callsReturnContext[0];
                if (marketVariableBorrowingResults.success) {
                    let balance = (0, require$$1$1.parseBN)(marketVariableBorrowingResults.returnValues[0]);
                    if (balance > 0) {
                        let newToken = await (0, require$$1$1.addDebtToken)(chain, project, market.underlyingAsset, balance, wallet, market.aTokenAddress);
                        newToken.info = {
                            apy: market.avg7DaysVariableBorrowRate * 100,
                        };
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getMarketBalances = getMarketBalances;
    // Function to get unclaimed incentives:
    const getIncentives = async (wallet) => {
        let rewards = parseInt(await (0, require$$1$1.query)(chain, incentives, ABIs.aave.incentivesABI, 'getUserUnclaimedRewards', [wallet]));
        if (rewards > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', wavax, rewards, wallet);
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getIncentives = getIncentives;
    // Function to get lending market V3 balances:
    const getMarketBalancesV3 = async (wallet) => {
        // Initializations:
        let balances = [];
        let ibTokens = {};
        // Fetching Assets:
        let assets = await (0, require$$1$1.query)(chain, uiDataProviderV3, ABIs.aave.uiDataProviderABI, 'getReservesList', [addressProviderV3]);
        // Market Balance Multicall Query:
        let calls = [];
        assets.forEach(asset => {
            calls.push({ reference: asset, methodName: 'getUserReserveData', methodParameters: [asset, wallet] });
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, dataProviderV3, ABIs.aave.dataProviderABI, calls);
        let promises = assets.map(asset => (async () => {
            let balanceResults = multicallResults[asset];
            if (balanceResults) {
                let currentATokenBalance = (0, require$$1$1.parseBN)(balanceResults[0]);
                let currentStableDebt = (0, require$$1$1.parseBN)(balanceResults[1]);
                let currentVariableDebt = (0, require$$1$1.parseBN)(balanceResults[2]);
                let stableBorrowRate = (0, require$$1$1.parseBN)(balanceResults[5]);
                let liquidityRate = (0, require$$1$1.parseBN)(balanceResults[6]);
                // Finding Interest Bearing Token Addresses:
                if (currentATokenBalance > 0 || currentStableDebt > 0 || currentVariableDebt > 0) {
                    if (!ibTokens[asset]) {
                        ibTokens[asset] = await (0, require$$1$1.query)(chain, dataProviderV3, ABIs.aave.dataProviderABI, 'getReserveTokensAddresses', [asset]);
                    }
                }
                // Lending Balances:
                if (currentATokenBalance > 0) {
                    let newToken = await (0, require$$1$1.addToken)(chain, project, 'lent', asset, currentATokenBalance, wallet, ibTokens[asset].aTokenAddress);
                    newToken.info = {
                        apy: liquidityRate / (10 ** 25)
                    };
                    balances.push(newToken);
                }
                // Stable Borrowing Balances:
                if (currentStableDebt > 0) {
                    let newToken = await (0, require$$1$1.addDebtToken)(chain, project, asset, currentStableDebt, wallet, ibTokens[asset].aTokenAddress);
                    newToken.info = {
                        apy: stableBorrowRate / (10 ** 25)
                    };
                    balances.push(newToken);
                }
                // Variable Borrowing Balances:
                if (currentVariableDebt > 0) {
                    let newToken = await (0, require$$1$1.addDebtToken)(chain, project, asset, currentVariableDebt, wallet, ibTokens[asset].aTokenAddress);
                    let extraData = await (0, require$$1$1.query)(chain, dataProviderV3, ABIs.aave.dataProviderABI, 'getReserveData', [asset]);
                    newToken.info = {
                        apy: extraData.variableBorrowRate / (10 ** 25)
                    };
                    balances.push(newToken);
                }
            }
        })());
        await Promise.all(promises);
        balances.push(...(await (0, exports.getIncentivesV3)(ibTokens, wallet)));
        return balances;
    };
    exports.getMarketBalancesV3 = getMarketBalancesV3;
    // Function to get unclaimed V3 incentives:
    const getIncentivesV3 = async (ibTokens, wallet) => {
        if (Object.keys(ibTokens).length > 0) {
            let tokens = [];
            for (let asset in ibTokens) {
                tokens.push(ibTokens[asset].aTokenAddress);
                tokens.push(ibTokens[asset].variableDebtTokenAddress);
            }
            let rewards = parseInt(await (0, require$$1$1.query)(chain, incentivesV3, ABIs.aave.incentivesABI, 'getUserRewards', [tokens, wallet, wavax]));
            if (rewards > 0) {
                let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', wavax, rewards, wallet);
                return [newToken];
            }
            else {
                return [];
            }
        }
        else {
            return [];
        }
    };
    exports.getIncentivesV3 = getIncentivesV3;
    });

    var alligator = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getStakedGTR = exports.getFarmBalances = exports.getPoolBalances = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'avax';
    const project = 'alligator';
    const factory = '0xD9362AA8E0405C93299C573036E7FB4ec3bE1240';
    const masterChef = '0x2cB3FF6894a07A9957Cf6797a29218CEBE13F42f';
    const gtr = '0x43c812ba28cb061b1be7514145a15c9e18a27342';
    const xgtr = '0x32A948F018870548bEd7e888Cd97a257b700D4c6';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getPoolBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getPoolBalances()', err); })));
        balance.push(...(await (0, exports.getFarmBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getFarmBalances()', err); })));
        balance.push(...(await (0, exports.getStakedGTR)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getStakedGTR()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get all pool balances:
    const getPoolBalances = async (wallet) => {
        let balances = [];
        let poolCount = parseInt(await (0, require$$1$1.query)(chain, factory, ABIs.alligator.factoryABI, 'allPairsLength', []));
        let pools = [...Array(poolCount).keys()];
        // LP Token Multicall Query:
        let lpCalls = [];
        pools.forEach(poolID => {
            lpCalls.push({ reference: poolID.toString(), methodName: 'allPairs', methodParameters: [poolID] });
        });
        let lpMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, factory, ABIs.alligator.factoryABI, lpCalls);
        // Balance Multicall Query:
        let lpAddresses = Object.keys(lpMulticallResults).map(id => lpMulticallResults[id][0]);
        let balanceMulticallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, lpAddresses, ABIs.minABI, 'balanceOf', [wallet]);
        let promises = lpAddresses.map(lpToken => (async () => {
            let balanceResults = balanceMulticallResults[lpToken];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 0) {
                    let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', lpToken, balance, wallet);
                    balances.push(newToken);
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getPoolBalances = getPoolBalances;
    // Function to get all farm balances:
    const getFarmBalances = async (wallet) => {
        let balances = [];
        let farmCount = parseInt(await (0, require$$1$1.query)(chain, masterChef, ABIs.alligator.masterChefABI, 'poolLength', []));
        let farms = [...Array(farmCount).keys()];
        // User Info Multicall Query:
        let calls = [];
        farms.forEach(farmID => {
            calls.push({ reference: farmID.toString(), methodName: 'userInfo', methodParameters: [farmID, wallet] });
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, masterChef, ABIs.alligator.masterChefABI, calls);
        let promises = farms.map(farmID => (async () => {
            let userInfoResults = multicallResults[farmID];
            if (userInfoResults) {
                let balance = (0, require$$1$1.parseBN)(userInfoResults[0]);
                if (balance > 0) {
                    let token = (await (0, require$$1$1.query)(chain, masterChef, ABIs.alligator.masterChefABI, 'poolInfo', [farmID])).lpToken;
                    let symbol = await (0, require$$1$1.query)(chain, token, ABIs.minABI, 'symbol', []);
                    // Standard LPs:
                    if (symbol === 'ALP') {
                        let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', token, balance, wallet);
                        balances.push(newToken);
                        // xGTR Farm:
                    }
                    else if (symbol === 'xGTR') {
                        let gtrStaked = parseInt(await (0, require$$1$1.query)(chain, gtr, ABIs.minABI, 'balanceOf', [xgtr]));
                        let xgtrSupply = parseInt(await (0, require$$1$1.query)(chain, xgtr, ABIs.minABI, 'totalSupply', []));
                        let newToken = await (0, require$$1$1.addXToken)(chain, project, 'staked', xgtr, balance, wallet, gtr, balance * (gtrStaked / xgtrSupply));
                        balances.push(newToken);
                    }
                    // Pending Rewards:
                    let rewards = parseInt((await (0, require$$1$1.query)(chain, masterChef, ABIs.alligator.masterChefABI, 'pendingTokens', [farmID, wallet])).pendingGtr);
                    if (rewards > 0) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', gtr, rewards, wallet);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getFarmBalances = getFarmBalances;
    // Function to get staked GTR balance:
    const getStakedGTR = async (wallet) => {
        let balance = parseInt(await (0, require$$1$1.query)(chain, xgtr, ABIs.minABI, 'balanceOf', [wallet]));
        if (balance > 0) {
            let gtrStaked = parseInt(await (0, require$$1$1.query)(chain, gtr, ABIs.minABI, 'balanceOf', [xgtr]));
            let xgtrSupply = parseInt(await (0, require$$1$1.query)(chain, xgtr, ABIs.minABI, 'totalSupply', []));
            let newToken = await (0, require$$1$1.addXToken)(chain, project, 'staked', xgtr, balance, wallet, gtr, balance * (gtrStaked / xgtrSupply));
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getStakedGTR = getStakedGTR;
    });

    var require$$0$1 = prices;

    var projectFunctions = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.addStableToken = exports.addAxialToken = exports.addBalancerLikeToken = exports.addBalancerToken = exports.addBZXToken = exports.addCurveToken = exports.addAlpacaToken = exports.add4BeltToken = exports.addAaveBLPToken = exports.addSpookyToken = exports.addBeltToken = exports.addTraderJoeToken = void 0;
    // Imports:




    /* ========================================================================================================================================================================= */
    // Function to get Trader Joe token info (xJOE):
    const addTraderJoeToken = async (chain, location, status, rawBalance, owner, contract) => {
        const xjoe = '0x57319d41F71E81F3c65F2a47CA4e001EbAFd4F33';
        const joe = '0x6e84a6216eA6dACC71eE8E6b0a5B7322EEbC0fDd';
        let joeStaked = parseInt(await (0, require$$1$1.query)(chain, joe, ABIs.minABI, 'balanceOf', [xjoe]));
        let xjoeSupply = parseInt(await (0, require$$1$1.query)(chain, xjoe, ABIs.minABI, 'totalSupply', []));
        let newToken = await (0, require$$1$1.addXToken)(chain, location, status, xjoe, rawBalance, owner, joe, rawBalance * (joeStaked / xjoeSupply), contract);
        return newToken;
    };
    exports.addTraderJoeToken = addTraderJoeToken;
    /* ========================================================================================================================================================================= */
    // Function to get Belt token info (beltBTC, beltETH, etc.):
    const addBeltToken = async (chain, location, status, address, rawBalance, owner, contract) => {
        let exchangeRate = parseInt(await (0, require$$1$1.query)(chain, address, ABIs.belt.tokenABI, 'getPricePerFullShare', [])) / (10 ** 18);
        let underlyingToken = await (0, require$$1$1.query)(chain, address, ABIs.belt.tokenABI, 'token', []);
        let newToken = await (0, require$$1$1.addXToken)(chain, location, status, address, rawBalance, owner, underlyingToken, rawBalance * exchangeRate, contract);
        return newToken;
    };
    exports.addBeltToken = addBeltToken;
    /* ========================================================================================================================================================================= */
    // Function to get SpookySwap token info (xBOO):
    const addSpookyToken = async (chain, location, status, rawBalance, owner, contract) => {
        const xboo = '0xa48d959AE2E88f1dAA7D5F611E01908106dE7598';
        const boo = '0x841FAD6EAe12c286d1Fd18d1d525DFfA75C7EFFE';
        let booStaked = parseInt(await (0, require$$1$1.query)(chain, boo, ABIs.minABI, 'balanceOf', [xboo]));
        let xbooSupply = parseInt(await (0, require$$1$1.query)(chain, xboo, ABIs.minABI, 'totalSupply', []));
        let newToken = await (0, require$$1$1.addXToken)(chain, location, status, xboo, rawBalance, owner, boo, rawBalance * (booStaked / xbooSupply), contract);
        return newToken;
    };
    exports.addSpookyToken = addSpookyToken;
    /* ========================================================================================================================================================================= */
    // Function to get Aave BLP token info:
    const addAaveBLPToken = async (chain, location, status, address, rawBalance, owner, contract) => {
        // Initializing Token Values:
        let type = 'lpToken';
        let symbol = await (0, require$$1$1.query)(chain, address, ABIs.minABI, 'symbol', []);
        let decimals = parseInt(await (0, require$$1$1.query)(chain, address, ABIs.minABI, 'decimals', []));
        let balance = rawBalance / (10 ** decimals);
        address = await (0, require$$1$1.query)(chain, address, ABIs.aave.lpABI, 'bPool', []);
        // Finding LP Token Info:
        let lpTokenSupply = await (0, require$$1$1.query)(chain, address, ABIs.minABI, 'totalSupply', []) / (10 ** decimals);
        let lpTokenAddresses = await (0, require$$1$1.query)(chain, address, ABIs.balancer.tokenABI, 'getCurrentTokens', []);
        let address0 = lpTokenAddresses[0];
        let address1 = lpTokenAddresses[1];
        let supply0 = await (0, require$$1$1.query)(chain, address, ABIs.balancer.tokenABI, 'getBalance', [address0]) / (10 ** decimals);
        let supply1 = await (0, require$$1$1.query)(chain, address, ABIs.balancer.tokenABI, 'getBalance', [address1]) / (10 ** decimals);
        let decimals0 = parseInt(await (0, require$$1$1.query)(chain, address0, ABIs.minABI, 'decimals', []));
        let decimals1 = parseInt(await (0, require$$1$1.query)(chain, address1, ABIs.minABI, 'decimals', []));
        let symbol0 = await (0, require$$1$1.query)(chain, address0, ABIs.minABI, 'symbol', []);
        let symbol1 = await (0, require$$1$1.query)(chain, address1, ABIs.minABI, 'symbol', []);
        // First Paired Token:
        let token0 = {
            symbol: symbol0,
            address: address0,
            balance: supply0 * (balance / lpTokenSupply),
            price: await (0, require$$0$1.getTokenPrice)(chain, address0, decimals0),
            logo: (0, require$$1$1.getTokenLogo)(chain, symbol0)
        };
        // Second Paired Token:
        let token1 = {
            symbol: symbol1,
            address: address1,
            balance: supply1 * (balance / lpTokenSupply),
            price: await (0, require$$0$1.getTokenPrice)(chain, address1, decimals1),
            logo: (0, require$$1$1.getTokenLogo)(chain, symbol1)
        };
        return { type, chain, location, status, owner, symbol, address, balance, token0, token1, contract };
    };
    exports.addAaveBLPToken = addAaveBLPToken;
    /* ========================================================================================================================================================================= */
    // Function to get 4Belt token info:
    const add4BeltToken = async (chain, location, status, address, rawBalance, owner, contract) => {
        // Initializing Token Values:
        let type = 'token';
        let symbol = '4Belt';
        let decimals = 18;
        let balance = rawBalance / (10 ** decimals);
        let logo = (0, require$$1$1.getTokenLogo)(chain, symbol);
        let price = 1;
        return { type, chain, location, status, owner, symbol, address, balance, price, logo, contract };
    };
    exports.add4BeltToken = add4BeltToken;
    /* ========================================================================================================================================================================= */
    // Function to get Alpaca token info:
    const addAlpacaToken = async (chain, location, status, address, rawBalance, owner, contract) => {
        // Initializing Token Values:
        let type = 'token';
        let symbol = await (0, require$$1$1.query)(chain, address, ABIs.minABI, 'symbol', []);
        let decimals = parseInt(await (0, require$$1$1.query)(chain, address, ABIs.minABI, 'decimals', []));
        let balance = rawBalance / (10 ** decimals);
        let logo = (0, require$$1$1.getTokenLogo)(chain, symbol);
        // Finding Token Price:
        let totalToken = parseInt(await (0, require$$1$1.query)(chain, address, ABIs.alpaca.tokenABI, 'totalToken', []));
        let totalSupply = parseInt(await (0, require$$1$1.query)(chain, address, ABIs.minABI, 'totalSupply', []));
        let multiplier = totalToken / totalSupply;
        let underlyingToken = await (0, require$$1$1.query)(chain, address, ABIs.alpaca.tokenABI, 'token', []);
        let price = multiplier * (await (0, require$$0$1.getTokenPrice)(chain, underlyingToken, decimals));
        return { type, chain, location, status, owner, symbol, address, balance, price, logo, contract };
    };
    exports.addAlpacaToken = addAlpacaToken;
    /* ========================================================================================================================================================================= */
    // Function to get Curve token info:
    const addCurveToken = async (chain, location, status, lpToken, rawBalance, owner, contract) => {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var _k, _l, _m, _o, _p, _q, _r, _s, _t;
        // Initializations:
        const addressProvider = '0x0000000022D53366457F9d5E68Ec105046FC4383';
        let registry = 'base';
        let poolAddress;
        let poolMultiplier;
        let poolInfo = [];
        // Initializing Multicalls:
        const providerCalls = [
            { reference: 'registry', methodName: 'get_address', methodParameters: [0] },
            { reference: 'poolInfoGetter', methodName: 'get_address', methodParameters: [1] },
            { reference: 'factoryRegistry', methodName: 'get_address', methodParameters: [3] },
            { reference: 'cryptoRegistry', methodName: 'get_address', methodParameters: [5] }
        ];
        const lpCalls = [
            { reference: 'symbol', methodName: 'symbol', methodParameters: [] },
            { reference: 'decimals', methodName: 'decimals', methodParameters: [] },
            { reference: 'totalSupply', methodName: 'totalSupply', methodParameters: [] }
        ];
        // Fetching Addresses:
        let providerMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, addressProvider, ABIs.curve.providerABI, providerCalls);
        let baseRegistry = providerMulticallResults['registry'][0];
        let poolInfoGetter = providerMulticallResults['poolInfoGetter'][0];
        let factoryRegistry = providerMulticallResults['factoryRegistry'][0];
        let cryptoRegistry = providerMulticallResults['cryptoRegistry'][0];
        // Fetching LP Token Info:
        let lpMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, lpToken, ABIs.lpABI, lpCalls);
        let symbol = lpMulticallResults['symbol'][0];
        let decimals = lpMulticallResults['decimals'][0];
        let totalSupply = (0, require$$1$1.parseBN)(lpMulticallResults['totalSupply'][0]) / (10 ** decimals);
        let balance = rawBalance / (10 ** decimals);
        // Finding Pool Address & Multiplier:
        poolAddress = await (0, require$$1$1.query)(chain, baseRegistry, ABIs.curve.registryABI, 'get_pool_from_lp_token', [lpToken]);
        if (poolAddress == require$$1$1.zero) {
            poolAddress = await (0, require$$1$1.query)(chain, cryptoRegistry, ABIs.curve.registryABI, 'get_pool_from_lp_token', [lpToken]);
            registry = 'crypto';
            if (poolAddress == require$$1$1.zero) {
                poolAddress = lpToken;
                registry = 'factory';
            }
        }
        // Fetching Pool Info From CryptoRegistry:
        if (registry === 'crypto') {
            let registryCalls = [
                { reference: 'multiplier', methodName: 'get_virtual_price_from_lp_token', methodParameters: [lpToken] },
                { reference: 'coins', methodName: 'get_coins', methodParameters: [poolAddress] },
                { reference: 'balances', methodName: 'get_balances', methodParameters: [poolAddress] },
                { reference: 'decimals', methodName: 'get_decimals', methodParameters: [poolAddress] }
            ];
            let registryMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, cryptoRegistry, ABIs.curve.cryptoRegistryABI, registryCalls);
            poolMultiplier = (0, require$$1$1.parseBN)(registryMulticallResults['multiplier'][0]) / (10 ** decimals);
            let coins = registryMulticallResults['coins'].filter((coin) => coin != require$$1$1.zero);
            let coinBalances = registryMulticallResults['balances'];
            let coinDecimals = registryMulticallResults['decimals'];
            for (let i = 0; i < coins.length; i++) {
                poolInfo.push({
                    coin: coins[i],
                    decimals: (0, require$$1$1.parseBN)(coinDecimals[i]),
                    balance: (0, require$$1$1.parseBN)(coinBalances[i])
                });
            }
            // Fetching Pool Info From Factory:
        }
        else if (registry === 'factory') {
            let coins = (await (0, require$$1$1.query)(chain, factoryRegistry, ABIs.curve.factoryABI, 'get_coins', [poolAddress])).filter((coin) => coin != require$$1$1.zero);
            if (coins.length > 0) {
                poolMultiplier = 1;
                let isMetaPool = await (0, require$$1$1.query)(chain, factoryRegistry, ABIs.curve.factoryABI, 'is_meta', [poolAddress]);
                if (isMetaPool) {
                    let factoryCalls = [
                        { reference: 'underlyingCoins', methodName: 'get_underlying_coins', methodParameters: [poolAddress] },
                        { reference: 'underlyingBalances', methodName: 'get_underlying_balances', methodParameters: [poolAddress] },
                        { reference: 'underlyingDecimals', methodName: 'get_underlying_decimals', methodParameters: [poolAddress] }
                    ];
                    let factoryMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, factoryRegistry, ABIs.curve.factoryABI, factoryCalls);
                    let underlyingCoins = factoryMulticallResults['underlyingCoins'].filter((coin) => coin != require$$1$1.zero);
                    let underlyingBalances = factoryMulticallResults['underlyingBalances'];
                    let underlyingDecimals = factoryMulticallResults['underlyingDecimals'];
                    for (let i = 0; i < underlyingCoins.length; i++) {
                        poolInfo.push({
                            coin: underlyingCoins[i],
                            decimals: (0, require$$1$1.parseBN)(underlyingDecimals[i]),
                            balance: (0, require$$1$1.parseBN)(underlyingBalances[i])
                        });
                    }
                }
                else {
                    let factoryCalls = [
                        { reference: 'balances', methodName: 'get_balances', methodParameters: [poolAddress] },
                        { reference: 'decimals', methodName: 'get_decimals', methodParameters: [poolAddress] }
                    ];
                    let factoryMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, factoryRegistry, ABIs.curve.factoryABI, factoryCalls);
                    let coinBalances = factoryMulticallResults['balances'];
                    let coinDecimals = factoryMulticallResults['decimals'];
                    for (let i = 0; i < coins.length; i++) {
                        poolInfo.push({
                            coin: coins[i],
                            decimals: (0, require$$1$1.parseBN)(coinDecimals[i]),
                            balance: (0, require$$1$1.parseBN)(coinBalances[i])
                        });
                    }
                }
            }
            else {
                throw new error.WeaverError(chain, null, `Unidentified Curve pool found`);
            }
            // Fetching Pool Info From Registry & PoolInfoGetter:
        }
        else {
            poolMultiplier = parseInt(await (0, require$$1$1.query)(chain, baseRegistry, ABIs.curve.registryABI, 'get_virtual_price_from_lp_token', [lpToken])) / (10 ** decimals);
            let getterCalls = [
                { reference: 'coins', methodName: 'get_pool_coins', methodParameters: [poolAddress] },
                { reference: 'info', methodName: 'get_pool_info', methodParameters: [poolAddress] }
            ];
            let getterMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, poolInfoGetter, ABIs.curve.poolInfoGetterABI, getterCalls);
            let coins = getterMulticallResults['coins'][0].filter((coin) => coin != require$$1$1.zero);
            let underlyingCoins = getterMulticallResults['coins'][1];
            let coinDecimals = getterMulticallResults['coins'][2];
            let underlyingDecimals = getterMulticallResults['coins'][3];
            let coinBalances = getterMulticallResults['info'][0];
            let underlyingBalances = getterMulticallResults['info'][1];
            for (let i = 0; i < coins.length; i++) {
                poolInfo.push({
                    coin: coins[i],
                    decimals: (0, require$$1$1.parseBN)(coinDecimals[i]),
                    balance: (0, require$$1$1.parseBN)(coinBalances[i]),
                    underlyingCoin: underlyingCoins[i],
                    underlyingDecimals: (0, require$$1$1.parseBN)(underlyingDecimals[i]),
                    underlyingBalance: (0, require$$1$1.parseBN)(underlyingBalances[i])
                });
            }
        }
        // Standard LP Tokens:
        if (poolInfo.length === 2) {
            // Initializing Token Values:
            let type = 'lpToken';
            let address0 = (_a = (_k = poolInfo[0]).underlyingCoin) !== null && _a !== void 0 ? _a : (_k.underlyingCoin = poolInfo[0].coin);
            let address1 = (_b = (_l = poolInfo[1]).underlyingCoin) !== null && _b !== void 0 ? _b : (_l.underlyingCoin = poolInfo[1].coin);
            let supply0 = (_c = (_m = poolInfo[0]).underlyingBalance) !== null && _c !== void 0 ? _c : (_m.underlyingBalance = poolInfo[0].balance);
            let supply1 = (_d = (_o = poolInfo[1]).underlyingBalance) !== null && _d !== void 0 ? _d : (_o.underlyingBalance = poolInfo[1].balance);
            let decimals0 = (_e = (_p = poolInfo[0]).underlyingDecimals) !== null && _e !== void 0 ? _e : (_p.underlyingDecimals = poolInfo[0].decimals);
            let decimals1 = (_f = (_q = poolInfo[1]).underlyingDecimals) !== null && _f !== void 0 ? _f : (_q.underlyingDecimals = poolInfo[1].decimals);
            // Fetching Underlying Token Symbols:
            let multicallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, [address0, address1], ABIs.minABI, 'symbol', []);
            let symbol0 = multicallResults[address0][0];
            let symbol1 = multicallResults[address1][0];
            // First Paired Token:
            let token0 = {
                symbol: symbol0,
                address: address0,
                balance: (supply0 / (10 ** decimals0)) * (balance / totalSupply),
                price: await (0, require$$0$1.getTokenPrice)(chain, address0, decimals0),
                logo: (0, require$$1$1.getTokenLogo)(chain, symbol0)
            };
            // Second Paired Token:
            let token1 = {
                symbol: symbol1,
                address: address1,
                balance: (supply1 / (10 ** decimals1)) * (balance / totalSupply),
                price: await (0, require$$0$1.getTokenPrice)(chain, address1, decimals1),
                logo: (0, require$$1$1.getTokenLogo)(chain, symbol1)
            };
            return { type, chain, location, status, owner, symbol, address: lpToken, balance, token0, token1, contract };
            // Other:
        }
        else {
            // Initializing Token Values:
            let type = 'token';
            // Fetching Token Logo:
            let logo = (0, require$$1$1.getTokenLogo)(chain, symbol);
            // Calculating Token Price:
            let price = 0;
            for (let i = 0; i < poolInfo.length; i++) {
                let address = (_g = (_r = poolInfo[i]).underlyingCoin) !== null && _g !== void 0 ? _g : (_r.underlyingCoin = poolInfo[i].coin);
                let supply = (_h = (_s = poolInfo[i]).underlyingBalance) !== null && _h !== void 0 ? _h : (_s.underlyingBalance = poolInfo[i].balance);
                let decimals = (_j = (_t = poolInfo[i]).underlyingDecimals) !== null && _j !== void 0 ? _j : (_t.underlyingDecimals = poolInfo[i].decimals);
                let tokenPrice = await (0, require$$0$1.getTokenPrice)(chain, address, decimals);
                price += (supply / (10 ** decimals)) * tokenPrice;
            }
            price /= totalSupply;
            price *= poolMultiplier;
            return { type, chain, location, status, owner, symbol, address: lpToken, balance, price, logo, contract };
        }
    };
    exports.addCurveToken = addCurveToken;
    /* ========================================================================================================================================================================= */
    // Function to get BZX token info:
    const addBZXToken = async (chain, location, status, address, rawBalance, owner, contract) => {
        // Initializing Token Values:
        let type = 'token';
        let symbol = await (0, require$$1$1.query)(chain, address, ABIs.minABI, 'symbol', []);
        let decimals = parseInt(await (0, require$$1$1.query)(chain, address, ABIs.minABI, 'decimals', []));
        let balance = rawBalance / (10 ** decimals);
        let logo = (0, require$$1$1.getTokenLogo)(chain, symbol);
        // Finding Token Price:
        let multiplier = parseInt(await (0, require$$1$1.query)(chain, address, ABIs.bzx.tokenABI, 'tokenPrice', [])) / (10 ** decimals);
        let underlyingToken = await (0, require$$1$1.query)(chain, address, ABIs.bzx.tokenABI, 'loanTokenAddress', []);
        let price = multiplier * (await (0, require$$0$1.getTokenPrice)(chain, underlyingToken, decimals));
        return { type, chain, location, status, owner, symbol, address, balance, price, logo, contract };
    };
    exports.addBZXToken = addBZXToken;
    /* ========================================================================================================================================================================= */
    // Function to get Balancer LP token info:
    const addBalancerToken = async (chain, location, status, address, rawBalance, owner, contract) => {
        return await (0, exports.addBalancerLikeToken)(chain, location, status, address, rawBalance, owner, '0xBA12222222228d8Ba445958a75a0704d566BF2C8', contract);
    };
    exports.addBalancerToken = addBalancerToken;
    // Function to get Balancer-like LP token info:
    const addBalancerLikeToken = async (chain, location, status, address, rawBalance, owner, vault, contract) => {
        // Initializing Multicalls:
        const tokenCalls = [
            { reference: 'poolID', methodName: 'getPoolId', methodParameters: [] },
            { reference: 'symbol', methodName: 'symbol', methodParameters: [] },
            { reference: 'decimals', methodName: 'decimals', methodParameters: [] },
            { reference: 'totalSupply', methodName: 'totalSupply', methodParameters: [] }
        ];
        const underlyingCalls = [
            { reference: 'symbol', methodName: 'symbol', methodParameters: [] },
            { reference: 'decimals', methodName: 'decimals', methodParameters: [] }
        ];
        // Generic Token Values:
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, address, ABIs.minABI.concat(ABIs.balancer.poolABI), tokenCalls);
        let poolID = multicallResults['poolID'][0];
        let symbol = multicallResults['symbol'][0];
        let decimals = multicallResults['decimals'][0];
        let lpTokenSupply = (0, require$$1$1.parseBN)(multicallResults['totalSupply'][0]);
        let balance = rawBalance / (10 ** decimals);
        // Finding Pool Info:
        let poolInfo = await (0, require$$1$1.query)(chain, vault, ABIs.balancer.vaultABI, 'getPoolTokens', [poolID]);
        // Standard LP Tokens:
        if (poolInfo.tokens.length === 2) {
            // Initializing Token Values:
            let type = 'lpToken';
            // Finding LP Token Info:
            let address0 = poolInfo.tokens[0];
            let address1 = poolInfo.tokens[1];
            let token0MulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, address0, ABIs.minABI, underlyingCalls);
            let symbol0 = token0MulticallResults['symbol'][0];
            let decimals0 = token0MulticallResults['decimals'][0];
            let token1MulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, address1, ABIs.minABI, underlyingCalls);
            let symbol1 = token1MulticallResults['symbol'][0];
            let decimals1 = token1MulticallResults['decimals'][0];
            // First Paired Token:
            let token0 = {
                symbol: symbol0,
                address: address0,
                balance: (parseInt(poolInfo.balances[0]) * (balance / lpTokenSupply)) / (10 ** decimals0),
                price: await (0, require$$0$1.getTokenPrice)(chain, address0, decimals0),
                logo: (0, require$$1$1.getTokenLogo)(chain, symbol0)
            };
            // Second Paired Token:
            let token1 = {
                symbol: symbol1,
                address: address1,
                balance: (parseInt(poolInfo.balances[1]) * (balance / lpTokenSupply)) / (10 ** decimals1),
                price: await (0, require$$0$1.getTokenPrice)(chain, address1, decimals1),
                logo: (0, require$$1$1.getTokenLogo)(chain, symbol1)
            };
            return { type, chain, location, status, owner, symbol, address, balance, token0, token1, contract };
            // Others:
        }
        else {
            // Initializing Token Values:
            let type = 'token';
            let logo = (0, require$$1$1.getTokenLogo)(chain, symbol);
            // Finding Token Price:
            let priceSum = 0;
            for (let i = 0; i < poolInfo.tokens.length; i++) {
                let tokenDecimals = parseInt(await (0, require$$1$1.query)(chain, poolInfo.tokens[i], ABIs.minABI, 'decimals', []));
                let tokenPrice = await (0, require$$0$1.getTokenPrice)(chain, poolInfo.tokens[i], tokenDecimals);
                priceSum += (parseInt(poolInfo.balances[i]) / (10 ** tokenDecimals)) * tokenPrice;
            }
            let price = priceSum / (lpTokenSupply / (10 ** decimals));
            return { type, chain, location, status, owner, symbol, address, balance, price, logo, contract };
        }
    };
    exports.addBalancerLikeToken = addBalancerLikeToken;
    /* ========================================================================================================================================================================= */
    // Function to get Axial token info:
    const addAxialToken = async (chain, location, status, address, rawBalance, owner, contract) => {
        // Initializing Token Values:
        let type = 'token';
        let symbol = await (0, require$$1$1.query)(chain, address, ABIs.minABI, 'symbol', []);
        let decimals = parseInt(await (0, require$$1$1.query)(chain, address, ABIs.minABI, 'decimals', []));
        let balance = rawBalance / (10 ** decimals);
        let logo = (0, require$$1$1.getTokenLogo)(chain, symbol);
        // Finding Token Price:
        let swapAddress = await (0, require$$1$1.query)(chain, address, ABIs.axial.tokenABI, 'owner', []);
        let price = parseInt(await (0, require$$1$1.query)(chain, swapAddress, ABIs.axial.swapABI, 'getVirtualPrice', [])) / (10 ** decimals);
        return { type, chain, location, status, owner, symbol, address, balance, price, logo, contract };
    };
    exports.addAxialToken = addAxialToken;
    /* ========================================================================================================================================================================= */
    // Function to get mStable token info:
    const addStableToken = async (chain, location, status, address, rawBalance, owner, contract) => {
        // Initializing Token Values:
        let type = 'token';
        let symbol = await (0, require$$1$1.query)(chain, address, ABIs.minABI, 'symbol', []);
        let decimals = parseInt(await (0, require$$1$1.query)(chain, address, ABIs.minABI, 'decimals', []));
        let balance = rawBalance / (10 ** decimals);
        let logo = require$$1$1.defaultTokenLogo;
        // Finding Token Price:
        let price = parseInt((await (0, require$$1$1.query)(chain, address, ABIs.mstable.stableABI, 'getPrice', [])).price) / (10 ** decimals);
        // Finding Token Symbol:
        logo = price > 1000 ? (0, require$$1$1.getTokenLogo)(chain, 'mBTC') : (0, require$$1$1.getTokenLogo)(chain, 'mUSD');
        return { type, chain, location, status, owner, symbol, address, balance, price, logo, contract };
    };
    exports.addStableToken = addStableToken;
    });

    var autofarm$3 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getVaultBalances = exports.get = void 0;
    // Imports:




    // Initializations:
    const chain = 'avax';
    const project = 'autofarm';
    const registry = '0x864A0B7F8466247A0e44558D29cDC37D4623F213';
    const ignoredVaults = [67, 77, 79];
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getVaultBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getVaultBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get all vault balances:
    const getVaultBalances = async (wallet) => {
        let balances = [];
        let poolLength = parseInt(await (0, require$$1$1.query)(chain, registry, ABIs.autofarm.registryABI, 'poolLength', []));
        let vaults = [...Array(poolLength).keys()];
        // Balance Multicall Query:
        let calls = [];
        vaults.forEach(vaultID => {
            if (!ignoredVaults.includes(vaultID)) {
                calls.push({ reference: vaultID.toString(), methodName: 'stakedWantTokens', methodParameters: [vaultID, wallet] });
            }
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, registry, ABIs.autofarm.registryABI, calls);
        let promises = vaults.map(vaultID => (async () => {
            let balanceResults = multicallResults[vaultID];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 99) {
                    let token = (await (0, require$$1$1.query)(chain, registry, ABIs.autofarm.registryABI, 'poolInfo', [vaultID]))[0];
                    let symbol = await (0, require$$1$1.query)(chain, token, ABIs.minABI, 'symbol', []);
                    // xJOE Vault:
                    if (vaultID === 17) {
                        let newToken = await (0, projectFunctions.addTraderJoeToken)(chain, project, 'staked', balance, wallet);
                        balances.push(newToken);
                        // LP Token Vaults:
                    }
                    else if (symbol.includes('LP') || symbol === 'PGL') {
                        let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', token, balance, wallet);
                        balances.push(newToken);
                        // Single-Asset Vaults:
                    }
                    else {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', token, balance, wallet);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getVaultBalances = getVaultBalances;
    });

    var avalaunch = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getStakedLP = exports.getStakedXAVA = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'avax';
    const project = 'avalaunch';
    const staking = '0xA6A01f4b494243d84cf8030d982D7EeB2AeCd329';
    const lpStaking = '0x6E125b68F0f1963b09add1b755049e66f53CC1EA';
    const lpToken = '0x42152bDD72dE8d6767FE3B4E17a221D6985E8B25';
    const xava = '0xd1c3f94de7e5b45fa4edbba472491a9f4b166fc4';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getStakedXAVA)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getStakedXAVA()', err); })));
        balance.push(...(await (0, exports.getStakedLP)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getStakedLP()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get staked XAVA balance:
    const getStakedXAVA = async (wallet) => {
        let xavaBalance = 0;
        let balance = parseInt(await (0, require$$1$1.query)(chain, staking, ABIs.avalaunch.stakingABI, 'deposited', [0, wallet]));
        if (balance > 0) {
            xavaBalance += balance;
            let pendingXAVA = parseInt(await (0, require$$1$1.query)(chain, staking, ABIs.avalaunch.stakingABI, 'pending', [0, wallet]));
            if (pendingXAVA > 0) {
                xavaBalance += pendingXAVA;
            }
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', xava, xavaBalance, wallet);
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getStakedXAVA = getStakedXAVA;
    // Function to get staked LP balance:
    const getStakedLP = async (wallet) => {
        let balances = [];
        let balance = parseInt(await (0, require$$1$1.query)(chain, lpStaking, ABIs.avalaunch.stakingABI, 'deposited', [0, wallet]));
        if (balance > 0) {
            let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', lpToken, balance, wallet);
            balances.push(newToken);
            let pendingXAVA = parseInt(await (0, require$$1$1.query)(chain, lpStaking, ABIs.avalaunch.stakingABI, 'pending', [0, wallet]));
            if (pendingXAVA > 0) {
                let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', xava, pendingXAVA, wallet);
                balances.push(newToken);
            }
        }
        return balances;
    };
    exports.getStakedLP = getStakedLP;
    });

    var axial = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getStakedAXIAL = exports.getPoolBalancesV2 = exports.getPoolBalances = exports.get = void 0;
    // Imports:




    // Initializations:
    const chain = 'avax';
    const project = 'axial';
    const masterChef = '0x958C0d0baA8F220846d3966742D4Fb5edc5493D3';
    const gaugeProxy = '0x3d09A80369071E6AC91634e0Bf889EE54Dd510C6';
    const sAXIAL = '0xed7f93C8FD3B96B53c924F601B3948175D2820D8';
    const veAXIAL = '0x3f563F7efc6dC55adFc1B64BC6Bd4bC5F394c4b2';
    const axialToken = '0xcF8419A615c57511807236751c0AF38Db4ba3351';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getPoolBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getPoolBalances()', err); })));
        balance.push(...(await (0, exports.getPoolBalancesV2)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getPoolBalancesV2()', err); })));
        balance.push(...(await (0, exports.getStakedAXIAL)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getStakedAXIAL()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get all pool balances:
    const getPoolBalances = async (wallet) => {
        let balances = [];
        let poolCount = parseInt(await (0, require$$1$1.query)(chain, masterChef, ABIs.axial.masterChefABI, 'poolLength', []));
        let pools = [...Array(poolCount).keys()];
        // User Info Multicall Query:
        let calls = [];
        pools.forEach(poolID => {
            calls.push({ reference: poolID.toString(), methodName: 'userInfo', methodParameters: [poolID, wallet] });
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, masterChef, ABIs.axial.masterChefABI, calls);
        let promises = pools.map(poolID => (async () => {
            let userInfoResults = multicallResults[poolID];
            if (userInfoResults) {
                let balance = (0, require$$1$1.parseBN)(userInfoResults[0]);
                if (balance > 0) {
                    let token = (await (0, require$$1$1.query)(chain, masterChef, ABIs.axial.masterChefABI, 'poolInfo', [poolID])).lpToken;
                    let symbol = await (0, require$$1$1.query)(chain, token, ABIs.minABI, 'symbol', []);
                    // Standard LPs:
                    if (symbol === 'JLP' || symbol === 'PGL') {
                        let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', token, balance, wallet);
                        newToken.info = { deprecated: true };
                        balances.push(newToken);
                        // Axial LPs:
                    }
                    else {
                        let newToken = await (0, projectFunctions.addAxialToken)(chain, project, 'staked', token, balance, wallet);
                        newToken.info = { deprecated: true };
                        balances.push(newToken);
                    }
                    // Pending Rewards:
                    let rewards = await (0, require$$1$1.query)(chain, masterChef, ABIs.axial.masterChefABI, 'pendingTokens', [poolID, wallet]);
                    if (rewards.pendingAxial > 0) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', axialToken, rewards.pendingAxial, wallet);
                        balances.push(newToken);
                    }
                    if (rewards.pendingBonusToken > 0) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', rewards.bonusTokenAddress, rewards.pendingBonusToken, wallet);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getPoolBalances = getPoolBalances;
    // Function to get all pool V2 balances:
    const getPoolBalancesV2 = async (wallet) => {
        let balances = [];
        let tokens = await (0, require$$1$1.query)(chain, gaugeProxy, ABIs.axial.gaugeProxyABI, 'tokens', []);
        // Gauge Multicall Query:
        let gaugeCalls = [];
        tokens.forEach(token => {
            gaugeCalls.push({ reference: token, methodName: 'getGauge', methodParameters: [token] });
        });
        let gaugeMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, gaugeProxy, ABIs.axial.gaugeProxyABI, gaugeCalls);
        // Balance Multicall Query:
        let gaugeAddresses = Object.keys(gaugeMulticallResults).map(token => gaugeMulticallResults[token][0]);
        let balanceMulticallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, gaugeAddresses, ABIs.minABI, 'balanceOf', [wallet]);
        let promises = Object.keys(gaugeMulticallResults).map(token => (async () => {
            let gauge = gaugeMulticallResults[token][0];
            if (balanceMulticallResults[gauge]) {
                let balance = (0, require$$1$1.parseBN)(balanceMulticallResults[gauge][0]);
                if (balance > 0) {
                    let newToken = await (0, projectFunctions.addAxialToken)(chain, project, 'staked', token, balance, wallet, gauge);
                    balances.push(newToken);
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getPoolBalancesV2 = getPoolBalancesV2;
    // Function to get staked AXIAL balances:
    const getStakedAXIAL = async (wallet) => {
        let balances = [];
        // sAXIAL Balance:
        let sAxialBalance = parseInt(await (0, require$$1$1.query)(chain, sAXIAL, ABIs.axial.sAxialABI, 'getBalance', [wallet]));
        if (sAxialBalance > 0) {
            let sAxialLock = await (0, require$$1$1.query)(chain, sAXIAL, ABIs.axial.sAxialABI, 'getLock', [wallet]);
            let axialAmount = (0, require$$1$1.parseBN)(sAxialLock.startingAmountLocked);
            let unlock = (0, require$$1$1.parseBN)(sAxialLock.endBlockTime);
            let newToken = await (0, require$$1$1.addXToken)(chain, project, 'staked', sAXIAL, sAxialBalance, wallet, axialToken, axialAmount, sAXIAL);
            newToken.info = { unlock };
            balances.push(newToken);
        }
        // veAXIAL Balance:
        let veAxialBalance = parseInt(await (0, require$$1$1.query)(chain, veAXIAL, ABIs.axial.veAxialABI, 'getAccrued', [wallet]));
        if (veAxialBalance > 0) {
            let axialAmount = parseInt(await (0, require$$1$1.query)(chain, veAXIAL, ABIs.axial.veAxialABI, 'getStaked', [wallet]));
            let newToken = await (0, require$$1$1.addXToken)(chain, project, 'staked', veAXIAL, veAxialBalance, wallet, axialToken, axialAmount, veAXIAL);
            balances.push(newToken);
        }
        return balances;
    };
    exports.getStakedAXIAL = getStakedAXIAL;
    });

    var beefy$3 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getStakedBIFI = exports.getVaultBalances = exports.get = void 0;
    // Imports:




    // Initializations:
    const chain = 'avax';
    const project = 'beefy';
    const staking = '0x86d38c6b6313c5A3021D68D1F57CF5e69197592A';
    const bifi = '0xd6070ae98b8069de6B494332d1A1a81B6179D960';
    const wavax = '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7';
    const apiURL = 'https://api.beefy.finance';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        let vaultsData = await (0, require$$1$1.fetchData)(`${apiURL}/vaults`);
        let apyData = await (0, require$$1$1.fetchData)(`${apiURL}/apy`);
        let vaults = vaultsData.filter(vault => vault.chain === 'avax' && vault.status === 'active');
        if (vaults.length > 0) {
            balance.push(...(await (0, exports.getVaultBalances)(wallet, vaults, apyData).catch((err) => { throw new error.WeaverError(chain, project, 'getVaultBalances()', err); })));
            balance.push(...(await (0, exports.getStakedBIFI)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getStakedBIFI()', err); })));
        }
        else {
            throw new error.WeaverError(chain, project, 'Invalid response from Beefy API');
        }
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get vault balances:
    const getVaultBalances = async (wallet, vaults, apys) => {
        let balances = [];
        // Balance Multicall Query:
        let vaultAddresses = vaults.map(vault => vault.earnedTokenAddress);
        let multicallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, vaultAddresses, ABIs.minABI, 'balanceOf', [wallet]);
        let promises = vaults.map(vault => (async () => {
            let balanceResults = multicallResults[vault.earnedTokenAddress];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 0) {
                    let decimals = parseInt(await (0, require$$1$1.query)(chain, vault.earnedTokenAddress, ABIs.minABI, 'decimals', []));
                    let exchangeRate = parseInt(await (0, require$$1$1.query)(chain, vault.earnedTokenAddress, ABIs.beefy.vaultABI, 'getPricePerFullShare', []));
                    let underlyingBalance = balance * (exchangeRate / (10 ** decimals));
                    // Native Token Vaults:
                    if (!vault.tokenAddress) {
                        if (vault.token === 'AVAX') {
                            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', wavax, underlyingBalance, wallet);
                            let vaultAPY = apys[vault.id];
                            if (vaultAPY) {
                                newToken.info = {
                                    apy: vaultAPY
                                };
                            }
                            balances.push(newToken);
                        }
                    }
                    else {
                        // Curve Vaults:
                        if (vault.platform === 'Curve') {
                            let newToken = await (0, projectFunctions.addCurveToken)(chain, project, 'staked', vault.tokenAddress, underlyingBalance, wallet);
                            let vaultAPY = apys[vault.id];
                            if (vaultAPY) {
                                newToken.info = {
                                    apy: vaultAPY
                                };
                            }
                            balances.push(newToken);
                            // LP Token Vaults:
                        }
                        else if (vault.assets.length === 2) {
                            let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', vault.tokenAddress, underlyingBalance, wallet);
                            let vaultAPY = apys[vault.id];
                            if (vaultAPY) {
                                newToken.info = {
                                    apy: vaultAPY
                                };
                            }
                            balances.push(newToken);
                            // Single-Asset Vaults:
                        }
                        else if (vault.assets.length === 1) {
                            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', vault.tokenAddress, underlyingBalance, wallet);
                            let vaultAPY = apys[vault.id];
                            if (vaultAPY) {
                                newToken.info = {
                                    apy: vaultAPY
                                };
                            }
                            balances.push(newToken);
                        }
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getVaultBalances = getVaultBalances;
    // Function to get staked BIFI balance:
    const getStakedBIFI = async (wallet) => {
        let balances = [];
        let balance = parseInt(await (0, require$$1$1.query)(chain, staking, ABIs.minABI, 'balanceOf', [wallet]));
        if (balance > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', bifi, balance, wallet);
            balances.push(newToken);
        }
        let pendingRewards = parseInt(await (0, require$$1$1.query)(chain, staking, ABIs.beefy.stakingABI, 'earned', [wallet]));
        if (pendingRewards > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', wavax, pendingRewards, wallet);
            balances.push(newToken);
        }
        return balances;
    };
    exports.getStakedBIFI = getStakedBIFI;
    });

    var benqi = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getMarketBalances = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'avax';
    const project = 'benqi';
    const controller = '0x486Af39519B4Dc9a7fCcd318217352830E8AD9b4';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getMarketBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getMarketBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get all market balances and debt:
    const getMarketBalances = async (wallet) => {
        let balances = [];
        let markets = await (0, require$$1$1.query)(chain, controller, ABIs.benqi.controllerABI, 'getAllMarkets', []);
        // Market Balance Multicall Query:
        let abi = ABIs.minABI.concat(ABIs.benqi.marketABI);
        let calls = [
            { reference: 'marketBalance', methodName: 'balanceOf', methodParameters: [wallet] },
            { reference: 'accountSnapshot', methodName: 'getAccountSnapshot', methodParameters: [wallet] }
        ];
        let multicallResults = await (0, require$$1$1.multicallComplexQuery)(chain, markets, abi, calls);
        let promises = markets.map(market => (async () => {
            let marketResults = multicallResults[market];
            if (marketResults) {
                let marketBalanceResults = marketResults['marketBalance'];
                let accountSnapshotResults = marketResults['accountSnapshot'];
                if (marketBalanceResults && accountSnapshotResults) {
                    let balance = (0, require$$1$1.parseBN)(marketBalanceResults[0]);
                    let debt = (0, require$$1$1.parseBN)(accountSnapshotResults[2]);
                    let exchangeRate = (0, require$$1$1.parseBN)(accountSnapshotResults[3]);
                    if (balance > 0 || debt > 0) {
                        let tokenAddress = market.toLowerCase() === '0x5c0401e81bc07ca70fad469b451682c0d747ef1c' ? require$$1$1.defaultAddress : await (0, require$$1$1.query)(chain, market, ABIs.benqi.marketABI, 'underlying', []);
                        // Lending Balances:
                        if (balance > 0) {
                            let underlyingBalance = balance * (exchangeRate / (10 ** 18));
                            let newToken = await (0, require$$1$1.addToken)(chain, project, 'lent', tokenAddress, underlyingBalance, wallet);
                            balances.push(newToken);
                        }
                        // Borrowing Balances:
                        if (debt > 0) {
                            let newToken = await (0, require$$1$1.addDebtToken)(chain, project, tokenAddress, debt, wallet);
                            balances.push(newToken);
                        }
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getMarketBalances = getMarketBalances;
    });

    var cream$4 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getMarketBalances = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'avax';
    const project = 'cream';
    const controller = '0x2eE80614Ccbc5e28654324a66A396458Fa5cD7Cc';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getMarketBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getMarketBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get all market balances and debt:
    const getMarketBalances = async (wallet) => {
        let balances = [];
        let markets = await (0, require$$1$1.query)(chain, controller, ABIs.cream.controllerABI, 'getAllMarkets', []);
        // Market Balance Multicall Query:
        let abi = ABIs.minABI.concat(ABIs.cream.tokenABI);
        let calls = [
            { reference: 'marketBalance', methodName: 'balanceOf', methodParameters: [wallet] },
            { reference: 'borrowBalance', methodName: 'borrowBalanceStored', methodParameters: [wallet] }
        ];
        let multicallResults = await (0, require$$1$1.multicallComplexQuery)(chain, markets, abi, calls);
        let promises = markets.map(market => (async () => {
            let marketResults = multicallResults[market];
            if (marketResults) {
                let marketBalanceResults = marketResults['marketBalance'];
                let borrowingResults = marketResults['borrowBalance'];
                // Lending Balances:
                if (marketBalanceResults) {
                    let balance = (0, require$$1$1.parseBN)(marketBalanceResults[0]);
                    if (balance > 0) {
                        let exchangeRate = parseInt(await (0, require$$1$1.query)(chain, market, ABIs.cream.tokenABI, 'exchangeRateStored', []));
                        let decimals = parseInt(await (0, require$$1$1.query)(chain, market, ABIs.minABI, 'decimals', []));
                        let tokenAddress = await (0, require$$1$1.query)(chain, market, ABIs.cream.tokenABI, 'underlying', []);
                        let underlyingBalance = (balance / (10 ** decimals)) * (exchangeRate / (10 ** (decimals + 2)));
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'lent', tokenAddress, underlyingBalance, wallet);
                        balances.push(newToken);
                    }
                }
                // Borrowing Balances:
                if (borrowingResults) {
                    let debt = (0, require$$1$1.parseBN)(borrowingResults[0]);
                    if (debt > 0) {
                        let tokenAddress = await (0, require$$1$1.query)(chain, market, ABIs.cream.tokenABI, 'underlying', []);
                        let newToken = await (0, require$$1$1.addDebtToken)(chain, project, tokenAddress, debt, wallet);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getMarketBalances = getMarketBalances;
    });

    var curve$3 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getGaugeFactoryPoolBalances = exports.getFactoryPoolBalances = exports.getCryptoPoolBalances = exports.getPoolBalances = exports.get = void 0;
    // Imports:




    // Initializations:
    const chain = 'avax';
    const project = 'curve';
    const registry = '0x8474DdbE98F5aA3179B3B3F5942D724aFcdec9f6';
    const cryptoRegistry = '0x90f421832199e93d01b64DaF378b183809EB0988';
    const factory = '0xb17b674D9c5CB2e441F8e196a2f048A81355d031';
    const gaugeFactory = '0xabC000d88f23Bb45525E447528DBF656A9D55bf5';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getPoolBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getPoolBalances()', err); })));
        balance.push(...(await (0, exports.getCryptoPoolBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getCryptoPoolBalances()', err); })));
        balance.push(...(await (0, exports.getFactoryPoolBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getFactoryPoolBalances()', err); })));
        balance.push(...(await (0, exports.getGaugeFactoryPoolBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getGaugeFactoryPoolBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get pool balances:
    const getPoolBalances = async (wallet) => {
        let balances = [];
        let poolAddresses = await getPoolAddresses(registry);
        // Initializing Multicalls:
        let lpCalls = [];
        let gaugeCalls = [];
        poolAddresses.forEach(poolAddress => { lpCalls.push({ reference: poolAddress, methodName: 'get_lp_token', methodParameters: [poolAddress] }); });
        poolAddresses.forEach(poolAddress => { gaugeCalls.push({ reference: poolAddress, methodName: 'get_gauges', methodParameters: [poolAddress] }); });
        // LP Token Balances:
        let lpMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, registry, ABIs.curve.registryABI, lpCalls);
        let lpTokens = Object.keys(lpMulticallResults).map(pool => lpMulticallResults[pool][0]);
        balances.push(...(await getLPTokenBalances(lpTokens, wallet)));
        // Gauge Balances:
        let gaugeMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, registry, ABIs.curve.registryABI, gaugeCalls);
        let gauges = Object.keys(gaugeMulticallResults).map(pool => gaugeMulticallResults[pool][0][0]).filter(gauge => gauge != require$$1$1.zero);
        balances.push(...(await getGaugeBalances(gauges, wallet)));
        return balances;
    };
    exports.getPoolBalances = getPoolBalances;
    // Function to get crypto pool balances:
    const getCryptoPoolBalances = async (wallet) => {
        let balances = [];
        let poolAddresses = await getPoolAddresses(cryptoRegistry);
        // Initializing Multicalls:
        let lpCalls = [];
        let gaugeCalls = [];
        poolAddresses.forEach(poolAddress => { lpCalls.push({ reference: poolAddress, methodName: 'get_lp_token', methodParameters: [poolAddress] }); });
        poolAddresses.forEach(poolAddress => { gaugeCalls.push({ reference: poolAddress, methodName: 'get_gauges', methodParameters: [poolAddress] }); });
        // LP Token Balances:
        let lpMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, cryptoRegistry, ABIs.curve.registryABI, lpCalls);
        let lpTokens = Object.keys(lpMulticallResults).map(pool => lpMulticallResults[pool][0]);
        balances.push(...(await getLPTokenBalances(lpTokens, wallet)));
        // Gauge Balances:
        let gaugeMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, cryptoRegistry, ABIs.curve.registryABI, gaugeCalls);
        let gauges = Object.keys(gaugeMulticallResults).map(pool => gaugeMulticallResults[pool][0][0]).filter(gauge => gauge != require$$1$1.zero);
        balances.push(...(await getGaugeBalances(gauges, wallet)));
        return balances;
    };
    exports.getCryptoPoolBalances = getCryptoPoolBalances;
    // Function to get factory pool balances:
    const getFactoryPoolBalances = async (wallet) => {
        let balances = [];
        let poolAddresses = await getPoolAddresses(factory);
        // Initializing Multicall:
        let gaugeCalls = [];
        poolAddresses.forEach(poolAddress => { gaugeCalls.push({ reference: poolAddress, methodName: 'get_gauge', methodParameters: [poolAddress] }); });
        // LP Token Balances (same as pools):
        balances.push(...(await getLPTokenBalances(poolAddresses, wallet)));
        // Gauge Balances:
        let gaugeMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, factory, ABIs.curve.factoryABI, gaugeCalls);
        let gauges = Object.keys(gaugeMulticallResults).map(pool => gaugeMulticallResults[pool][0]).filter(gauge => gauge != require$$1$1.zero);
        balances.push(...(await getGaugeBalances(gauges, wallet)));
        return balances;
    };
    exports.getFactoryPoolBalances = getFactoryPoolBalances;
    // Function to get extra gauge factory pool balances (not on any registry):
    const getGaugeFactoryPoolBalances = async (wallet) => {
        let balances = [];
        let gaugeAddresses = await getGaugeAddresses(gaugeFactory);
        // Gauge Balances:
        balances.push(...(await getGaugeBalances(gaugeAddresses, wallet)));
        return balances;
    };
    exports.getGaugeFactoryPoolBalances = getGaugeFactoryPoolBalances;
    /* ========================================================================================================================================================================= */
    // Function to get pool addresses:
    const getPoolAddresses = async (registry) => {
        let poolCount = parseInt(await (0, require$$1$1.query)(chain, registry, ABIs.curve.registryABI, 'pool_count', []));
        let poolIDs = [...Array(poolCount).keys()];
        let poolCalls = [];
        poolIDs.forEach(poolID => {
            poolCalls.push({ reference: poolID.toString(), methodName: 'pool_list', methodParameters: [poolID] });
        });
        let poolMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, registry, ABIs.curve.registryABI, poolCalls);
        let poolAddresses = Object.keys(poolMulticallResults).map(poolID => poolMulticallResults[poolID][0]);
        return poolAddresses;
    };
    // Function to get LP token balances:
    const getLPTokenBalances = async (lpTokens, wallet) => {
        let balances = [];
        if (lpTokens.length > 0) {
            let balanceMulticallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, lpTokens, ABIs.minABI, 'balanceOf', [wallet]);
            let promises = lpTokens.map(lpToken => (async () => {
                let balanceResults = balanceMulticallResults[lpToken];
                if (balanceResults) {
                    let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                    if (balance > 0) {
                        let newToken = await (0, projectFunctions.addCurveToken)(chain, project, 'liquidity', lpToken, balance, wallet);
                        balances.push(newToken);
                    }
                }
            })());
            await Promise.all(promises);
        }
        return balances;
    };
    // Function get gauge balances:
    const getGaugeBalances = async (gauges, wallet) => {
        let balances = [];
        if (gauges.length > 0) {
            let balanceMulticallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, gauges, ABIs.minABI, 'balanceOf', [wallet]);
            let promises = gauges.map(gauge => (async () => {
                let balanceResults = balanceMulticallResults[gauge];
                if (balanceResults) {
                    let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                    if (balance > 0) {
                        let lpToken = await (0, require$$1$1.query)(chain, gauge, ABIs.curve.gaugeABI, 'lp_token', []);
                        let newToken = await (0, projectFunctions.addCurveToken)(chain, project, 'staked', lpToken, balance, wallet);
                        balances.push(newToken);
                        // Pending Rewards:
                        for (let i = 0; i < 2; i++) {
                            let token = await (0, require$$1$1.query)(chain, gauge, ABIs.curve.gaugeABI, 'reward_tokens', [i]);
                            if (token != require$$1$1.zero) {
                                let rewards = parseInt(await (0, require$$1$1.query)(chain, gauge, ABIs.curve.gaugeABI, 'claimable_reward', [wallet, token]));
                                if (rewards > 0) {
                                    let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', token, rewards, wallet);
                                    balances.push(newToken);
                                }
                            }
                        }
                    }
                }
            })());
            await Promise.all(promises);
        }
        return balances;
    };
    // Function to get gauge addresses from extra gauge factories:
    const getGaugeAddresses = async (factory) => {
        let gaugeCount = parseInt(await (0, require$$1$1.query)(chain, gaugeFactory, ABIs.curve.gaugeFactoryABI, 'get_gauge_count', []));
        let gaugeIDs = [...Array(gaugeCount).keys()];
        let gaugeCalls = [];
        gaugeIDs.forEach(gaugeID => {
            gaugeCalls.push({ reference: gaugeID.toString(), methodName: 'get_gauge', methodParameters: [gaugeID] });
        });
        let gaugeMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, factory, ABIs.curve.gaugeFactoryABI, gaugeCalls);
        let gaugeAddresses = Object.keys(gaugeMulticallResults).map(gaugeID => gaugeMulticallResults[gaugeID][0]);
        return gaugeAddresses;
    };
    });

    var cycle = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getStakedCYCLE = exports.getVaultBalances = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'avax';
    const project = 'cycle';
    const distributor = '0x96e9778511cC9F8E5d35652497248131D235005A';
    const pools = [
        '0xE006716Ae6cAA486d77084C1cca1428fb99c877B',
        '0x6140D3ED2426cbB24f07D884106D9018d49d9101',
        '0x3b2EcFD19dC9Ca35097F80fD92e812a53c180CD1' // CYCLE: xCYCLE Accrual
    ];
    const cycleToken = '0x81440C939f2C1E34fc7048E518a637205A632a74';
    const wavax = '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getVaultBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getVaultBalances()', err); })));
        balance.push(...(await (0, exports.getStakedCYCLE)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getStakedCYCLE()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get vault balances:
    const getVaultBalances = async (wallet) => {
        let balances = [];
        let vaultCount = parseInt(await (0, require$$1$1.query)(chain, distributor, ABIs.cycle.distributorABI, 'getVaultRewardsCount', []));
        let vaults = [...Array(vaultCount).keys()];
        let cycleRewards = 0;
        // Vault Address Multicall Query:
        let calls = [];
        vaults.forEach(vaultID => {
            calls.push({ reference: vaultID.toString(), methodName: 'rewards', methodParameters: [vaultID] });
        });
        let vaultMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, distributor, ABIs.cycle.distributorABI, calls);
        // Balance Multicall Query:
        let vaultAddresses = Object.keys(vaultMulticallResults).map(id => vaultMulticallResults[id][0]);
        let balanceMulticallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, vaultAddresses, ABIs.minABI, 'balanceOf', [wallet]);
        let promises = vaultAddresses.map(vaultAddress => (async () => {
            let balanceResults = balanceMulticallResults[vaultAddress];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 0) {
                    let intermediary = await (0, require$$1$1.query)(chain, vaultAddress, ABIs.cycle.vaultABI, 'stakingToken', []);
                    let lpToken = await (0, require$$1$1.query)(chain, intermediary, ABIs.cycle.intermediaryABI, 'LPtoken', []);
                    let actualBalance = parseInt(await (0, require$$1$1.query)(chain, intermediary, ABIs.cycle.intermediaryABI, 'getAccountLP', [wallet]));
                    let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', lpToken, actualBalance, wallet);
                    balances.push(newToken);
                    // Pending CYCLE Rewards:
                    let rewards = parseInt(await (0, require$$1$1.query)(chain, vaultAddress, ABIs.cycle.vaultABI, 'earned', [wallet]));
                    if (rewards > 0) {
                        cycleRewards += rewards;
                    }
                }
            }
        })());
        await Promise.all(promises);
        if (cycleRewards > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', cycleToken, cycleRewards, wallet);
            balances.push(newToken);
        }
        return balances;
    };
    exports.getVaultBalances = getVaultBalances;
    // Function to get staked CYCLE balance in 'Earn' pools:
    const getStakedCYCLE = async (wallet) => {
        let balances = [];
        let promises = pools.map(pool => (async () => {
            let balance = parseInt(await (0, require$$1$1.query)(chain, pool, ABIs.minABI, 'balanceOf', [wallet]));
            if (balance > 0) {
                if (pool === pools[0]) {
                    let lpToken = await (0, require$$1$1.query)(chain, pool, ABIs.cycle.stakingABI, 'stakingToken', []);
                    let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', lpToken, balance, wallet);
                    balances.push(newToken);
                    let rewards = parseInt(await (0, require$$1$1.query)(chain, pool, ABIs.cycle.stakingABI, 'earned', [wallet]));
                    if (rewards > 0) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', cycleToken, rewards, wallet);
                        balances.push(newToken);
                    }
                }
                else if (pool === pools[1]) {
                    let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', cycleToken, balance, wallet);
                    balances.push(newToken);
                    let rewards = parseInt(await (0, require$$1$1.query)(chain, pool, ABIs.cycle.stakingABI, 'earned', [wallet]));
                    if (rewards > 0) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', wavax, rewards, wallet);
                        balances.push(newToken);
                    }
                }
                else if (pool === pools[2]) {
                    let actualBalance = await (0, require$$1$1.query)(chain, pool, ABIs.cycle.stakingABI, 'getAccountCYCLE', [wallet]);
                    let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', cycleToken, actualBalance, wallet);
                    balances.push(newToken);
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getStakedCYCLE = getStakedCYCLE;
    });

    var lostworlds = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getStakedLOST = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'avax';
    const project = 'lostworlds';
    const staking = '0x2cf6625e35b241F30871FAac932dC5946D092631';
    const lost = '0x449674B82F05d498E126Dd6615a1057A9c088f2C';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getStakedLOST)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getStakedLOST()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get staked LOST balance:
    const getStakedLOST = async (wallet) => {
        let balances = [];
        let balance = await (0, require$$1$1.query)(chain, staking, ABIs.lostworlds.stakingABI, 'deposits', [wallet]);
        if (balance > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', lost, balance, wallet, staking);
            balances.push(newToken);
            let rewards = await (0, require$$1$1.query)(chain, staking, ABIs.lostworlds.stakingABI, 'getPendingReward', [wallet]);
            if (rewards > 0) {
                let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', lost, rewards, wallet, staking);
                balances.push(newToken);
            }
        }
        return balances;
    };
    exports.getStakedLOST = getStakedLOST;
    });

    var lydia = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getMaximusFarmBalances = exports.getAutoLYDFarmBalance = exports.getFarmBalances = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'avax';
    const project = 'lydia';
    const registry = '0xFb26525B14048B7BB1F3794F6129176195Db7766';
    const autoLydFarm = '0xA456bB3a9905D56A9b40D6361EDA931ed52d5bED';
    const lyd = '0x4C9B4E1AC6F24CdE3660D5E4Ef1eBF77C710C084';
    const maximusFarms = [
        '0x036fa505E4D6358a772f578B4031c9AF1af5Bd1D',
        '0x7d0Cc15C9d3740E18a27064b8EFfE5EbAA7944e7',
        '0xdF5C8D10685cbdEA26fed99A3BB1142987345013',
        '0x07F9B7b1FeD6a71AF80AC85d1691A4EC0EBE370b',
        '0xad9aC72aAE3dB711CDcC9FD1142bE46742102354',
        '0x15eCF52152C15029557c89CD9CF9Cf148366BFDC',
        '0xeB3dDd62CF53199593811dae4653321Ce26Ec537'
    ];
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getFarmBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getFarmBalances()', err); })));
        balance.push(...(await (0, exports.getAutoLYDFarmBalance)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getAutoLYDFarmBalance()', err); })));
        balance.push(...(await (0, exports.getMaximusFarmBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getMaximusFarmBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get all farm balances:
    const getFarmBalances = async (wallet) => {
        let balances = [];
        let farmCount = parseInt(await (0, require$$1$1.query)(chain, registry, ABIs.lydia.registryABI, 'poolLength', []));
        let farms = [...Array(farmCount).keys()];
        // User Info Multicall Query:
        let calls = [];
        farms.forEach(farmID => {
            calls.push({ reference: farmID.toString(), methodName: 'userInfo', methodParameters: [farmID, wallet] });
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, registry, ABIs.lydia.registryABI, calls);
        let promises = farms.map(farmID => (async () => {
            let userInfoResults = multicallResults[farmID];
            if (userInfoResults) {
                let balance = (0, require$$1$1.parseBN)(userInfoResults[0]);
                if (balance > 0) {
                    let poolInfo = await (0, require$$1$1.query)(chain, registry, ABIs.lydia.registryABI, 'poolInfo', [farmID]);
                    if (poolInfo.lpToken.toLowerCase() === lyd.toLowerCase()) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', poolInfo.lpToken, balance, wallet);
                        balances.push(newToken);
                    }
                    else {
                        let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', poolInfo.lpToken, balance, wallet);
                        balances.push(newToken);
                    }
                    let rewards = await ((0, require$$1$1.query)(chain, registry, ABIs.lydia.registryABI, 'pendingLyd', [farmID, wallet]));
                    if (rewards > 0) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', lyd, rewards, wallet);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getFarmBalances = getFarmBalances;
    // Function to get Auto LYD farm balance:
    const getAutoLYDFarmBalance = async (wallet) => {
        let shares = parseInt(await (0, require$$1$1.query)(chain, autoLydFarm, ABIs.lydia.lydFarmABI, 'sharesOf', [wallet]));
        if (shares > 0) {
            let exchangeRate = parseInt(await (0, require$$1$1.query)(chain, autoLydFarm, ABIs.lydia.lydFarmABI, 'getPricePerFullShare', [])) / (10 ** 18);
            let balance = shares * exchangeRate;
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', lyd, balance, wallet);
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getAutoLYDFarmBalance = getAutoLYDFarmBalance;
    // Function to get Maximus farm balances:
    const getMaximusFarmBalances = async (wallet) => {
        let balances = [];
        // Balance Multicall Query:
        let multicallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, maximusFarms, ABIs.minABI, 'balanceOf', [wallet]);
        let promises = maximusFarms.map(farm => (async () => {
            let balanceResults = multicallResults[farm];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 0) {
                    let lpToken = await (0, require$$1$1.query)(chain, farm, ABIs.lydia.maximusFarmABI, 'stakingToken', []);
                    let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', lpToken, balance, wallet);
                    balances.push(newToken);
                    let rewards = parseInt(await (0, require$$1$1.query)(chain, farm, ABIs.lydia.maximusFarmABI, 'earned', [wallet]));
                    if (rewards > 0) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', lyd, rewards, wallet);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getMaximusFarmBalances = getMaximusFarmBalances;
    });

    var pangolin = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFarmBalances = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'avax';
    const project = 'pangolin';
    const controller = '0x1f806f7C8dED893fd3caE279191ad7Aa3798E928';
    const png = '0x60781c2586d68229fde47564546784ab3faca982';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getFarmBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getFarmBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get farm balances:
    const getFarmBalances = async (wallet) => {
        let balances = [];
        let pngRewards = 0;
        let poolCount = parseInt(await (0, require$$1$1.query)(chain, controller, ABIs.pangolin.controllerABI, 'poolLength', []));
        let farms = [...Array(poolCount).keys()];
        // User Info Multicall Query:
        let calls = [];
        farms.forEach(farmID => {
            calls.push({ reference: farmID.toString(), methodName: 'userInfo', methodParameters: [farmID, wallet] });
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, controller, ABIs.pangolin.controllerABI, calls);
        let promises = farms.map(farmID => (async () => {
            let userInfoResults = multicallResults[farmID];
            if (userInfoResults) {
                let balance = (0, require$$1$1.parseBN)(userInfoResults[0]);
                if (balance > 0) {
                    let lpToken = await (0, require$$1$1.query)(chain, controller, ABIs.pangolin.controllerABI, 'lpToken', [farmID]);
                    let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', lpToken, balance, wallet);
                    balances.push(newToken);
                    // Pending PNG Rewards:
                    let rewards = parseInt(await (0, require$$1$1.query)(chain, controller, ABIs.pangolin.controllerABI, 'pendingReward', [farmID, wallet]));
                    if (rewards > 0) {
                        pngRewards += rewards;
                    }
                }
            }
        })());
        await Promise.all(promises);
        if (pngRewards > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', png, pngRewards, wallet);
            balances.push(newToken);
        }
        return balances;
    };
    exports.getFarmBalances = getFarmBalances;
    });

    var penguin = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getClubPenguinBalance = exports.getStakedPEFI = exports.getIglooBalances = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'avax';
    const project = 'penguin';
    const iglooMaster = '0x256040dc7b3CECF73a759634fc68aA60EA0D68CB';
    const clubPenguin = '0x86e8935a8F20231dB4b44A2ac3848Fbf44d22ec8';
    const pefi = '0xe896CDeaAC9615145c0cA09C8Cd5C25bced6384c';
    const ipefi = '0xE9476e16FE488B90ada9Ab5C7c2ADa81014Ba9Ee';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getIglooBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getIglooBalances()', err); })));
        balance.push(...(await (0, exports.getStakedPEFI)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getStakedPEFI()', err); })));
        balance.push(...(await (0, exports.getClubPenguinBalance)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getClubPenguinBalance()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get Igloo balances:
    const getIglooBalances = async (wallet) => {
        let balances = [];
        let iglooCount = parseInt(await (0, require$$1$1.query)(chain, iglooMaster, ABIs.penguin.masterABI, 'poolLength', []));
        let igloos = [...Array(iglooCount).keys()];
        let pefiRewards = 0;
        // User Info Multicall Query:
        let calls = [];
        igloos.forEach(iglooID => {
            calls.push({ reference: iglooID.toString(), methodName: 'userInfo', methodParameters: [iglooID, wallet] });
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, iglooMaster, ABIs.penguin.masterABI, calls);
        let promises = igloos.map(iglooID => (async () => {
            let userInfoResults = multicallResults[iglooID];
            if (userInfoResults) {
                let balance = (0, require$$1$1.parseBN)(userInfoResults[0]);
                if (balance > 0) {
                    let token = (await (0, require$$1$1.query)(chain, iglooMaster, ABIs.penguin.masterABI, 'poolInfo', [iglooID])).poolToken;
                    let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', token, balance, wallet);
                    balances.push(newToken);
                    let pendingPEFI = parseInt(await (0, require$$1$1.query)(chain, iglooMaster, ABIs.penguin.masterABI, 'totalPendingPEFI', [iglooID, wallet]));
                    if (pendingPEFI > 0) {
                        pefiRewards += pendingPEFI;
                    }
                    let pendingBonus = await (0, require$$1$1.query)(chain, iglooMaster, ABIs.penguin.masterABI, 'pendingTokens', [iglooID, wallet]);
                    if (pendingBonus[0].length > 2) {
                        if (parseInt(pendingBonus[1][2]) > 0) {
                            let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', pendingBonus[0][2], parseInt(pendingBonus[1][2]), wallet);
                            balances.push(newToken);
                        }
                    }
                }
            }
        })());
        await Promise.all(promises);
        if (pefiRewards > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', pefi, pefiRewards, wallet);
            balances.push(newToken);
        }
        return balances;
    };
    exports.getIglooBalances = getIglooBalances;
    // Function to get iPEFI balance:
    const getStakedPEFI = async (wallet) => {
        let balance = parseInt(await (0, require$$1$1.query)(chain, ipefi, ABIs.minABI, 'balanceOf', [wallet]));
        if (balance > 0) {
            let exchangeRate = parseInt(await (0, require$$1$1.query)(chain, ipefi, ABIs.penguin.nestABI, 'currentExchangeRate', [])) / (10 ** 18);
            let newToken = await (0, require$$1$1.addXToken)(chain, project, 'staked', ipefi, balance, wallet, pefi, balance * exchangeRate);
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getStakedPEFI = getStakedPEFI;
    // Function to get Club Penguin balance:
    const getClubPenguinBalance = async (wallet) => {
        let balance = parseInt(await (0, require$$1$1.query)(chain, clubPenguin, ABIs.minABI, 'balanceOf', [wallet]));
        if (balance > 0) {
            let exchangeRate = parseInt(await (0, require$$1$1.query)(chain, ipefi, ABIs.penguin.nestABI, 'currentExchangeRate', [])) / (10 ** 18);
            let newToken = await (0, require$$1$1.addXToken)(chain, project, 'staked', ipefi, balance, wallet, pefi, balance * exchangeRate);
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getClubPenguinBalance = getClubPenguinBalance;
    });

    var platypus = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFactoryPoolBalances = exports.getPoolBalances = exports.getStakedPTP = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'avax';
    const project = 'platypus';
    const masterChef = '0x68c5f4374228BEEdFa078e77b5ed93C28a2f713E';
    const factoryChef = '0x7125B4211357d7C3a90F796c956c12c681146EbB';
    const ptp = '0x22d4002028f537599be9f666d1c4fa138522f9c8';
    const vePTP = '0x5857019c749147EEE22b1Fe63500F237F3c1B692';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getStakedPTP)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getStakedPTP()', err); })));
        balance.push(...(await (0, exports.getPoolBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getPoolBalances()', err); })));
        balance.push(...(await (0, exports.getFactoryPoolBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getFactoryPoolBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get staked PTP balance:
    const getStakedPTP = async (wallet) => {
        let underlyingBalance = parseInt(await (0, require$$1$1.query)(chain, vePTP, ABIs.platypus.stakingABI, 'getStakedPtp', [wallet]));
        if (underlyingBalance > 0) {
            let balance = parseInt(await (0, require$$1$1.query)(chain, vePTP, ABIs.minABI, 'balanceOf', [wallet]));
            let newToken = await (0, require$$1$1.addXToken)(chain, project, 'staked', vePTP, balance, wallet, ptp, underlyingBalance, vePTP);
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getStakedPTP = getStakedPTP;
    // Function to get pool balances:
    const getPoolBalances = async (wallet) => {
        let balances = [];
        let poolCount = parseInt(await (0, require$$1$1.query)(chain, masterChef, ABIs.platypus.masterChefABI, 'poolLength', []));
        let pools = [...Array(poolCount).keys()];
        // User Info Multicall Query:
        let calls = [];
        pools.forEach(poolID => {
            calls.push({ reference: poolID.toString(), methodName: 'userInfo', methodParameters: [poolID, wallet] });
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, masterChef, ABIs.platypus.masterChefABI, calls);
        let promises = pools.map(poolID => (async () => {
            let userInfoResults = multicallResults[poolID];
            if (userInfoResults) {
                let balance = (0, require$$1$1.parseBN)(userInfoResults[0]);
                if (balance > 0) {
                    let token = (await (0, require$$1$1.query)(chain, masterChef, ABIs.platypus.masterChefABI, 'poolInfo', [poolID])).lpToken;
                    let underlyingToken = await (0, require$$1$1.query)(chain, token, ABIs.platypus.tokenABI, 'underlyingToken', []);
                    let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', underlyingToken, balance, wallet, masterChef);
                    balances.push(newToken);
                    // PTP Rewards:
                    let rewards = await (0, require$$1$1.query)(chain, masterChef, ABIs.platypus.masterChefABI, 'pendingTokens', [poolID, wallet]);
                    let pendingPTP = parseInt(rewards.pendingPtp);
                    if (pendingPTP > 0) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', ptp, pendingPTP, wallet, masterChef);
                        balances.push(newToken);
                    }
                    // Bonus Rewards:
                    let pendingBonus = parseInt(rewards.pendingBonusToken);
                    if (pendingBonus > 0) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', rewards.bonusTokenAddress, pendingBonus, wallet, masterChef);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getPoolBalances = getPoolBalances;
    // Function to get factory pool balances:
    const getFactoryPoolBalances = async (wallet) => {
        let balances = [];
        let poolCount = parseInt(await (0, require$$1$1.query)(chain, factoryChef, ABIs.platypus.factoryChefABI, 'poolLength', []));
        let pools = [...Array(poolCount).keys()];
        // User Info Multicall Query:
        let calls = [];
        pools.forEach(poolID => {
            calls.push({ reference: poolID.toString(), methodName: 'userInfo', methodParameters: [poolID, wallet] });
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, factoryChef, ABIs.platypus.factoryChefABI, calls);
        let promises = pools.map(poolID => (async () => {
            let userInfoResults = multicallResults[poolID];
            if (userInfoResults) {
                let balance = (0, require$$1$1.parseBN)(userInfoResults[0]);
                if (balance > 0) {
                    let token = (await (0, require$$1$1.query)(chain, factoryChef, ABIs.platypus.factoryChefABI, 'poolInfo', [poolID])).lpToken;
                    let underlyingToken = await (0, require$$1$1.query)(chain, token, ABIs.platypus.tokenABI, 'underlyingToken', []);
                    let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', underlyingToken, balance, wallet, factoryChef);
                    balances.push(newToken);
                    // PTP Rewards:
                    let rewards = await (0, require$$1$1.query)(chain, factoryChef, ABIs.platypus.factoryChefABI, 'pendingTokens', [poolID, wallet]);
                    let pendingPTP = parseInt(rewards.pendingPtp);
                    if (pendingPTP > 0) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', ptp, pendingPTP, wallet, factoryChef);
                        balances.push(newToken);
                    }
                    // Bonus Rewards:
                    let pendingBonus = parseInt(rewards.pendingBonusToken);
                    if (pendingBonus > 0) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', rewards.bonusTokenAddress, pendingBonus, wallet, factoryChef);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getFactoryPoolBalances = getFactoryPoolBalances;
    });

    var pooltogether$3 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPoolBalanceV4 = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'avax';
    const project = 'pooltogether';
    const poolTicketV4 = '0xB27f379C050f6eD0973A01667458af6eCeBc1d90';
    const poolDepositV4 = '0xF830F5Cb2422d555EC34178E27094a816c8F95EC';
    const usdc = '0xa7d7079b0fead91f3e65f86e8915cb59c1a4c664';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getPoolBalanceV4)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getPoolBalanceV4()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get V4 pool balance:
    const getPoolBalanceV4 = async (wallet) => {
        let balance = parseInt(await (0, require$$1$1.query)(chain, poolTicketV4, ABIs.minABI, 'balanceOf', [wallet]));
        if (balance > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', usdc, balance, wallet, poolDepositV4);
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getPoolBalanceV4 = getPoolBalanceV4;
    });

    var snowball = createCommonjsModule$4(function (module, exports) {
    var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getStakedSNOB = exports.getFarmBalances = exports.get = void 0;
    // Imports:
    const axios_1 = __importDefault(axios);




    // Initializations:
    const chain = 'avax';
    const project = 'snowball';
    const snob = '0xC38f41A296A4493Ff429F1238e030924A1542e50';
    const xsnob = '0x83952E7ab4aca74ca96217D6F8f7591BEaD6D64E';
    const apiURL = 'https://api.snowapi.net/graphql';
    const apiQuery = { query: '{ LastSnowballInfo { poolsInfo { symbol address lpAddress deprecated yearlyAPY yearlySwapFees gaugeInfo { address snobYearlyAPR } } } }' };
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        let farms = (await axios_1.default.post(apiURL, apiQuery)).data.data.LastSnowballInfo.poolsInfo;
        if (farms.length > 0) {
            balance.push(...(await (0, exports.getFarmBalances)(farms, wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getFarmBalances()', err); })));
            balance.push(...(await (0, exports.getStakedSNOB)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getStakedSNOB()', err); })));
        }
        else {
            throw new error.WeaverError(chain, project, 'Invalid response from Snowball API');
        }
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get farm balances:
    const getFarmBalances = async (farms, wallet) => {
        let balances = [];
        // Balance Multicall Query:
        let farmGaugeAddresses = farms.map(farm => farm.gaugeInfo.address);
        let multicallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, farmGaugeAddresses, ABIs.minABI, 'balanceOf', [wallet]);
        let promises = farms.map(farm => (async () => {
            let balanceResults = multicallResults[farm.gaugeInfo.address];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 0) {
                    let newToken;
                    let exchangeRatio = parseInt(await (0, require$$1$1.query)(chain, farm.address, ABIs.snowball.farmABI, 'getRatio', [])) / (10 ** 18);
                    // Standard Liquidity Pools:
                    if (farm.symbol === 'PGL' || farm.symbol === 'JLP') {
                        newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', farm.lpAddress, balance * exchangeRatio, wallet, farm.address);
                        // Axial Pools:
                    }
                    else if (farm.symbol === 'AXLP') {
                        if (farm.lpAddress.toLowerCase() === '0x5305a6c4da88391f4a9045bf2ed57f4bf0cf4f62') { // AVAX-AXIAL Pool
                            newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', farm.lpAddress, balance * exchangeRatio, wallet, farm.address);
                        }
                        else {
                            newToken = await (0, projectFunctions.addAxialToken)(chain, project, 'staked', farm.lpAddress, balance * exchangeRatio, wallet, farm.address);
                        }
                        // Other Single-Asset Pools:
                    }
                    else {
                        newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', farm.lpAddress, balance * exchangeRatio, wallet, farm.address);
                    }
                    // Adding Extra Token Info:
                    newToken.info = {
                        apy: farm.yearlySwapFees + farm.yearlyAPY + farm.gaugeInfo.snobYearlyAPR,
                        deprecated: farm.deprecated
                    };
                    balances.push(newToken);
                    // Pending SNOB Rewards:
                    let rewards = parseInt(await (0, require$$1$1.query)(chain, farm.gaugeInfo.address, ABIs.snowball.gaugeABI, 'earned', [wallet]));
                    if (rewards > 0) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', snob, rewards, wallet, farm.gaugeInfo.address);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getFarmBalances = getFarmBalances;
    // Function to get staked SNOB balance:
    const getStakedSNOB = async (wallet) => {
        let balance = parseInt(await (0, require$$1$1.query)(chain, xsnob, ABIs.minABI, 'balanceOf', [wallet]));
        if (balance > 0) {
            let locked = await (0, require$$1$1.query)(chain, xsnob, ABIs.snowball.stakingABI, 'locked', [wallet]);
            let newToken = await (0, require$$1$1.addXToken)(chain, project, 'staked', xsnob, balance, wallet, snob, parseInt(locked.amount), xsnob);
            newToken.info = {
                unlock: parseInt(locked.end)
            };
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getStakedSNOB = getStakedSNOB;
    });

    var teddy = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getStakedTEDDY = exports.getStabilityPoolBalance = exports.getTroveBalance = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'avax';
    const project = 'teddy';
    const trove = '0xd22b04395705144Fd12AfFD854248427A2776194';
    const stabilityPool = '0x7AEd63385C03Dc8ed2133F705bbB63E8EA607522';
    const staking = '0xb4387D93B5A9392f64963cd44389e7D9D2E1053c';
    const tsd = '0x4fbf0429599460D327BD5F55625E30E4fC066095';
    const teddyToken = '0x094bd7B2D99711A1486FB94d4395801C6d0fdDcC';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getTroveBalance)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getTroveBalance()', err); })));
        balance.push(...(await (0, exports.getStabilityPoolBalance)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getStabilityPoolBalance()', err); })));
        balance.push(...(await (0, exports.getStakedTEDDY)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getStakedTEDDY()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get trove balance:
    const getTroveBalance = async (wallet) => {
        let balances = [];
        let userInfo = await (0, require$$1$1.query)(chain, trove, ABIs.teddy.troveABI, 'Troves', [wallet]);
        if (parseInt(userInfo.status) === 1) {
            let debt = parseInt(userInfo.debt);
            if (debt > 0) {
                let newToken = await (0, require$$1$1.addDebtToken)(chain, project, tsd, debt, wallet);
                balances.push(newToken);
            }
            let collateral = parseInt(userInfo.coll);
            if (collateral > 0) {
                let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', require$$1$1.defaultAddress, collateral, wallet);
                balances.push(newToken);
            }
        }
        return balances;
    };
    exports.getTroveBalance = getTroveBalance;
    // Function to get stability pool balance:
    const getStabilityPoolBalance = async (wallet) => {
        let balances = [];
        let userInfo = await (0, require$$1$1.query)(chain, stabilityPool, ABIs.teddy.stabilityPoolABI, 'deposits', [wallet]);
        let balance = parseInt(userInfo.initialValue);
        if (balance > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', tsd, balance, wallet);
            balances.push(newToken);
            let avaxRewards = await (0, require$$1$1.query)(chain, stabilityPool, ABIs.teddy.stabilityPoolABI, 'getDepositorETHGain', [wallet]);
            if (avaxRewards > 0) {
                let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', require$$1$1.defaultAddress, avaxRewards, wallet);
                balances.push(newToken);
            }
            let teddyRewards = await (0, require$$1$1.query)(chain, stabilityPool, ABIs.teddy.stabilityPoolABI, 'getDepositorLQTYGain', [wallet]);
            if (teddyRewards > 0) {
                let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', teddyToken, teddyRewards, wallet);
                balances.push(newToken);
            }
        }
        return balances;
    };
    exports.getStabilityPoolBalance = getStabilityPoolBalance;
    // Function to get staked TEDDY balance:
    const getStakedTEDDY = async (wallet) => {
        let balances = [];
        let balance = await (0, require$$1$1.query)(chain, staking, ABIs.teddy.stakingABI, 'stakes', [wallet]);
        if (balance > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', teddyToken, balance, wallet);
            balances.push(newToken);
            let avaxRewards = await (0, require$$1$1.query)(chain, staking, ABIs.teddy.stakingABI, 'getPendingETHGain', [wallet]);
            if (avaxRewards > 0) {
                let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', require$$1$1.defaultAddress, avaxRewards, wallet);
                balances.push(newToken);
            }
            let tsdRewards = await (0, require$$1$1.query)(chain, staking, ABIs.teddy.stakingABI, 'getPendingLUSDGain', [wallet]);
            if (tsdRewards > 0) {
                let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', tsd, tsdRewards, wallet);
                balances.push(newToken);
            }
        }
        return balances;
    };
    exports.getStakedTEDDY = getStakedTEDDY;
    });

    var traderjoe = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getMarketBalances = exports.getBoostedFarmBalances = exports.getFarmV3Balances = exports.getFarmV2Balances = exports.getStakedJOE = exports.get = void 0;
    // Imports:




    // Initializations:
    const chain = 'avax';
    const project = 'traderjoe';
    const masterChefV2 = '0xd6a4F121CA35509aF06A0Be99093d08462f53052';
    const masterChefV3 = '0x188bED1968b795d5c9022F6a0bb5931Ac4c18F00';
    const boostedMasterChef = '0x4483f0b6e2F5486D06958C20f8C39A7aBe87bf8F';
    const bankController = '0xdc13687554205E5b89Ac783db14bb5bba4A1eDaC';
    const joe = '0x6e84a6216ea6dacc71ee8e6b0a5b7322eebc0fdd';
    const xjoe = '0x57319d41F71E81F3c65F2a47CA4e001EbAFd4F33';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getStakedJOE)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getStakedJOE()', err); })));
        balance.push(...(await (0, exports.getFarmV2Balances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getFarmV2Balances()', err); })));
        balance.push(...(await (0, exports.getFarmV3Balances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getFarmV3Balances()', err); })));
        balance.push(...(await (0, exports.getBoostedFarmBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getBoostedFarmBalances()', err); })));
        balance.push(...(await (0, exports.getMarketBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getMarketBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get staked JOE balance:
    const getStakedJOE = async (wallet) => {
        let balance = parseInt(await (0, require$$1$1.query)(chain, xjoe, ABIs.minABI, 'balanceOf', [wallet]));
        if (balance > 0) {
            let newToken = await (0, projectFunctions.addTraderJoeToken)(chain, project, 'staked', balance, wallet, xjoe);
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getStakedJOE = getStakedJOE;
    // Function to get farm V2 balances:
    const getFarmV2Balances = async (wallet) => {
        let balances = [];
        let farmCount = parseInt(await (0, require$$1$1.query)(chain, masterChefV2, ABIs.traderjoe.masterChefABI, 'poolLength', []));
        let farms = [...Array(farmCount).keys()];
        // User Info Multicall Query:
        let calls = [];
        farms.forEach(farmID => {
            calls.push({ reference: farmID.toString(), methodName: 'userInfo', methodParameters: [farmID, wallet] });
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, masterChefV2, ABIs.traderjoe.masterChefABI, calls);
        let promises = farms.map(farmID => (async () => {
            let userInfoResults = multicallResults[farmID];
            if (userInfoResults) {
                let balance = (0, require$$1$1.parseBN)(userInfoResults[0]);
                if (balance > 0) {
                    let token = (await (0, require$$1$1.query)(chain, masterChefV2, ABIs.traderjoe.masterChefABI, 'poolInfo', [farmID])).lpToken;
                    // xJOE Farm:
                    if (token === xjoe) {
                        let newToken = await (0, projectFunctions.addTraderJoeToken)(chain, project, 'staked', balance, wallet, masterChefV2);
                        balances.push(newToken);
                        // LP Farms:
                    }
                    else {
                        let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', token, balance, wallet, masterChefV2);
                        balances.push(newToken);
                    }
                    // JOE Rewards:
                    let rewards = await (0, require$$1$1.query)(chain, masterChefV2, ABIs.traderjoe.masterChefABI, 'pendingTokens', [farmID, wallet]);
                    let pendingJoe = parseInt(rewards.pendingJoe);
                    if (pendingJoe > 0) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', joe, pendingJoe, wallet, masterChefV2);
                        balances.push(newToken);
                    }
                    // Bonus Rewards:
                    let pendingBonus = parseInt(rewards.pendingBonusToken);
                    if (pendingBonus > 0) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', rewards.bonusTokenAddress, pendingBonus, wallet, masterChefV2);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getFarmV2Balances = getFarmV2Balances;
    // Function to get farm V3 balances:
    const getFarmV3Balances = async (wallet) => {
        let balances = [];
        let farmCount = parseInt(await (0, require$$1$1.query)(chain, masterChefV3, ABIs.traderjoe.masterChefABI, 'poolLength', []));
        let farms = [...Array(farmCount).keys()];
        // User Info Multicall Query:
        let calls = [];
        farms.forEach(farmID => {
            calls.push({ reference: farmID.toString(), methodName: 'userInfo', methodParameters: [farmID, wallet] });
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, masterChefV3, ABIs.traderjoe.masterChefABI, calls);
        let promises = farms.map(farmID => (async () => {
            let userInfoResults = multicallResults[farmID];
            if (userInfoResults) {
                let balance = (0, require$$1$1.parseBN)(userInfoResults[0]);
                if (balance > 0) {
                    let token = (await (0, require$$1$1.query)(chain, masterChefV3, ABIs.traderjoe.masterChefABI, 'poolInfo', [farmID])).lpToken;
                    // xJOE Farm:
                    if (token === xjoe) {
                        let newToken = await (0, projectFunctions.addTraderJoeToken)(chain, project, 'staked', balance, wallet, masterChefV3);
                        balances.push(newToken);
                        // LP Farms:
                    }
                    else {
                        let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', token, balance, wallet, masterChefV3);
                        balances.push(newToken);
                    }
                    // JOE Rewards:
                    let rewards = await (0, require$$1$1.query)(chain, masterChefV3, ABIs.traderjoe.masterChefABI, 'pendingTokens', [farmID, wallet]);
                    let pendingJoe = parseInt(rewards.pendingJoe);
                    if (pendingJoe > 0) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', joe, pendingJoe, wallet, masterChefV3);
                        balances.push(newToken);
                    }
                    // Bonus Rewards:
                    let pendingBonus = parseInt(rewards.pendingBonusToken);
                    if (pendingBonus > 0) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', rewards.bonusTokenAddress, pendingBonus, wallet, masterChefV3);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getFarmV3Balances = getFarmV3Balances;
    // Function to get boosted farm balances:
    const getBoostedFarmBalances = async (wallet) => {
        let balances = [];
        let farmCount = parseInt(await (0, require$$1$1.query)(chain, boostedMasterChef, ABIs.traderjoe.masterChefABI, 'poolLength', []));
        let farms = [...Array(farmCount).keys()];
        // User Info Multicall Query:
        let calls = [];
        farms.forEach(farmID => {
            calls.push({ reference: farmID.toString(), methodName: 'userInfo', methodParameters: [farmID, wallet] });
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, boostedMasterChef, ABIs.traderjoe.masterChefABI, calls);
        let promises = farms.map(farmID => (async () => {
            let userInfoResults = multicallResults[farmID];
            if (userInfoResults) {
                let balance = (0, require$$1$1.parseBN)(userInfoResults[0]);
                if (balance > 0) {
                    let token = (await (0, require$$1$1.query)(chain, boostedMasterChef, ABIs.traderjoe.masterChefABI, 'poolInfo', [farmID])).lpToken;
                    // xJOE Farm:
                    if (token === xjoe) {
                        let newToken = await (0, projectFunctions.addTraderJoeToken)(chain, project, 'staked', balance, wallet, boostedMasterChef);
                        balances.push(newToken);
                        // LP Farms:
                    }
                    else {
                        let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', token, balance, wallet, boostedMasterChef);
                        balances.push(newToken);
                    }
                    // JOE Rewards:
                    let rewards = await (0, require$$1$1.query)(chain, boostedMasterChef, ABIs.traderjoe.masterChefABI, 'pendingTokens', [farmID, wallet]);
                    let pendingJoe = parseInt(rewards.pendingJoe);
                    if (pendingJoe > 0) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', joe, pendingJoe, wallet, boostedMasterChef);
                        balances.push(newToken);
                    }
                    // Bonus Rewards:
                    let pendingBonus = parseInt(rewards.pendingBonusToken);
                    if (pendingBonus > 0) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', rewards.bonusTokenAddress, pendingBonus, wallet, boostedMasterChef);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getBoostedFarmBalances = getBoostedFarmBalances;
    // Function to get market balance:
    const getMarketBalances = async (wallet) => {
        let balances = [];
        let markets = await (0, require$$1$1.query)(chain, bankController, ABIs.traderjoe.bankControllerABI, 'getAllMarkets', []);
        // Market Balance Multicall Query:
        let abi = ABIs.minABI.concat(ABIs.traderjoe.marketABI);
        let calls = [
            { reference: 'marketBalance', methodName: 'balanceOf', methodParameters: [wallet] },
            { reference: 'accountSnapshot', methodName: 'getAccountSnapshot', methodParameters: [wallet] }
        ];
        let multicallResults = await (0, require$$1$1.multicallComplexQuery)(chain, markets, abi, calls);
        let promises = markets.map(market => (async () => {
            let marketResults = multicallResults[market];
            if (marketResults) {
                let marketBalanceResults = marketResults['marketBalance'];
                let accountSnapshotResults = marketResults['accountSnapshot'];
                if (marketBalanceResults && accountSnapshotResults) {
                    let balance = (0, require$$1$1.parseBN)(marketBalanceResults[0]);
                    let debt = (0, require$$1$1.parseBN)(accountSnapshotResults[2]);
                    let exchangeRate = (0, require$$1$1.parseBN)(accountSnapshotResults[3]);
                    if (balance > 0 || debt > 0) {
                        let token = await (0, require$$1$1.query)(chain, market, ABIs.traderjoe.marketABI, 'underlying', []);
                        // Lending Balances:
                        if (balance > 0) {
                            let underlyingBalance = balance * (exchangeRate / (10 ** 18));
                            let newToken = await (0, require$$1$1.addToken)(chain, project, 'lent', token, underlyingBalance, wallet, market);
                            balances.push(newToken);
                        }
                        // Borrowing Balances:
                        if (debt > 0) {
                            let newToken = await (0, require$$1$1.addDebtToken)(chain, project, token, debt, wallet, market);
                            balances.push(newToken);
                        }
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getMarketBalances = getMarketBalances;
    });

    var yieldyak = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getStakedYAK = exports.getFarmBalances = exports.get = void 0;
    // Imports:




    // Initializations:
    const chain = 'avax';
    const project = 'yieldyak';
    const staking = '0x0cf605484A512d3F3435fed77AB5ddC0525Daf5f';
    const yak = '0x59414b3089ce2AF0010e7523Dea7E2b35d776ec7';
    const wavax = '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7';
    const lpSymbols = ['JLP', 'PGL', 'Lydia-LP', 'YSL', 'CRL', 'BGL', 'Olive-LP'];
    const lpAxialSymbols = ['AS4D', 'AC4D', 'AM3D', 'AA3D'];
    const apiURL = 'https://staging-api.yieldyak.com/apys';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        let farms = await (0, require$$1$1.fetchData)(apiURL);
        if (Object.keys(farms).length > 0) {
            balance.push(...(await (0, exports.getFarmBalances)(wallet, farms).catch((err) => { throw new error.WeaverError(chain, project, 'getVaultBalances()', err); })));
            balance.push(...(await (0, exports.getStakedYAK)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getVaultBalances()', err); })));
        }
        else {
            throw new error.WeaverError(chain, project, 'Invalid response from YieldYak API');
        }
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get farm balances:
    const getFarmBalances = async (wallet, farms) => {
        let balances = [];
        // Balance Multicall Query:
        let farmAddresses = Object.keys(farms);
        let multicallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, farmAddresses, ABIs.minABI, 'balanceOf', [wallet]);
        let promises = farmAddresses.map(farm => (async () => {
            let balanceResults = multicallResults[farm];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 1) {
                    let token = await (0, require$$1$1.query)(chain, farm, ABIs.yieldyak.farmABI, 'depositToken', []);
                    let totalDeposits = parseInt(await (0, require$$1$1.query)(chain, farm, ABIs.yieldyak.farmABI, 'totalDeposits', []));
                    let totalSupply = parseInt(await (0, require$$1$1.query)(chain, farm, ABIs.minABI, 'totalSupply', []));
                    let underlyingBalance = balance * (totalDeposits / totalSupply);
                    // AVAX Farm:
                    if (token === require$$1$1.zero) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', wavax, underlyingBalance, wallet);
                        let farmAPY = farms[farm].apy;
                        if (farmAPY) {
                            newToken.info = {
                                apy: farmAPY
                            };
                        }
                        balances.push(newToken);
                        // Other Farms:
                    }
                    else {
                        let symbol = await (0, require$$1$1.query)(chain, token, ABIs.minABI, 'symbol', []);
                        // LP Farms:
                        if (lpSymbols.includes(symbol)) {
                            let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', token, underlyingBalance, wallet);
                            let farmAPY = farms[farm].apy;
                            if (farmAPY) {
                                newToken.info = {
                                    apy: farmAPY
                                };
                            }
                            balances.push(newToken);
                            // Axial Farms:
                        }
                        else if (lpAxialSymbols.includes(symbol)) {
                            let newToken = await (0, projectFunctions.addAxialToken)(chain, project, 'staked', token, underlyingBalance, wallet);
                            let farmAPY = farms[farm].apy;
                            if (farmAPY) {
                                newToken.info = {
                                    apy: farmAPY
                                };
                            }
                            balances.push(newToken);
                            // Curve Farms:
                        }
                        else if (symbol === '3poolV2-f') ;
                        else {
                            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', token, underlyingBalance, wallet);
                            let farmAPY = farms[farm].apy;
                            if (farmAPY) {
                                newToken.info = {
                                    apy: farmAPY
                                };
                            }
                            balances.push(newToken);
                        }
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getFarmBalances = getFarmBalances;
    // Function to get staked YAK:
    const getStakedYAK = async (wallet) => {
        let balance = parseInt((await (0, require$$1$1.query)(chain, staking, ABIs.yieldyak.stakingABI, 'userInfo', [0, wallet])).amount);
        if (balance > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', yak, balance, wallet);
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getStakedYAK = getStakedYAK;
    });

    var apeswap$1 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getVaultBalances = exports.getFarmBalances = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'bsc';
    const project = 'apeswap';
    const masterApe = '0x5c8D727b265DBAfaba67E050f2f739cAeEB4A6F9';
    const vaultMaster = '0x5711a833C943AD1e8312A9c7E5403d48c717e1aa';
    const banana = '0x603c7f932ED1fc6575303D8Fb018fDCBb0f39a95';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getFarmBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getFarmBalances()', err); })));
        balance.push(...(await (0, exports.getVaultBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getVaultBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get farm balances:
    const getFarmBalances = async (wallet) => {
        let balances = [];
        let bananaRewards = 0;
        let farmCount = parseInt(await (0, require$$1$1.query)(chain, masterApe, ABIs.apeswap.masterApeABI, 'poolLength', []));
        let farms = [...Array(farmCount).keys()];
        // User Info Multicall Query:
        let calls = [];
        farms.forEach(farmID => {
            calls.push({ reference: farmID.toString(), methodName: 'userInfo', methodParameters: [farmID, wallet] });
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, masterApe, ABIs.apeswap.masterApeABI, calls);
        let promises = farms.map(farmID => (async () => {
            let userInfoResults = multicallResults[farmID];
            if (userInfoResults) {
                let balance = (0, require$$1$1.parseBN)(userInfoResults[0]);
                if (balance > 0) {
                    // BANANA Farm:
                    if (farmID === 0) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', banana, balance, wallet);
                        balances.push(newToken);
                        // LP Farms:
                    }
                    else {
                        let lpToken = (await (0, require$$1$1.query)(chain, masterApe, ABIs.apeswap.masterApeABI, 'poolInfo', [farmID])).lpToken;
                        let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', lpToken, balance, wallet);
                        balances.push(newToken);
                    }
                    // Pending BANANA Rewards:
                    let rewards = parseInt(await (0, require$$1$1.query)(chain, masterApe, ABIs.apeswap.masterApeABI, 'pendingCake', [farmID, wallet]));
                    if (rewards > 0) {
                        bananaRewards += rewards;
                    }
                }
            }
        })());
        await Promise.all(promises);
        if (bananaRewards > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', banana, bananaRewards, wallet);
            balances.push(newToken);
        }
        return balances;
    };
    exports.getFarmBalances = getFarmBalances;
    // Function to get vault balances:
    const getVaultBalances = async (wallet) => {
        let balances = [];
        let vaultCount = parseInt(await (0, require$$1$1.query)(chain, vaultMaster, ABIs.apeswap.vaultMasterABI, 'poolLength', []));
        let vaults = [...Array(vaultCount).keys()];
        // Balance Multicall Query:
        let calls = [];
        vaults.forEach(vaultID => {
            calls.push({ reference: vaultID.toString(), methodName: 'stakedWantTokens', methodParameters: [vaultID, wallet] });
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, vaultMaster, ABIs.apeswap.vaultMasterABI, calls);
        let promises = vaults.map(vaultID => (async () => {
            let balanceResults = multicallResults[vaultID];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 99) {
                    let token = (await (0, require$$1$1.query)(chain, vaultMaster, ABIs.apeswap.vaultMasterABI, 'poolInfo', [vaultID])).want;
                    let symbol = await (0, require$$1$1.query)(chain, token, ABIs.minABI, 'symbol', []);
                    // LP Vaults:
                    if (symbol.endsWith('LP')) {
                        let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', token, balance, wallet);
                        balances.push(newToken);
                        // Other Vaults:
                    }
                    else {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', token, balance, wallet);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getVaultBalances = getVaultBalances;
    });

    var autofarm$2 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAutoVaultBalance = exports.getVaultBalances = exports.get = void 0;
    // Imports:




    // Initializations:
    const chain = 'bsc';
    const project = 'autofarm';
    const registry = '0x0895196562C7868C5Be92459FaE7f877ED450452';
    const autoVault = '0x763a05bdb9f8946d8C3FA72d1e0d3f5E68647e5C';
    const auto = '0xa184088a740c695e156f91f5cc086a06bb78b827';
    const ignoredVaults = [331];
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getVaultBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getVaultBalances()', err); })));
        balance.push(...(await (0, exports.getAutoVaultBalance)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getAutoVaultBalance()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get all vault balances:
    const getVaultBalances = async (wallet) => {
        let balances = [];
        let poolLength = parseInt(await (0, require$$1$1.query)(chain, registry, ABIs.autofarm.registryABI, 'poolLength', []));
        let vaults = [...Array(poolLength).keys()];
        let autoRewards = 0;
        // Balance Multicall Query:
        let calls = [];
        vaults.forEach(vaultID => {
            if (vaultID != 0 && !ignoredVaults.includes(vaultID)) {
                calls.push({ reference: vaultID.toString(), methodName: 'stakedWantTokens', methodParameters: [vaultID, wallet] });
            }
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, registry, ABIs.autofarm.registryABI, calls);
        let promises = vaults.map(vaultID => (async () => {
            let balanceResults = multicallResults[vaultID];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 99) {
                    let token = (await (0, require$$1$1.query)(chain, registry, ABIs.autofarm.registryABI, 'poolInfo', [vaultID]))[0];
                    let symbol = await (0, require$$1$1.query)(chain, token, ABIs.minABI, 'symbol', []);
                    // Regular LP Vaults:
                    if (symbol.endsWith('LP')) {
                        let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', token, balance, wallet);
                        balances.push(newToken);
                        // 4Belt Vault:
                    }
                    else if (symbol === '4Belt') {
                        let newToken = await (0, projectFunctions.add4BeltToken)(chain, project, 'staked', token, balance, wallet);
                        balances.push(newToken);
                        // Belt Vaults:
                    }
                    else if (symbol.startsWith('belt')) {
                        let newToken = await (0, projectFunctions.addBeltToken)(chain, project, 'staked', token, balance, wallet);
                        balances.push(newToken);
                        // Alpaca Vaults:
                    }
                    else if (symbol.startsWith('ib')) {
                        let newToken = await (0, projectFunctions.addAlpacaToken)(chain, project, 'staked', token, balance, wallet);
                        balances.push(newToken);
                        // Single-Asset Vaults:
                    }
                    else {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', token, balance, wallet);
                        balances.push(newToken);
                    }
                    // Pending AUTO Rewards:
                    let rewards = parseInt(await (0, require$$1$1.query)(chain, registry, ABIs.autofarm.pendingRewardsABI, 'pendingAUTO', [vaultID, wallet]));
                    if (rewards > 0) {
                        autoRewards += rewards;
                    }
                }
            }
        })());
        await Promise.all(promises);
        if (autoRewards > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', auto, autoRewards, wallet);
            balances.push(newToken);
        }
        return balances;
    };
    exports.getVaultBalances = getVaultBalances;
    // Function to get AUTO vault balance:
    const getAutoVaultBalance = async (wallet) => {
        let balance = parseInt(await (0, require$$1$1.query)(chain, autoVault, ABIs.autofarm.registryABI, 'stakedWantTokens', [0, wallet]));
        if (balance > 300000000000) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', auto, balance, wallet);
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getAutoVaultBalance = getAutoVaultBalance;
    });

    var beefy$2 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getStakedBIFI = exports.getVaultBalances = exports.get = void 0;
    // Imports:




    // Initializations:
    const chain = 'bsc';
    const project = 'beefy';
    const staking = '0x0d5761D9181C7745855FC985f646a842EB254eB9';
    const bifi = '0xca3f508b8e4dd382ee878a314789373d80a5190a';
    const wbnb = '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c';
    const apiURL = 'https://api.beefy.finance';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        let vaultsData = await (0, require$$1$1.fetchData)(`${apiURL}/vaults`);
        let apyData = await (0, require$$1$1.fetchData)(`${apiURL}/apy`);
        let vaults = vaultsData.filter(vault => vault.chain === 'bsc' && vault.status === 'active');
        if (vaults.length > 0) {
            balance.push(...(await (0, exports.getVaultBalances)(wallet, vaults, apyData).catch((err) => { throw new error.WeaverError(chain, project, 'getVaultBalances()', err); })));
            balance.push(...(await (0, exports.getStakedBIFI)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getStakedBIFI()', err); })));
        }
        else {
            throw new error.WeaverError(chain, project, 'Invalid response from Beefy API');
        }
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get vault balances:
    const getVaultBalances = async (wallet, vaults, apys) => {
        let balances = [];
        // Balance Multicall Query:
        let vaultAddresses = vaults.map(vault => vault.earnedTokenAddress);
        let multicallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, vaultAddresses, ABIs.minABI, 'balanceOf', [wallet]);
        let promises = vaults.map(vault => (async () => {
            let balanceResults = multicallResults[vault.earnedTokenAddress];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 0) {
                    let decimals = parseInt(await (0, require$$1$1.query)(chain, vault.earnedTokenAddress, ABIs.minABI, 'decimals', []));
                    let exchangeRate = parseInt(await (0, require$$1$1.query)(chain, vault.earnedTokenAddress, ABIs.beefy.vaultABI, 'getPricePerFullShare', []));
                    let underlyingBalance = balance * (exchangeRate / (10 ** decimals));
                    // Native Token Vaults:
                    if (!vault.tokenAddress) {
                        if (vault.token === 'BNB') {
                            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', wbnb, underlyingBalance, wallet);
                            let vaultAPY = apys[vault.id];
                            if (vaultAPY) {
                                newToken.info = {
                                    apy: vaultAPY
                                };
                            }
                            balances.push(newToken);
                        }
                    }
                    else {
                        // Unique Vaults (3+ Assets):
                        if (vault.assets.length > 2) {
                            if (vault.id === 'belt-4belt') {
                                let newToken = await (0, projectFunctions.add4BeltToken)(chain, project, 'staked', vault.tokenAddress, underlyingBalance, wallet);
                                let vaultAPY = apys[vault.id];
                                if (vaultAPY) {
                                    newToken.info = {
                                        apy: vaultAPY
                                    };
                                }
                                balances.push(newToken);
                            }
                            // LP Token Vaults:
                        }
                        else if (vault.assets.length === 2 && vault.id != 'omnifarm-usdo-busd-ot' && vault.id != 'ellipsis-renbtc') {
                            let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', vault.tokenAddress, underlyingBalance, wallet);
                            let vaultAPY = apys[vault.id];
                            if (vaultAPY) {
                                newToken.info = {
                                    apy: vaultAPY
                                };
                            }
                            balances.push(newToken);
                            // Single-Asset Vaults:
                        }
                        else if (vault.assets.length === 1) {
                            if (vault.platform === 'Belt') {
                                let newToken = await (0, projectFunctions.addBeltToken)(chain, project, 'staked', vault.tokenAddress, underlyingBalance, wallet);
                                let vaultAPY = apys[vault.id];
                                if (vaultAPY) {
                                    newToken.info = {
                                        apy: vaultAPY
                                    };
                                }
                                balances.push(newToken);
                            }
                            else if (vault.platform === 'Alpaca') {
                                let newToken = await (0, projectFunctions.addAlpacaToken)(chain, project, 'staked', vault.tokenAddress, underlyingBalance, wallet);
                                let vaultAPY = apys[vault.id];
                                if (vaultAPY) {
                                    newToken.info = {
                                        apy: vaultAPY
                                    };
                                }
                                balances.push(newToken);
                            }
                            else {
                                let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', vault.tokenAddress, underlyingBalance, wallet);
                                let vaultAPY = apys[vault.id];
                                if (vaultAPY) {
                                    newToken.info = {
                                        apy: vaultAPY
                                    };
                                }
                                balances.push(newToken);
                            }
                        }
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getVaultBalances = getVaultBalances;
    // Function to get staked BIFI balance:
    const getStakedBIFI = async (wallet) => {
        let balances = [];
        let balance = parseInt(await (0, require$$1$1.query)(chain, staking, ABIs.minABI, 'balanceOf', [wallet]));
        if (balance > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', bifi, balance, wallet);
            balances.push(newToken);
        }
        let pendingRewards = parseInt(await (0, require$$1$1.query)(chain, staking, ABIs.beefy.stakingABI, 'earned', [wallet]));
        if (pendingRewards > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', wbnb, pendingRewards, wallet);
            balances.push(newToken);
        }
        return balances;
    };
    exports.getStakedBIFI = getStakedBIFI;
    });

    var belt = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getVaultBalances = exports.getPoolBalances = exports.getStakedBELT = exports.get = void 0;
    // Imports:




    // Initializations:
    const chain = 'bsc';
    const project = 'belt';
    const masterBelt = '0xD4BbC80b9B102b77B21A06cb77E954049605E6c1';
    const beltToken = '0xE0e514c71282b6f4e823703a39374Cf58dc3eA4f';
    const stakedBelt = '0x1794BB186c15FdDBf4AAC4a3b0e2f40659e9B841';
    const pools = {
        '4Belt': { token: '0x9cb73F20164e399958261c289Eb5F9846f4D1404', vaultID: 3 },
        'beltBTC': { token: '0x51bd63F240fB13870550423D208452cA87c44444', vaultID: 7 },
        'beltETH': { token: '0xAA20E8Cb61299df2357561C2AC2e1172bC68bc25', vaultID: 8 },
        'beltBNB': { token: '0xa8Bb71facdd46445644C277F9499Dd22f6F0A30C', vaultID: 9 },
        'Cake-LP': { token: '0xF3Bc6FC080ffCC30d93dF48BFA2aA14b869554bb', vaultID: 11 },
        'beltDAI': { token: '0x9A86fc508a423AE8a243445dBA7eD5364118AB1D' },
        'beltUSDC': { token: '0x7a59bf07D529A5FdBab67D597d63d7D5a83E61E5' },
        'beltUSDT': { token: '0x55E1B1e49B969C018F2722445Cd2dD9818dDCC25' },
        'beltBUSD': { token: '0x9171Bf7c050aC8B4cf7835e51F7b4841DFB2cCD0' }
    };
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getStakedBELT)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getStakedBELT()', err); })));
        balance.push(...(await (0, exports.getPoolBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getPoolBalances()', err); })));
        balance.push(...(await (0, exports.getVaultBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getVaultBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get staked BELT balance:
    const getStakedBELT = async (wallet) => {
        let balance = parseInt(await (0, require$$1$1.query)(chain, stakedBelt, ABIs.minABI, 'balanceOf', [wallet]));
        if (balance > 0) {
            let exchangeRate = parseInt(await (0, require$$1$1.query)(chain, stakedBelt, ABIs.belt.stakingABI, 'getPricePerFullShare', [])) / (10 ** 18);
            let lockupEnd = parseInt(await (0, require$$1$1.query)(chain, stakedBelt, ABIs.belt.stakingABI, 'getUserLockUpEndTime', [wallet]));
            let newToken = await (0, require$$1$1.addXToken)(chain, project, 'staked', stakedBelt, balance, wallet, beltToken, balance * exchangeRate);
            newToken.info = {
                unlock: lockupEnd
            };
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getStakedBELT = getStakedBELT;
    // Function to get pool balances:
    const getPoolBalances = async (wallet) => {
        let balances = [];
        // Balance Multicall Query:
        let poolAddresses = Object.keys(pools).map(pool => pools[pool].token);
        let multicallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, poolAddresses, ABIs.minABI, 'balanceOf', [wallet]);
        let promises = Object.keys(pools).map(poolKey => (async () => {
            let balanceResults = multicallResults[pools[poolKey].token];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 0) {
                    // 4Belt Pool:
                    if (poolKey === '4Belt') {
                        let newToken = await (0, projectFunctions.add4BeltToken)(chain, project, 'liquidity', pools[poolKey].token, balance, wallet);
                        balances.push(newToken);
                        // PancakeSwap LP:
                    }
                    else if (poolKey === 'Cake-LP') {
                        let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'liquidity', pools[poolKey].token, balance, wallet);
                        balances.push(newToken);
                        // Belt Tokens:
                    }
                    else {
                        let newToken = await (0, projectFunctions.addBeltToken)(chain, project, 'staked', pools[poolKey].token, balance, wallet);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getPoolBalances = getPoolBalances;
    // Function to get vault balances:
    const getVaultBalances = async (wallet) => {
        let balances = [];
        let beltRewards = 0;
        // Balance Multicall Query:
        let calls = [];
        Object.keys(pools).forEach(poolKey => {
            let vaultID = pools[poolKey].vaultID;
            if (vaultID) {
                calls.push({ reference: poolKey, methodName: 'stakedWantTokens', methodParameters: [vaultID, wallet] });
            }
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, masterBelt, ABIs.belt.masterBeltABI, calls);
        let promises = Object.keys(pools).map(poolKey => (async () => {
            let balanceResults = multicallResults[poolKey];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 0) {
                    // 4Belt Pool:
                    if (poolKey === '4Belt') {
                        let newToken = await (0, projectFunctions.add4BeltToken)(chain, project, 'staked', pools[poolKey].token, balance, wallet);
                        balances.push(newToken);
                        // PancakeSwap LP:
                    }
                    else if (poolKey === 'Cake-LP') {
                        let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', pools[poolKey].token, balance, wallet);
                        balances.push(newToken);
                        // Belt Tokens:
                    }
                    else {
                        let newToken = await (0, projectFunctions.addBeltToken)(chain, project, 'staked', pools[poolKey].token, balance, wallet);
                        balances.push(newToken);
                    }
                    // Pending BELT Rewards:
                    let rewards = parseInt(await (0, require$$1$1.query)(chain, masterBelt, ABIs.belt.masterBeltABI, 'pendingBELT', [pools[poolKey].vaultID, wallet]));
                    if (rewards > 0) {
                        beltRewards += rewards;
                    }
                }
            }
        })());
        await Promise.all(promises);
        if (beltRewards > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', beltToken, beltRewards, wallet);
            balances.push(newToken);
        }
        return balances;
    };
    exports.getVaultBalances = getVaultBalances;
    });

    var cream$3 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getMarketBalances = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'bsc';
    const project = 'cream';
    const controller = '0x589de0f0ccf905477646599bb3e5c622c84cc0ba';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getMarketBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getMarketBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get all market balances and debt:
    const getMarketBalances = async (wallet) => {
        let balances = [];
        let markets = await (0, require$$1$1.query)(chain, controller, ABIs.cream.controllerABI, 'getAllMarkets', []);
        // Market Balance Multicall Query:
        let abi = ABIs.minABI.concat(ABIs.cream.tokenABI);
        let calls = [
            { reference: 'marketBalance', methodName: 'balanceOf', methodParameters: [wallet] },
            { reference: 'borrowBalance', methodName: 'borrowBalanceStored', methodParameters: [wallet] }
        ];
        let multicallResults = await (0, require$$1$1.multicallComplexQuery)(chain, markets, abi, calls);
        let promises = markets.map(market => (async () => {
            let marketResults = multicallResults[market];
            if (marketResults) {
                let marketBalanceResults = marketResults['marketBalance'];
                let borrowingResults = marketResults['borrowBalance'];
                // Lending Balances:
                if (marketBalanceResults) {
                    let balance = (0, require$$1$1.parseBN)(marketBalanceResults[0]);
                    if (balance > 0) {
                        let exchangeRate = parseInt(await (0, require$$1$1.query)(chain, market, ABIs.cream.tokenABI, 'exchangeRateStored', []));
                        let decimals = parseInt(await (0, require$$1$1.query)(chain, market, ABIs.minABI, 'decimals', []));
                        let symbol = await (0, require$$1$1.query)(chain, market, ABIs.minABI, 'symbol', []);
                        let tokenAddress = market.toLowerCase() === '0x1ffe17b99b439be0afc831239ddecda2a790ff3a' ? require$$1$1.defaultAddress : await (0, require$$1$1.query)(chain, market, ABIs.cream.tokenABI, 'underlying', []);
                        let underlyingBalance = (balance / (10 ** decimals)) * (exchangeRate / (10 ** (decimals + 2)));
                        if (symbol.includes('CAKE-LP')) {
                            let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'lent', tokenAddress, underlyingBalance, wallet);
                            balances.push(newToken);
                        }
                        else {
                            let newToken = await (0, require$$1$1.addToken)(chain, project, 'lent', tokenAddress, underlyingBalance, wallet);
                            balances.push(newToken);
                        }
                    }
                }
                // Borrowing Balances:
                if (borrowingResults) {
                    let debt = (0, require$$1$1.parseBN)(borrowingResults[0]);
                    if (debt > 0) {
                        let symbol = await (0, require$$1$1.query)(chain, market, ABIs.minABI, 'symbol', []);
                        let tokenAddress = market.toLowerCase() === '0x1ffe17b99b439be0afc831239ddecda2a790ff3a' ? require$$1$1.defaultAddress : await (0, require$$1$1.query)(chain, market, ABIs.cream.tokenABI, 'underlying', []);
                        if (!symbol.includes('CAKE-LP')) {
                            let newToken = await (0, require$$1$1.addDebtToken)(chain, project, tokenAddress, debt, wallet);
                            balances.push(newToken);
                        }
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getMarketBalances = getMarketBalances;
    });

    var moonpot = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPotBalances = exports.get = void 0;
    // Imports:




    // Initializations:
    const chain = 'bsc';
    const project = 'moonpot';
    const apiURL = 'https://api.moonpot.com/pots';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        let pots = [];
        let potsData = (await (0, require$$1$1.fetchData)(apiURL)).data;
        let potsKeys = Object.keys(potsData).filter(pot => potsData[pot].status === 'active');
        potsKeys.forEach(key => {
            pots.push(potsData[key]);
        });
        if (pots.length > 0) {
            balance.push(...(await (0, exports.getPotBalances)(wallet, pots).catch((err) => { throw new error.WeaverError(chain, project, 'getPotBalances()', err); })));
        }
        else {
            throw new error.WeaverError(chain, project, 'Invalid response from Moonpot API');
        }
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get pot balances:
    const getPotBalances = async (wallet, pots) => {
        let balances = [];
        // Balance Multicall Query:
        let potAddresses = pots.map(pot => pot.contractAddress);
        let multicallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, potAddresses, ABIs.moonpot.potABI, 'userTotalBalance', [wallet]);
        let promises = pots.map(pot => (async () => {
            let balanceResults = multicallResults[pot.contractAddress];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 0) {
                    // 4Belt Pot:
                    if (pot.token.includes('4Belt')) {
                        let newToken = await (0, projectFunctions.add4BeltToken)(chain, project, 'staked', pot.tokenAddress, balance, wallet);
                        balances.push(newToken);
                        // Belt Pots:
                    }
                    else if (pot.token.startsWith('belt')) {
                        let newToken = await (0, projectFunctions.addBeltToken)(chain, project, 'staked', pot.tokenAddress, balance, wallet);
                        balances.push(newToken);
                        // Alpaca Pots:
                    }
                    else if (pot.token.startsWith('ib')) {
                        let newToken = await (0, projectFunctions.addAlpacaToken)(chain, project, 'staked', pot.tokenAddress, balance, wallet);
                        balances.push(newToken);
                        // LP Pots:
                    }
                    else if (pot.token.endsWith('LP')) {
                        let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', pot.tokenAddress, balance, wallet);
                        balances.push(newToken);
                        // Single-Asset Pots:
                    }
                    else {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', pot.tokenAddress, balance, wallet);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getPotBalances = getPotBalances;
    });

    var pancakeswap = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAutoCakePoolBalance = exports.getFarmBalancesV2 = exports.getFarmBalances = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'bsc';
    const project = 'pancakeswap';
    const registry = '0x73feaa1eE314F8c655E354234017bE2193C9E24E';
    const registryV2 = '0xa5f8C5Dbd5F286960b9d90548680aE5ebFf07652';
    const autoCakePool = '0xa80240Eb5d7E05d3F250cF000eEc0891d00b51CC';
    const cake = '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getFarmBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getFarmBalances()', err); })));
        balance.push(...(await (0, exports.getFarmBalancesV2)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getFarmBalancesV2()', err); })));
        balance.push(...(await (0, exports.getAutoCakePoolBalance)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getAutoCakePoolBalance()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get farm balances:
    const getFarmBalances = async (wallet) => {
        let balances = [];
        let cakeRewards = 0;
        let poolLength = parseInt(await (0, require$$1$1.query)(chain, registry, ABIs.pancakeswap.registryABI, 'poolLength', []));
        let farms = [...Array(poolLength).keys()];
        // User Info Multicall Query:
        let calls = [];
        farms.forEach(farmID => {
            calls.push({ reference: farmID.toString(), methodName: 'userInfo', methodParameters: [farmID, wallet] });
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, registry, ABIs.pancakeswap.registryABI, calls);
        let promises = farms.map(farmID => (async () => {
            let userInfoResults = multicallResults[farmID];
            if (userInfoResults) {
                let balance = (0, require$$1$1.parseBN)(userInfoResults[0]);
                if (balance > 0) {
                    let token = (await (0, require$$1$1.query)(chain, registry, ABIs.pancakeswap.registryABI, 'poolInfo', [farmID]))[0];
                    // Single-Asset Cake Farm:
                    if (farmID === 0) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', token, balance, wallet);
                        balances.push(newToken);
                        // All Other Farms:
                    }
                    else {
                        let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', token, balance, wallet);
                        balances.push(newToken);
                    }
                    // Pending Cake Rewards:
                    let rewards = parseInt(await (0, require$$1$1.query)(chain, registry, ABIs.pancakeswap.registryABI, 'pendingCake', [farmID, wallet]));
                    if (rewards > 0) {
                        cakeRewards += rewards;
                    }
                }
            }
        })());
        await Promise.all(promises);
        if (cakeRewards > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', cake, cakeRewards, wallet);
            balances.push(newToken);
        }
        return balances;
    };
    exports.getFarmBalances = getFarmBalances;
    // Function to get farm V2 balances:
    const getFarmBalancesV2 = async (wallet) => {
        let balances = [];
        let cakeRewards = 0;
        let poolLength = parseInt(await (0, require$$1$1.query)(chain, registryV2, ABIs.pancakeswap.registryABI, 'poolLength', []));
        let farms = [...Array(poolLength).keys()];
        // User Info Multicall Query:
        let calls = [];
        farms.forEach(farmID => {
            calls.push({ reference: farmID.toString(), methodName: 'userInfo', methodParameters: [farmID, wallet] });
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, registryV2, ABIs.pancakeswap.registryABI, calls);
        let promises = farms.map(farmID => (async () => {
            let userInfoResults = multicallResults[farmID];
            if (userInfoResults) {
                let balance = (0, require$$1$1.parseBN)(userInfoResults[0]);
                if (balance > 0) {
                    let token = await (0, require$$1$1.query)(chain, registryV2, ABIs.pancakeswap.registryABI, 'lpToken', [farmID]);
                    // Single-Asset Cake Farm:
                    if (farmID === 0) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', token, balance, wallet);
                        balances.push(newToken);
                        // All Other Farms:
                    }
                    else {
                        let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', token, balance, wallet);
                        balances.push(newToken);
                    }
                    // Pending Cake Rewards:
                    let rewards = parseInt(await (0, require$$1$1.query)(chain, registryV2, ABIs.pancakeswap.registryABI, 'pendingCake', [farmID, wallet]));
                    if (rewards > 0) {
                        cakeRewards += rewards;
                    }
                }
            }
        })());
        await Promise.all(promises);
        if (cakeRewards > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', cake, cakeRewards, wallet);
            balances.push(newToken);
        }
        return balances;
    };
    exports.getFarmBalancesV2 = getFarmBalancesV2;
    // Function to get CAKE in auto-compounding pool:
    const getAutoCakePoolBalance = async (wallet) => {
        let balance = parseInt((await (0, require$$1$1.query)(chain, autoCakePool, ABIs.pancakeswap.autoCakePoolABI, 'userInfo', [wallet]))[0]);
        if (balance > 0) {
            let multiplier = parseInt(await (0, require$$1$1.query)(chain, autoCakePool, ABIs.pancakeswap.autoCakePoolABI, 'getPricePerFullShare', [])) / (10 ** 18);
            let actualBalance = balance * multiplier;
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', cake, actualBalance, wallet);
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getAutoCakePoolBalance = getAutoCakePoolBalance;
    });

    var venus = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getStakedXVS = exports.getStakedVAI = exports.getPendingRewards = exports.getMarketBalances = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'bsc';
    const project = 'venus';
    const controller = '0xfD36E2c2a6789Db23113685031d7F16329158384';
    const vault = '0x0667eed0a0aab930af74a3dfedd263a73994f216';
    const xvsVault = '0x051100480289e704d20e9DB4804837068f3f9204';
    const vai = '0x4BD17003473389A42DAF6a0a729f6Fdb328BbBd7';
    const xvs = '0xcF6BB5389c92Bdda8a3747Ddb454cB7a64626C63';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getMarketBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getMarketBalances()', err); })));
        balance.push(...(await (0, exports.getPendingRewards)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getPendingRewards()', err); })));
        balance.push(...(await (0, exports.getStakedVAI)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getStakedVAI()', err); })));
        balance.push(...(await (0, exports.getStakedXVS)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getStakedXVS()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get market balances:
    const getMarketBalances = async (wallet) => {
        let balances = [];
        let markets = await (0, require$$1$1.query)(chain, controller, ABIs.venus.controllerABI, 'getAllMarkets', []);
        // Market Balance Multicall Query:
        let abi = ABIs.minABI.concat(ABIs.venus.marketABI);
        let calls = [
            { reference: 'marketBalance', methodName: 'balanceOf', methodParameters: [wallet] },
            { reference: 'borrowBalance', methodName: 'borrowBalanceStored', methodParameters: [wallet] }
        ];
        let multicallResults = await (0, require$$1$1.multicallComplexQuery)(chain, markets, abi, calls);
        let promises = markets.map(market => (async () => {
            let marketResults = multicallResults[market];
            if (marketResults) {
                let marketBalanceResults = marketResults['marketBalance'];
                let borrowingResults = marketResults['borrowBalance'];
                // Lending Balances:
                if (marketBalanceResults) {
                    let balance = (0, require$$1$1.parseBN)(marketBalanceResults[0]);
                    if (balance > 0) {
                        let exchangeRate = parseInt(await (0, require$$1$1.query)(chain, market, ABIs.venus.marketABI, 'exchangeRateStored', []));
                        let decimals = parseInt(await (0, require$$1$1.query)(chain, market, ABIs.minABI, 'decimals', []));
                        let underlyingToken = market.toLowerCase() === '0xa07c5b74c9b40447a954e1466938b865b6bbea36' ? require$$1$1.defaultAddress : await (0, require$$1$1.query)(chain, market, ABIs.venus.marketABI, 'underlying', []);
                        let underlyingBalance = (balance / (10 ** decimals)) * (exchangeRate / (10 ** (decimals + 2)));
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'lent', underlyingToken, underlyingBalance, wallet);
                        balances.push(newToken);
                    }
                }
                // Borrowing Balances:
                if (borrowingResults) {
                    let debt = (0, require$$1$1.parseBN)(borrowingResults[0]);
                    if (debt > 0) {
                        let underlyingToken = market.toLowerCase() === '0xa07c5b74c9b40447a954e1466938b865b6bbea36' ? require$$1$1.defaultAddress : await (0, require$$1$1.query)(chain, market, ABIs.venus.marketABI, 'underlying', []);
                        let newToken = await (0, require$$1$1.addDebtToken)(chain, project, underlyingToken, debt, wallet);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getMarketBalances = getMarketBalances;
    // Function to get pending XVS rewards:
    const getPendingRewards = async (wallet) => {
        let rewards = parseInt(await (0, require$$1$1.query)(chain, controller, ABIs.venus.controllerABI, 'venusAccrued', [wallet]));
        if (rewards > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', xvs, rewards, wallet);
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getPendingRewards = getPendingRewards;
    // Function to get staked VAI balance:
    const getStakedVAI = async (wallet) => {
        let balances = [];
        let balance = parseInt((await (0, require$$1$1.query)(chain, vault, ABIs.venus.vaultABI, 'userInfo', [wallet])).amount);
        if (balance > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', vai, balance, wallet);
            balances.push(newToken);
        }
        let pendingRewards = parseInt(await (0, require$$1$1.query)(chain, vault, ABIs.venus.vaultABI, 'pendingXVS', [wallet]));
        if (pendingRewards > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', xvs, pendingRewards, wallet);
            balances.push(newToken);
        }
        return balances;
    };
    exports.getStakedVAI = getStakedVAI;
    // Function to get staked XVS balance:
    const getStakedXVS = async (wallet) => {
        let xvsBalance = 0;
        let balance = parseInt(await (0, require$$1$1.query)(chain, xvsVault, ABIs.venus.xvsVaultABI, 'getUserInfo', [xvs, 0, wallet]));
        if (balance > 0) {
            xvsBalance += balance;
            let pendingRewards = parseInt(await (0, require$$1$1.query)(chain, xvsVault, ABIs.venus.xvsVaultABI, 'pendingReward', [xvs, 0, wallet]));
            if (pendingRewards > 0) {
                xvsBalance += pendingRewards;
            }
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', xvs, xvsBalance, wallet);
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getStakedXVS = getStakedXVS;
    });

    var aave$3 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getStakedLP = exports.getStakedAAVE = exports.getIncentives = exports.getMarketBalances = exports.get = void 0;
    // Imports:




    // Initializations:
    const chain = 'eth';
    const project = 'aave';
    const addressProvider = '0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5';
    const lpStaking = '0xa1116930326D21fB917d5A27F1E9943A9595fb47';
    const incentives = '0xd784927Ff2f95ba542BfC824c8a8a98F3495f6b5';
    const stakedAave = '0x4da27a545c0c5B758a6BA100e3a049001de870f5';
    const aaveToken = '0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9';
    const apiURL = 'https://aave-api-v2.aave.com/data/liquidity/v2';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        let markets = await (0, require$$1$1.fetchData)(`${apiURL}?poolId=${addressProvider}`);
        if (markets.length > 0) {
            balance.push(...(await (0, exports.getMarketBalances)(markets, wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getMarketBalances()', err); })));
            balance.push(...(await (0, exports.getIncentives)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getIncentives()', err); })));
            balance.push(...(await (0, exports.getStakedAAVE)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getStakedAAVE()', err); })));
            balance.push(...(await (0, exports.getStakedLP)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getStakedLP()', err); })));
        }
        else {
            throw new error.WeaverError(chain, project, 'Invalid response from Aave API');
        }
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get lending market balances:
    const getMarketBalances = async (markets, wallet) => {
        // Initializations:
        let balances = [];
        let queries = [];
        // Multicall Query Setup:
        markets.forEach(market => {
            queries.push({
                reference: 'a' + market.symbol,
                contractAddress: market.aTokenAddress,
                abi: ABIs.minABI,
                calls: [{ reference: 'balance', methodName: 'balanceOf', methodParameters: [wallet] }]
            });
            if (market.borrowingEnabled) {
                queries.push({
                    reference: 'vb' + market.symbol,
                    contractAddress: market.variableDebtTokenAddress,
                    abi: ABIs.minABI,
                    calls: [{ reference: 'balance', methodName: 'balanceOf', methodParameters: [wallet] }]
                });
            }
            if (market.stableBorrowRateEnabled) {
                queries.push({
                    reference: 'sb' + market.symbol,
                    contractAddress: market.stableDebtTokenAddress,
                    abi: ABIs.minABI,
                    calls: [{ reference: 'balance', methodName: 'balanceOf', methodParameters: [wallet] }]
                });
            }
        });
        // Multicall Query Results:
        let multicallResults = (await (0, require$$1$1.multicallQuery)(chain, queries)).results;
        let promises = markets.map(market => (async () => {
            // Lending Balances:
            let marketLendingResults = multicallResults['a' + market.symbol].callsReturnContext[0];
            if (marketLendingResults.success) {
                let balance = (0, require$$1$1.parseBN)(marketLendingResults.returnValues[0]);
                if (balance > 0) {
                    let newToken = await (0, require$$1$1.addToken)(chain, project, 'lent', market.underlyingAsset, balance, wallet, market.aTokenAddress);
                    newToken.info = {
                        apy: market.avg7DaysLiquidityRate * 100,
                        deprecated: !market.isActive
                    };
                    balances.push(newToken);
                }
            }
            // Variable Borrowing Balances:
            if (market.borrowingEnabled) {
                let marketVariableBorrowingResults = multicallResults['vb' + market.symbol].callsReturnContext[0];
                if (marketVariableBorrowingResults.success) {
                    let balance = (0, require$$1$1.parseBN)(marketVariableBorrowingResults.returnValues[0]);
                    if (balance > 0) {
                        let newToken = await (0, require$$1$1.addDebtToken)(chain, project, market.underlyingAsset, balance, wallet, market.aTokenAddress);
                        newToken.info = {
                            apy: market.avg7DaysVariableBorrowRate * 100,
                        };
                        balances.push(newToken);
                    }
                }
            }
            // Stable Borrowing Balances:
            if (market.stableBorrowRateEnabled) {
                let marketStableBorrowingResults = multicallResults['sb' + market.symbol].callsReturnContext[0];
                if (marketStableBorrowingResults.success) {
                    let balance = (0, require$$1$1.parseBN)(marketStableBorrowingResults.returnValues[0]);
                    if (balance > 0) {
                        let newToken = await (0, require$$1$1.addDebtToken)(chain, project, market.underlyingAsset, balance, wallet, market.aTokenAddress);
                        newToken.info = {
                            apy: market.stableBorrowRate * 100,
                        };
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getMarketBalances = getMarketBalances;
    // Function to get unclaimed incentives:
    const getIncentives = async (wallet) => {
        let rewards = parseInt(await (0, require$$1$1.query)(chain, incentives, ABIs.aave.incentivesABI, 'getUserUnclaimedRewards', [wallet]));
        if (rewards > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', aaveToken, rewards, wallet);
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getIncentives = getIncentives;
    // Function to get staked AAVE balance:
    const getStakedAAVE = async (wallet) => {
        let balance = parseInt(await (0, require$$1$1.query)(chain, stakedAave, ABIs.minABI, 'balanceOf', [wallet]));
        if (balance > 0) {
            let newToken = await (0, require$$1$1.addXToken)(chain, project, 'staked', stakedAave, balance, wallet, aaveToken, balance, stakedAave);
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getStakedAAVE = getStakedAAVE;
    // Function to get staked LP balance:
    const getStakedLP = async (wallet) => {
        let balance = parseInt(await (0, require$$1$1.query)(chain, lpStaking, ABIs.minABI, 'balanceOf', [wallet]));
        if (balance > 0) {
            let tokenAddress = await (0, require$$1$1.query)(chain, lpStaking, ABIs.aave.stakingABI, 'STAKED_TOKEN', []);
            let newToken = await (0, projectFunctions.addAaveBLPToken)(chain, project, 'staked', tokenAddress, balance, wallet, lpStaking);
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getStakedLP = getStakedLP;
    });

    var apwine$1 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFutureBalances = exports.getStakedAPW = exports.get = void 0;
    // Imports:




    // Initializations:
    const chain = 'eth';
    const project = 'apwine';
    const registry = '0x72d15EAE2Cd729D8F2e41B1328311f3e275612B9';
    const apw = '0x4104b135DBC9609Fc1A9490E61369036497660c8';
    const veapw = '0xC5ca1EBF6e912E49A6a70Bb0385Ea065061a4F09';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getStakedAPW)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getStakedAPW()', err); })));
        balance.push(...(await (0, exports.getFutureBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getFutureBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get staked APW balance:
    const getStakedAPW = async (wallet) => {
        let balance = parseInt(await (0, require$$1$1.query)(chain, veapw, ABIs.minABI, 'balanceOf', [wallet]));
        if (balance > 0) {
            let locked = await (0, require$$1$1.query)(chain, veapw, ABIs.apwine.stakingABI, 'locked', [wallet]);
            let newToken = await (0, require$$1$1.addXToken)(chain, project, 'staked', veapw, balance, wallet, apw, parseInt(locked.amount));
            newToken.info = {
                unlock: parseInt(locked.end)
            };
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getStakedAPW = getStakedAPW;
    // Function to get future balances:
    const getFutureBalances = async (wallet) => {
        let balances = [];
        let poolLength = parseInt(await (0, require$$1$1.query)(chain, registry, ABIs.apwine.registryABI, 'futureVaultCount', []));
        let futures = [...Array(poolLength).keys()];
        // Future Multicall Query:
        let calls = [];
        futures.forEach(futureID => {
            calls.push({ reference: futureID.toString(), methodName: 'getFutureVaultAt', methodParameters: [futureID] });
        });
        let futureMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, registry, ABIs.apwine.registryABI, calls);
        // PT Multicall Query:
        let futureAddresses = Object.keys(futureMulticallResults).map(id => futureMulticallResults[id][0]);
        let ptMulticallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, futureAddresses, ABIs.apwine.futureABI, 'getPTAddress', []);
        // Balance Multicall Query:
        let ptAddresses = Object.keys(ptMulticallResults).map(future => ptMulticallResults[future][0]);
        let balanceMulticallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, ptAddresses, ABIs.minABI, 'balanceOf', [wallet]);
        let promises = futureAddresses.map(future => (async () => {
            let ptAddress = ptMulticallResults[future][0];
            let balanceResults = balanceMulticallResults[ptAddress];
            if (balanceResults) {
                let ptBalance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (ptBalance > 0) {
                    let platform = await (0, require$$1$1.query)(chain, future, ABIs.apwine.futureABI, 'PLATFORM_NAME', []);
                    let futureToken = await (0, require$$1$1.query)(chain, future, ABIs.apwine.futureABI, 'getIBTAddress', []);
                    // StakeDAO Futures:
                    if (platform === 'StakeDAO') {
                        if (futureToken.toLowerCase() === '0xac14864ce5a98af3248ffbf549441b04421247d3') { // xSDT
                            let underlyingToken = '0x73968b9a57c6E53d41345FD57a6E6ae27d6CDB2F'; // SDT
                            let stakedSupply = parseInt(await (0, require$$1$1.query)(chain, futureToken, ABIs.minABI, 'totalSupply', []));
                            let underlyingTokenStaked = parseInt(await (0, require$$1$1.query)(chain, underlyingToken, ABIs.minABI, 'balanceOf', [futureToken]));
                            let underlyingExchangeRate = underlyingTokenStaked / stakedSupply;
                            let fytBalance = await fetchFYTBalance(wallet, future, futureToken);
                            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', underlyingToken, (ptBalance + fytBalance) * underlyingExchangeRate, wallet);
                            balances.push(newToken);
                        }
                        // Lido Futures:
                    }
                    else if (platform === 'Lido') {
                        let fytBalance = await fetchFYTBalance(wallet, future, futureToken);
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', futureToken, ptBalance + fytBalance, wallet);
                        balances.push(newToken);
                        // Yearn Futures:
                    }
                    else if (platform === 'Yearn') {
                        if (futureToken.toLowerCase() === '0xe537b5cc158eb71037d4125bdd7538421981e6aa') { // yvCurve-3Crypto
                            let underlyingToken = await (0, require$$1$1.query)(chain, futureToken, ABIs.yearn.vaultABI, 'token', []);
                            let underlyingExchangeRate = parseInt(await (0, require$$1$1.query)(chain, futureToken, ABIs.yearn.vaultABI, 'pricePerShare', [])) / (10 ** 18);
                            let fytBalance = await fetchFYTBalance(wallet, future, futureToken);
                            let newToken = await (0, projectFunctions.addCurveToken)(chain, project, 'staked', underlyingToken, (ptBalance + fytBalance) * underlyingExchangeRate, wallet);
                            balances.push(newToken);
                        }
                        // Harvest Futures:
                    }
                    else if (platform === 'Harvest') {
                        let underlyingToken = await (0, require$$1$1.query)(chain, futureToken, ABIs.harvest.stakingABI, 'underlying', []);
                        let underlyingExchangeRate = parseInt(await (0, require$$1$1.query)(chain, futureToken, ABIs.harvest.stakingABI, 'getPricePerFullShare', [])) / (10 ** 18);
                        let fytBalance = await fetchFYTBalance(wallet, future, futureToken);
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', underlyingToken, (ptBalance + fytBalance) * underlyingExchangeRate, wallet);
                        balances.push(newToken);
                        // TrueFi Futures:
                    }
                    else if (platform === 'TrueFi') {
                        let underlyingToken = await (0, require$$1$1.query)(chain, futureToken, ABIs.truefi.poolABI, 'token', []);
                        let underlyingPoolValue = parseInt(await (0, require$$1$1.query)(chain, futureToken, ABIs.truefi.poolABI, 'poolValue', []));
                        let underlyingSupply = parseInt(await (0, require$$1$1.query)(chain, futureToken, ABIs.minABI, 'totalSupply', []));
                        let underlyingExchangeRate = underlyingPoolValue / underlyingSupply;
                        let fytBalance = await fetchFYTBalance(wallet, future, futureToken);
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', underlyingToken, (ptBalance + fytBalance) * underlyingExchangeRate, wallet);
                        balances.push(newToken);
                        // Aave Futures:
                    }
                    else if (platform === 'Aave') {
                        let underlyingToken = await (0, require$$1$1.query)(chain, futureToken, ABIs.aave.lendingABI, 'UNDERLYING_ASSET_ADDRESS', []);
                        let fytBalance = await fetchFYTBalance(wallet, future, futureToken);
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', underlyingToken, ptBalance + fytBalance, wallet);
                        balances.push(newToken);
                        // Olympus Futures:
                    }
                    else if (platform === 'Olympus') {
                        let fytBalance = await fetchFYTBalance(wallet, future, futureToken);
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', futureToken, ptBalance + fytBalance, wallet);
                        balances.push(newToken);
                        // Sushi Futures:
                    }
                    else if (platform === 'Sushi') {
                        let fytBalance = await fetchFYTBalance(wallet, future, futureToken);
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', futureToken, ptBalance + fytBalance, wallet);
                        balances.push(newToken);
                        // Paladin Futures:
                    }
                    else if (platform === 'Paladin') {
                        let pool = await (0, require$$1$1.query)(chain, futureToken, ABIs.paladin.tokenABI, 'palPool', []);
                        let poolToken = await (0, require$$1$1.query)(chain, pool, ABIs.paladin.poolABI, 'underlying', []);
                        let underlyingToken = await (0, require$$1$1.query)(chain, poolToken, ABIs.aave.stakingABI, 'STAKED_TOKEN', []);
                        let underlyingExchangeRate = parseInt(await (0, require$$1$1.query)(chain, pool, ABIs.paladin.poolABI, 'exchangeRateStored', [])) / (10 ** 18);
                        let fytBalance = await fetchFYTBalance(wallet, future, futureToken);
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', underlyingToken, (ptBalance + fytBalance) * underlyingExchangeRate, wallet);
                        balances.push(newToken);
                        // ParaSwap Futures:
                    }
                    else if (platform === 'ParaSwap') {
                        let underlyingToken = '0xcAfE001067cDEF266AfB7Eb5A286dCFD277f3dE5'; // PSP
                        let underlyingExchangeRate = parseInt(await (0, require$$1$1.query)(chain, futureToken, ABIs.paraswap.stakingABI, 'PSPForSPSP', [10 ** 6])) / (10 ** 6);
                        let fytBalance = await fetchFYTBalance(wallet, future, futureToken);
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', underlyingToken, (ptBalance + fytBalance) * underlyingExchangeRate, wallet);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getFutureBalances = getFutureBalances;
    /* ========================================================================================================================================================================= */
    // Function to fetch FYT Balances for any future:
    const fetchFYTBalance = async (wallet, future, futureToken) => {
        let balance = 0;
        let currentPeriod = parseInt(await (0, require$$1$1.query)(chain, future, ABIs.apwine.futureABI, 'getCurrentPeriodIndex', []));
        for (let period = 1; period <= currentPeriod; period++) {
            let fyt = await (0, require$$1$1.query)(chain, future, ABIs.apwine.futureABI, 'getFYTofPeriod', [period]);
            let fytBalance = parseInt(await (0, require$$1$1.query)(chain, fyt, ABIs.minABI, 'balanceOf', [wallet]));
            if (fytBalance > 0) {
                let futureTokenDecimals = parseInt(await (0, require$$1$1.query)(chain, futureToken, ABIs.minABI, 'decimals', []));
                let unrealisedYield = parseInt(await (0, require$$1$1.query)(chain, future, ABIs.apwine.futureABI, 'getUnrealisedYieldPerPT', [])) / (10 ** futureTokenDecimals);
                if (unrealisedYield > 0) {
                    let intermediateRate = parseInt(await (0, require$$1$1.query)(chain, future, ABIs.apwine.futureABI, 'getIBTRate', [])) / (10 ** futureTokenDecimals);
                    let exchangeRate = unrealisedYield * intermediateRate;
                    let actualFytBalance = fytBalance * exchangeRate;
                    balance += actualFytBalance;
                }
            }
        }
        return balance;
    };
    });

    var balancer$1 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPoolBalances = exports.get = void 0;
    // Imports:




    // Initializations:
    const chain = 'eth';
    const project = 'balancer';
    const pools = [
        '0x01abc00E86C7e258823b9a055Fd62cA6CF61a163',
        '0x021c343C6180f03cE9E48FaE3ff432309b9aF199',
        '0x0297e37f1873D2DAb4487Aa67cD56B58E2F27875',
        '0x03cD191F589d12b0582a99808cf19851E468E6B5',
        '0x06Df3b2bbB68adc8B0e302443692037ED9f91b42',
        '0x072f14B85ADd63488DDaD88f855Fda4A99d6aC9B',
        '0x09804CaEA2400035b18E2173fdD10EC8b670cA09',
        '0x0a9E96988E21c9A03B8DC011826A00259e02C46e',
        '0x0b09deA16768f0799065C475bE02919503cB2a35',
        '0x1050f901A307e7E71471CA3d12dfceA01d0a0A1c',
        '0x14462305D211C12A736986F4E8216E28c5EA7Ab4',
        '0x148CE9b50bE946a96e94A4f5479b771bAB9B1c59',
        '0x14Bf727F67Aa294ec36347BD95aBA1a2c136FE7a',
        '0x15432bA000e58E3c0aE52A5dEc0579215EBC75D0',
        '0x16faF9f73748013155B7bC116a3008b57332D1e6',
        '0x186084fF790C65088BA694Df11758faE4943EE9E',
        '0x1B46e4B0791C9383B73b64AaBc371360a031a83F',
        '0x22939E40Cf467DE8F5Db4F05A4027e5D4c1C658c',
        '0x231E687C9961d3A27e6E266Ac5C433Ce4F8253E4',
        '0x29d7a7E0d781C957696697B94D4Bc18C651e358E',
        '0x2D6e3515C8b47192Ca3913770fa741d3C4Dac354',
        '0x32296969Ef14EB0c6d29669C550D4a0449130230',
        '0x32FC95287b14eAeF3Afa92CCCC48C285eE3a280a',
        '0x344e8f99a55DA2ba6B4b5158df2143374E400DF2',
        '0x36128D5436d2d70cab39C9AF9CcE146C38554ff0',
        '0x38A01c45D86b61A70044fB2A76eAC8e75B1ac78E',
        '0x39Cd55FF7E7d7C66D7D2736f1d5D4791cDab895B',
        '0x3A19030Ed746bD1C3f2B0f996FF9479aF04C5F0A',
        '0x3a271A9838B36Ea8c42eAf230f969c6b40E4Ac04',
        '0x3A693EB97b500008d4Bb6258906f7Bbca1D09Cc5',
        '0x3e5FA9518eA95c3E533EB377C001702A9AaCAA32',
        '0x3ebf48cd7586d7A4521cE59E53D9a907EBf1480F',
        '0x3FEBe770201CF4d351D33708170B9202BA1C6Af7',
        '0x41175c3ee2Dd49FCa9b263F49525c069095b87C7',
        '0x45910fafF3cBf990FdB204682e93055506682d17',
        '0x4626d81b3a1711bEb79f4CEcFf2413886d461677',
        '0x494B26D4aEE801Cb1fabF498Ee24f0af20238743',
        '0x4dd7517dE8065A688dd0e398ed031B6e469f9F0F',
        '0x4E7f40cD37CEE710f5e87AD72959d30ef8a01A5D',
        '0x4FA6086ED10C971D255aa1B09a6beB1C7bE5ca37',
        '0x503717B3Dc137e230AFC7c772520D7974474fB70',
        '0x571046EaE58C783f29f95ADBa17Dd561Af8a8712',
        '0x58aF920D9Dc0bc4e8F771FF013D79215CabcaA9e',
        '0x59e2563c08029F13F80CBa9Eb610bfD0367eD266',
        '0x5Aa90c7362ea46b3cbFBD7F01EA5Ca69C98Fef1c',
        '0x5b1C06c4923DBBa4B27Cfa270FFB2E60Aa286159',
        '0x5c6Ee304399DBdB9C8Ef030aB642B10820DB8F56',
        '0x5D563Ca1E2daaAe3402c36097b934630AB53702c',
        '0x5d6e3d7632D6719e04cA162be652164Bec1EaA6b',
        '0x606e3CCC8C51cbbB1Ff07AD03c6F95a84672ab16',
        '0x60B4601cDdDc4467f31b1F770cb93c51dC7dC728',
        '0x614b5038611729ed49e0dED154d8A5d3AF9D1D9E',
        '0x61d5dc44849c9C87b0856a2a311536205C96c7FD',
        '0x647c1FD457b95b75D0972fF08FE01d7D7bda05dF',
        '0x6602315d19278278578830933aeaaC0d684c9C3f',
        '0x67F8FCb9D3c463da05DE1392EfDbB2A87F8599Ea',
        '0x6AE82385f76e3742f89cB46343B169f6ee49dE1b',
        '0x6De69beB66317557E65168BD7D3fff22a89dBb11',
        '0x71628c66C502F988Fbb9e17081F2bD14e361FAF4',
        '0x72Ab6fF76554f90532E2809Cee019ade724e029a',
        '0x787546Bf2c05e3e19e2b6BDE57A203da7f682efF',
        '0x7Bf521b4f4C1543A622e11eE347EFB1a23743322',
        '0x7EB878107Af0440F9E776f999CE053D277c8Aca8',
        '0x80bE0c303D8Ad2A280878b50a39B1ee8E54DBD22',
        '0x8339E311265A025Fd5792DB800daA8edA4264e2C',
        '0x85DCA8667D020e694FDfF06E7eE85e0c5C7C61a4',
        '0x87165B659Ba7746907a48763063efA3B323C2B07',
        '0x893B30574BF183d69413717f30b17062eC9DFD8b',
        '0x89EA4363Bd541d27d9811E4Df1209dAa73154472',
        '0x8a92c3afAbaB59101B4e2426C82a7ddBb66B5450',
        '0x8bDa1AB5eEad21547Ba0f33c07c86C5Dc48D9Baa',
        '0x8e9690E135005E415BD050B11768615DE43fe5f8',
        '0x96646936b91d6B9D7D0c47C496AfBF3D6ec7B6f8',
        '0x991aeafbe1B1C7ac8348DC623AE350768d0C65b3',
        '0x9c08C7a7a89cfD671c79eacdc6F07c1996277eD5',
        '0x9E7fD25Ad9D97F1e6716fa5bB04749A4621e892d',
        '0x9F19a375709BAF0E8e35C2c5c65aca676c4C7191',
        '0x9F1F16B025F703eE985B58cEd48dAf93daD2f7EF',
        '0x9F2b223dA9F3911698C9b90Ecdf3ffEe37DD54a8',
        '0xa02E4b3d18D4E6B8d18Ac421fBc3dfFF8933c40a',
        '0xa0488D89FB8D3085D83ad2426b94b9715cF02869',
        '0xa660ba113F9AABaeB4Bcd28A4a1705f4997d5432',
        '0xA6F548DF93de924d73be7D25dC02554c6bD66dB5',
        '0xA8D4433BAdAa1A35506804B43657B0694deA928d',
        '0xaac98EE71D4F8A156B6abaa6844Cdb7789d086CE',
        '0xad302e620FEDb60078B33514757335545ba05c6D',
        '0xB0401Ab1108BD26C85A07243dFDF09F4821D76a2',
        '0xB0fBa102A03703fe2c1Dd6300E7b431eAC60E4B6',
        '0xB2634e2BFab9664F603626afc3D270BE63c09adE',
        '0xB6b9B165C4AC3f5233A0CF413126C72Be28B468A',
        '0xb82A45ea7C6d7c90bD95e9e2aF13242538F2e269',
        '0xBb31b8EEBB9C71001562AE56Aa5751Af313e6d89',
        '0xC6A5032dC4bF638e15b4a66BC718ba7bA474FF73',
        '0xce16E7ed7654a3453E8FaF748f2c82E57069278f',
        '0xce66904B68f1f070332Cbc631DE7ee98B650b499',
        '0xd0E43C99C05271Fa9FDF82281d4d1831A47BE81f',
        '0xd16847480D6bc218048CD31Ad98b63CC34e5c2bF',
        '0xD208168d2A512240Eb82582205D94a0710BCe4E7',
        '0xd47c0734a0b5feFf3bB2FC8542Cd5B9751aFeEfB',
        '0xd57b0Ee9e080E3f6Aa0C30BAE98234359e97Ea98'
    ];
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getPoolBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getPoolBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get all pool balances:
    const getPoolBalances = async (wallet) => {
        let balances = [];
        // Balance Multicall Query:
        let multicallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, pools, ABIs.minABI, 'balanceOf', [wallet]);
        let promises = pools.map(pool => (async () => {
            let balanceResults = multicallResults[pool];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 0) {
                    let newToken = await (0, projectFunctions.addBalancerToken)(chain, project, 'staked', pool, balance, wallet);
                    balances.push(newToken);
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getPoolBalances = getPoolBalances;
    });

    var compound = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getMarketBalances = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'eth';
    const project = 'compound';
    const controller = '0x3d9819210a31b4961b30ef54be2aed79b9c9cd3b';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getMarketBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getMarketBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get all market balances and debt:
    const getMarketBalances = async (wallet) => {
        let balances = [];
        let markets = await (0, require$$1$1.query)(chain, controller, ABIs.compound.controllerABI, 'getAllMarkets', []);
        // Market Balance Multicall Query:
        let abi = ABIs.minABI.concat(ABIs.compound.marketABI);
        let calls = [
            { reference: 'marketBalance', methodName: 'balanceOf', methodParameters: [wallet] },
            { reference: 'accountSnapshot', methodName: 'getAccountSnapshot', methodParameters: [wallet] }
        ];
        let multicallResults = await (0, require$$1$1.multicallComplexQuery)(chain, markets, abi, calls);
        let promises = markets.map(market => (async () => {
            let marketResults = multicallResults[market];
            if (marketResults) {
                let marketBalanceResults = marketResults['marketBalance'];
                let accountSnapshotResults = marketResults['accountSnapshot'];
                if (marketBalanceResults && accountSnapshotResults) {
                    let balance = (0, require$$1$1.parseBN)(marketBalanceResults[0]);
                    let debt = (0, require$$1$1.parseBN)(accountSnapshotResults[2]);
                    let exchangeRate = (0, require$$1$1.parseBN)(accountSnapshotResults[3]);
                    if (balance > 0 || debt > 0) {
                        let tokenAddress = market.toLowerCase() === '0x4ddc2d193948926d02f9b1fe9e1daa0718270ed5' ? require$$1$1.defaultAddress : await (0, require$$1$1.query)(chain, market, ABIs.compound.marketABI, 'underlying', []);
                        // Lending Balances:
                        if (balance > 0) {
                            let underlyingBalance = balance * (exchangeRate / (10 ** 18));
                            let newToken = await (0, require$$1$1.addToken)(chain, project, 'lent', tokenAddress, underlyingBalance, wallet);
                            balances.push(newToken);
                        }
                        // Borrowing Balances:
                        if (debt > 0) {
                            let newToken = await (0, require$$1$1.addDebtToken)(chain, project, tokenAddress, debt, wallet);
                            balances.push(newToken);
                        }
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getMarketBalances = getMarketBalances;
    });

    var cream$2 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getStakedCREAM = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'eth';
    const project = 'cream';
    const staking = [
        '0x780F75ad0B02afeb6039672E6a6CEDe7447a8b45',
        '0xBdc3372161dfd0361161e06083eE5D52a9cE7595',
        '0xD5586C1804D2e1795f3FBbAfB1FBB9099ee20A6c',
        '0xE618C25f580684770f2578FAca31fb7aCB2F5945'
    ];
    const creamToken = '0x2ba592f78db6436527729929aaf6c908497cb200';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getStakedCREAM)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getStakedCREAM()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get staked CREAM balances:
    const getStakedCREAM = async (wallet) => {
        let balances = [];
        let promises = staking.map(address => (async () => {
            let balance = parseInt(await (0, require$$1$1.query)(chain, address, ABIs.minABI, 'balanceOf', [wallet]));
            if (balance > 0) {
                let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', creamToken, balance, wallet);
                balances.push(newToken);
            }
            let earned = parseInt(await (0, require$$1$1.query)(chain, address, ABIs.cream.stakingABI, 'earned', [wallet]));
            if (earned > 0) {
                let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', creamToken, earned, wallet);
                balances.push(newToken);
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getStakedCREAM = getStakedCREAM;
    });

    var curve$2 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFactoryPoolBalances = exports.getCryptoPoolBalances = exports.getPoolBalances = exports.get = void 0;
    // Imports:




    // Initializations:
    const chain = 'eth';
    const project = 'curve';
    const registry = '0x90E00ACe148ca3b23Ac1bC8C240C2a7Dd9c2d7f5';
    const cryptoRegistry = '0x8F942C20D02bEfc377D41445793068908E2250D0';
    const factory = '0xB9fC157394Af804a3578134A6585C0dc9cc990d4';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getPoolBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getPoolBalances()', err); })));
        balance.push(...(await (0, exports.getCryptoPoolBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getCryptoPoolBalances()', err); })));
        balance.push(...(await (0, exports.getFactoryPoolBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getFactoryPoolBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get pool balances:
    const getPoolBalances = async (wallet) => {
        let balances = [];
        let poolAddresses = await getPoolAddresses(registry);
        // Initializing Multicalls:
        let lpCalls = [];
        let gaugeCalls = [];
        poolAddresses.forEach(poolAddress => { lpCalls.push({ reference: poolAddress, methodName: 'get_lp_token', methodParameters: [poolAddress] }); });
        poolAddresses.forEach(poolAddress => { gaugeCalls.push({ reference: poolAddress, methodName: 'get_gauges', methodParameters: [poolAddress] }); });
        // LP Token Balances:
        let lpMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, registry, ABIs.curve.registryABI, lpCalls);
        let lpTokens = Object.keys(lpMulticallResults).map(pool => lpMulticallResults[pool][0]);
        balances.push(...(await getLPTokenBalances(lpTokens, wallet)));
        // Gauge Balances:
        let gaugeMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, registry, ABIs.curve.registryABI, gaugeCalls);
        let gauges = Object.keys(gaugeMulticallResults).map(pool => gaugeMulticallResults[pool][0][0]).filter(gauge => gauge != require$$1$1.zero);
        balances.push(...(await getGaugeBalances(gauges, wallet)));
        return balances;
    };
    exports.getPoolBalances = getPoolBalances;
    // Function to get crypto pool balances:
    const getCryptoPoolBalances = async (wallet) => {
        let balances = [];
        let poolAddresses = await getPoolAddresses(cryptoRegistry);
        // Initializing Multicalls:
        let lpCalls = [];
        let gaugeCalls = [];
        poolAddresses.forEach(poolAddress => { lpCalls.push({ reference: poolAddress, methodName: 'get_lp_token', methodParameters: [poolAddress] }); });
        poolAddresses.forEach(poolAddress => { gaugeCalls.push({ reference: poolAddress, methodName: 'get_gauges', methodParameters: [poolAddress] }); });
        // LP Token Balances:
        let lpMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, cryptoRegistry, ABIs.curve.registryABI, lpCalls);
        let lpTokens = Object.keys(lpMulticallResults).map(pool => lpMulticallResults[pool][0]);
        balances.push(...(await getLPTokenBalances(lpTokens, wallet)));
        // Gauge Balances:
        let gaugeMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, cryptoRegistry, ABIs.curve.registryABI, gaugeCalls);
        let gauges = Object.keys(gaugeMulticallResults).map(pool => gaugeMulticallResults[pool][0][0]).filter(gauge => gauge != require$$1$1.zero);
        balances.push(...(await getGaugeBalances(gauges, wallet)));
        return balances;
    };
    exports.getCryptoPoolBalances = getCryptoPoolBalances;
    // Function to get factory pool balances:
    const getFactoryPoolBalances = async (wallet) => {
        let balances = [];
        let poolAddresses = await getPoolAddresses(factory);
        // Initializing Multicall:
        let gaugeCalls = [];
        poolAddresses.forEach(poolAddress => { gaugeCalls.push({ reference: poolAddress, methodName: 'get_gauge', methodParameters: [poolAddress] }); });
        // LP Token Balances (same as pools):
        balances.push(...(await getLPTokenBalances(poolAddresses, wallet)));
        // Gauge Balances:
        let gaugeMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, factory, ABIs.curve.factoryABI, gaugeCalls);
        let gauges = Object.keys(gaugeMulticallResults).map(pool => gaugeMulticallResults[pool][0]).filter(gauge => gauge != require$$1$1.zero);
        balances.push(...(await getGaugeBalances(gauges, wallet)));
        return balances;
    };
    exports.getFactoryPoolBalances = getFactoryPoolBalances;
    /* ========================================================================================================================================================================= */
    // Function to get pool addresses:
    const getPoolAddresses = async (registry) => {
        let poolCount = parseInt(await (0, require$$1$1.query)(chain, registry, ABIs.curve.registryABI, 'pool_count', []));
        let poolIDs = [...Array(poolCount).keys()];
        let poolCalls = [];
        poolIDs.forEach(poolID => {
            poolCalls.push({ reference: poolID.toString(), methodName: 'pool_list', methodParameters: [poolID] });
        });
        let poolMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, registry, ABIs.curve.registryABI, poolCalls);
        let poolAddresses = Object.keys(poolMulticallResults).map(poolID => poolMulticallResults[poolID][0]);
        return poolAddresses;
    };
    // Function to get LP token balances:
    const getLPTokenBalances = async (lpTokens, wallet) => {
        let balances = [];
        if (lpTokens.length > 0) {
            let balanceMulticallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, lpTokens, ABIs.minABI, 'balanceOf', [wallet]);
            let promises = lpTokens.map(lpToken => (async () => {
                let balanceResults = balanceMulticallResults[lpToken];
                if (balanceResults) {
                    let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                    if (balance > 0) {
                        let newToken = await (0, projectFunctions.addCurveToken)(chain, project, 'liquidity', lpToken, balance, wallet);
                        balances.push(newToken);
                    }
                }
            })());
            await Promise.all(promises);
        }
        return balances;
    };
    // Function get gauge balances:
    const getGaugeBalances = async (gauges, wallet) => {
        let balances = [];
        if (gauges.length > 0) {
            let balanceMulticallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, gauges, ABIs.minABI, 'balanceOf', [wallet]);
            let promises = gauges.map(gauge => (async () => {
                let balanceResults = balanceMulticallResults[gauge];
                if (balanceResults) {
                    let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                    if (balance > 0) {
                        let lpToken = await (0, require$$1$1.query)(chain, gauge, ABIs.curve.gaugeABI, 'lp_token', []);
                        let newToken = await (0, projectFunctions.addCurveToken)(chain, project, 'staked', lpToken, balance, wallet);
                        balances.push(newToken);
                        // Pending Rewards:
                        for (let i = 0; i < 2; i++) {
                            let token = await (0, require$$1$1.query)(chain, gauge, ABIs.curve.gaugeABI, 'reward_tokens', [i]);
                            if (token != require$$1$1.zero) {
                                let rewards = parseInt(await (0, require$$1$1.query)(chain, gauge, ABIs.curve.gaugeABI, 'claimable_reward', [wallet, token]));
                                if (rewards > 0) {
                                    let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', token, rewards, wallet);
                                    balances.push(newToken);
                                }
                            }
                        }
                    }
                }
            })());
            await Promise.all(promises);
        }
        return balances;
    };
    });

    var mstable$1 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getStaked = exports.getVaultBalances = exports.getPoolBalances = exports.getAssetBalances = exports.get = void 0;
    // Imports:




    // Initializations:
    const chain = 'eth';
    const project = 'mstable';
    const imUSD = '0x30647a72dc82d7fbb1123ea74716ab8a317eac19';
    const imBTC = '0x17d8CBB6Bce8cEE970a4027d1198F6700A7a6c24';
    const imUSDVault = '0x78BefCa7de27d07DC6e71da295Cc2946681A6c7B';
    const imBTCVault = '0xF38522f63f40f9Dd81aBAfD2B8EFc2EC958a3016';
    const stakedMTA = '0x8f2326316eC696F6d023E37A9931c2b2C177a3D7';
    const balStaking = '0xeFbe22085D9f29863Cfb77EEd16d3cC0D927b011';
    const mta = '0xa3bed4e1c75d00fa6f4e5e6922db7261b5e9acd2';
    const pools = [
        '0xfE842e95f8911dcc21c943a1dAA4bd641a1381c6',
        '0x4fB30C5A3aC8e85bC32785518633303C4590752d',
        '0x4eaa01974B6594C0Ee62fFd7FEE56CF11E6af936',
        '0x36f944b7312eac89381bd78326df9c84691d8a5b',
        '0x2F1423D27f9B20058d9D1843E342726fDF985Eb4',
        '0xc3280306b6218031e61752d060b091278d45c329',
        '0x48c59199Da51B7E30Ea200a74Ea07974e62C4bA7' // mBTC-HBTC
    ];
    const vaults = [
        '0xD124B55f70D374F58455c8AEdf308E52Cf2A6207',
        '0xAdeeDD3e5768F7882572Ad91065f93BA88343C99',
        '0x0997dDdc038c8A958a3A3d00425C16f8ECa87deb',
        '0xF93e0ddE0F7C48108abbD880DB7697A86169f13b',
        '0xD24099Eb4CD604198071958655E4f2D263a5539B',
        '0x97e2a2f97a2e9a4cfb462a49ab7c8d205abb9ed9',
        '0xF65D53AA6e2E4A5f4F026e73cb3e22C22D75E35C' // mBTC-HBTC
    ];
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getAssetBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getAssetBalances()', err); })));
        balance.push(...(await (0, exports.getPoolBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getPoolBalances()', err); })));
        balance.push(...(await (0, exports.getVaultBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getVaultBalances()', err); })));
        balance.push(...(await (0, exports.getStaked)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getStaked()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get asset balances:
    const getAssetBalances = async (wallet) => {
        let balances = [];
        // imUSD:
        let usdAssetBalance = parseInt(await (0, require$$1$1.query)(chain, imUSD, ABIs.minABI, 'balanceOf', [wallet]));
        if (usdAssetBalance > 0) {
            let decimals = parseInt(await (0, require$$1$1.query)(chain, imUSD, ABIs.minABI, 'decimals', []));
            let exchangeRate = parseInt(await (0, require$$1$1.query)(chain, imUSD, ABIs.mstable.assetABI, 'exchangeRate', [])) / (10 ** decimals);
            let token = await (0, require$$1$1.query)(chain, imUSD, ABIs.mstable.assetABI, 'underlying', []);
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', token, usdAssetBalance * exchangeRate, wallet);
            balances.push(newToken);
        }
        // imBTC:
        let btcAssetBalance = parseInt(await (0, require$$1$1.query)(chain, imBTC, ABIs.minABI, 'balanceOf', [wallet]));
        if (btcAssetBalance > 0) {
            let decimals = parseInt(await (0, require$$1$1.query)(chain, imBTC, ABIs.minABI, 'decimals', []));
            let exchangeRate = parseInt(await (0, require$$1$1.query)(chain, imBTC, ABIs.mstable.assetABI, 'exchangeRate', [])) / (10 ** decimals);
            let token = await (0, require$$1$1.query)(chain, imBTC, ABIs.mstable.assetABI, 'underlying', []);
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', token, btcAssetBalance * exchangeRate, wallet);
            balances.push(newToken);
        }
        // imUSD Vault:
        let usdVaultBalance = parseInt(await (0, require$$1$1.query)(chain, imUSDVault, ABIs.mstable.vaultABI, 'rawBalanceOf', [wallet]));
        if (usdVaultBalance > 0) {
            let decimals = parseInt(await (0, require$$1$1.query)(chain, imUSD, ABIs.minABI, 'decimals', []));
            let exchangeRate = parseInt(await (0, require$$1$1.query)(chain, imUSD, ABIs.mstable.assetABI, 'exchangeRate', [])) / (10 ** decimals);
            let token = await (0, require$$1$1.query)(chain, imUSD, ABIs.mstable.assetABI, 'underlying', []);
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', token, usdVaultBalance * exchangeRate, wallet);
            balances.push(newToken);
            let rewards = parseInt(await (0, require$$1$1.query)(chain, imUSDVault, ABIs.mstable.vaultABI, 'earned', [wallet]));
            if (rewards > 0) {
                let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', mta, rewards, wallet);
                balances.push(newToken);
            }
        }
        // imBTC Vault:
        let btcVaultBalance = parseInt(await (0, require$$1$1.query)(chain, imBTCVault, ABIs.mstable.vaultABI, 'rawBalanceOf', [wallet]));
        if (btcVaultBalance > 0) {
            let decimals = parseInt(await (0, require$$1$1.query)(chain, imBTC, ABIs.minABI, 'decimals', []));
            let exchangeRate = parseInt(await (0, require$$1$1.query)(chain, imBTC, ABIs.mstable.assetABI, 'exchangeRate', [])) / (10 ** decimals);
            let token = await (0, require$$1$1.query)(chain, imBTC, ABIs.mstable.assetABI, 'underlying', []);
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', token, btcVaultBalance * exchangeRate, wallet);
            balances.push(newToken);
            let rewards = parseInt(await (0, require$$1$1.query)(chain, imBTCVault, ABIs.mstable.vaultABI, 'earned', [wallet]));
            if (rewards > 0) {
                let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', mta, rewards, wallet);
                balances.push(newToken);
            }
        }
        return balances;
    };
    exports.getAssetBalances = getAssetBalances;
    // Function to get pool balances:
    const getPoolBalances = async (wallet) => {
        let balances = [];
        // Balance Multicall Query:
        let multicallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, pools, ABIs.minABI, 'balanceOf', [wallet]);
        let promises = pools.map(pool => (async () => {
            let balanceResults = multicallResults[pool];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 0) {
                    let newToken = await (0, projectFunctions.addStableToken)(chain, project, 'staked', pool, balance, wallet);
                    balances.push(newToken);
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getPoolBalances = getPoolBalances;
    // Function to get vault balances:
    const getVaultBalances = async (wallet) => {
        let balances = [];
        let mtaRewards = 0;
        // Balance Multicall Query:
        let multicallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, vaults, ABIs.mstable.vaultABI, 'rawBalanceOf', [wallet]);
        let promises = vaults.map(vault => (async () => {
            let balanceResults = multicallResults[vault];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 0) {
                    let lpToken = await (0, require$$1$1.query)(chain, vault, ABIs.mstable.vaultABI, 'stakingToken', []);
                    let newToken = await (0, projectFunctions.addStableToken)(chain, project, 'staked', lpToken, balance, wallet);
                    balances.push(newToken);
                    let rewards = parseInt(await (0, require$$1$1.query)(chain, vault, ABIs.mstable.vaultABI, 'earned', [wallet]));
                    if (rewards > 0) {
                        mtaRewards += rewards;
                    }
                }
            }
        })());
        await Promise.all(promises);
        if (mtaRewards > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', mta, mtaRewards, wallet);
            balances.push(newToken);
        }
        return balances;
    };
    exports.getVaultBalances = getVaultBalances;
    // Function to get staked balances:
    const getStaked = async (wallet) => {
        let balances = [];
        // MTA Staking:
        let mtaBalance = parseInt((await (0, require$$1$1.query)(chain, stakedMTA, ABIs.mstable.stakingABI, 'rawBalanceOf', [wallet]))[0]);
        if (mtaBalance > 0) {
            let newToken = await (0, require$$1$1.addXToken)(chain, project, 'staked', stakedMTA, mtaBalance, wallet, mta, mtaBalance);
            balances.push(newToken);
            let mtaRewards = parseInt(await (0, require$$1$1.query)(chain, stakedMTA, ABIs.mstable.stakingABI, 'earned', [wallet]));
            if (mtaRewards > 0) {
                let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', mta, mtaRewards, wallet);
                balances.push(newToken);
            }
        }
        // Balancer LP Staking:
        let balBalance = parseInt((await (0, require$$1$1.query)(chain, balStaking, ABIs.mstable.stakingABI, 'rawBalanceOf', [wallet]))[0]);
        if (balBalance > 0) {
            let token = await (0, require$$1$1.query)(chain, balStaking, ABIs.mstable.stakingABI, 'STAKED_TOKEN', []);
            let newToken = await (0, projectFunctions.addBalancerToken)(chain, project, 'staked', token, balBalance, wallet);
            balances.push(newToken);
            let mtaRewards = parseInt(await (0, require$$1$1.query)(chain, balStaking, ABIs.mstable.stakingABI, 'earned', [wallet]));
            if (mtaRewards > 0) {
                let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', mta, mtaRewards, wallet);
                balances.push(newToken);
            }
        }
        return balances;
    };
    exports.getStaked = getStaked;
    });

    var pooltogether$2 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPoolBalanceV4 = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'eth';
    const project = 'pooltogether';
    const poolTicketV4 = '0xdd4d117723C257CEe402285D3aCF218E9A8236E1';
    const poolDepositV4 = '0xd89a09084555a7D0ABe7B111b1f78DFEdDd638Be';
    const usdc = '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getPoolBalanceV4)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getPoolBalanceV4()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get V4 pool balance:
    const getPoolBalanceV4 = async (wallet) => {
        let balance = parseInt(await (0, require$$1$1.query)(chain, poolTicketV4, ABIs.minABI, 'balanceOf', [wallet]));
        if (balance > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', usdc, balance, wallet, poolDepositV4);
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getPoolBalanceV4 = getPoolBalanceV4;
    });

    var sushiswap$1 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFarmV2Balances = exports.getFarmBalances = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'eth';
    const project = 'sushiswap';
    const masterChef = '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd';
    const masterChefV2 = '0xEF0881eC094552b2e128Cf945EF17a6752B4Ec5d';
    const sushi = '0x6b3595068778dd592e39a122f4f5a5cf09c90fe2';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getFarmBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getFarmBalances()', err); })));
        balance.push(...(await (0, exports.getFarmV2Balances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getFarmV2Balances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get farm balances:
    const getFarmBalances = async (wallet) => {
        let balances = [];
        let sushiRewards = 0;
        let farmCount = parseInt(await (0, require$$1$1.query)(chain, masterChef, ABIs.sushiswap.masterChefABI, 'poolLength', []));
        let farms = [...Array(farmCount).keys()];
        // User Info Multicall Query:
        let calls = [];
        farms.forEach(farmID => {
            calls.push({ reference: farmID.toString(), methodName: 'userInfo', methodParameters: [farmID, wallet] });
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, masterChef, ABIs.sushiswap.masterChefABI, calls);
        let promises = farms.map(farmID => (async () => {
            let userInfoResults = multicallResults[farmID];
            if (userInfoResults) {
                let balance = (0, require$$1$1.parseBN)(userInfoResults[0]);
                if (balance > 0) {
                    let lpToken = await (0, require$$1$1.query)(chain, masterChef, ABIs.sushiswap.masterChefABI, 'lpToken', [farmID]);
                    let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', lpToken, balance, wallet);
                    balances.push(newToken);
                    // Pending SUSHI Rewards:
                    let rewards = parseInt(await (0, require$$1$1.query)(chain, masterChef, ABIs.sushiswap.masterChefABI, 'pendingSushi', [farmID, wallet]));
                    if (rewards > 0) {
                        sushiRewards += rewards;
                    }
                }
            }
        })());
        await Promise.all(promises);
        if (sushiRewards > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', sushi, sushiRewards, wallet);
            balances.push(newToken);
        }
        return balances;
    };
    exports.getFarmBalances = getFarmBalances;
    // Function to get farm V2 balances:
    const getFarmV2Balances = async (wallet) => {
        let balances = [];
        let sushiRewards = 0;
        let farmCount = parseInt(await (0, require$$1$1.query)(chain, masterChefV2, ABIs.sushiswap.masterChefABI, 'poolLength', []));
        let farms = [...Array(farmCount).keys()];
        // User Info Multicall Query:
        let calls = [];
        farms.forEach(farmID => {
            calls.push({ reference: farmID.toString(), methodName: 'userInfo', methodParameters: [farmID, wallet] });
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, masterChefV2, ABIs.sushiswap.masterChefABI, calls);
        let promises = farms.map(farmID => (async () => {
            let userInfoResults = multicallResults[farmID];
            if (userInfoResults) {
                let balance = (0, require$$1$1.parseBN)(userInfoResults[0]);
                if (balance > 0) {
                    let lpToken = await (0, require$$1$1.query)(chain, masterChefV2, ABIs.sushiswap.masterChefABI, 'lpToken', [farmID]);
                    let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', lpToken, balance, wallet);
                    balances.push(newToken);
                    // Pending SUSHI Rewards:
                    let rewards = parseInt(await (0, require$$1$1.query)(chain, masterChefV2, ABIs.sushiswap.masterChefABI, 'pendingSushi', [farmID, wallet]));
                    if (rewards > 0) {
                        sushiRewards += rewards;
                    }
                }
            }
        })());
        await Promise.all(promises);
        if (sushiRewards > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', sushi, sushiRewards, wallet);
            balances.push(newToken);
        }
        return balances;
    };
    exports.getFarmV2Balances = getFarmV2Balances;
    });

    var yearn = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getTokenBalances = exports.getVaultBalances = exports.get = void 0;
    // Imports:




    // Initializations:
    const chain = 'eth';
    const project = 'yearn';
    const deployer = '0x50c1a2eA0a861A967D9d0FFE2AE4012c2E053804';
    const yTokenList = [
        '0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01',
        '0xC2cB1040220768554cf699b0d863A3cd4324ce32',
        '0xd6aD7a6750A7593E092a9B218d66C0A814a3436e',
        '0x26EA744E5B887E5205727f55dFBE8685e3b21951',
        '0x83f798e925BcD4017Eb265844FDDAbb448f1707D',
        '0xE6354ed5bC4b393a5Aad09f21c46E101e692d447',
        '0x73a052500105205d34Daf004eAb301916DA8190f',
        '0xF61718057901F84C4eEC4339EF8f0D86D2B45600',
        '0x04Aa51bbcB46541455cCF1B8bef2ebc5d3787EC9' // yWBTC
    ];
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getVaultBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getVaultBalances()', err); })));
        balance.push(...(await (0, exports.getTokenBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getTokenBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get all vault balances:
    const getVaultBalances = async (wallet) => {
        let balances = [];
        let tokenCount = parseInt(await (0, require$$1$1.query)(chain, deployer, ABIs.yearn.deployerABI, 'numTokens', []));
        let tokens = [...Array(tokenCount).keys()];
        // Token Address Multicall Query:
        let tokenCalls = [];
        tokens.forEach(tokenID => {
            tokenCalls.push({ reference: tokenID.toString(), methodName: 'tokens', methodParameters: [tokenID] });
        });
        let tokenMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, deployer, ABIs.yearn.deployerABI, tokenCalls);
        // Vault Count Multicall Query:
        let vaultCountCalls = [];
        Object.keys(tokenMulticallResults).forEach(tokenID => {
            let token = tokenMulticallResults[tokenID][0];
            vaultCountCalls.push({ reference: token, methodName: 'numVaults', methodParameters: [token] });
        });
        let vaultCountMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, deployer, ABIs.yearn.deployerABI, vaultCountCalls);
        // Vault Address Multicall Query:
        let vaultCalls = [];
        Object.keys(vaultCountMulticallResults).forEach(token => {
            let vaultCount = (0, require$$1$1.parseBN)(vaultCountMulticallResults[token][0]);
            if (vaultCount > 0) {
                for (let i = 0; i < vaultCount; i++) {
                    vaultCalls.push({ reference: token + i.toString(), methodName: 'vaults', methodParameters: [token, i] });
                }
            }
        });
        let vaultMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, deployer, ABIs.yearn.deployerABI, vaultCalls);
        // Balance Multicall Query:
        let vaultAddresses = Object.keys(vaultMulticallResults).map(key => vaultMulticallResults[key][0]);
        let balanceMulticallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, vaultAddresses, ABIs.minABI, 'balanceOf', [wallet]);
        let promises = vaultAddresses.map(vault => (async () => {
            let balanceResults = balanceMulticallResults[vault];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 0) {
                    let underlyingToken = await (0, require$$1$1.query)(chain, vault, ABIs.yearn.vaultABI, 'token', []);
                    let multiplier = await (0, require$$1$1.query)(chain, vault, ABIs.yearn.vaultABI, 'pricePerShare', []);
                    let decimals = parseInt(await (0, require$$1$1.query)(chain, vault, ABIs.minABI, 'decimals', []));
                    let underlyingBalance = balance * (multiplier / (10 ** decimals));
                    let symbol = await (0, require$$1$1.query)(chain, underlyingToken, ABIs.minABI, 'symbol', []);
                    if (symbol.startsWith('crv') || (symbol.length > 3 && symbol.endsWith('CRV'))) {
                        let newToken = await (0, projectFunctions.addCurveToken)(chain, project, 'staked', underlyingToken, underlyingBalance, wallet);
                        balances.push(newToken);
                    }
                    else {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', underlyingToken, underlyingBalance, wallet);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getVaultBalances = getVaultBalances;
    // Function to get all yToken Balances:
    const getTokenBalances = async (wallet) => {
        let balances = [];
        // Balance Multicall Query:
        let multicallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, yTokenList, ABIs.minABI, 'balanceOf', [wallet]);
        let promises = yTokenList.map(yToken => (async () => {
            let balanceResults = multicallResults[yToken];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 0) {
                    let underlyingToken = await (0, require$$1$1.query)(chain, yToken, ABIs.yearn.tokenABI, 'token', []);
                    let multiplier = await (0, require$$1$1.query)(chain, yToken, ABIs.yearn.tokenABI, 'getPricePerFullShare', []);
                    let decimals = parseInt(await (0, require$$1$1.query)(chain, yToken, ABIs.minABI, 'decimals', []));
                    let underlyingBalance = balance * (multiplier / (10 ** decimals));
                    let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', underlyingToken, underlyingBalance, wallet);
                    balances.push(newToken);
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getTokenBalances = getTokenBalances;
    });

    var aave$2 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getIncentivesV3 = exports.getMarketBalancesV3 = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'ftm';
    const project = 'aave';
    const addressProviderV3 = '0xa97684ead0e402dC232d5A977953DF7ECBaB3CDb';
    const uiDataProviderV3 = '0x1CCbfeC508da8D5242D5C1b368694Ab0066b39f1';
    const dataProviderV3 = '0x69FA688f1Dc47d4B5d8029D5a35FB7a548310654';
    const incentivesV3 = '0x929EC64c34a17401F460460D4B9390518E5B473e';
    const wftm = '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getMarketBalancesV3)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getMarketBalancesV3()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get lending market V3 balances:
    const getMarketBalancesV3 = async (wallet) => {
        // Initializations:
        let balances = [];
        let ibTokens = {};
        // Fetching Assets:
        let assets = await (0, require$$1$1.query)(chain, uiDataProviderV3, ABIs.aave.uiDataProviderABI, 'getReservesList', [addressProviderV3]);
        // Market Balance Multicall Query:
        let calls = [];
        assets.forEach(asset => {
            calls.push({ reference: asset, methodName: 'getUserReserveData', methodParameters: [asset, wallet] });
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, dataProviderV3, ABIs.aave.dataProviderABI, calls);
        let promises = assets.map(asset => (async () => {
            let balanceResults = multicallResults[asset];
            if (balanceResults) {
                let currentATokenBalance = (0, require$$1$1.parseBN)(balanceResults[0]);
                let currentStableDebt = (0, require$$1$1.parseBN)(balanceResults[1]);
                let currentVariableDebt = (0, require$$1$1.parseBN)(balanceResults[2]);
                let stableBorrowRate = (0, require$$1$1.parseBN)(balanceResults[5]);
                let liquidityRate = (0, require$$1$1.parseBN)(balanceResults[6]);
                // Finding Interest Bearing Token Addresses:
                if (currentATokenBalance > 0 || currentStableDebt > 0 || currentVariableDebt > 0) {
                    if (!ibTokens[asset]) {
                        ibTokens[asset] = await (0, require$$1$1.query)(chain, dataProviderV3, ABIs.aave.dataProviderABI, 'getReserveTokensAddresses', [asset]);
                    }
                }
                // Lending Balances:
                if (currentATokenBalance > 0) {
                    let newToken = await (0, require$$1$1.addToken)(chain, project, 'lent', asset, currentATokenBalance, wallet, ibTokens[asset].aTokenAddress);
                    newToken.info = {
                        apy: liquidityRate / (10 ** 25)
                    };
                    balances.push(newToken);
                }
                // Stable Borrowing Balances:
                if (currentStableDebt > 0) {
                    let newToken = await (0, require$$1$1.addDebtToken)(chain, project, asset, currentStableDebt, wallet, ibTokens[asset].aTokenAddress);
                    newToken.info = {
                        apy: stableBorrowRate / (10 ** 25)
                    };
                    balances.push(newToken);
                }
                // Variable Borrowing Balances:
                if (currentVariableDebt > 0) {
                    let newToken = await (0, require$$1$1.addDebtToken)(chain, project, asset, currentVariableDebt, wallet, ibTokens[asset].aTokenAddress);
                    let extraData = await (0, require$$1$1.query)(chain, dataProviderV3, ABIs.aave.dataProviderABI, 'getReserveData', [asset]);
                    newToken.info = {
                        apy: extraData.variableBorrowRate / (10 ** 25)
                    };
                    balances.push(newToken);
                }
            }
        })());
        await Promise.all(promises);
        balances.push(...(await (0, exports.getIncentivesV3)(ibTokens, wallet)));
        return balances;
    };
    exports.getMarketBalancesV3 = getMarketBalancesV3;
    // Function to get unclaimed V3 incentives:
    const getIncentivesV3 = async (ibTokens, wallet) => {
        if (Object.keys(ibTokens).length > 0) {
            let tokens = [];
            for (let asset in ibTokens) {
                tokens.push(ibTokens[asset].aTokenAddress);
                tokens.push(ibTokens[asset].variableDebtTokenAddress);
            }
            let rewards = parseInt(await (0, require$$1$1.query)(chain, incentivesV3, ABIs.aave.incentivesABI, 'getUserRewards', [tokens, wallet, wftm]));
            if (rewards > 0) {
                let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', wftm, rewards, wallet);
                return [newToken];
            }
            else {
                return [];
            }
        }
        else {
            return [];
        }
    };
    exports.getIncentivesV3 = getIncentivesV3;
    });

    var autofarm$1 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getVaultBalances = exports.get = void 0;
    // Imports:




    // Initializations:
    const chain = 'ftm';
    const project = 'autofarm';
    const registry = '0x76b8c3ECdF99483335239e66F34191f11534cbAA';
    const ignoredVaults = [75, 76, 87, 89, 93];
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getVaultBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getVaultBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get all vault balances:
    const getVaultBalances = async (wallet) => {
        let balances = [];
        let poolLength = parseInt(await (0, require$$1$1.query)(chain, registry, ABIs.autofarm.registryABI, 'poolLength', []));
        let vaults = [...Array(poolLength).keys()];
        // Balance Multicall Query:
        let calls = [];
        vaults.forEach(vaultID => {
            if (!ignoredVaults.includes(vaultID)) {
                calls.push({ reference: vaultID.toString(), methodName: 'stakedWantTokens', methodParameters: [vaultID, wallet] });
            }
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, registry, ABIs.autofarm.registryABI, calls);
        let promises = vaults.map(vaultID => (async () => {
            let balanceResults = multicallResults[vaultID];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 99) {
                    let token = (await (0, require$$1$1.query)(chain, registry, ABIs.autofarm.registryABI, 'poolInfo', [vaultID]))[0];
                    let symbol = await (0, require$$1$1.query)(chain, token, ABIs.minABI, 'symbol', []);
                    // Curve Vaults:
                    if (vaultID === 39 || vaultID === 40 || vaultID === 41 || vaultID === 66 || vaultID === 69) {
                        let newToken = await (0, projectFunctions.addCurveToken)(chain, project, 'staked', token, balance, wallet);
                        balances.push(newToken);
                        // LP Token Vaults:
                    }
                    else if (symbol.includes('LP')) {
                        let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', token, balance, wallet);
                        balances.push(newToken);
                        // Single-Asset Vaults:
                    }
                    else {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', token, balance, wallet);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getVaultBalances = getVaultBalances;
    });

    var beefy$1 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getStakedBIFI = exports.getVaultBalances = exports.get = void 0;
    // Imports:




    // Initializations:
    const chain = 'ftm';
    const project = 'beefy';
    const staking = '0x7fB900C14c9889A559C777D016a885995cE759Ee';
    const bifi = '0xd6070ae98b8069de6B494332d1A1a81B6179D960';
    const wftm = '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83';
    const apiURL = 'https://api.beefy.finance';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        let vaultsData = await (0, require$$1$1.fetchData)(`${apiURL}/vaults`);
        let apyData = await (0, require$$1$1.fetchData)(`${apiURL}/apy`);
        let vaults = vaultsData.filter(vault => vault.chain === 'fantom' && vault.status === 'active');
        if (vaults.length > 0) {
            balance.push(...(await (0, exports.getVaultBalances)(wallet, vaults, apyData).catch((err) => { throw new error.WeaverError(chain, project, 'getVaultBalances()', err); })));
            balance.push(...(await (0, exports.getStakedBIFI)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getStakedBIFI()', err); })));
        }
        else {
            throw new error.WeaverError(chain, project, 'Invalid response from Beefy API');
        }
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get vault balances:
    const getVaultBalances = async (wallet, vaults, apys) => {
        let balances = [];
        // Balance Multicall Query:
        let vaultAddresses = vaults.map(vault => vault.earnedTokenAddress);
        let multicallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, vaultAddresses, ABIs.minABI, 'balanceOf', [wallet]);
        let promises = vaults.map(vault => (async () => {
            let balanceResults = multicallResults[vault.earnedTokenAddress];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 0) {
                    let decimals = parseInt(await (0, require$$1$1.query)(chain, vault.earnedTokenAddress, ABIs.minABI, 'decimals', []));
                    let exchangeRate = parseInt(await (0, require$$1$1.query)(chain, vault.earnedTokenAddress, ABIs.beefy.vaultABI, 'getPricePerFullShare', []));
                    let underlyingBalance = balance * (exchangeRate / (10 ** decimals));
                    // Native Token Vaults:
                    if (!vault.tokenAddress) {
                        if (vault.token === 'FTM') {
                            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', wftm, underlyingBalance, wallet);
                            let vaultAPY = apys[vault.id];
                            if (vaultAPY) {
                                newToken.info = {
                                    apy: vaultAPY
                                };
                            }
                            balances.push(newToken);
                        }
                    }
                    else {
                        // Curve Vaults:
                        if (vault.platform === 'Curve') {
                            let newToken = await (0, projectFunctions.addCurveToken)(chain, project, 'staked', vault.tokenAddress, underlyingBalance, wallet);
                            let vaultAPY = apys[vault.id];
                            if (vaultAPY) {
                                newToken.info = {
                                    apy: vaultAPY
                                };
                            }
                            balances.push(newToken);
                            // Beethoven X Vaults:
                        }
                        else if (vault.platform === 'Beethoven X') {
                            let newToken = await (0, projectFunctions.addBalancerLikeToken)(chain, project, 'staked', vault.tokenAddress, underlyingBalance, wallet, '0x20dd72Ed959b6147912C2e529F0a0C651c33c9ce');
                            let vaultAPY = apys[vault.id];
                            if (vaultAPY) {
                                newToken.info = {
                                    apy: vaultAPY
                                };
                            }
                            balances.push(newToken);
                            // LP Token Vaults:
                        }
                        else if (vault.assets.length === 2 && vault.platform !== 'StakeSteak') {
                            let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', vault.tokenAddress, underlyingBalance, wallet);
                            let vaultAPY = apys[vault.id];
                            if (vaultAPY) {
                                newToken.info = {
                                    apy: vaultAPY
                                };
                            }
                            balances.push(newToken);
                            // Single-Asset Vaults:
                        }
                        else if (vault.assets.length === 1) {
                            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', vault.tokenAddress, underlyingBalance, wallet);
                            let vaultAPY = apys[vault.id];
                            if (vaultAPY) {
                                newToken.info = {
                                    apy: vaultAPY
                                };
                            }
                            balances.push(newToken);
                        }
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getVaultBalances = getVaultBalances;
    // Function to get staked BIFI balance:
    const getStakedBIFI = async (wallet) => {
        let balances = [];
        let balance = parseInt(await (0, require$$1$1.query)(chain, staking, ABIs.minABI, 'balanceOf', [wallet]));
        if (balance > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', bifi, balance, wallet);
            balances.push(newToken);
        }
        let pendingRewards = parseInt(await (0, require$$1$1.query)(chain, staking, ABIs.beefy.stakingABI, 'earned', [wallet]));
        if (pendingRewards > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', wftm, pendingRewards, wallet);
            balances.push(newToken);
        }
        return balances;
    };
    exports.getStakedBIFI = getStakedBIFI;
    });

    var beethovenx = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getStakedBalances = exports.getPoolBalances = exports.get = void 0;
    // Imports:




    // Initializations:
    const chain = 'ftm';
    const project = 'beethovenx';
    const masterChef = '0x8166994d9ebBe5829EC86Bd81258149B87faCfd3';
    const vault = '0x20dd72Ed959b6147912C2e529F0a0C651c33c9ce';
    const beetsToken = '0xF24Bcf4d1e507740041C9cFd2DddB29585aDCe1e';
    const fBeetAddress = '0xfcef8a994209d6916EB2C86cDD2AFD60Aa6F54b1';
    const pools = [
        '0x0073AB9F483b1d8fc1495Cd2c0cd61Eb456D0b8a',
        '0x0202975FeC570d4BeBc5A3fbEA5AA8013A24a39c',
        '0x03465ACFd0BBa1bB0b8E59431c4D58304E00d607',
        '0x034903FDE8e94b4666bB1e018758123ddFBBcEA5',
        '0x03c6B3f09D2504606936b1A4DeCeFaD204687890',
        '0x0459A6E0478644A87EE1371ecF944F403Ac65522',
        '0x0a42326C6ee024f314c7E8dc5e8BD4af194D548F',
        '0x0D344D2deC87BDb1Aaa9Cc989B4866a67b2a851F',
        '0x1577Eb091D3933A89BE62130484e090bb8BD0E58',
        '0x175511EeD1a2Bcb68E4e87820b903b0797Ab9dbF',
        '0x1b1d74A1Ab76338653E3AAaE79634D6A153d6514',
        '0x1F7b903571370FEd9FC95B1A9862d78A2127B30e',
        '0x20544612a03e52d992a11792c1142b5857E3eff7',
        '0x20bc78A63A70E2aF5a8298B39FD4f841EE295eF4',
        '0x22B30B00e6796Daf710fBE5cAFBFc9Cdd1377f2A',
        '0x27dB386491ED1bf2af61Ac398A83835E2a35F720',
        '0x2975035545008935152FdF48ca13406cc5D4e475',
        '0x2Ba4953C75860e70Cd70f15a2D5Fe07DE832Bcd1',
        '0x2BeA17EdE5D83ad19ae112B8592AadaA2B015De7',
        '0x2C580C6F08044D6dfACA8976a66C8fAddDBD9901',
        '0x2Cea0dA40cF133721377bB2b0bF4aDc43715BFC3',
        '0x2ed55f12e700CdE978E1F0491D681919814ca44B',
        '0x30A92a4EEca857445F41E4Bb836e64D66920F1C0',
        '0x389b4E90205AD6a89E19fBB532D2a3323837000C',
        '0x3bd4c3d1f6F40d77B2e9d0007D6f76E4F183A46d',
        '0x41870439b607A29293D48f7c9da10e6714217624',
        '0x431179854DCd5fF1F2bEDdC84dFe6422c5FAa786',
        '0x43d668c6F709C9D7f05C9404707A10d968B0348c',
        '0x4885b55e41fb34196235685780A07085A7aC11fa',
        '0x4A6DD05B3Ef98f32641882a1af5DDA62161f709e',
        '0x4e4E5a60c73dfedD86b0206d7c6D44CBa8D55B27',
        '0x4Ff9D9F23BA96E4B6ceb0A14B56c5E0500D18fF9',
        '0x53D56bb671bA55b77ce3A7d2e4b0230e187045aE',
        '0x55abBcB4A6B2ed72F42415758450A5549B78f955',
        '0x56897aDd6Dc6abCcf0adA1EB83D936818Bc6cA4D',
        '0x5Bb2DeE206C2bCc5768B9B2865eA971Bd9c0fF19',
        '0x5E02aB5699549675A6d3BEEb92A62782712D0509',
        '0x5E65474c8400d0BB76eDBBE066B2D2E7b0b6e7fb',
        '0x5ecF67ABFB080379Da0a9AeFA18b04B2352f61bE',
        '0x632f7F043B75C7137c3c7ECBb9D8172c692C998f',
        '0x63386eF152E1Ddef96c065636D6cC0165Ff33291',
        '0x644dD9c08E1848CAe0dDF892686a642AcEfc9cCf',
        '0x64b301E21d640F9bef90458B0987d81fb4cf1B9e',
        '0x64DdBD6c6Ad58e79F0d8cE4DCD0Cf3c82167EEe4',
        '0x65Bf2d53BD1d7050d22873f6B9Bb59edb0cA0b20',
        '0x67F40EF38ED3A4D30b1F1d527D4d05Ea0195a188',
        '0x6cF1B74a1c3d4016143F28992EF236aA5C2e0cDD',
        '0x6d12D3fE16dD83115254a32B273B05Ac5444C349',
        '0x6D414C77EcEF1fF33d6423Baf21Dea3AE381766E',
        '0x6FDC8415B654B0F60475944A0b9421Dc36ee1363',
        '0x7010030d6db6B748A8db068C7012525ad9a4cad1',
        '0x709024Ced2F087d8E658ad8Cc928246671169EF9',
        '0x70Ea0DD6Fe9016f2e46D17fA3cb709062574d69f',
        '0x713ee620a7702b79eA5413096A90702244FE4532',
        '0x71d159Ee565912009C80d1dF2053921C6a5E7732',
        '0x72C0eB973Dc95e2d185563f58fC26626CC2e8034',
        '0x75A1F077BC0B9B0E58E750e7e77E4433bAb30AA4',
        '0x7aE6A223cde3A17E0B95626ef71A2DB5F03F540A',
        '0x7cA132d9E8c420b84578a6618F10b23545513058',
        '0x7d52245d6923A245ccDDa1c27B8b309C32CAF044',
        '0x8437aCA2C2fE814DED80302fe8EB60b5353eC3f7',
        '0x84cbC248B318E23c63586d7f70e451F0C13B96D1',
        '0x851553FD9BCd28Befe450d3cfbB3f86F13832a1d',
        '0x85D9b554528DA0C3641c1bA92F658A011F126523',
        '0x8935989412b74CbAe41b406BB319d66d5B35d461',
        '0x8B858Eaf095A7337dE6f9bC212993338773cA34e',
        '0x8Bb1839393359895836688165f7c5878f8C81C5e',
        '0x8C3C964C2d08679d3D09866CF62C5b14a5346479',
        '0x8DBB92ca6c399792AC07510a0996C59902cD75a1',
        '0x8E1e0e35Cf1cC91D96F7EdDC705991d5d29eD86F',
        '0x8e82e904dD9Cb298D324c2c27929ca473d3e9BB0',
        '0x8F6a658056378558fF88265f7c9444A0FB4DB4be',
        '0x8FdD16a23aEBe95B928f1863760618E9EC29e72D',
        '0x8FE1A318e67bC203180ADF68007613546E8af393',
        '0x9524f3A1C02176eBD36bDb445912afd67FcE4E40',
        '0x979a066CA6e6ECB3Fe9f48d713004deaDf25d73B',
        '0x985976228a4685Ac4eCb0cfdbEeD72154659B6d9',
        '0x98676c6BE8D6bBC2B7CCb8CBF9110ED13EcCDEE6',
        '0x9a5cbA29F557629E915ff109B4945E66E38E87eF',
        '0x9af1F0e9aC9C844A4a4439d446c1437807183075',
        '0xA07De66AeF84e2c01D88a48D57D1463377Ee602b',
        '0xA0D24F37607f4da14d74fF42D46e093f42888c89',
        '0xA1C5698A042638b6220e336Ed9cFAFb499560c20',
        '0xa216AA5d67Ef95DdE66246829c5103C7843d1AAB',
        '0xa27B83406e627D6ed2422979d704f7DE5CCBF57B',
        '0xA396B308B3366eb2e4C0A0cd30657a72a4B2812E',
        '0xa6534F59D0F875bEA636A987968B378bb5F5A3e9',
        '0xa6cf803866312dBb462b46Ef3eC10DF619c05147',
        '0xa77597F1B75Ea285B3Be5a07D9Cc53eF388ceA4F',
        '0xa7d0a9923F9DAD318C1141A12cEEfB2d9C6eEdF7',
        '0xA85CcAe7948ff87e2e90e5a0a37C40dAa7bB9278',
        '0xab7f6edb5405324D77A1b7a2802903F6f0E0F092',
        '0xafE001c7Cbb82d8D593963D8E9e63A1250c68806',
        '0xB1590f7C53ca796b5af215465832c43ea03f4595',
        '0xB45669432DE2b94680392Ce4f2F8CBAAe5908b76',
        '0xB59244b5C76224C54373dde3E62301cF4f91895a',
        '0xb8121da4bDc666B7FAd4DB5A5c8b5cf9884D058E',
        '0xbb4607beDE4610e80d35C15692eFcB7807A2d0A6',
        '0xc042EF6cA08576BdFb57d3055A7654344fd153E4',
        '0xc14e339D66F3DDba733254f14e7F744e7d29CC8f',
        '0xc4dAC57A46a0a1acd0eB95EDDeF5257926279960',
        '0xC7f084bCB91F779617B41602f85102849098D6a2',
        '0xC87b89D7Ddd517056E623AdaF080A1Dfb465E4C4',
        '0xc98E9C812F5137667058978650d563a5D7f7A642',
        '0xC9Ba718A71bFA34cedEa910AC37B879e5913c14e',
        '0xCc31CD8293FA9Da71670b08d80871A3d4F785e0F',
        '0xCcA3a9F9e91A9F630b84e1df2FedCFE98fd800C9',
        '0xCCF8C0C978D3C36DcE62799742272bA05eDc6C1A',
        '0xCD83CD3650B320a5104d56A8A22c32c7671f82Cd',
        '0xcdE5a11a4ACB4eE4c805352Cec57E236bdBC3837',
        '0xcdF68a4d525Ba2E90Fe959c74330430A5a6b8226',
        '0xcF9d4940FE4C194C83d4D3B1de4C2DFF4233f612',
        '0xd0003b4dd0336d82e6E0843532Bb0918794a6f0d',
        '0xD163415BD34EF06f57C58D2AEd5A5478AfB464cC',
        '0xd47D2791d3B46f9452709Fa41855a045304D6f9d',
        '0xD57Cda2caEBb9B64BB88905C4dE0F0Da217a77d7',
        '0xD7B06aC72606F194AA0F09508530B6f45Bf11E34',
        '0xE03C7544E2B7c243e0711AB52A737E4e1A8a4bBa',
        '0xe1b6b8cB5cb2F0E3eC504B909dC2579f201C9564',
        '0xe402555EFa3b232ee8Bc4c79A446B47b38B93EBF',
        '0xeCAa1cBd28459d34B766F9195413Cb20122Fb942',
        '0xf0e2c47d4C9FBBbc2F2E19ACdaA3c773A3ECD221',
        '0xF2b2103E1351c4D47b27eFC8100bb264364FA92C',
        '0xF361e16F3dF7f176C8A223CB9f1B81ef86f118d5',
        '0xf3A602d30dcB723A74a0198313a7551FEacA7DAc',
        '0xF3f0970BCA8ce7E9672d17a301b54D1485D93807',
        '0xF54591700AC66A0C921cf5856e6c7019aebc87F9',
        '0xf5c690b7Af4fDC551eC89aCbaD91C6D646762A93',
        '0xf7bF0f161d3240488807FFa23894452246049916',
        '0xF8adB589cd7C2972761eDC0b7d6D9ba6fE47723b',
        '0xF8E4e42643e8FdF48fbf8D10071a07305eAaCf99',
        '0xF8fa40d35a3271eE5747FaDc63634fA673590651',
        '0xfA901cAdCAf38cd533E8B1f693D090Fc7005658e',
        '0xfC092F85125907fFcb0f9012e6e40B3f37c4De60',
        '0xFEd8DdC3339b13C9E7670057Dd5e13edc4FB747c'
    ];
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getPoolBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getPoolBalances()', err); })));
        balance.push(...(await (0, exports.getStakedBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getStakedBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get all pool balances:
    const getPoolBalances = async (wallet) => {
        let balances = [];
        // Balance Multicall Query:
        let multicallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, pools, ABIs.minABI, 'balanceOf', [wallet]);
        let promises = pools.map(pool => (async () => {
            let balanceResults = multicallResults[pool];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 0) {
                    let newToken = await (0, projectFunctions.addBalancerLikeToken)(chain, project, 'liquidity', pool, balance, wallet, vault);
                    balances.push(newToken);
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getPoolBalances = getPoolBalances;
    // Function to get all staked pool balances:
    const getStakedBalances = async (wallet) => {
        let balances = [];
        let numRewardPools = parseInt(await (0, require$$1$1.query)(chain, masterChef, ABIs.beethovenx.masterChefABI, 'poolLength', []));
        let poolList = [...Array(numRewardPools).keys()];
        let pendingBeets = 0;
        // User Info Multicall Query:
        let calls = [];
        poolList.forEach(poolID => {
            calls.push({ reference: poolID.toString(), methodName: 'userInfo', methodParameters: [poolID, wallet] });
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, masterChef, ABIs.beethovenx.masterChefABI, calls);
        let promises = poolList.map(poolID => (async () => {
            let userInfoResults = multicallResults[poolID];
            if (userInfoResults) {
                let balance = (0, require$$1$1.parseBN)(userInfoResults[0]);
                if (balance > 0) {
                    let poolAddress = await (0, require$$1$1.query)(chain, masterChef, ABIs.beethovenx.masterChefABI, 'lpTokens', [poolID]);
                    if (poolAddress != fBeetAddress) {
                        let newToken = await (0, projectFunctions.addBalancerLikeToken)(chain, project, 'staked', poolAddress, balance, wallet, vault);
                        balances.push(newToken);
                    }
                    let poolBeets = parseInt(await (0, require$$1$1.query)(chain, masterChef, ABIs.beethovenx.masterChefABI, 'pendingBeets', [poolID, wallet]));
                    if (poolBeets > 0) {
                        pendingBeets += poolBeets;
                    }
                }
            }
        })());
        await Promise.all(promises);
        if (pendingBeets > 0) {
            let beets = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', beetsToken, pendingBeets, wallet);
            balances.push(beets);
        }
        return balances;
    };
    exports.getStakedBalances = getStakedBalances;
    });

    var bouje = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPoolBalances = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'ftm';
    const project = 'bouje';
    const masterChef = '0x51839D39C4Fa187E3A084a4eD34a4007eae66238';
    const bastille = '0xcef2b88d5599d578c8d92E7a6e6235FBfaD01eF4';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getPoolBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getPoolBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get all farm/pool balances:
    const getPoolBalances = async (wallet) => {
        let balances = [];
        let poolCount = parseInt(await (0, require$$1$1.query)(chain, masterChef, ABIs.bouje.masterChefABI, 'poolLength', []));
        let poolList = [...Array(poolCount).keys()];
        // User Info Multicall Query:
        let calls = [];
        poolList.forEach(poolID => {
            calls.push({ reference: poolID.toString(), methodName: 'userInfo', methodParameters: [poolID, wallet] });
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, masterChef, ABIs.bouje.masterChefABI, calls);
        let promises = poolList.map(poolID => (async () => {
            let userInfoResults = multicallResults[poolID];
            if (userInfoResults) {
                let balance = (0, require$$1$1.parseBN)(userInfoResults[0]);
                if (balance > 0) {
                    let token = (await (0, require$$1$1.query)(chain, masterChef, ABIs.bouje.masterChefABI, 'poolInfo', [poolID])).lpToken;
                    let symbol = await (0, require$$1$1.query)(chain, token, ABIs.minABI, 'symbol', []);
                    if (symbol === 'spLP') {
                        let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', token, balance, wallet);
                        balances.push(newToken);
                    }
                    else {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', token, balance, wallet);
                        balances.push(newToken);
                    }
                    let rewards = parseInt(await (0, require$$1$1.query)(chain, masterChef, ABIs.bouje.masterChefABI, 'pendingBastille', [poolID, wallet]));
                    if (rewards > 0) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', bastille, rewards, wallet);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getPoolBalances = getPoolBalances;
    });

    var cream$1 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getMarketBalances = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'ftm';
    const project = 'cream';
    const controller = '0x4250A6D3BD57455d7C6821eECb6206F507576cD2';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getMarketBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getMarketBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get all market balances and debt:
    const getMarketBalances = async (wallet) => {
        let balances = [];
        let markets = await (0, require$$1$1.query)(chain, controller, ABIs.cream.controllerABI, 'getAllMarkets', []);
        // Market Balance Multicall Query:
        let abi = ABIs.minABI.concat(ABIs.cream.tokenABI);
        let calls = [
            { reference: 'marketBalance', methodName: 'balanceOf', methodParameters: [wallet] },
            { reference: 'borrowBalance', methodName: 'borrowBalanceStored', methodParameters: [wallet] }
        ];
        let multicallResults = await (0, require$$1$1.multicallComplexQuery)(chain, markets, abi, calls);
        let promises = markets.map(market => (async () => {
            let marketResults = multicallResults[market];
            if (marketResults) {
                let marketBalanceResults = marketResults['marketBalance'];
                let borrowingResults = marketResults['borrowBalance'];
                // Lending Balances:
                if (marketBalanceResults) {
                    let balance = (0, require$$1$1.parseBN)(marketBalanceResults[0]);
                    if (balance > 0) {
                        let exchangeRate = parseInt(await (0, require$$1$1.query)(chain, market, ABIs.cream.tokenABI, 'exchangeRateStored', []));
                        let decimals = parseInt(await (0, require$$1$1.query)(chain, market, ABIs.minABI, 'decimals', []));
                        let tokenAddress = await (0, require$$1$1.query)(chain, market, ABIs.cream.tokenABI, 'underlying', []);
                        let underlyingBalance = (balance / (10 ** decimals)) * (exchangeRate / (10 ** (decimals + 2)));
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'lent', tokenAddress, underlyingBalance, wallet);
                        balances.push(newToken);
                    }
                }
                // Borrowing Balances:
                if (borrowingResults) {
                    let debt = (0, require$$1$1.parseBN)(borrowingResults[0]);
                    if (debt > 0) {
                        let tokenAddress = await (0, require$$1$1.query)(chain, market, ABIs.cream.tokenABI, 'underlying', []);
                        let newToken = await (0, require$$1$1.addDebtToken)(chain, project, tokenAddress, debt, wallet);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getMarketBalances = getMarketBalances;
    });

    var curve$1 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFactoryPoolBalances = exports.getCryptoPoolBalances = exports.getPoolBalances = exports.get = void 0;
    // Imports:




    // Initializations:
    const chain = 'ftm';
    const project = 'curve';
    const registry = '0x0f854EA9F38ceA4B1c2FC79047E9D0134419D5d6';
    const cryptoRegistry = '0x4fb93D7d320E8A263F22f62C2059dFC2A8bCbC4c';
    const factory = '0x686d67265703D1f124c45E33d47d794c566889Ba';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getPoolBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getPoolBalances()', err); })));
        balance.push(...(await (0, exports.getCryptoPoolBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getCryptoPoolBalances()', err); })));
        balance.push(...(await (0, exports.getFactoryPoolBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getFactoryPoolBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get pool balances:
    const getPoolBalances = async (wallet) => {
        let balances = [];
        let poolAddresses = await getPoolAddresses(registry);
        // Initializing Multicalls:
        let lpCalls = [];
        let gaugeCalls = [];
        poolAddresses.forEach(poolAddress => { lpCalls.push({ reference: poolAddress, methodName: 'get_lp_token', methodParameters: [poolAddress] }); });
        poolAddresses.forEach(poolAddress => { gaugeCalls.push({ reference: poolAddress, methodName: 'get_gauges', methodParameters: [poolAddress] }); });
        // LP Token Balances:
        let lpMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, registry, ABIs.curve.registryABI, lpCalls);
        let lpTokens = Object.keys(lpMulticallResults).map(pool => lpMulticallResults[pool][0]);
        balances.push(...(await getLPTokenBalances(lpTokens, wallet)));
        // Gauge Balances:
        let gaugeMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, registry, ABIs.curve.registryABI, gaugeCalls);
        let gauges = Object.keys(gaugeMulticallResults).map(pool => gaugeMulticallResults[pool][0][0]).filter(gauge => gauge != require$$1$1.zero);
        balances.push(...(await getGaugeBalances(gauges, wallet)));
        return balances;
    };
    exports.getPoolBalances = getPoolBalances;
    // Function to get crypto pool balances:
    const getCryptoPoolBalances = async (wallet) => {
        let balances = [];
        let poolAddresses = await getPoolAddresses(cryptoRegistry);
        // Initializing Multicalls:
        let lpCalls = [];
        let gaugeCalls = [];
        poolAddresses.forEach(poolAddress => { lpCalls.push({ reference: poolAddress, methodName: 'get_lp_token', methodParameters: [poolAddress] }); });
        poolAddresses.forEach(poolAddress => { gaugeCalls.push({ reference: poolAddress, methodName: 'get_gauges', methodParameters: [poolAddress] }); });
        // LP Token Balances:
        let lpMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, cryptoRegistry, ABIs.curve.registryABI, lpCalls);
        let lpTokens = Object.keys(lpMulticallResults).map(pool => lpMulticallResults[pool][0]);
        balances.push(...(await getLPTokenBalances(lpTokens, wallet)));
        // Gauge Balances:
        let gaugeMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, cryptoRegistry, ABIs.curve.registryABI, gaugeCalls);
        let gauges = Object.keys(gaugeMulticallResults).map(pool => gaugeMulticallResults[pool][0][0]).filter(gauge => gauge != require$$1$1.zero);
        balances.push(...(await getGaugeBalances(gauges, wallet)));
        return balances;
    };
    exports.getCryptoPoolBalances = getCryptoPoolBalances;
    // Function to get factory pool balances:
    const getFactoryPoolBalances = async (wallet) => {
        let balances = [];
        let poolAddresses = await getPoolAddresses(factory);
        // Initializing Multicall:
        let gaugeCalls = [];
        poolAddresses.forEach(poolAddress => { gaugeCalls.push({ reference: poolAddress, methodName: 'get_gauge', methodParameters: [poolAddress] }); });
        // LP Token Balances (same as pools):
        balances.push(...(await getLPTokenBalances(poolAddresses, wallet)));
        // Gauge Balances:
        let gaugeMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, factory, ABIs.curve.factoryABI, gaugeCalls);
        let gauges = Object.keys(gaugeMulticallResults).map(pool => gaugeMulticallResults[pool][0]).filter(gauge => gauge != require$$1$1.zero);
        balances.push(...(await getGaugeBalances(gauges, wallet)));
        return balances;
    };
    exports.getFactoryPoolBalances = getFactoryPoolBalances;
    /* ========================================================================================================================================================================= */
    // Function to get pool addresses:
    const getPoolAddresses = async (registry) => {
        let poolCount = parseInt(await (0, require$$1$1.query)(chain, registry, ABIs.curve.registryABI, 'pool_count', []));
        let poolIDs = [...Array(poolCount).keys()];
        let poolCalls = [];
        poolIDs.forEach(poolID => {
            poolCalls.push({ reference: poolID.toString(), methodName: 'pool_list', methodParameters: [poolID] });
        });
        let poolMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, registry, ABIs.curve.registryABI, poolCalls);
        let poolAddresses = Object.keys(poolMulticallResults).map(poolID => poolMulticallResults[poolID][0]);
        return poolAddresses;
    };
    // Function to get LP token balances:
    const getLPTokenBalances = async (lpTokens, wallet) => {
        let balances = [];
        if (lpTokens.length > 0) {
            let balanceMulticallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, lpTokens, ABIs.minABI, 'balanceOf', [wallet]);
            let promises = lpTokens.map(lpToken => (async () => {
                let balanceResults = balanceMulticallResults[lpToken];
                if (balanceResults) {
                    let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                    if (balance > 0) {
                        let newToken = await (0, projectFunctions.addCurveToken)(chain, project, 'liquidity', lpToken, balance, wallet);
                        balances.push(newToken);
                    }
                }
            })());
            await Promise.all(promises);
        }
        return balances;
    };
    // Function get gauge balances:
    const getGaugeBalances = async (gauges, wallet) => {
        let balances = [];
        if (gauges.length > 0) {
            let balanceMulticallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, gauges, ABIs.minABI, 'balanceOf', [wallet]);
            let promises = gauges.map(gauge => (async () => {
                let balanceResults = balanceMulticallResults[gauge];
                if (balanceResults) {
                    let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                    if (balance > 0) {
                        let lpToken = await (0, require$$1$1.query)(chain, gauge, ABIs.curve.gaugeABI, 'lp_token', []);
                        let newToken = await (0, projectFunctions.addCurveToken)(chain, project, 'staked', lpToken, balance, wallet);
                        balances.push(newToken);
                        // Pending Rewards:
                        for (let i = 0; i < 2; i++) {
                            let token = await (0, require$$1$1.query)(chain, gauge, ABIs.curve.gaugeABI, 'reward_tokens', [i]);
                            if (token != require$$1$1.zero) {
                                let rewards = parseInt(await (0, require$$1$1.query)(chain, gauge, ABIs.curve.gaugeABI, 'claimable_reward', [wallet, token]));
                                if (rewards > 0) {
                                    let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', token, rewards, wallet);
                                    balances.push(newToken);
                                }
                            }
                        }
                    }
                }
            })());
            await Promise.all(promises);
        }
        return balances;
    };
    });

    var scream = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getStakedSCREAM = exports.getMarketBalances = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'ftm';
    const project = 'scream';
    const controller = '0x260E596DAbE3AFc463e75B6CC05d8c46aCAcFB09';
    const screamToken = '0xe0654C8e6fd4D733349ac7E09f6f23DA256bF475';
    const xscream = '0xe3D17C7e840ec140a7A51ACA351a482231760824';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getMarketBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getMarketBalances()', err); })));
        balance.push(...(await (0, exports.getStakedSCREAM)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getStakedSCREAM()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get all market balances and debt:
    const getMarketBalances = async (wallet) => {
        let balances = [];
        let markets = await (0, require$$1$1.query)(chain, controller, ABIs.scream.controllerABI, 'getAllMarkets', []);
        // Market Balance Multicall Query:
        let abi = ABIs.minABI.concat(ABIs.scream.marketABI);
        let calls = [
            { reference: 'marketBalance', methodName: 'balanceOf', methodParameters: [wallet] },
            { reference: 'accountSnapshot', methodName: 'getAccountSnapshot', methodParameters: [wallet] }
        ];
        let multicallResults = await (0, require$$1$1.multicallComplexQuery)(chain, markets, abi, calls);
        let promises = markets.map(market => (async () => {
            let marketResults = multicallResults[market];
            if (marketResults) {
                let marketBalanceResults = marketResults['marketBalance'];
                let accountSnapshotResults = marketResults['accountSnapshot'];
                if (marketBalanceResults && accountSnapshotResults) {
                    let balance = (0, require$$1$1.parseBN)(marketBalanceResults[0]);
                    let debt = (0, require$$1$1.parseBN)(accountSnapshotResults[2]);
                    let exchangeRate = (0, require$$1$1.parseBN)(accountSnapshotResults[3]);
                    if (balance > 0 || debt > 0) {
                        let tokenAddress = await (0, require$$1$1.query)(chain, market, ABIs.scream.marketABI, 'underlying', []);
                        // Lending Balances:
                        if (balance > 0) {
                            let underlyingBalance = balance * (exchangeRate / (10 ** 18));
                            let newToken = await (0, require$$1$1.addToken)(chain, project, 'lent', tokenAddress, underlyingBalance, wallet);
                            balances.push(newToken);
                        }
                        // Borrowing Balances:
                        if (debt > 0) {
                            let newToken = await (0, require$$1$1.addDebtToken)(chain, project, tokenAddress, debt, wallet);
                            balances.push(newToken);
                        }
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getMarketBalances = getMarketBalances;
    // Function to get staked SCREAM balance:
    const getStakedSCREAM = async (wallet) => {
        let balance = parseInt(await (0, require$$1$1.query)(chain, xscream, ABIs.minABI, 'balanceOf', [wallet]));
        if (balance > 0) {
            let exchangeRate = parseInt(await (0, require$$1$1.query)(chain, xscream, ABIs.scream.stakingABI, 'getShareValue', [])) / (10 ** 18);
            let newToken = await (0, require$$1$1.addXToken)(chain, project, 'unclaimed', xscream, balance, wallet, screamToken, balance * exchangeRate);
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getStakedSCREAM = getStakedSCREAM;
    });

    var spookyswap = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getStakedBOO = exports.getPoolBalances = exports.get = void 0;
    // Imports:




    // Initializations:
    const chain = 'ftm';
    const project = 'spookyswap';
    const masterChef = '0x2b2929E785374c651a81A63878Ab22742656DcDd';
    const boo = '0x841FAD6EAe12c286d1Fd18d1d525DFfA75C7EFFE';
    const xboo = '0xa48d959AE2E88f1dAA7D5F611E01908106dE7598';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getPoolBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getPoolBalances()', err); })));
        balance.push(...(await (0, exports.getStakedBOO)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getStakedBOO()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get all pool balances:
    const getPoolBalances = async (wallet) => {
        let balances = [];
        let poolCount = parseInt(await (0, require$$1$1.query)(chain, masterChef, ABIs.spookyswap.masterChefABI, 'poolLength', []));
        let poolList = [...Array(poolCount).keys()];
        // User Info Multicall Query:
        let calls = [];
        poolList.forEach(poolID => {
            calls.push({ reference: poolID.toString(), methodName: 'userInfo', methodParameters: [poolID, wallet] });
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, masterChef, ABIs.spookyswap.masterChefABI, calls);
        let promises = poolList.map(poolID => (async () => {
            let userInfoResults = multicallResults[poolID];
            if (userInfoResults) {
                let balance = (0, require$$1$1.parseBN)(userInfoResults[0]);
                if (balance > 0) {
                    let token = (await (0, require$$1$1.query)(chain, masterChef, ABIs.spookyswap.masterChefABI, 'poolInfo', [poolID])).lpToken;
                    let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', token, balance, wallet);
                    balances.push(newToken);
                    let rewards = parseInt(await (0, require$$1$1.query)(chain, masterChef, ABIs.spookyswap.masterChefABI, 'pendingBOO', [poolID, wallet]));
                    if (rewards > 0) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', boo, rewards, wallet);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getPoolBalances = getPoolBalances;
    // Function to get staked BOO:
    const getStakedBOO = async (wallet) => {
        let balance = parseInt(await (0, require$$1$1.query)(chain, xboo, ABIs.minABI, 'balanceOf', [wallet]));
        if (balance > 0) {
            let newToken = await (0, projectFunctions.addSpookyToken)(chain, project, 'staked', balance, wallet);
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getStakedBOO = getStakedBOO;
    });

    var aave$1 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getIncentivesV3 = exports.getMarketBalancesV3 = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'op';
    const project = 'aave';
    const addressProviderV3 = '0xa97684ead0e402dC232d5A977953DF7ECBaB3CDb';
    const uiDataProviderV3 = '0x64f558d4BFC1c03a8c8B2ff84976fF04c762b51f';
    const dataProviderV3 = '0x69FA688f1Dc47d4B5d8029D5a35FB7a548310654';
    const incentivesV3 = '0x929EC64c34a17401F460460D4B9390518E5B473e';
    const op = '0x4200000000000000000000000000000000000042';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getMarketBalancesV3)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getMarketBalancesV3()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get lending market V3 balances:
    const getMarketBalancesV3 = async (wallet) => {
        // Initializations:
        let balances = [];
        let ibTokens = {};
        // Fetching Assets:
        let assets = await (0, require$$1$1.query)(chain, uiDataProviderV3, ABIs.aave.uiDataProviderABI, 'getReservesList', [addressProviderV3]);
        // Market Balance Multicall Query:
        let calls = [];
        assets.forEach(asset => {
            calls.push({ reference: asset, methodName: 'getUserReserveData', methodParameters: [asset, wallet] });
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, dataProviderV3, ABIs.aave.dataProviderABI, calls);
        let promises = assets.map(asset => (async () => {
            let balanceResults = multicallResults[asset];
            if (balanceResults) {
                let currentATokenBalance = (0, require$$1$1.parseBN)(balanceResults[0]);
                let currentStableDebt = (0, require$$1$1.parseBN)(balanceResults[1]);
                let currentVariableDebt = (0, require$$1$1.parseBN)(balanceResults[2]);
                let stableBorrowRate = (0, require$$1$1.parseBN)(balanceResults[5]);
                let liquidityRate = (0, require$$1$1.parseBN)(balanceResults[6]);
                // Finding Interest Bearing Token Addresses:
                if (currentATokenBalance > 0 || currentStableDebt > 0 || currentVariableDebt > 0) {
                    if (!ibTokens[asset]) {
                        ibTokens[asset] = await (0, require$$1$1.query)(chain, dataProviderV3, ABIs.aave.dataProviderABI, 'getReserveTokensAddresses', [asset]);
                    }
                }
                // Lending Balances:
                if (currentATokenBalance > 0) {
                    let newToken = await (0, require$$1$1.addToken)(chain, project, 'lent', asset, currentATokenBalance, wallet, ibTokens[asset].aTokenAddress);
                    newToken.info = {
                        apy: liquidityRate / (10 ** 25)
                    };
                    balances.push(newToken);
                }
                // Stable Borrowing Balances:
                if (currentStableDebt > 0) {
                    let newToken = await (0, require$$1$1.addDebtToken)(chain, project, asset, currentStableDebt, wallet, ibTokens[asset].aTokenAddress);
                    newToken.info = {
                        apy: stableBorrowRate / (10 ** 25)
                    };
                    balances.push(newToken);
                }
                // Variable Borrowing Balances:
                if (currentVariableDebt > 0) {
                    let newToken = await (0, require$$1$1.addDebtToken)(chain, project, asset, currentVariableDebt, wallet, ibTokens[asset].aTokenAddress);
                    let extraData = await (0, require$$1$1.query)(chain, dataProviderV3, ABIs.aave.dataProviderABI, 'getReserveData', [asset]);
                    newToken.info = {
                        apy: extraData.variableBorrowRate / (10 ** 25)
                    };
                    balances.push(newToken);
                }
            }
        })());
        await Promise.all(promises);
        balances.push(...(await (0, exports.getIncentivesV3)(ibTokens, wallet)));
        return balances;
    };
    exports.getMarketBalancesV3 = getMarketBalancesV3;
    // Function to get unclaimed V3 incentives:
    const getIncentivesV3 = async (ibTokens, wallet) => {
        if (Object.keys(ibTokens).length > 0) {
            let tokens = [];
            for (let asset in ibTokens) {
                tokens.push(ibTokens[asset].aTokenAddress);
                tokens.push(ibTokens[asset].variableDebtTokenAddress);
            }
            let rewards = parseInt(await (0, require$$1$1.query)(chain, incentivesV3, ABIs.aave.incentivesABI, 'getUserRewards', [tokens, wallet, op]));
            if (rewards > 0) {
                let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', op, rewards, wallet);
                return [newToken];
            }
            else {
                return [];
            }
        }
        else {
            return [];
        }
    };
    exports.getIncentivesV3 = getIncentivesV3;
    });

    var pika = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUserRewardsV2 = exports.getUserStakeV2 = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'op';
    const project = 'pika';
    const perpetualV2 = '0x2FaE8C7Edd26213cA1A88fC57B65352dbe353698';
    const vaultFeeV2 = '0x58488bB666d2da33F8E8938Dbdd582D2481D4183';
    const usdc = '0x7F5c764cBc14f9669B88837ca1490cCa17c31607';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getUserStakeV2)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getUserStakeV2()', err); })));
        balance.push(...(await (0, exports.getUserRewardsV2)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getUserRewardsV2()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get V2 vault balance:
    const getUserStakeV2 = async (wallet) => {
        let balance = parseInt(await (0, require$$1$1.query)(chain, perpetualV2, ABIs.pika.perpetualV2ABI, 'getShareBalance', [wallet])) * 0.01;
        if (balance > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', usdc, balance, wallet, perpetualV2);
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getUserStakeV2 = getUserStakeV2;
    // Function to get V2 rewards:
    const getUserRewardsV2 = async (wallet) => {
        let rewards = parseInt(await (0, require$$1$1.query)(chain, vaultFeeV2, ABIs.pika.vaultFeeV2ABI, 'getClaimableReward', [wallet])) * 0.01;
        if (rewards > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', usdc, rewards, wallet, vaultFeeV2);
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getUserRewardsV2 = getUserRewardsV2;
    });

    var pooltogether$1 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPoolBalanceV4 = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'op';
    const project = 'pooltogether';
    const poolTicketV4 = '0x62BB4fc73094c83B5e952C2180B23fA7054954c4';
    const poolDepositV4 = '0x79Bc8bD53244bC8a9C8c27509a2d573650A83373';
    const usdc = '0x7F5c764cBc14f9669B88837ca1490cCa17c31607';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getPoolBalanceV4)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getPoolBalanceV4()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get V4 pool balance:
    const getPoolBalanceV4 = async (wallet) => {
        let balance = parseInt(await (0, require$$1$1.query)(chain, poolTicketV4, ABIs.minABI, 'balanceOf', [wallet]));
        if (balance > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', usdc, balance, wallet, poolDepositV4);
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getPoolBalanceV4 = getPoolBalanceV4;
    });

    var aave = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getIncentivesV3 = exports.getMarketBalancesV3 = exports.getIncentives = exports.getMarketBalances = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'poly';
    const project = 'aave';
    const addressProvider = '0xd05e3E715d945B59290df0ae8eF85c1BdB684744';
    const incentives = '0x357D51124f59836DeD84c8a1730D72B749d8BC23';
    const addressProviderV3 = '0xa97684ead0e402dC232d5A977953DF7ECBaB3CDb';
    const uiDataProviderV3 = '0x8F1AD487C9413d7e81aB5B4E88B024Ae3b5637D0';
    const dataProviderV3 = '0x69FA688f1Dc47d4B5d8029D5a35FB7a548310654';
    const incentivesV3 = '0x929EC64c34a17401F460460D4B9390518E5B473e';
    const wmatic = '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270';
    const apiURL = 'https://aave-api-v2.aave.com/data/liquidity/v2';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        let markets = await (0, require$$1$1.fetchData)(`${apiURL}?poolId=${addressProvider}`);
        if (markets.length > 0) {
            balance.push(...(await (0, exports.getMarketBalances)(markets, wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getMarketBalances()', err); })));
            balance.push(...(await (0, exports.getIncentives)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getIncentives()', err); })));
            balance.push(...(await (0, exports.getMarketBalancesV3)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getMarketBalancesV3()', err); })));
        }
        else {
            throw new error.WeaverError(chain, project, 'Invalid response from Aave API');
        }
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get lending market balances:
    const getMarketBalances = async (markets, wallet) => {
        // Initializations:
        let balances = [];
        let queries = [];
        // Multicall Query Setup:
        markets.forEach(market => {
            queries.push({
                reference: 'a' + market.symbol,
                contractAddress: market.aTokenAddress,
                abi: ABIs.minABI,
                calls: [{ reference: 'balance', methodName: 'balanceOf', methodParameters: [wallet] }]
            });
            if (market.borrowingEnabled) {
                queries.push({
                    reference: 'vb' + market.symbol,
                    contractAddress: market.variableDebtTokenAddress,
                    abi: ABIs.minABI,
                    calls: [{ reference: 'balance', methodName: 'balanceOf', methodParameters: [wallet] }]
                });
            }
        });
        // Multicall Query Results:
        let multicallResults = (await (0, require$$1$1.multicallQuery)(chain, queries)).results;
        let promises = markets.map(market => (async () => {
            // Lending Balances:
            let marketLendingResults = multicallResults['a' + market.symbol].callsReturnContext[0];
            if (marketLendingResults.success) {
                let balance = (0, require$$1$1.parseBN)(marketLendingResults.returnValues[0]);
                if (balance > 0) {
                    let newToken = await (0, require$$1$1.addToken)(chain, project, 'lent', market.underlyingAsset, balance, wallet, market.aTokenAddress);
                    newToken.info = {
                        apy: market.avg7DaysLiquidityRate * 100,
                        deprecated: !market.isActive
                    };
                    balances.push(newToken);
                }
            }
            // Variable Borrowing Balances:
            if (market.borrowingEnabled) {
                let marketVariableBorrowingResults = multicallResults['vb' + market.symbol].callsReturnContext[0];
                if (marketVariableBorrowingResults.success) {
                    let balance = (0, require$$1$1.parseBN)(marketVariableBorrowingResults.returnValues[0]);
                    if (balance > 0) {
                        let newToken = await (0, require$$1$1.addDebtToken)(chain, project, market.underlyingAsset, balance, wallet, market.aTokenAddress);
                        newToken.info = {
                            apy: market.avg7DaysVariableBorrowRate * 100,
                        };
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getMarketBalances = getMarketBalances;
    // Function to get unclaimed incentives:
    const getIncentives = async (wallet) => {
        let rewards = parseInt(await (0, require$$1$1.query)(chain, incentives, ABIs.aave.incentivesABI, 'getUserUnclaimedRewards', [wallet]));
        if (rewards > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', wmatic, rewards, wallet);
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getIncentives = getIncentives;
    // Function to get lending market V3 balances:
    const getMarketBalancesV3 = async (wallet) => {
        // Initializations:
        let balances = [];
        let ibTokens = {};
        // Fetching Assets:
        let assets = await (0, require$$1$1.query)(chain, uiDataProviderV3, ABIs.aave.uiDataProviderABI, 'getReservesList', [addressProviderV3]);
        // Market Balance Multicall Query:
        let calls = [];
        assets.forEach(asset => {
            calls.push({ reference: asset, methodName: 'getUserReserveData', methodParameters: [asset, wallet] });
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, dataProviderV3, ABIs.aave.dataProviderABI, calls);
        let promises = assets.map(asset => (async () => {
            let balanceResults = multicallResults[asset];
            if (balanceResults) {
                let currentATokenBalance = (0, require$$1$1.parseBN)(balanceResults[0]);
                let currentStableDebt = (0, require$$1$1.parseBN)(balanceResults[1]);
                let currentVariableDebt = (0, require$$1$1.parseBN)(balanceResults[2]);
                let stableBorrowRate = (0, require$$1$1.parseBN)(balanceResults[5]);
                let liquidityRate = (0, require$$1$1.parseBN)(balanceResults[6]);
                // Finding Interest Bearing Token Addresses:
                if (currentATokenBalance > 0 || currentStableDebt > 0 || currentVariableDebt > 0) {
                    if (!ibTokens[asset]) {
                        ibTokens[asset] = await (0, require$$1$1.query)(chain, dataProviderV3, ABIs.aave.dataProviderABI, 'getReserveTokensAddresses', [asset]);
                    }
                }
                // Lending Balances:
                if (currentATokenBalance > 0) {
                    let newToken = await (0, require$$1$1.addToken)(chain, project, 'lent', asset, currentATokenBalance, wallet, ibTokens[asset].aTokenAddress);
                    newToken.info = {
                        apy: liquidityRate / (10 ** 25)
                    };
                    balances.push(newToken);
                }
                // Stable Borrowing Balances:
                if (currentStableDebt > 0) {
                    let newToken = await (0, require$$1$1.addDebtToken)(chain, project, asset, currentStableDebt, wallet, ibTokens[asset].aTokenAddress);
                    newToken.info = {
                        apy: stableBorrowRate / (10 ** 25)
                    };
                    balances.push(newToken);
                }
                // Variable Borrowing Balances:
                if (currentVariableDebt > 0) {
                    let newToken = await (0, require$$1$1.addDebtToken)(chain, project, asset, currentVariableDebt, wallet, ibTokens[asset].aTokenAddress);
                    let extraData = await (0, require$$1$1.query)(chain, dataProviderV3, ABIs.aave.dataProviderABI, 'getReserveData', [asset]);
                    newToken.info = {
                        apy: extraData.variableBorrowRate / (10 ** 25)
                    };
                    balances.push(newToken);
                }
            }
        })());
        await Promise.all(promises);
        balances.push(...(await (0, exports.getIncentivesV3)(ibTokens, wallet)));
        return balances;
    };
    exports.getMarketBalancesV3 = getMarketBalancesV3;
    // Function to get unclaimed V3 incentives:
    const getIncentivesV3 = async (ibTokens, wallet) => {
        if (Object.keys(ibTokens).length > 0) {
            let tokens = [];
            for (let asset in ibTokens) {
                tokens.push(ibTokens[asset].aTokenAddress);
                tokens.push(ibTokens[asset].variableDebtTokenAddress);
            }
            let rewards = parseInt(await (0, require$$1$1.query)(chain, incentivesV3, ABIs.aave.incentivesABI, 'getUserRewards', [tokens, wallet, wmatic]));
            if (rewards > 0) {
                let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', wmatic, rewards, wallet);
                return [newToken];
            }
            else {
                return [];
            }
        }
        else {
            return [];
        }
    };
    exports.getIncentivesV3 = getIncentivesV3;
    });

    var apeswap = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getVaultBalances = exports.getFarmBalances = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'poly';
    const project = 'apeswap';
    const masterApe = '0x54aff400858Dcac39797a81894D9920f16972D1D';
    const vaultMaster = '0x37ac7DE40A6fd71FD1559Aa00F154E8dcb72efdb';
    const banana = '0x5d47baba0d66083c52009271faf3f50dcc01023c';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getFarmBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getFarmBalances()', err); })));
        balance.push(...(await (0, exports.getVaultBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getVaultBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get farm balances:
    const getFarmBalances = async (wallet) => {
        let balances = [];
        let bananaRewards = 0;
        let farmCount = parseInt(await (0, require$$1$1.query)(chain, masterApe, ABIs.apeswap.polyMasterApeABI, 'poolLength', []));
        let farms = [...Array(farmCount).keys()];
        // User Info Multicall Query:
        let calls = [];
        farms.forEach(farmID => {
            calls.push({ reference: farmID.toString(), methodName: 'userInfo', methodParameters: [farmID, wallet] });
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, masterApe, ABIs.apeswap.masterApeABI, calls);
        let promises = farms.map(farmID => (async () => {
            let userInfoResults = multicallResults[farmID];
            if (userInfoResults) {
                let balance = (0, require$$1$1.parseBN)(userInfoResults[0]);
                if (balance > 0) {
                    let lpToken = await (0, require$$1$1.query)(chain, masterApe, ABIs.apeswap.polyMasterApeABI, 'lpToken', [farmID]);
                    let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', lpToken, balance, wallet);
                    balances.push(newToken);
                    // Pending BANANA Rewards:
                    let rewards = parseInt(await (0, require$$1$1.query)(chain, masterApe, ABIs.apeswap.polyMasterApeABI, 'pendingBanana', [farmID, wallet]));
                    if (rewards > 0) {
                        bananaRewards += rewards;
                    }
                    // Bonus Rewards:
                    let rewarder = await (0, require$$1$1.query)(chain, masterApe, ABIs.apeswap.polyMasterApeABI, 'rewarder', [farmID]);
                    let bonusRewards = parseInt(await (0, require$$1$1.query)(chain, rewarder, ABIs.apeswap.rewarderABI, 'pendingToken', [farmID, wallet]));
                    if (bonusRewards > 0) {
                        let token = await (0, require$$1$1.query)(chain, rewarder, ABIs.apeswap.rewarderABI, 'rewardToken', []);
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', token, bonusRewards, wallet);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        if (bananaRewards > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', banana, bananaRewards, wallet);
            balances.push(newToken);
        }
        return balances;
    };
    exports.getFarmBalances = getFarmBalances;
    // Function to get vault balances:
    const getVaultBalances = async (wallet) => {
        let balances = [];
        let vaultCount = parseInt(await (0, require$$1$1.query)(chain, vaultMaster, ABIs.apeswap.vaultMasterABI, 'poolLength', []));
        let vaults = [...Array(vaultCount).keys()];
        // Balance Multicall Query:
        let calls = [];
        vaults.forEach(vaultID => {
            calls.push({ reference: vaultID.toString(), methodName: 'stakedWantTokens', methodParameters: [vaultID, wallet] });
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, vaultMaster, ABIs.apeswap.vaultMasterABI, calls);
        let promises = vaults.map(vaultID => (async () => {
            let balanceResults = multicallResults[vaultID];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 99) {
                    let token = (await (0, require$$1$1.query)(chain, vaultMaster, ABIs.apeswap.vaultMasterABI, 'poolInfo', [vaultID])).want;
                    let symbol = await (0, require$$1$1.query)(chain, token, ABIs.minABI, 'symbol', []);
                    // LP Vaults:
                    if (symbol.endsWith('LP')) {
                        let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', token, balance, wallet);
                        balances.push(newToken);
                        // Other Vaults:
                    }
                    else {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', token, balance, wallet);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getVaultBalances = getVaultBalances;
    });

    var apwine = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFutureBalances = exports.get = void 0;
    // Imports:




    // Initializations:
    const chain = 'poly';
    const project = 'apwine';
    const registry = '0x72d15EAE2Cd729D8F2e41B1328311f3e275612B9';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getFutureBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getFutureBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get future balances:
    const getFutureBalances = async (wallet) => {
        let balances = [];
        let poolLength = parseInt(await (0, require$$1$1.query)(chain, registry, ABIs.apwine.registryABI, 'futureVaultCount', []));
        let futures = [...Array(poolLength).keys()];
        // Future Multicall Query:
        let calls = [];
        futures.forEach(futureID => {
            calls.push({ reference: futureID.toString(), methodName: 'getFutureVaultAt', methodParameters: [futureID] });
        });
        let futureMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, registry, ABIs.apwine.registryABI, calls);
        // PT Multicall Query:
        let futureAddresses = Object.keys(futureMulticallResults).map(id => futureMulticallResults[id][0]);
        let ptMulticallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, futureAddresses, ABIs.apwine.futureABI, 'getPTAddress', []);
        // Balance Multicall Query:
        let ptAddresses = Object.keys(ptMulticallResults).map(future => ptMulticallResults[future][0]);
        let balanceMulticallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, ptAddresses, ABIs.minABI, 'balanceOf', [wallet]);
        let promises = futureAddresses.map(future => (async () => {
            let ptAddress = ptMulticallResults[future][0];
            let balanceResults = balanceMulticallResults[ptAddress];
            if (balanceResults) {
                let ptBalance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (ptBalance > 0) {
                    let platform = await (0, require$$1$1.query)(chain, future, ABIs.apwine.futureABI, 'PLATFORM_NAME', []);
                    let futureToken = await (0, require$$1$1.query)(chain, future, ABIs.apwine.futureABI, 'getIBTAddress', []);
                    // Aave Futures:
                    if (platform === 'Aave') {
                        let underlyingToken = await (0, require$$1$1.query)(chain, futureToken, ABIs.aave.lendingABI, 'UNDERLYING_ASSET_ADDRESS', []);
                        let fytBalance = await fetchFYTBalance(wallet, future, futureToken);
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', underlyingToken, ptBalance + fytBalance, wallet);
                        balances.push(newToken);
                        // Harvest Futures:
                    }
                    else if (platform === 'Harvest') {
                        let underlyingToken = await (0, require$$1$1.query)(chain, futureToken, ABIs.harvest.stakingABI, 'underlying', []);
                        let underlyingExchangeRate = parseInt(await (0, require$$1$1.query)(chain, futureToken, ABIs.harvest.stakingABI, 'getPricePerFullShare', [])) / (10 ** 18);
                        let fytBalance = await fetchFYTBalance(wallet, future, futureToken);
                        if (underlyingToken.toLowerCase() === '0xdde43710defef6cbcf820b18debfc3cf9a4f449f') { // 4eur-f
                            let newToken = await (0, projectFunctions.addCurveToken)(chain, project, 'staked', underlyingToken, (ptBalance + fytBalance) * underlyingExchangeRate, wallet);
                            balances.push(newToken);
                        }
                        else if (underlyingToken.toLowerCase() === '0x002fbb34646c32fce6bb1d973b7585e62eee6aa9') { // BP-BTC-SP
                            let newToken = await (0, projectFunctions.addBalancerToken)(chain, project, 'staked', futureToken, (ptBalance + fytBalance) * underlyingExchangeRate, wallet);
                            balances.push(newToken);
                        }
                        // Beefy Futures:
                    }
                    else if (platform === 'Beefy') {
                        let underlyingToken = await (0, require$$1$1.query)(chain, futureToken, ABIs.beefy.vaultABI, 'want', []);
                        let underlyingExchangeRate = parseInt(await (0, require$$1$1.query)(chain, futureToken, ABIs.beefy.vaultABI, 'getPricePerFullShare', [])) / (10 ** 18);
                        let fytBalance = await fetchFYTBalance(wallet, future, futureToken);
                        if (underlyingToken.toLowerCase() === '0xdad97f7713ae9437fa9249920ec8507e5fbb23d3') { // crvUSDBTCETH
                            let newToken = await (0, projectFunctions.addCurveToken)(chain, project, 'staked', underlyingToken, (ptBalance + fytBalance) * underlyingExchangeRate, wallet);
                            balances.push(newToken);
                        }
                        else if (underlyingToken.toLowerCase() === '0xe8dcea7fb2baf7a9f4d9af608f06d78a687f8d9a') { // 2jpy-f
                            let newToken = await (0, projectFunctions.addCurveToken)(chain, project, 'staked', underlyingToken, (ptBalance + fytBalance) * underlyingExchangeRate, wallet);
                            balances.push(newToken);
                        }
                        else if (underlyingToken.toLowerCase() === '0xad326c253a84e9805559b73a08724e11e49ca651') { // 4eur-f
                            let newToken = await (0, projectFunctions.addCurveToken)(chain, project, 'staked', underlyingToken, (ptBalance + fytBalance) * underlyingExchangeRate, wallet);
                            balances.push(newToken);
                        }
                        else if (underlyingToken.toLowerCase() === '0x160532d2536175d65c03b97b0630a9802c274dad') { // UNI-V2
                            let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', underlyingToken, (ptBalance + fytBalance) * underlyingExchangeRate, wallet);
                            balances.push(newToken);
                        }
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getFutureBalances = getFutureBalances;
    // Function to fetch FYT Balances for any future:
    const fetchFYTBalance = async (wallet, future, futureToken) => {
        let balance = 0;
        let currentPeriod = parseInt(await (0, require$$1$1.query)(chain, future, ABIs.apwine.futureABI, 'getCurrentPeriodIndex', []));
        for (let period = 1; period <= currentPeriod; period++) {
            let fyt = await (0, require$$1$1.query)(chain, future, ABIs.apwine.futureABI, 'getFYTofPeriod', [period]);
            let fytBalance = parseInt(await (0, require$$1$1.query)(chain, fyt, ABIs.minABI, 'balanceOf', [wallet]));
            if (fytBalance > 0) {
                let futureTokenDecimals = parseInt(await (0, require$$1$1.query)(chain, futureToken, ABIs.minABI, 'decimals', []));
                let unrealisedYield = parseInt(await (0, require$$1$1.query)(chain, future, ABIs.apwine.futureABI, 'getUnrealisedYieldPerPT', [])) / (10 ** futureTokenDecimals);
                if (unrealisedYield > 0) {
                    let intermediateRate = parseInt(await (0, require$$1$1.query)(chain, future, ABIs.apwine.futureABI, 'getIBTRate', [])) / (10 ** futureTokenDecimals);
                    let exchangeRate = unrealisedYield * intermediateRate;
                    let actualFytBalance = fytBalance * exchangeRate;
                    balance += actualFytBalance;
                }
            }
        }
        return balance;
    };
    });

    var autofarm = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getVaultBalances = exports.get = void 0;
    // Imports:




    // Initializations:
    const chain = 'poly';
    const project = 'autofarm';
    const registry = '0x89d065572136814230a55ddeeddec9df34eb0b76';
    const ignoredVaults = [];
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getVaultBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getVaultBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get all vault balances:
    const getVaultBalances = async (wallet) => {
        let balances = [];
        let poolLength = parseInt(await (0, require$$1$1.query)(chain, registry, ABIs.autofarm.registryABI, 'poolLength', []));
        let vaults = [...Array(poolLength).keys()];
        // Balance Multicall Query:
        let calls = [];
        vaults.forEach(vaultID => {
            if (!ignoredVaults.includes(vaultID)) {
                calls.push({ reference: vaultID.toString(), methodName: 'stakedWantTokens', methodParameters: [vaultID, wallet] });
            }
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, registry, ABIs.autofarm.registryABI, calls);
        let promises = vaults.map(vaultID => (async () => {
            let balanceResults = multicallResults[vaultID];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 99) {
                    let token = (await (0, require$$1$1.query)(chain, registry, ABIs.autofarm.registryABI, 'poolInfo', [vaultID]))[0];
                    let symbol = await (0, require$$1$1.query)(chain, token, ABIs.minABI, 'symbol', []);
                    // Curve Vaults:
                    if (vaultID === 66 || vaultID === 97 || vaultID === 98) {
                        let newToken = await (0, projectFunctions.addCurveToken)(chain, project, 'staked', token, balance, wallet);
                        balances.push(newToken);
                        // BZX I-Token Vaults:
                    }
                    else if (vaultID > 58 && vaultID < 66) {
                        let newToken = await (0, projectFunctions.addBZXToken)(chain, project, 'staked', token, balance, wallet);
                        balances.push(newToken);
                        // LP Token Vaults:
                    }
                    else if (symbol.includes('LP') || symbol === 'UNI-V2') {
                        let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', token, balance, wallet);
                        balances.push(newToken);
                        // Single-Asset Vaults:
                    }
                    else {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', token, balance, wallet);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getVaultBalances = getVaultBalances;
    });

    var balancer = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPoolBalances = exports.get = void 0;
    // Imports:




    // Initializations:
    const chain = 'poly';
    const project = 'balancer';
    const pools = [
        '0x01abc00E86C7e258823b9a055Fd62cA6CF61a163',
        '0x021c343C6180f03cE9E48FaE3ff432309b9aF199',
        '0x0297e37f1873D2DAb4487Aa67cD56B58E2F27875',
        '0x03cD191F589d12b0582a99808cf19851E468E6B5',
        '0x06Df3b2bbB68adc8B0e302443692037ED9f91b42',
        '0x09804CaEA2400035b18E2173fdD10EC8b670cA09',
        '0x0a9E96988E21c9A03B8DC011826A00259e02C46e',
        '0x148CE9b50bE946a96e94A4f5479b771bAB9B1c59',
        '0x15432bA000e58E3c0aE52A5dEc0579215EBC75D0',
        '0x186084fF790C65088BA694Df11758faE4943EE9E',
        '0x2D6e3515C8b47192Ca3913770fa741d3C4Dac354',
        '0x32FC95287b14eAeF3Afa92CCCC48C285eE3a280a',
        '0x344e8f99a55DA2ba6B4b5158df2143374E400DF2',
        '0x36128D5436d2d70cab39C9AF9CcE146C38554ff0',
        '0x38A01c45D86b61A70044fB2A76eAC8e75B1ac78E',
        '0x39Cd55FF7E7d7C66D7D2736f1d5D4791cDab895B',
        '0x3A19030Ed746bD1C3f2B0f996FF9479aF04C5F0A',
        '0x41175c3ee2Dd49FCa9b263F49525c069095b87C7',
        '0x45910fafF3cBf990FdB204682e93055506682d17',
        '0x4626d81b3a1711bEb79f4CEcFf2413886d461677',
        '0x494B26D4aEE801Cb1fabF498Ee24f0af20238743',
        '0x4E7f40cD37CEE710f5e87AD72959d30ef8a01A5D',
        '0x503717B3Dc137e230AFC7c772520D7974474fB70',
        '0x571046EaE58C783f29f95ADBa17Dd561Af8a8712',
        '0x58aF920D9Dc0bc4e8F771FF013D79215CabcaA9e',
        '0x59e2563c08029F13F80CBa9Eb610bfD0367eD266',
        '0x5c6Ee304399DBdB9C8Ef030aB642B10820DB8F56',
        '0x606e3CCC8C51cbbB1Ff07AD03c6F95a84672ab16',
        '0x614b5038611729ed49e0dED154d8A5d3AF9D1D9E',
        '0x61d5dc44849c9C87b0856a2a311536205C96c7FD',
        '0x647c1FD457b95b75D0972fF08FE01d7D7bda05dF',
        '0x67F8FCb9D3c463da05DE1392EfDbB2A87F8599Ea',
        '0x72Ab6fF76554f90532E2809Cee019ade724e029a',
        '0x7320d680Ca9BCE8048a286f00A79A2c9f8DCD7b3',
        '0x7Bf521b4f4C1543A622e11eE347EFB1a23743322',
        '0x7EB878107Af0440F9E776f999CE053D277c8Aca8',
        '0x80bE0c303D8Ad2A280878b50a39B1ee8E54DBD22',
        '0x8bDa1AB5eEad21547Ba0f33c07c86C5Dc48D9Baa',
        '0x991aeafbe1B1C7ac8348DC623AE350768d0C65b3',
        '0x9E7fD25Ad9D97F1e6716fa5bB04749A4621e892d',
        '0x9F19a375709BAF0E8e35C2c5c65aca676c4C7191',
        '0xA6F548DF93de924d73be7D25dC02554c6bD66dB5',
        '0xB2634e2BFab9664F603626afc3D270BE63c09adE',
        '0xB6b9B165C4AC3f5233A0CF413126C72Be28B468A',
        '0xb82A45ea7C6d7c90bD95e9e2aF13242538F2e269',
        '0xC6A5032dC4bF638e15b4a66BC718ba7bA474FF73',
        '0xce66904B68f1f070332Cbc631DE7ee98B650b499',
        '0xd16847480D6bc218048CD31Ad98b63CC34e5c2bF',
        '0xD208168d2A512240Eb82582205D94a0710BCe4E7',
        '0xd47c0734a0b5feFf3bB2FC8542Cd5B9751aFeEfB',
        '0xd57b0Ee9e080E3f6Aa0C30BAE98234359e97Ea98',
        '0xD5D7bc115B32ad1449C6D0083E43C87be95F2809',
        '0xdB1db6E248d7Bb4175f6E5A382d0A03fe3DCc813',
        '0xdB3e5Cf969c05625Db344deA9C8b12515e235Df3',
        '0xDe620bb8BE43ee54d7aa73f8E99A7409Fe511084',
        '0xe0947A0D847f9662a6a22cA2efF9D7E6352a123e',
        '0xe2cD73cfeB471f9F2b08A18afbc87Ff2324eF24E',
        '0xE54B3F5c444a801e61BECDCa93e74CdC1C4C1F90',
        '0xe8075304A388f2f9B2af61f502741a88Ff21D9A4',
        '0xEA8886a24b6e01Fba88A9e98d794e8D1F29eD863',
        '0xeB58bE542E77195355d90100beb07105B9BD295E',
        '0xF099b7C3BD5A221Aa34Cb83004a50D66B0189ad0',
        '0xf461f2240B66D55Dcf9059e26C022160C06863BF',
        '0xF7cd489C2b7E199e2d3E8A982Eb6FD51d71c1ce4',
        '0xf93E20844Fd084b657D5e71342157b36C5F3032D',
        '0xF94A7Df264A2ec8bCEef2cFE54d7cA3f6C6DFC7a',
        '0xFeadd389a5c427952D8fdb8057D6C8ba1156cC56'
    ];
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getPoolBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getPoolBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get all pool balances:
    const getPoolBalances = async (wallet) => {
        let balances = [];
        // Balance Multicall Query:
        let multicallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, pools, ABIs.minABI, 'balanceOf', [wallet]);
        let promises = pools.map(pool => (async () => {
            let balanceResults = multicallResults[pool];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 0) {
                    let newToken = await (0, projectFunctions.addBalancerToken)(chain, project, 'staked', pool, balance, wallet);
                    balances.push(newToken);
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getPoolBalances = getPoolBalances;
    });

    var beefy = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getStakedBIFI = exports.getVaultBalances = exports.get = void 0;
    // Imports:




    // Initializations:
    const chain = 'poly';
    const project = 'beefy';
    const staking = '0xDeB0a777ba6f59C78c654B8c92F80238c8002DD2';
    const bifi = '0xfbdd194376de19a88118e84e279b977f165d01b8';
    const wmatic = '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270';
    const apiURL = 'https://api.beefy.finance';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        let vaultsData = await (0, require$$1$1.fetchData)(`${apiURL}/vaults`);
        let apyData = await (0, require$$1$1.fetchData)(`${apiURL}/apy`);
        let vaults = vaultsData.filter(vault => vault.chain === 'polygon' && vault.status === 'active');
        if (vaults.length > 0) {
            balance.push(...(await (0, exports.getVaultBalances)(wallet, vaults, apyData).catch((err) => { throw new error.WeaverError(chain, project, 'getVaultBalances()', err); })));
            balance.push(...(await (0, exports.getStakedBIFI)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getStakedBIFI()', err); })));
        }
        else {
            throw new error.WeaverError(chain, project, 'Invalid response from Beefy API');
        }
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get vault balances:
    const getVaultBalances = async (wallet, vaults, apys) => {
        let balances = [];
        // Balance Multicall Query:
        let vaultAddresses = vaults.map(vault => vault.earnedTokenAddress);
        let multicallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, vaultAddresses, ABIs.minABI, 'balanceOf', [wallet]);
        let promises = vaults.map(vault => (async () => {
            let balanceResults = multicallResults[vault.earnedTokenAddress];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 0) {
                    let decimals = parseInt(await (0, require$$1$1.query)(chain, vault.earnedTokenAddress, ABIs.minABI, 'decimals', []));
                    let exchangeRate = parseInt(await (0, require$$1$1.query)(chain, vault.earnedTokenAddress, ABIs.beefy.vaultABI, 'getPricePerFullShare', []));
                    let underlyingBalance = balance * (exchangeRate / (10 ** decimals));
                    // Native Token Vaults:
                    if (!vault.tokenAddress) {
                        if (vault.token === 'MATIC') {
                            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', wmatic, underlyingBalance, wallet);
                            let vaultAPY = apys[vault.id];
                            if (vaultAPY) {
                                newToken.info = {
                                    apy: vaultAPY
                                };
                            }
                            balances.push(newToken);
                        }
                    }
                    else {
                        // Curve Vaults:
                        if (vault.platform === 'Curve') {
                            let newToken = await (0, projectFunctions.addCurveToken)(chain, project, 'staked', vault.tokenAddress, underlyingBalance, wallet);
                            let vaultAPY = apys[vault.id];
                            if (vaultAPY) {
                                newToken.info = {
                                    apy: vaultAPY
                                };
                            }
                            balances.push(newToken);
                            // LP Token Vaults:
                        }
                        else if (vault.assets.length === 2 && vault.platform != 'Kyber' && !vault.id.includes('jarvis')) {
                            let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', vault.tokenAddress, underlyingBalance, wallet);
                            let vaultAPY = apys[vault.id];
                            if (vaultAPY) {
                                newToken.info = {
                                    apy: vaultAPY
                                };
                            }
                            balances.push(newToken);
                            // Single-Asset Vaults:
                        }
                        else if (vault.assets.length === 1) {
                            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', vault.tokenAddress, underlyingBalance, wallet);
                            let vaultAPY = apys[vault.id];
                            if (vaultAPY) {
                                newToken.info = {
                                    apy: vaultAPY
                                };
                            }
                            balances.push(newToken);
                        }
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getVaultBalances = getVaultBalances;
    // Function to get staked BIFI balance:
    const getStakedBIFI = async (wallet) => {
        let balances = [];
        let balance = parseInt(await (0, require$$1$1.query)(chain, staking, ABIs.minABI, 'balanceOf', [wallet]));
        if (balance > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', bifi, balance, wallet);
            balances.push(newToken);
        }
        let pendingRewards = parseInt(await (0, require$$1$1.query)(chain, staking, ABIs.beefy.stakingABI, 'earned', [wallet]));
        if (pendingRewards > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', wmatic, pendingRewards, wallet);
            balances.push(newToken);
        }
        return balances;
    };
    exports.getStakedBIFI = getStakedBIFI;
    });

    var cream = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getMarketBalances = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'poly';
    const project = 'cream';
    const controller = '0x20CA53E2395FA571798623F1cFBD11Fe2C114c24';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getMarketBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getMarketBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get all market balances and debt:
    const getMarketBalances = async (wallet) => {
        let balances = [];
        let markets = await (0, require$$1$1.query)(chain, controller, ABIs.cream.controllerABI, 'getAllMarkets', []);
        // Market Balance Multicall Query:
        let abi = ABIs.minABI.concat(ABIs.cream.tokenABI);
        let calls = [
            { reference: 'marketBalance', methodName: 'balanceOf', methodParameters: [wallet] },
            { reference: 'borrowBalance', methodName: 'borrowBalanceStored', methodParameters: [wallet] }
        ];
        let multicallResults = await (0, require$$1$1.multicallComplexQuery)(chain, markets, abi, calls);
        let promises = markets.map(market => (async () => {
            let marketResults = multicallResults[market];
            if (marketResults) {
                let marketBalanceResults = marketResults['marketBalance'];
                let borrowingResults = marketResults['borrowBalance'];
                // Lending Balances:
                if (marketBalanceResults) {
                    let balance = (0, require$$1$1.parseBN)(marketBalanceResults[0]);
                    if (balance > 0) {
                        let exchangeRate = parseInt(await (0, require$$1$1.query)(chain, market, ABIs.cream.tokenABI, 'exchangeRateStored', []));
                        let decimals = parseInt(await (0, require$$1$1.query)(chain, market, ABIs.minABI, 'decimals', []));
                        let tokenAddress = await (0, require$$1$1.query)(chain, market, ABIs.cream.tokenABI, 'underlying', []);
                        let underlyingBalance = (balance / (10 ** decimals)) * (exchangeRate / (10 ** (decimals + 2)));
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'lent', tokenAddress, underlyingBalance, wallet);
                        balances.push(newToken);
                    }
                }
                // Borrowing Balances:
                if (borrowingResults) {
                    let debt = (0, require$$1$1.parseBN)(borrowingResults[0]);
                    if (debt > 0) {
                        let tokenAddress = await (0, require$$1$1.query)(chain, market, ABIs.cream.tokenABI, 'underlying', []);
                        let newToken = await (0, require$$1$1.addDebtToken)(chain, project, tokenAddress, debt, wallet);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getMarketBalances = getMarketBalances;
    });

    var curve = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFactoryPoolBalances = exports.getCryptoPoolBalances = exports.getPoolBalances = exports.get = void 0;
    // Imports:




    // Initializations:
    const chain = 'poly';
    const project = 'curve';
    const registry = '0x094d12e5b541784701FD8d65F11fc0598FBC6332';
    const cryptoRegistry = '0x47bB542B9dE58b970bA50c9dae444DDB4c16751a';
    const factory = '0x722272D36ef0Da72FF51c5A65Db7b870E2e8D4ee';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getPoolBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getPoolBalances()', err); })));
        balance.push(...(await (0, exports.getCryptoPoolBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getCryptoPoolBalances()', err); })));
        balance.push(...(await (0, exports.getFactoryPoolBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getFactoryPoolBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get pool balances:
    const getPoolBalances = async (wallet) => {
        let balances = [];
        let poolAddresses = await getPoolAddresses(registry);
        // Initializing Multicalls:
        let lpCalls = [];
        let gaugeCalls = [];
        poolAddresses.forEach(poolAddress => { lpCalls.push({ reference: poolAddress, methodName: 'get_lp_token', methodParameters: [poolAddress] }); });
        poolAddresses.forEach(poolAddress => { gaugeCalls.push({ reference: poolAddress, methodName: 'get_gauges', methodParameters: [poolAddress] }); });
        // LP Token Balances:
        let lpMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, registry, ABIs.curve.registryABI, lpCalls);
        let lpTokens = Object.keys(lpMulticallResults).map(pool => lpMulticallResults[pool][0]);
        balances.push(...(await getLPTokenBalances(lpTokens, wallet)));
        // Gauge Balances:
        let gaugeMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, registry, ABIs.curve.registryABI, gaugeCalls);
        let gauges = Object.keys(gaugeMulticallResults).map(pool => gaugeMulticallResults[pool][0][0]).filter(gauge => gauge != require$$1$1.zero);
        balances.push(...(await getGaugeBalances(gauges, wallet)));
        return balances;
    };
    exports.getPoolBalances = getPoolBalances;
    // Function to get crypto pool balances:
    const getCryptoPoolBalances = async (wallet) => {
        let balances = [];
        let poolAddresses = await getPoolAddresses(cryptoRegistry);
        // Initializing Multicalls:
        let lpCalls = [];
        let gaugeCalls = [];
        poolAddresses.forEach(poolAddress => { lpCalls.push({ reference: poolAddress, methodName: 'get_lp_token', methodParameters: [poolAddress] }); });
        poolAddresses.forEach(poolAddress => { gaugeCalls.push({ reference: poolAddress, methodName: 'get_gauges', methodParameters: [poolAddress] }); });
        // LP Token Balances:
        let lpMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, cryptoRegistry, ABIs.curve.registryABI, lpCalls);
        let lpTokens = Object.keys(lpMulticallResults).map(pool => lpMulticallResults[pool][0]);
        balances.push(...(await getLPTokenBalances(lpTokens, wallet)));
        // Gauge Balances:
        let gaugeMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, cryptoRegistry, ABIs.curve.registryABI, gaugeCalls);
        let gauges = Object.keys(gaugeMulticallResults).map(pool => gaugeMulticallResults[pool][0][0]).filter(gauge => gauge != require$$1$1.zero);
        balances.push(...(await getGaugeBalances(gauges, wallet)));
        return balances;
    };
    exports.getCryptoPoolBalances = getCryptoPoolBalances;
    // Function to get factory pool balances:
    const getFactoryPoolBalances = async (wallet) => {
        let balances = [];
        let poolAddresses = await getPoolAddresses(factory);
        // Initializing Multicall:
        let gaugeCalls = [];
        poolAddresses.forEach(poolAddress => { gaugeCalls.push({ reference: poolAddress, methodName: 'get_gauge', methodParameters: [poolAddress] }); });
        // LP Token Balances (same as pools):
        balances.push(...(await getLPTokenBalances(poolAddresses, wallet)));
        // Gauge Balances:
        let gaugeMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, factory, ABIs.curve.factoryABI, gaugeCalls);
        let gauges = Object.keys(gaugeMulticallResults).map(pool => gaugeMulticallResults[pool][0]).filter(gauge => gauge != require$$1$1.zero);
        balances.push(...(await getGaugeBalances(gauges, wallet)));
        return balances;
    };
    exports.getFactoryPoolBalances = getFactoryPoolBalances;
    /* ========================================================================================================================================================================= */
    // Function to get pool addresses:
    const getPoolAddresses = async (registry) => {
        let poolCount = parseInt(await (0, require$$1$1.query)(chain, registry, ABIs.curve.registryABI, 'pool_count', []));
        let poolIDs = [...Array(poolCount).keys()];
        let poolCalls = [];
        poolIDs.forEach(poolID => {
            poolCalls.push({ reference: poolID.toString(), methodName: 'pool_list', methodParameters: [poolID] });
        });
        let poolMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, registry, ABIs.curve.registryABI, poolCalls);
        let poolAddresses = Object.keys(poolMulticallResults).map(poolID => poolMulticallResults[poolID][0]);
        return poolAddresses;
    };
    // Function to get LP token balances:
    const getLPTokenBalances = async (lpTokens, wallet) => {
        let balances = [];
        if (lpTokens.length > 0) {
            let balanceMulticallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, lpTokens, ABIs.minABI, 'balanceOf', [wallet]);
            let promises = lpTokens.map(lpToken => (async () => {
                let balanceResults = balanceMulticallResults[lpToken];
                if (balanceResults) {
                    let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                    if (balance > 0) {
                        let newToken = await (0, projectFunctions.addCurveToken)(chain, project, 'liquidity', lpToken, balance, wallet);
                        balances.push(newToken);
                    }
                }
            })());
            await Promise.all(promises);
        }
        return balances;
    };
    // Function get gauge balances:
    const getGaugeBalances = async (gauges, wallet) => {
        let balances = [];
        if (gauges.length > 0) {
            let balanceMulticallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, gauges, ABIs.minABI, 'balanceOf', [wallet]);
            let promises = gauges.map(gauge => (async () => {
                let balanceResults = balanceMulticallResults[gauge];
                if (balanceResults) {
                    let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                    if (balance > 0) {
                        let lpToken = await (0, require$$1$1.query)(chain, gauge, ABIs.curve.gaugeABI, 'lp_token', []);
                        let newToken = await (0, projectFunctions.addCurveToken)(chain, project, 'staked', lpToken, balance, wallet);
                        balances.push(newToken);
                        // Pending Rewards:
                        for (let i = 0; i < 2; i++) {
                            let token = await (0, require$$1$1.query)(chain, gauge, ABIs.curve.gaugeABI, 'reward_tokens', [i]);
                            if (token != require$$1$1.zero) {
                                let rewards = parseInt(await (0, require$$1$1.query)(chain, gauge, ABIs.curve.gaugeABI, 'claimable_reward', [wallet, token]));
                                if (rewards > 0) {
                                    let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', token, rewards, wallet);
                                    balances.push(newToken);
                                }
                            }
                        }
                    }
                }
            })());
            await Promise.all(promises);
        }
        return balances;
    };
    });

    var mstable = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPoolBalances = exports.getAssetBalances = exports.get = void 0;
    // Imports:




    // Initializations:
    const chain = 'poly';
    const project = 'mstable';
    const mta = '0xf501dd45a1198c2e1b5aef5314a68b9006d842e0';
    const imUSD = '0x5290Ad3d83476CA6A2b178Cd9727eE1EF72432af';
    const imUSDVault = '0x32aBa856Dc5fFd5A56Bcd182b13380e5C855aa29';
    const pools = [
        '0xB30a907084AC8a0d25dDDAB4E364827406Fd09f0'
    ];
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getAssetBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getAssetBalances()', err); })));
        balance.push(...(await (0, exports.getPoolBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getPoolBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get asset balances:
    const getAssetBalances = async (wallet) => {
        let balances = [];
        // imUSD:
        let usdAssetBalance = parseInt(await (0, require$$1$1.query)(chain, imUSD, ABIs.minABI, 'balanceOf', [wallet]));
        if (usdAssetBalance > 0) {
            let decimals = parseInt(await (0, require$$1$1.query)(chain, imUSD, ABIs.minABI, 'decimals', []));
            let exchangeRate = parseInt(await (0, require$$1$1.query)(chain, imUSD, ABIs.mstable.assetABI, 'exchangeRate', [])) / (10 ** decimals);
            let token = await (0, require$$1$1.query)(chain, imUSD, ABIs.mstable.assetABI, 'underlying', []);
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', token, usdAssetBalance * exchangeRate, wallet);
            balances.push(newToken);
        }
        // imUSD Vault:
        let usdVaultBalance = parseInt(await (0, require$$1$1.query)(chain, imUSDVault, ABIs.minABI, 'balanceOf', [wallet]));
        if (usdVaultBalance > 0) {
            let decimals = parseInt(await (0, require$$1$1.query)(chain, imUSD, ABIs.minABI, 'decimals', []));
            let exchangeRate = parseInt(await (0, require$$1$1.query)(chain, imUSD, ABIs.mstable.assetABI, 'exchangeRate', [])) / (10 ** decimals);
            let token = await (0, require$$1$1.query)(chain, imUSD, ABIs.mstable.assetABI, 'underlying', []);
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', token, usdVaultBalance * exchangeRate, wallet);
            balances.push(newToken);
            let rewards = parseInt(await (0, require$$1$1.query)(chain, imUSDVault, ABIs.mstable.vaultABI, 'earned', [wallet]));
            if (rewards > 0) {
                let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', mta, rewards, wallet);
                balances.push(newToken);
            }
        }
        return balances;
    };
    exports.getAssetBalances = getAssetBalances;
    // Function to get pool balances:
    const getPoolBalances = async (wallet) => {
        let balances = [];
        // Balance Multicall Query:
        let multicallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, pools, ABIs.minABI, 'balanceOf', [wallet]);
        let promises = pools.map(pool => (async () => {
            let balanceResults = multicallResults[pool];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 0) {
                    let newToken = await (0, projectFunctions.addStableToken)(chain, project, 'staked', pool, balance, wallet);
                    balances.push(newToken);
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getPoolBalances = getPoolBalances;
    });

    var pooltogether = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCommunityPoolBalance = exports.getPoolBalanceV4 = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'poly';
    const project = 'pooltogether';
    const poolTicketV4 = '0x6a304dFdb9f808741244b6bfEe65ca7B3b3A6076';
    const poolDepositV4 = '0x19DE635fb3678D8B8154E37d8C9Cdf182Fe84E60';
    const usdc = '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174';
    const poolToken = '0x25788a1a171ec66da6502f9975a15b609ff54cf6';
    const communityPool = '0xd80EAA761CcfdC8698999D73C96CeC39fBB1fC48';
    const communityPoolPrizeContract = '0x2aC049f07d56Ed04F84Ff80022A71a1A2d8cE19b';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getPoolBalanceV4)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getPoolBalanceV4()', err); })));
        balance.push(...(await (0, exports.getCommunityPoolBalance)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getCommunityPoolBalance()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get V4 pool balance:
    const getPoolBalanceV4 = async (wallet) => {
        let balance = parseInt(await (0, require$$1$1.query)(chain, poolTicketV4, ABIs.minABI, 'balanceOf', [wallet]));
        if (balance > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', usdc, balance, wallet, poolDepositV4);
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getPoolBalanceV4 = getPoolBalanceV4;
    // Function to get community pool balances:
    const getCommunityPoolBalance = async (wallet) => {
        let balance = parseInt(await (0, require$$1$1.query)(chain, communityPool, ABIs.minABI, 'balanceOf', [wallet]));
        if (balance > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'staked', poolToken, balance, wallet, communityPoolPrizeContract);
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getCommunityPoolBalance = getCommunityPoolBalance;
    });

    var quickswap = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getStakedQUICK = exports.getDualFarmBalances = exports.getFarmBalances = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'poly';
    const project = 'quickswap';
    const registry = '0x8aAA5e259F74c8114e0a471d9f2ADFc66Bfe09ed';
    const dualRegistry = '0x9Dd12421C637689c3Fc6e661C9e2f02C2F61b3Eb';
    const quick = '0x831753dd7087cac61ab5644b308642cc1c33dc13';
    const dquick = '0xf28164a485b0b2c90639e47b0f377b4a438a16b1';
    const wmatic = '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270';
    const farmCount = 188;
    const dualFarmCount = 17;
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        let farms = await getFarms().catch((err) => { throw new error.WeaverError(chain, project, 'getFarms()', err); });
        let dualFarms = await getDualFarms().catch((err) => { throw new error.WeaverError(chain, project, 'getDualFarms()', err); });
        let ratio = await getRatio().catch((err) => { throw new error.WeaverError(chain, project, 'getRatio()', err); });
        balance.push(...(await (0, exports.getFarmBalances)(wallet, farms, ratio).catch((err) => { throw new error.WeaverError(chain, project, 'getFarmBalances()', err); })));
        balance.push(...(await (0, exports.getDualFarmBalances)(wallet, dualFarms, ratio).catch((err) => { throw new error.WeaverError(chain, project, 'getDualFarmBalances()', err); })));
        balance.push(...(await (0, exports.getStakedQUICK)(wallet, ratio).catch((err) => { throw new error.WeaverError(chain, project, 'getStakedQUICK()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get all farm balances:
    const getFarmBalances = async (wallet, farms, ratio) => {
        let balances = [];
        // Balance Multicall Query:
        let multicallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, farms, ABIs.minABI, 'balanceOf', [wallet]);
        let promises = farms.map(farm => (async () => {
            let balanceResults = multicallResults[farm];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 0) {
                    let token = await (0, require$$1$1.query)(chain, farm, ABIs.quickswap.farmABI, 'stakingToken', []);
                    let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', token, balance, wallet);
                    balances.push(newToken);
                    // Pending QUICK Rewards:
                    let rewards = parseInt(await (0, require$$1$1.query)(chain, farm, ABIs.quickswap.farmABI, 'earned', [wallet]));
                    if (rewards > 0) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', quick, rewards * ratio, wallet);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getFarmBalances = getFarmBalances;
    // Function to get all dual farm balances:
    const getDualFarmBalances = async (wallet, dualFarms, ratio) => {
        let balances = [];
        // Balance Multicall Query:
        let multicallResults = await (0, require$$1$1.multicallOneMethodQuery)(chain, dualFarms, ABIs.minABI, 'balanceOf', [wallet]);
        let promises = dualFarms.map(farm => (async () => {
            let balanceResults = multicallResults[farm];
            if (balanceResults) {
                let balance = (0, require$$1$1.parseBN)(balanceResults[0]);
                if (balance > 0) {
                    let token = await (0, require$$1$1.query)(chain, farm, ABIs.quickswap.dualFarmABI, 'stakingToken', []);
                    let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', token, balance, wallet);
                    balances.push(newToken);
                    // Pending QUICK Rewards:
                    let rewardsA = parseInt(await (0, require$$1$1.query)(chain, farm, ABIs.quickswap.dualFarmABI, 'earnedA', [wallet]));
                    if (rewardsA > 0) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', quick, rewardsA * ratio, wallet);
                        balances.push(newToken);
                    }
                    // Pending WMATIC Rewards:
                    let rewardsB = parseInt(await (0, require$$1$1.query)(chain, farm, ABIs.quickswap.dualFarmABI, 'earnedB', [wallet]));
                    if (rewardsB > 0) {
                        let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', wmatic, rewardsB, wallet);
                        balances.push(newToken);
                    }
                }
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getDualFarmBalances = getDualFarmBalances;
    // Function to get staked QUICK balance:
    const getStakedQUICK = async (wallet, ratio) => {
        let balance = parseInt(await (0, require$$1$1.query)(chain, dquick, ABIs.minABI, 'balanceOf', [wallet]));
        if (balance > 0) {
            let newToken = await (0, require$$1$1.addXToken)(chain, project, 'staked', dquick, balance, wallet, quick, balance * ratio);
            return [newToken];
        }
        else {
            return [];
        }
    };
    exports.getStakedQUICK = getStakedQUICK;
    /* ========================================================================================================================================================================= */
    // Function to get farms:
    const getFarms = async () => {
        let farmIDs = [...Array(farmCount + 1).keys()];
        // Token Multicall Query:
        let tokenCalls = [];
        farmIDs.forEach(id => {
            tokenCalls.push({ reference: id.toString(), methodName: 'stakingTokens', methodParameters: [id] });
        });
        let tokenMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, registry, ABIs.quickswap.registryABI, tokenCalls);
        // Farms Multicall Query:
        let tokens = Object.keys(tokenMulticallResults).map(id => tokenMulticallResults[id][0]);
        let farmCalls = [];
        tokens.forEach(token => {
            farmCalls.push({ reference: token, methodName: 'stakingRewardsInfoByStakingToken', methodParameters: [token] });
        });
        let farmMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, registry, ABIs.quickswap.registryABI, farmCalls);
        let farms = Object.keys(farmMulticallResults).map(token => farmMulticallResults[token][0]).filter(farm => farm != require$$1$1.zero);
        return farms;
    };
    // Function to get dual reward farms:
    const getDualFarms = async () => {
        let farmIDs = [...Array(dualFarmCount + 1).keys()];
        // Token Multicall Query:
        let tokenCalls = [];
        farmIDs.forEach(id => {
            tokenCalls.push({ reference: id.toString(), methodName: 'stakingTokens', methodParameters: [id] });
        });
        let tokenMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, dualRegistry, ABIs.quickswap.dualRegistryABI, tokenCalls);
        // Dual Farms Multicall Query:
        let tokens = Object.keys(tokenMulticallResults).map(id => tokenMulticallResults[id][0]);
        let dualFarmCalls = [];
        tokens.forEach(token => {
            dualFarmCalls.push({ reference: token, methodName: 'stakingRewardsInfoByStakingToken', methodParameters: [token] });
        });
        let dualFarmMulticallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, dualRegistry, ABIs.quickswap.dualRegistryABI, dualFarmCalls);
        let dualFarms = Object.keys(dualFarmMulticallResults).map(token => dualFarmMulticallResults[token][0]).filter(farm => farm != require$$1$1.zero);
        return dualFarms;
    };
    // Function to get dQUICK ratio:
    const getRatio = async () => {
        let ratio = parseInt(await (0, require$$1$1.query)(chain, dquick, ABIs.quickswap.stakingABI, 'dQUICKForQUICK', [100000000])) / (10 ** 8);
        return ratio;
    };
    });

    var sushiswap = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFarmBalances = exports.get = void 0;
    // Imports:



    // Initializations:
    const chain = 'poly';
    const project = 'sushiswap';
    const masterChef = '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F';
    const sushi = '0x0b3f868e0be5597d5db7feb59e1cadbb0fdda50a';
    /* ========================================================================================================================================================================= */
    // Function to get project balance:
    const get = async (wallet) => {
        let balance = [];
        balance.push(...(await (0, exports.getFarmBalances)(wallet).catch((err) => { throw new error.WeaverError(chain, project, 'getFarmBalances()', err); })));
        return balance;
    };
    exports.get = get;
    /* ========================================================================================================================================================================= */
    // Function to get farm balances:
    const getFarmBalances = async (wallet) => {
        let balances = [];
        let sushiRewards = 0;
        let farmCount = parseInt(await (0, require$$1$1.query)(chain, masterChef, ABIs.sushiswap.masterChefABI, 'poolLength', []));
        let farms = [...Array(farmCount).keys()];
        // User Info Multicall Query:
        let calls = [];
        farms.forEach(farmID => {
            calls.push({ reference: farmID.toString(), methodName: 'userInfo', methodParameters: [farmID, wallet] });
        });
        let multicallResults = await (0, require$$1$1.multicallOneContractQuery)(chain, masterChef, ABIs.sushiswap.masterChefABI, calls);
        let promises = farms.map(farmID => (async () => {
            let userInfoResults = multicallResults[farmID];
            if (userInfoResults) {
                let balance = (0, require$$1$1.parseBN)(userInfoResults[0]);
                if (balance > 0) {
                    let lpToken = await (0, require$$1$1.query)(chain, masterChef, ABIs.sushiswap.masterChefABI, 'lpToken', [farmID]);
                    let newToken = await (0, require$$1$1.addLPToken)(chain, project, 'staked', lpToken, balance, wallet);
                    balances.push(newToken);
                    // Pending SUSHI Rewards:
                    let rewards = parseInt(await (0, require$$1$1.query)(chain, masterChef, ABIs.sushiswap.masterChefABI, 'pendingSushi', [farmID, wallet]));
                    if (rewards > 0) {
                        sushiRewards += rewards;
                    }
                }
            }
        })());
        await Promise.all(promises);
        if (sushiRewards > 0) {
            let newToken = await (0, require$$1$1.addToken)(chain, project, 'unclaimed', sushi, sushiRewards, wallet);
            balances.push(newToken);
        }
        return balances;
    };
    exports.getFarmBalances = getFarmBalances;
    });

    /* [HEED MY WARNING FELLOW DEV!] This file was auto-generated during build by '/pre-build/projects.js'. Any changes to this file directly will not persist after building. [FARE THEE WELL] */
    var __createBinding$5 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar$5 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$5(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };

    // ARB Project Imports:
    // AVAX Project Imports:
    const avax_aave = __importStar$5(aave$4);
    const avax_alligator = __importStar$5(alligator);
    const avax_autofarm = __importStar$5(autofarm$3);
    const avax_avalaunch = __importStar$5(avalaunch);
    const avax_axial = __importStar$5(axial);
    const avax_beefy = __importStar$5(beefy$3);
    const avax_benqi = __importStar$5(benqi);
    const avax_cream = __importStar$5(cream$4);
    const avax_curve = __importStar$5(curve$3);
    const avax_cycle = __importStar$5(cycle);
    const avax_lostworlds = __importStar$5(lostworlds);
    const avax_lydia = __importStar$5(lydia);
    const avax_pangolin = __importStar$5(pangolin);
    const avax_penguin = __importStar$5(penguin);
    const avax_platypus = __importStar$5(platypus);
    const avax_pooltogether = __importStar$5(pooltogether$3);
    const avax_snowball = __importStar$5(snowball);
    const avax_teddy = __importStar$5(teddy);
    const avax_traderjoe = __importStar$5(traderjoe);
    const avax_yieldyak = __importStar$5(yieldyak);
    // BSC Project Imports:
    const bsc_apeswap = __importStar$5(apeswap$1);
    const bsc_autofarm = __importStar$5(autofarm$2);
    const bsc_beefy = __importStar$5(beefy$2);
    const bsc_belt = __importStar$5(belt);
    const bsc_cream = __importStar$5(cream$3);
    const bsc_moonpot = __importStar$5(moonpot);
    const bsc_pancakeswap = __importStar$5(pancakeswap);
    const bsc_venus = __importStar$5(venus);
    // CRONOS Project Imports:
    // ETH Project Imports:
    const eth_aave = __importStar$5(aave$3);
    const eth_apwine = __importStar$5(apwine$1);
    const eth_balancer = __importStar$5(balancer$1);
    const eth_compound = __importStar$5(compound);
    const eth_cream = __importStar$5(cream$2);
    const eth_curve = __importStar$5(curve$2);
    const eth_mstable = __importStar$5(mstable$1);
    const eth_pooltogether = __importStar$5(pooltogether$2);
    const eth_sushiswap = __importStar$5(sushiswap$1);
    const eth_yearn = __importStar$5(yearn);
    // FTM Project Imports:
    const ftm_aave = __importStar$5(aave$2);
    const ftm_autofarm = __importStar$5(autofarm$1);
    const ftm_beefy = __importStar$5(beefy$1);
    const ftm_beethovenx = __importStar$5(beethovenx);
    const ftm_bouje = __importStar$5(bouje);
    const ftm_cream = __importStar$5(cream$1);
    const ftm_curve = __importStar$5(curve$1);
    const ftm_scream = __importStar$5(scream);
    const ftm_spookyswap = __importStar$5(spookyswap);
    // OP Project Imports:
    const op_aave = __importStar$5(aave$1);
    const op_pika = __importStar$5(pika);
    const op_pooltogether = __importStar$5(pooltogether$1);
    // POLY Project Imports:
    const poly_aave = __importStar$5(aave);
    const poly_apeswap = __importStar$5(apeswap);
    const poly_apwine = __importStar$5(apwine);
    const poly_autofarm = __importStar$5(autofarm);
    const poly_balancer = __importStar$5(balancer);
    const poly_beefy = __importStar$5(beefy);
    const poly_cream = __importStar$5(cream);
    const poly_curve = __importStar$5(curve);
    const poly_mstable = __importStar$5(mstable);
    const poly_pooltogether = __importStar$5(pooltogether);
    const poly_quickswap = __importStar$5(quickswap);
    const poly_sushiswap = __importStar$5(sushiswap);
    // Projects Record:
    const projects$1 = {
        arb: {},
        avax: {
            aave: avax_aave,
            alligator: avax_alligator,
            autofarm: avax_autofarm,
            avalaunch: avax_avalaunch,
            axial: avax_axial,
            beefy: avax_beefy,
            benqi: avax_benqi,
            cream: avax_cream,
            curve: avax_curve,
            cycle: avax_cycle,
            lostworlds: avax_lostworlds,
            lydia: avax_lydia,
            pangolin: avax_pangolin,
            penguin: avax_penguin,
            platypus: avax_platypus,
            pooltogether: avax_pooltogether,
            snowball: avax_snowball,
            teddy: avax_teddy,
            traderjoe: avax_traderjoe,
            yieldyak: avax_yieldyak,
        },
        bsc: {
            apeswap: bsc_apeswap,
            autofarm: bsc_autofarm,
            beefy: bsc_beefy,
            belt: bsc_belt,
            cream: bsc_cream,
            moonpot: bsc_moonpot,
            pancakeswap: bsc_pancakeswap,
            venus: bsc_venus,
        },
        cronos: {},
        eth: {
            aave: eth_aave,
            apwine: eth_apwine,
            balancer: eth_balancer,
            compound: eth_compound,
            cream: eth_cream,
            curve: eth_curve,
            mstable: eth_mstable,
            pooltogether: eth_pooltogether,
            sushiswap: eth_sushiswap,
            yearn: eth_yearn,
        },
        ftm: {
            aave: ftm_aave,
            autofarm: ftm_autofarm,
            beefy: ftm_beefy,
            beethovenx: ftm_beethovenx,
            bouje: ftm_bouje,
            cream: ftm_cream,
            curve: ftm_curve,
            scream: ftm_scream,
            spookyswap: ftm_spookyswap,
        },
        op: {
            aave: op_aave,
            pika: op_pika,
            pooltogether: op_pooltogether,
        },
        poly: {
            aave: poly_aave,
            apeswap: poly_apeswap,
            apwine: poly_apwine,
            autofarm: poly_autofarm,
            balancer: poly_balancer,
            beefy: poly_beefy,
            cream: poly_cream,
            curve: poly_curve,
            mstable: poly_mstable,
            pooltogether: poly_pooltogether,
            quickswap: poly_quickswap,
            sushiswap: poly_sushiswap,
        },
    };
    var _default = projects$1;

    var projectLib = /*#__PURE__*/Object.defineProperty({
    	default: _default
    }, '__esModule', {value: true});

    var projects = createCommonjsModule$4(function (module, exports) {
    /* [HEED MY WARNING FELLOW DEV!] This file was auto-generated during build by '/pre-build/projects.js'. Any changes to this file directly will not persist after building. [FARE THEE WELL] */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.projects = void 0;
    // Projects List:
    exports.projects = {
        arb: [],
        avax: [
            'aave',
            'alligator',
            'autofarm',
            'avalaunch',
            'axial',
            'beefy',
            'benqi',
            'cream',
            'curve',
            'cycle',
            'lostworlds',
            'lydia',
            'pangolin',
            'penguin',
            'platypus',
            'pooltogether',
            'snowball',
            'teddy',
            'traderjoe',
            'yieldyak',
        ],
        bsc: [
            'apeswap',
            'autofarm',
            'beefy',
            'belt',
            'cream',
            'moonpot',
            'pancakeswap',
            'venus',
        ],
        cronos: [],
        eth: [
            'aave',
            'apwine',
            'balancer',
            'compound',
            'cream',
            'curve',
            'mstable',
            'pooltogether',
            'sushiswap',
            'yearn',
        ],
        ftm: [
            'aave',
            'autofarm',
            'beefy',
            'beethovenx',
            'bouje',
            'cream',
            'curve',
            'scream',
            'spookyswap',
        ],
        op: [
            'aave',
            'pika',
            'pooltogether',
        ],
        poly: [
            'aave',
            'apeswap',
            'apwine',
            'autofarm',
            'balancer',
            'beefy',
            'cream',
            'curve',
            'mstable',
            'pooltogether',
            'quickswap',
            'sushiswap',
        ],
    };
    });

    var ethers = /*@__PURE__*/getAugmentedNamespace(lib_esm);

    var ens = createCommonjsModule$4(function (module, exports) {
    var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSubgraphDomains = exports.fetchAvatarENS = exports.lookupENS = exports.resolveENS = void 0;
    // Imports:
    const axios_1 = __importDefault(axios);


    // Initializations:
    const ensSubgraphURL = 'https://api.thegraph.com/subgraphs/name/ensdomains/ens';
    const ethProvider = new ethers.ethers.providers.StaticJsonRpcProvider(chains.chains.eth.rpcs[0]);
    /* ========================================================================================================================================================================= */
    /**
     * Function to resolve an ENS domain name into an address.
     * @param name The ENS domain name to resolve.
     * @returns An address if resolvable, else null.
     */
    const resolveENS = async (name) => {
        let address = await ethProvider.resolveName(name);
        if (address) {
            return address;
        }
        return null;
    };
    exports.resolveENS = resolveENS;
    /* ========================================================================================================================================================================= */
    /**
     * Function to reverse lookup an ENS domain.
     * @param address The address to reverse lookup.
     * @returns An ENS domain name if resolvable, else null.
     */
    const lookupENS = async (address) => {
        let ensAddress = await ethProvider.lookupAddress(address);
        if (ensAddress) {
            return ensAddress;
        }
        return null;
    };
    exports.lookupENS = lookupENS;
    /* ========================================================================================================================================================================= */
    /**
     * Function to fetch an ENS domain's avatar.
     * @param name The ENS domain name to query info from.
     * @returns An avatar URI if available, else null.
     */
    const fetchAvatarENS = async (name) => {
        let resolver = await ethProvider.getResolver(name);
        if (resolver) {
            let avatar = await resolver.getText('avatar');
            if (avatar) {
                return avatar;
            }
        }
        return null;
    };
    exports.fetchAvatarENS = fetchAvatarENS;
    /* ========================================================================================================================================================================= */
    /**
     * Function to fetch ENS domains from subgraph.
     * @param address The address to lookup domains for.
     * @returns An array of found ENS domains.
     */
    const getSubgraphDomains = async (address) => {
        let ensDomains = [];
        let subgraphQuery = { query: `{ account(id: "${address.toLowerCase()}") { registrations { domain { name }, expiryDate } } }` };
        let subgraphResults = (await axios_1.default.post(ensSubgraphURL, subgraphQuery)).data.data.account;
        if (subgraphResults) {
            subgraphResults.registrations.forEach(registration => {
                let name = registration.domain.name;
                let expiry = parseInt(registration.expiryDate);
                ensDomains.push({ name, expiry });
            });
        }
        return ensDomains;
    };
    exports.getSubgraphDomains = getSubgraphDomains;
    });

    var abi$2 = /*@__PURE__*/getAugmentedNamespace(lib_esm$c);

    var address_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$g);

    var require$$0 = /*@__PURE__*/getAugmentedNamespace(lib_esm$e);

    var basex_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$9);

    var bytes_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$k);

    var hash_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$d);

    var hdnode_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$7);

    var json_wallets_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$5);

    var keccak256_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$i);

    var logger_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$l);

    var sha2_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$8);

    var solidity_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$2);

    var random_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$6);

    var properties_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$j);

    var require$$1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$h);

    var signing_key_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$b);

    var strings_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$f);

    var transactions_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$a);

    var units_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$1);

    var wallet_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$4);

    var web_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$3);

    var utils$5 = createCommonjsModule$4(function (module, exports) {
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.formatBytes32String = exports.Utf8ErrorFuncs = exports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports._toEscapedUtf8String = exports.nameprep = exports.hexDataSlice = exports.hexDataLength = exports.hexZeroPad = exports.hexValue = exports.hexStripZeros = exports.hexConcat = exports.isHexString = exports.hexlify = exports.base64 = exports.base58 = exports.TransactionDescription = exports.LogDescription = exports.Interface = exports.SigningKey = exports.HDNode = exports.defaultPath = exports.isBytesLike = exports.isBytes = exports.zeroPad = exports.stripZeros = exports.concat = exports.arrayify = exports.shallowCopy = exports.resolveProperties = exports.getStatic = exports.defineReadOnly = exports.deepCopy = exports.checkProperties = exports.poll = exports.fetchJson = exports._fetchData = exports.RLP = exports.Logger = exports.checkResultErrors = exports.FormatTypes = exports.ParamType = exports.FunctionFragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = exports.Fragment = exports.defaultAbiCoder = exports.AbiCoder = void 0;
    exports.Indexed = exports.Utf8ErrorReason = exports.UnicodeNormalizationForm = exports.SupportedAlgorithm = exports.mnemonicToSeed = exports.isValidMnemonic = exports.entropyToMnemonic = exports.mnemonicToEntropy = exports.getAccountPath = exports.verifyTypedData = exports.verifyMessage = exports.recoverPublicKey = exports.computePublicKey = exports.recoverAddress = exports.computeAddress = exports.getJsonWalletAddress = exports.TransactionTypes = exports.serializeTransaction = exports.parseTransaction = exports.accessListify = exports.joinSignature = exports.splitSignature = exports.soliditySha256 = exports.solidityKeccak256 = exports.solidityPack = exports.shuffled = exports.randomBytes = exports.sha512 = exports.sha256 = exports.ripemd160 = exports.keccak256 = exports.computeHmac = exports.commify = exports.parseUnits = exports.formatUnits = exports.parseEther = exports.formatEther = exports.isAddress = exports.getCreate2Address = exports.getContractAddress = exports.getIcapAddress = exports.getAddress = exports._TypedDataEncoder = exports.id = exports.isValidName = exports.namehash = exports.hashMessage = exports.dnsEncode = exports.parseBytes32String = void 0;

    Object.defineProperty(exports, "AbiCoder", { enumerable: true, get: function () { return abi$2.AbiCoder; } });
    Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function () { return abi$2.checkResultErrors; } });
    Object.defineProperty(exports, "ConstructorFragment", { enumerable: true, get: function () { return abi$2.ConstructorFragment; } });
    Object.defineProperty(exports, "defaultAbiCoder", { enumerable: true, get: function () { return abi$2.defaultAbiCoder; } });
    Object.defineProperty(exports, "ErrorFragment", { enumerable: true, get: function () { return abi$2.ErrorFragment; } });
    Object.defineProperty(exports, "EventFragment", { enumerable: true, get: function () { return abi$2.EventFragment; } });
    Object.defineProperty(exports, "FormatTypes", { enumerable: true, get: function () { return abi$2.FormatTypes; } });
    Object.defineProperty(exports, "Fragment", { enumerable: true, get: function () { return abi$2.Fragment; } });
    Object.defineProperty(exports, "FunctionFragment", { enumerable: true, get: function () { return abi$2.FunctionFragment; } });
    Object.defineProperty(exports, "Indexed", { enumerable: true, get: function () { return abi$2.Indexed; } });
    Object.defineProperty(exports, "Interface", { enumerable: true, get: function () { return abi$2.Interface; } });
    Object.defineProperty(exports, "LogDescription", { enumerable: true, get: function () { return abi$2.LogDescription; } });
    Object.defineProperty(exports, "ParamType", { enumerable: true, get: function () { return abi$2.ParamType; } });
    Object.defineProperty(exports, "TransactionDescription", { enumerable: true, get: function () { return abi$2.TransactionDescription; } });

    Object.defineProperty(exports, "getAddress", { enumerable: true, get: function () { return address_1.getAddress; } });
    Object.defineProperty(exports, "getCreate2Address", { enumerable: true, get: function () { return address_1.getCreate2Address; } });
    Object.defineProperty(exports, "getContractAddress", { enumerable: true, get: function () { return address_1.getContractAddress; } });
    Object.defineProperty(exports, "getIcapAddress", { enumerable: true, get: function () { return address_1.getIcapAddress; } });
    Object.defineProperty(exports, "isAddress", { enumerable: true, get: function () { return address_1.isAddress; } });
    var base64 = __importStar(require$$0);
    exports.base64 = base64;

    Object.defineProperty(exports, "base58", { enumerable: true, get: function () { return basex_1.Base58; } });

    Object.defineProperty(exports, "arrayify", { enumerable: true, get: function () { return bytes_1.arrayify; } });
    Object.defineProperty(exports, "concat", { enumerable: true, get: function () { return bytes_1.concat; } });
    Object.defineProperty(exports, "hexConcat", { enumerable: true, get: function () { return bytes_1.hexConcat; } });
    Object.defineProperty(exports, "hexDataSlice", { enumerable: true, get: function () { return bytes_1.hexDataSlice; } });
    Object.defineProperty(exports, "hexDataLength", { enumerable: true, get: function () { return bytes_1.hexDataLength; } });
    Object.defineProperty(exports, "hexlify", { enumerable: true, get: function () { return bytes_1.hexlify; } });
    Object.defineProperty(exports, "hexStripZeros", { enumerable: true, get: function () { return bytes_1.hexStripZeros; } });
    Object.defineProperty(exports, "hexValue", { enumerable: true, get: function () { return bytes_1.hexValue; } });
    Object.defineProperty(exports, "hexZeroPad", { enumerable: true, get: function () { return bytes_1.hexZeroPad; } });
    Object.defineProperty(exports, "isBytes", { enumerable: true, get: function () { return bytes_1.isBytes; } });
    Object.defineProperty(exports, "isBytesLike", { enumerable: true, get: function () { return bytes_1.isBytesLike; } });
    Object.defineProperty(exports, "isHexString", { enumerable: true, get: function () { return bytes_1.isHexString; } });
    Object.defineProperty(exports, "joinSignature", { enumerable: true, get: function () { return bytes_1.joinSignature; } });
    Object.defineProperty(exports, "zeroPad", { enumerable: true, get: function () { return bytes_1.zeroPad; } });
    Object.defineProperty(exports, "splitSignature", { enumerable: true, get: function () { return bytes_1.splitSignature; } });
    Object.defineProperty(exports, "stripZeros", { enumerable: true, get: function () { return bytes_1.stripZeros; } });

    Object.defineProperty(exports, "_TypedDataEncoder", { enumerable: true, get: function () { return hash_1._TypedDataEncoder; } });
    Object.defineProperty(exports, "dnsEncode", { enumerable: true, get: function () { return hash_1.dnsEncode; } });
    Object.defineProperty(exports, "hashMessage", { enumerable: true, get: function () { return hash_1.hashMessage; } });
    Object.defineProperty(exports, "id", { enumerable: true, get: function () { return hash_1.id; } });
    Object.defineProperty(exports, "isValidName", { enumerable: true, get: function () { return hash_1.isValidName; } });
    Object.defineProperty(exports, "namehash", { enumerable: true, get: function () { return hash_1.namehash; } });

    Object.defineProperty(exports, "defaultPath", { enumerable: true, get: function () { return hdnode_1.defaultPath; } });
    Object.defineProperty(exports, "entropyToMnemonic", { enumerable: true, get: function () { return hdnode_1.entropyToMnemonic; } });
    Object.defineProperty(exports, "getAccountPath", { enumerable: true, get: function () { return hdnode_1.getAccountPath; } });
    Object.defineProperty(exports, "HDNode", { enumerable: true, get: function () { return hdnode_1.HDNode; } });
    Object.defineProperty(exports, "isValidMnemonic", { enumerable: true, get: function () { return hdnode_1.isValidMnemonic; } });
    Object.defineProperty(exports, "mnemonicToEntropy", { enumerable: true, get: function () { return hdnode_1.mnemonicToEntropy; } });
    Object.defineProperty(exports, "mnemonicToSeed", { enumerable: true, get: function () { return hdnode_1.mnemonicToSeed; } });

    Object.defineProperty(exports, "getJsonWalletAddress", { enumerable: true, get: function () { return json_wallets_1.getJsonWalletAddress; } });

    Object.defineProperty(exports, "keccak256", { enumerable: true, get: function () { return keccak256_1.keccak256; } });

    Object.defineProperty(exports, "Logger", { enumerable: true, get: function () { return logger_1.Logger; } });

    Object.defineProperty(exports, "computeHmac", { enumerable: true, get: function () { return sha2_1.computeHmac; } });
    Object.defineProperty(exports, "ripemd160", { enumerable: true, get: function () { return sha2_1.ripemd160; } });
    Object.defineProperty(exports, "sha256", { enumerable: true, get: function () { return sha2_1.sha256; } });
    Object.defineProperty(exports, "sha512", { enumerable: true, get: function () { return sha2_1.sha512; } });

    Object.defineProperty(exports, "solidityKeccak256", { enumerable: true, get: function () { return solidity_1.keccak256; } });
    Object.defineProperty(exports, "solidityPack", { enumerable: true, get: function () { return solidity_1.pack; } });
    Object.defineProperty(exports, "soliditySha256", { enumerable: true, get: function () { return solidity_1.sha256; } });

    Object.defineProperty(exports, "randomBytes", { enumerable: true, get: function () { return random_1.randomBytes; } });
    Object.defineProperty(exports, "shuffled", { enumerable: true, get: function () { return random_1.shuffled; } });

    Object.defineProperty(exports, "checkProperties", { enumerable: true, get: function () { return properties_1.checkProperties; } });
    Object.defineProperty(exports, "deepCopy", { enumerable: true, get: function () { return properties_1.deepCopy; } });
    Object.defineProperty(exports, "defineReadOnly", { enumerable: true, get: function () { return properties_1.defineReadOnly; } });
    Object.defineProperty(exports, "getStatic", { enumerable: true, get: function () { return properties_1.getStatic; } });
    Object.defineProperty(exports, "resolveProperties", { enumerable: true, get: function () { return properties_1.resolveProperties; } });
    Object.defineProperty(exports, "shallowCopy", { enumerable: true, get: function () { return properties_1.shallowCopy; } });
    var RLP = __importStar(require$$1);
    exports.RLP = RLP;

    Object.defineProperty(exports, "computePublicKey", { enumerable: true, get: function () { return signing_key_1.computePublicKey; } });
    Object.defineProperty(exports, "recoverPublicKey", { enumerable: true, get: function () { return signing_key_1.recoverPublicKey; } });
    Object.defineProperty(exports, "SigningKey", { enumerable: true, get: function () { return signing_key_1.SigningKey; } });

    Object.defineProperty(exports, "formatBytes32String", { enumerable: true, get: function () { return strings_1.formatBytes32String; } });
    Object.defineProperty(exports, "nameprep", { enumerable: true, get: function () { return strings_1.nameprep; } });
    Object.defineProperty(exports, "parseBytes32String", { enumerable: true, get: function () { return strings_1.parseBytes32String; } });
    Object.defineProperty(exports, "_toEscapedUtf8String", { enumerable: true, get: function () { return strings_1._toEscapedUtf8String; } });
    Object.defineProperty(exports, "toUtf8Bytes", { enumerable: true, get: function () { return strings_1.toUtf8Bytes; } });
    Object.defineProperty(exports, "toUtf8CodePoints", { enumerable: true, get: function () { return strings_1.toUtf8CodePoints; } });
    Object.defineProperty(exports, "toUtf8String", { enumerable: true, get: function () { return strings_1.toUtf8String; } });
    Object.defineProperty(exports, "Utf8ErrorFuncs", { enumerable: true, get: function () { return strings_1.Utf8ErrorFuncs; } });

    Object.defineProperty(exports, "accessListify", { enumerable: true, get: function () { return transactions_1.accessListify; } });
    Object.defineProperty(exports, "computeAddress", { enumerable: true, get: function () { return transactions_1.computeAddress; } });
    Object.defineProperty(exports, "parseTransaction", { enumerable: true, get: function () { return transactions_1.parse; } });
    Object.defineProperty(exports, "recoverAddress", { enumerable: true, get: function () { return transactions_1.recoverAddress; } });
    Object.defineProperty(exports, "serializeTransaction", { enumerable: true, get: function () { return transactions_1.serialize; } });
    Object.defineProperty(exports, "TransactionTypes", { enumerable: true, get: function () { return transactions_1.TransactionTypes; } });

    Object.defineProperty(exports, "commify", { enumerable: true, get: function () { return units_1.commify; } });
    Object.defineProperty(exports, "formatEther", { enumerable: true, get: function () { return units_1.formatEther; } });
    Object.defineProperty(exports, "parseEther", { enumerable: true, get: function () { return units_1.parseEther; } });
    Object.defineProperty(exports, "formatUnits", { enumerable: true, get: function () { return units_1.formatUnits; } });
    Object.defineProperty(exports, "parseUnits", { enumerable: true, get: function () { return units_1.parseUnits; } });

    Object.defineProperty(exports, "verifyMessage", { enumerable: true, get: function () { return wallet_1.verifyMessage; } });
    Object.defineProperty(exports, "verifyTypedData", { enumerable: true, get: function () { return wallet_1.verifyTypedData; } });

    Object.defineProperty(exports, "_fetchData", { enumerable: true, get: function () { return web_1._fetchData; } });
    Object.defineProperty(exports, "fetchJson", { enumerable: true, get: function () { return web_1.fetchJson; } });
    Object.defineProperty(exports, "poll", { enumerable: true, get: function () { return web_1.poll; } });
    ////////////////////////
    // Enums
    var sha2_2 = sha2_1;
    Object.defineProperty(exports, "SupportedAlgorithm", { enumerable: true, get: function () { return sha2_2.SupportedAlgorithm; } });
    var strings_2 = strings_1;
    Object.defineProperty(exports, "UnicodeNormalizationForm", { enumerable: true, get: function () { return strings_2.UnicodeNormalizationForm; } });
    Object.defineProperty(exports, "Utf8ErrorReason", { enumerable: true, get: function () { return strings_2.Utf8ErrorReason; } });

    });

    var ExecutionType;
    (function (ExecutionType) {
        ExecutionType["web3"] = "web3";
        ExecutionType["ethers"] = "ethers";
        ExecutionType["customHttp"] = "custom";
    })(ExecutionType || (ExecutionType = {}));

    var Networks;
    (function (Networks) {
        Networks[Networks["mainnet"] = 1] = "mainnet";
        Networks[Networks["ropsten"] = 3] = "ropsten";
        Networks[Networks["rinkeby"] = 4] = "rinkeby";
        Networks[Networks["goerli"] = 5] = "goerli";
        Networks[Networks["optimism"] = 10] = "optimism";
        Networks[Networks["kovan"] = 42] = "kovan";
        Networks[Networks["matic"] = 137] = "matic";
        Networks[Networks["kovanOptimism"] = 69] = "kovanOptimism";
        Networks[Networks["xdai"] = 100] = "xdai";
        Networks[Networks["goerliOptimism"] = 420] = "goerliOptimism";
        Networks[Networks["arbitrum"] = 42161] = "arbitrum";
        Networks[Networks["rinkebyArbitrum"] = 421611] = "rinkebyArbitrum";
        Networks[Networks["goerliArbitrum"] = 421613] = "goerliArbitrum";
        Networks[Networks["mumbai"] = 80001] = "mumbai";
        Networks[Networks["sepolia"] = 11155111] = "sepolia";
        Networks[Networks["avalancheMainnet"] = 43114] = "avalancheMainnet";
        Networks[Networks["avalancheFuji"] = 43113] = "avalancheFuji";
        Networks[Networks["fantomTestnet"] = 4002] = "fantomTestnet";
        Networks[Networks["fantom"] = 250] = "fantom";
        Networks[Networks["bsc"] = 56] = "bsc";
        Networks[Networks["bsc_testnet"] = 97] = "bsc_testnet";
        Networks[Networks["moonbeam"] = 1284] = "moonbeam";
        Networks[Networks["moonriver"] = 1285] = "moonriver";
        Networks[Networks["moonbaseAlphaTestnet"] = 1287] = "moonbaseAlphaTestnet";
        Networks[Networks["harmony"] = 1666600000] = "harmony";
        Networks[Networks["cronos"] = 25] = "cronos";
        Networks[Networks["fuse"] = 122] = "fuse";
        Networks[Networks["songbirdCanaryNetwork"] = 19] = "songbirdCanaryNetwork";
        Networks[Networks["costonTestnet"] = 16] = "costonTestnet";
        Networks[Networks["boba"] = 288] = "boba";
        Networks[Networks["aurora"] = 1313161554] = "aurora";
        Networks[Networks["astar"] = 592] = "astar";
        Networks[Networks["okc"] = 66] = "okc";
        Networks[Networks["heco"] = 128] = "heco";
        Networks[Networks["metis"] = 1088] = "metis";
        Networks[Networks["rsk"] = 30] = "rsk";
        Networks[Networks["rskTestnet"] = 31] = "rskTestnet";
        Networks[Networks["evmos"] = 9001] = "evmos";
        Networks[Networks["evmosTestnet"] = 9000] = "evmosTestnet";
        Networks[Networks["thundercore"] = 108] = "thundercore";
        Networks[Networks["thundercoreTestnet"] = 18] = "thundercoreTestnet";
        Networks[Networks["oasis"] = 26863] = "oasis";
        Networks[Networks["celo"] = 42220] = "celo";
        Networks[Networks["godwoken"] = 71402] = "godwoken";
        Networks[Networks["godwokentestnet"] = 71401] = "godwokentestnet";
        Networks[Networks["klatyn"] = 8217] = "klatyn";
        Networks[Networks["milkomeda"] = 2001] = "milkomeda";
        Networks[Networks["kcc"] = 321] = "kcc";
        Networks[Networks["etherlite"] = 111] = "etherlite";
    })(Networks || (Networks = {}));

    var Utils = /** @class */ (function () {
        function Utils() {
        }
        /**
         * Deep clone a object
         * @param object The object
         */
        Utils.deepClone = function (object) {
            return JSON.parse(JSON.stringify(object));
        };
        return Utils;
    }());

    var __assign$5 = (undefined && undefined.__assign) || function () {
        __assign$5 = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$5.apply(this, arguments);
    };
    var __awaiter$6 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$6 = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var Multicall = /** @class */ (function () {
        function Multicall(_options) {
            this._options = _options;
            this.ABI = [
                {
                    constant: false,
                    inputs: [
                        {
                            components: [
                                { name: 'target', type: 'address' },
                                { name: 'callData', type: 'bytes' },
                            ],
                            name: 'calls',
                            type: 'tuple[]',
                        },
                    ],
                    name: 'aggregate',
                    outputs: [
                        { name: 'blockNumber', type: 'uint256' },
                        { name: 'returnData', type: 'bytes[]' },
                    ],
                    payable: false,
                    stateMutability: 'nonpayable',
                    type: 'function',
                },
                {
                    inputs: [
                        {
                            internalType: 'bool',
                            name: 'requireSuccess',
                            type: 'bool',
                        },
                        {
                            components: [
                                {
                                    internalType: 'address',
                                    name: 'target',
                                    type: 'address',
                                },
                                {
                                    internalType: 'bytes',
                                    name: 'callData',
                                    type: 'bytes',
                                },
                            ],
                            internalType: 'struct Multicall2.Call[]',
                            name: 'calls',
                            type: 'tuple[]',
                        },
                    ],
                    name: 'tryBlockAndAggregate',
                    outputs: [
                        {
                            internalType: 'uint256',
                            name: 'blockNumber',
                            type: 'uint256',
                        },
                        {
                            internalType: 'bytes32',
                            name: 'blockHash',
                            type: 'bytes32',
                        },
                        {
                            components: [
                                {
                                    internalType: 'bool',
                                    name: 'success',
                                    type: 'bool',
                                },
                                {
                                    internalType: 'bytes',
                                    name: 'returnData',
                                    type: 'bytes',
                                },
                            ],
                            internalType: 'struct Multicall2.Result[]',
                            name: 'returnData',
                            type: 'tuple[]',
                        },
                    ],
                    stateMutability: 'nonpayable',
                    type: 'function',
                },
            ];
            if (this._options.web3Instance) {
                this._executionType = ExecutionType.web3;
                return;
            }
            if (this._options.ethersProvider) {
                this._executionType = ExecutionType.ethers;
                return;
            }
            if (this._options.nodeUrl) {
                this._executionType = ExecutionType.customHttp;
                return;
            }
            throw new Error(
            // tslint:disable-next-line: max-line-length
            'Your options passed in our incorrect they need to match either `MulticallOptionsEthers`, `MulticallOptionsWeb3` or `MulticallOptionsCustomJsonRpcProvider` interfaces');
        }
        /**
         * Call all the contract calls in 1
         * @param calls The calls
         */
        Multicall.prototype.call = function (contractCallContexts, contractCallOptions) {
            if (contractCallOptions === void 0) { contractCallOptions = {}; }
            return __awaiter$6(this, void 0, void 0, function () {
                var aggregateResponse, returnObject, response, contractCallsResults, originalContractCallContext, returnObjectResult, method, methodContext, originalContractCallMethodContext, outputTypes, decodedReturnValues;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!Array.isArray(contractCallContexts)) {
                                contractCallContexts = [contractCallContexts];
                            }
                            return [4 /*yield*/, this.execute(this.buildAggregateCallContext(contractCallContexts), contractCallOptions)];
                        case 1:
                            aggregateResponse = _a.sent();
                            returnObject = {
                                results: {},
                                blockNumber: aggregateResponse.blockNumber,
                            };
                            for (response = 0; response < aggregateResponse.results.length; response++) {
                                contractCallsResults = aggregateResponse.results[response];
                                originalContractCallContext = contractCallContexts[contractCallsResults.contractContextIndex];
                                returnObjectResult = {
                                    originalContractCallContext: Utils.deepClone(originalContractCallContext),
                                    callsReturnContext: [],
                                };
                                for (method = 0; method < contractCallsResults.methodResults.length; method++) {
                                    methodContext = contractCallsResults.methodResults[method];
                                    originalContractCallMethodContext = originalContractCallContext.calls[methodContext.contractMethodIndex];
                                    outputTypes = this.findOutputTypesFromAbi(originalContractCallContext.abi, originalContractCallMethodContext.methodName);
                                    if (this._options.tryAggregate && !methodContext.result.success) {
                                        returnObjectResult.callsReturnContext.push(Utils.deepClone({
                                            returnValues: [],
                                            decoded: false,
                                            reference: originalContractCallMethodContext.reference,
                                            methodName: originalContractCallMethodContext.methodName,
                                            methodParameters: originalContractCallMethodContext.methodParameters,
                                            success: false,
                                        }));
                                        continue;
                                    }
                                    if (outputTypes && outputTypes.length > 0) {
                                        try {
                                            decodedReturnValues = utils$5.defaultAbiCoder.decode(
                                            // tslint:disable-next-line: no-any
                                            outputTypes, this.getReturnDataFromResult(methodContext.result));
                                            returnObjectResult.callsReturnContext.push(Utils.deepClone({
                                                returnValues: this.formatReturnValues(decodedReturnValues),
                                                decoded: true,
                                                reference: originalContractCallMethodContext.reference,
                                                methodName: originalContractCallMethodContext.methodName,
                                                methodParameters: originalContractCallMethodContext.methodParameters,
                                                success: true,
                                            }));
                                        }
                                        catch (e) {
                                            if (!this._options.tryAggregate) {
                                                throw e;
                                            }
                                            returnObjectResult.callsReturnContext.push(Utils.deepClone({
                                                returnValues: [],
                                                decoded: false,
                                                reference: originalContractCallMethodContext.reference,
                                                methodName: originalContractCallMethodContext.methodName,
                                                methodParameters: originalContractCallMethodContext.methodParameters,
                                                success: false,
                                            }));
                                        }
                                    }
                                    else {
                                        returnObjectResult.callsReturnContext.push(Utils.deepClone({
                                            returnValues: this.getReturnDataFromResult(methodContext.result),
                                            decoded: false,
                                            reference: originalContractCallMethodContext.reference,
                                            methodName: originalContractCallMethodContext.methodName,
                                            methodParameters: originalContractCallMethodContext.methodParameters,
                                            success: true,
                                        }));
                                    }
                                }
                                returnObject.results[returnObjectResult.originalContractCallContext.reference] = returnObjectResult;
                            }
                            return [2 /*return*/, returnObject];
                    }
                });
            });
        };
        /**
         * Get return data from result
         * @param result The result
         */
        // tslint:disable-next-line: no-any
        Multicall.prototype.getReturnDataFromResult = function (result) {
            if (this._options.tryAggregate) {
                return result.returnData;
            }
            return result;
        };
        /**
         * Format return values so its always an array
         * @param decodedReturnValues The decoded return values
         */
        // tslint:disable-next-line: no-any
        Multicall.prototype.formatReturnValues = function (decodedReturnValues) {
            var decodedReturnResults = decodedReturnValues;
            if (decodedReturnValues.length === 1) {
                decodedReturnResults = decodedReturnValues[0];
            }
            if (Array.isArray(decodedReturnResults)) {
                return decodedReturnResults;
            }
            return [decodedReturnResults];
        };
        /**
         * Build aggregate call context
         * @param contractCallContexts The contract call contexts
         */
        Multicall.prototype.buildAggregateCallContext = function (contractCallContexts) {
            var aggregateCallContext = [];
            for (var contract = 0; contract < contractCallContexts.length; contract++) {
                var contractContext = contractCallContexts[contract];
                var executingInterface = new Interface(JSON.stringify(contractContext.abi));
                for (var method = 0; method < contractContext.calls.length; method++) {
                    // https://github.com/ethers-io/ethers.js/issues/211
                    var methodContext = contractContext.calls[method];
                    // tslint:disable-next-line: no-unused-expression
                    var encodedData = executingInterface.encodeFunctionData(methodContext.methodName, methodContext.methodParameters);
                    aggregateCallContext.push({
                        contractContextIndex: Utils.deepClone(contract),
                        contractMethodIndex: Utils.deepClone(method),
                        target: contractContext.contractAddress,
                        encodedData: encodedData,
                    });
                }
            }
            return aggregateCallContext;
        };
        /**
         * Find output types from abi
         * @param abi The abi
         * @param methodName The method name
         */
        Multicall.prototype.findOutputTypesFromAbi = function (abi, methodName) {
            var _a;
            var contract = new Contract(AddressZero, abi);
            methodName = methodName.trim();
            if (contract.interface.functions[methodName]) {
                return contract.interface.functions[methodName].outputs;
            }
            for (var i = 0; i < abi.length; i++) {
                if (((_a = abi[i].name) === null || _a === void 0 ? void 0 : _a.trim()) === methodName) {
                    return abi[i].outputs;
                }
            }
            return undefined;
        };
        /**
         * Execute the multicall contract call
         * @param calls The calls
         */
        Multicall.prototype.execute = function (calls, options) {
            return __awaiter$6(this, void 0, void 0, function () {
                var _a;
                return __generator$6(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this._executionType;
                            switch (_a) {
                                case ExecutionType.web3: return [3 /*break*/, 1];
                                case ExecutionType.ethers: return [3 /*break*/, 3];
                                case ExecutionType.customHttp: return [3 /*break*/, 3];
                            }
                            return [3 /*break*/, 5];
                        case 1: return [4 /*yield*/, this.executeWithWeb3(calls, options)];
                        case 2: return [2 /*return*/, _b.sent()];
                        case 3: return [4 /*yield*/, this.executeWithEthersOrCustom(calls, options)];
                        case 4: return [2 /*return*/, _b.sent()];
                        case 5: throw new Error(this._executionType + " is not defined");
                    }
                });
            });
        };
        /**
         * Execute aggregate with web3 instance
         * @param calls The calls context
         */
        Multicall.prototype.executeWithWeb3 = function (calls, options) {
            return __awaiter$6(this, void 0, void 0, function () {
                var web3, networkId, contract, callParams, contractResponse, contractResponse;
                var _a, _b;
                return __generator$6(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            web3 = this.getTypedOptions().web3Instance;
                            return [4 /*yield*/, web3.eth.net.getId()];
                        case 1:
                            networkId = _c.sent();
                            contract = new web3.eth.Contract(this.ABI, this.getContractBasedOnNetwork(networkId));
                            callParams = [];
                            if (options.blockNumber) {
                                callParams.push(options.blockNumber);
                            }
                            if (!this._options.tryAggregate) return [3 /*break*/, 3];
                            return [4 /*yield*/, (_a = contract.methods
                                    .tryBlockAndAggregate(false, this.mapCallContextToMatchContractFormat(calls)))
                                    .call.apply(_a, callParams)];
                        case 2:
                            contractResponse = (_c.sent());
                            contractResponse.blockNumber = BigNumber.from(contractResponse.blockNumber);
                            return [2 /*return*/, this.buildUpAggregateResponse(contractResponse, calls)];
                        case 3: return [4 /*yield*/, (_b = contract.methods
                                .aggregate(this.mapCallContextToMatchContractFormat(calls)))
                                .call.apply(_b, callParams)];
                        case 4:
                            contractResponse = (_c.sent());
                            contractResponse.blockNumber = BigNumber.from(contractResponse.blockNumber);
                            return [2 /*return*/, this.buildUpAggregateResponse(contractResponse, calls)];
                    }
                });
            });
        };
        /**
         * Execute with ethers using passed in provider context or custom one
         * @param calls The calls
         */
        Multicall.prototype.executeWithEthersOrCustom = function (calls, options) {
            return __awaiter$6(this, void 0, void 0, function () {
                var ethersProvider, customProvider, network, contract, overrideOptions, contractResponse, contractResponse;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            ethersProvider = this.getTypedOptions()
                                .ethersProvider;
                            if (!ethersProvider) {
                                customProvider = this.getTypedOptions();
                                if (customProvider.nodeUrl) {
                                    ethersProvider = new JsonRpcProvider$1(customProvider.nodeUrl);
                                }
                                else {
                                    ethersProvider = getDefaultProvider();
                                }
                            }
                            return [4 /*yield*/, ethersProvider.getNetwork()];
                        case 1:
                            network = _a.sent();
                            contract = new Contract(this.getContractBasedOnNetwork(network.chainId), this.ABI, ethersProvider);
                            overrideOptions = {};
                            if (options.blockNumber) {
                                overrideOptions = __assign$5(__assign$5({}, overrideOptions), { blockTag: Number(options.blockNumber) });
                            }
                            if (!this._options.tryAggregate) return [3 /*break*/, 3];
                            return [4 /*yield*/, contract.callStatic.tryBlockAndAggregate(false, this.mapCallContextToMatchContractFormat(calls), overrideOptions)];
                        case 2:
                            contractResponse = (_a.sent());
                            return [2 /*return*/, this.buildUpAggregateResponse(contractResponse, calls)];
                        case 3: return [4 /*yield*/, contract.callStatic.aggregate(this.mapCallContextToMatchContractFormat(calls), overrideOptions)];
                        case 4:
                            contractResponse = (_a.sent());
                            return [2 /*return*/, this.buildUpAggregateResponse(contractResponse, calls)];
                    }
                });
            });
        };
        /**
         * Build up the aggregated response from the contract response mapping
         * metadata from the calls
         * @param contractResponse The contract response
         * @param calls The calls
         */
        Multicall.prototype.buildUpAggregateResponse = function (contractResponse, calls) {
            var aggregateResponse = {
                blockNumber: contractResponse.blockNumber.toNumber(),
                results: [],
            };
            var _loop_1 = function (i) {
                var existingResponse = aggregateResponse.results.find(function (c) { return c.contractContextIndex === calls[i].contractContextIndex; });
                if (existingResponse) {
                    existingResponse.methodResults.push({
                        result: contractResponse.returnData[i],
                        contractMethodIndex: calls[i].contractMethodIndex,
                    });
                }
                else {
                    aggregateResponse.results.push({
                        methodResults: [
                            {
                                result: contractResponse.returnData[i],
                                contractMethodIndex: calls[i].contractMethodIndex,
                            },
                        ],
                        contractContextIndex: calls[i].contractContextIndex,
                    });
                }
            };
            for (var i = 0; i < contractResponse.returnData.length; i++) {
                _loop_1(i);
            }
            return aggregateResponse;
        };
        /**
         * Map call contract to match contract format
         * @param calls The calls context
         */
        Multicall.prototype.mapCallContextToMatchContractFormat = function (calls) {
            return calls.map(function (call) {
                return {
                    target: call.target,
                    callData: call.encodedData,
                };
            });
        };
        /**
         * Get typed options
         */
        Multicall.prototype.getTypedOptions = function () {
            return this._options;
        };
        /**
         * Get the contract based on the network
         * @param tryAggregate The tryAggregate
         * @param network The network
         */
        Multicall.prototype.getContractBasedOnNetwork = function (network) {
            // if they have overriden the multicall custom contract address then use that
            if (this._options.multicallCustomContractAddress) {
                return this._options.multicallCustomContractAddress;
            }
            switch (network) {
                case Networks.mainnet:
                case Networks.ropsten:
                case Networks.rinkeby:
                case Networks.goerli:
                case Networks.optimism:
                case Networks.kovan:
                case Networks.matic:
                case Networks.kovanOptimism:
                case Networks.xdai:
                case Networks.goerliOptimism:
                case Networks.arbitrum:
                case Networks.rinkebyArbitrum:
                case Networks.goerliArbitrum:
                case Networks.mumbai:
                case Networks.sepolia:
                case Networks.avalancheMainnet:
                case Networks.avalancheFuji:
                case Networks.fantomTestnet:
                case Networks.fantom:
                case Networks.bsc:
                case Networks.bsc_testnet:
                case Networks.moonbeam:
                case Networks.moonriver:
                case Networks.moonbaseAlphaTestnet:
                case Networks.harmony:
                case Networks.cronos:
                case Networks.fuse:
                case Networks.songbirdCanaryNetwork:
                case Networks.costonTestnet:
                case Networks.boba:
                case Networks.aurora:
                case Networks.astar:
                case Networks.okc:
                case Networks.heco:
                case Networks.metis:
                case Networks.rsk:
                case Networks.rskTestnet:
                case Networks.evmos:
                case Networks.evmosTestnet:
                case Networks.thundercore:
                case Networks.thundercoreTestnet:
                case Networks.oasis:
                case Networks.celo:
                case Networks.godwoken:
                case Networks.godwokentestnet:
                case Networks.klatyn:
                case Networks.milkomeda:
                case Networks.kcc:
                    return '0xcA11bde05977b3631167028862bE2a173976CA11';
                case Networks.etherlite:
                    return '0x21681750D7ddCB8d1240eD47338dC984f94AF2aC';
                default:
                    throw new Error("Network - " + network + " doesn't have a multicall contract address defined. Please check your network or deploy your own contract on it.");
            }
        };
        return Multicall;
    }());

    var esm$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Multicall: Multicall
    });

    var tokens = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.arb_data = exports.op_data = exports.cronos_data = exports.avax_data = exports.ftm_data = exports.poly_data = exports.bsc_data = exports.eth_data = void 0;
    /* ========================================================================================================================================================================= */
    // Ethereum:
    exports.eth_data = {
        tokens: [
            { address: '0xdac17f958d2ee523a2206206994597c13d831ec7', symbol: 'USDT', logo: 'https://etherscan.io/token/images/tether_32.png', decimals: 6 },
            { address: '0xB8c77482e45F1F44dE1745F52C74426C631bDD52', symbol: 'BNB', logo: 'https://etherscan.io/token/images/bnb_28_2.png', decimals: 18 },
            { address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48', symbol: 'USDC', logo: 'https://etherscan.io/token/images/centre-usdc_28.png', decimals: 6 },
            { address: '0x2b591e99afe9f32eaa6214f7b7629768c40eeb39', symbol: 'HEX', logo: 'https://etherscan.io/token/images/hex_32.png', decimals: 8 },
            { address: '0x4fabb145d64652a948d72533023f6e7a623c7c53', symbol: 'BUSD', logo: 'https://etherscan.io/token/images/binanceusd_32.png', decimals: 18 },
            { address: '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984', symbol: 'UNI', logo: 'https://etherscan.io/token/images/uniswap_32.png', decimals: 18 },
            { address: '0x514910771af9ca656af840dff83e8264ecf986ca', symbol: 'LINK', logo: 'https://etherscan.io/token/images/chainlinktoken_32.png?v=6', decimals: 18 },
            { address: '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599', symbol: 'WBTC', logo: 'https://etherscan.io/token/images/wbtc_28.png?v=1', decimals: 8 },
            { address: '0x6b175474e89094c44da98b954eedeac495271d0f', symbol: 'DAI', logo: 'https://etherscan.io/token/images/MCDDai_32.png', decimals: 18 },
            { address: '0x6e1A19F235bE7ED8E3369eF73b196C07257494DE', symbol: 'WFIL', logo: 'https://etherscan.io/token/images/wrappedfil_32.png', decimals: 18 },
            { address: '0xe1be5d3f34e89de342ee97e6e90d405884da6c67', symbol: 'TRX', logo: 'https://etherscan.io/token/images/trontrx_32.png?v=2', decimals: 6 },
            { address: '0x2af5d2ad76741191d15dfe7bf6ac92d4bd912ca3', symbol: 'LEO', logo: 'https://etherscan.io/token/images/leo_28_2.png', decimals: 18 },
            { address: '0x75231f58b43240c9718dd58b4967c5114342a86c', symbol: 'OKB', logo: 'https://etherscan.io/token/images/okex_28.png', decimals: 18 },
            { address: '0xa0b73e1ff0b80914ab6fe0444e65848c4c34450b', symbol: 'CRO', logo: 'https://etherscan.io/token/images/cro_32.png', decimals: 8 },
            { address: '0xa47c8bf37f92abed4a126bda807a7b7498661acd', symbol: 'UST', logo: 'https://etherscan.io/token/images/terra-ust_32.png', decimals: 18 },
            { address: '0xaaaebe6fe48e54f431b0c390cfaf0b017d09d42d', symbol: 'CEL', logo: 'https://etherscan.io/token/images/celsiustoken1_28.png', decimals: 4 },
            { address: '0xff20817765cb7f73d4bde2e66e067e58d11095c2', symbol: 'AMP', logo: 'https://etherscan.io/token/images/amp_32.png?v=2', decimals: 18 },
            { address: '0xc00e94cb662c3520282e6f5717214004a7f26888', symbol: 'COMP', logo: 'https://etherscan.io/token/images/comp_32.png', decimals: 18 },
            { address: '0xc944e90c64b2c07662a292be6244bdf05cda44a7', symbol: 'GRT', logo: 'https://etherscan.io/token/images/TheGraph_32.png', decimals: 18 },
            { address: '0x0000000000085d4780B73119b644AE5ecd22b376', symbol: 'TUSD', logo: 'https://etherscan.io/token/images/trueusd_32.png?v=2', decimals: 18 },
            { address: '0xe83cccfabd4ed148903bf36d4283ee7c8b3494d1', symbol: 'BTT', logo: 'https://etherscan.io/token/images/bittorrent_32.png', decimals: 6 },
            { address: '0x6f259637dcd74c767781e37bc6133cd6a68aa161', symbol: 'HT', logo: 'https://etherscan.io/token/images/huobi_28.png', decimals: 18 },
            { address: '0xc011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f', symbol: 'SNX', logo: 'https://etherscan.io/token/images/SynthetixSNX_32.png', decimals: 18 },
            { address: '0x6b3595068778dd592e39a122f4f5a5cf09c90fe2', symbol: 'SUSHI', logo: 'https://etherscan.io/token/images/sushitoken_32.png', decimals: 18 },
            { address: '0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272', symbol: 'xSUSHI', logo: 'https://etherscan.io/token/images/sushibar_32.png', decimals: 18 },
            { address: '0x0316EB71485b0Ab14103307bf65a021042c6d380', symbol: 'HBTC', logo: 'https://etherscan.io/token/images/huobibtc_32.png', decimals: 18 },
            { address: '0xae7ab96520de3a18e5e111b5eaab095312d7fe84', symbol: 'stETH', logo: 'https://etherscan.io/token/images/lido-steth_32.png', decimals: 18 },
            { address: '0x3506424f91fd33084466f402d5d97f05f8e3b4af', symbol: 'CHZ', logo: 'https://etherscan.io/token/images/chiliz_28.png', decimals: 18 },
            { address: '0xaf30d2a7e90d7dc361c8c4585e9bb7d2f6f15bc7', symbol: 'ST', logo: 'https://etherscan.io/token/images/firstblood.png', decimals: 18 },
            { address: '0xf629cbd94d3791c9250152bd8dfbdf380e2a3b9c', symbol: 'ENJ', logo: 'https://etherscan.io/token/images/enjin_28_2.png', decimals: 18 },
            { address: '0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e', symbol: 'YFI', logo: 'https://etherscan.io/token/images/yfi_32.png', decimals: 18 },
            { address: '0x4a220e6096b25eadb88358cb44068a3248254675', symbol: 'QNT', logo: 'https://etherscan.io/token/images/quantnetwork_28_2.png?v=2', decimals: 18 },
            { address: '0x8e870d67f660d95d5be530380d0ec0bd388289e1', symbol: 'PAX', logo: 'https://etherscan.io/token/images/paxos-usdp_32.png', decimals: 18 },
            { address: '0x41ab1b6fcbb2fa9dced81acbdec13ea6315f2bf2', symbol: 'XDCE', logo: 'https://etherscan.io/token/images/xinfin_28.png', decimals: 18 },
            { address: '0x6c6ee5e31d828de241282b9606c8e98ea48526e2', symbol: 'HOT', logo: 'https://etherscan.io/token/images/holo_28.png', decimals: 18 },
            { address: '0xb62132e35a6c13ee1ee0f84dc5d40bad8d815206', symbol: 'NEXO', logo: 'https://etherscan.io/token/images/nexo_32.png', decimals: 18 },
            { address: '0x0d8775f648430679a709e98d2b0cb6250d2887ef', symbol: 'BAT', logo: 'https://etherscan.io/token/images/bat.png', decimals: 18 },
            { address: '0xf34960d9d60be18cc1d5afc1a6f012a723a28811', symbol: 'KCS', logo: 'https://etherscan.io/token/images/kucointoken_32.png', decimals: 6 },
            { address: '0x1f573d6fb3f13d689ff844b4ce37794d79a7ff1c', symbol: 'BNT', logo: 'https://etherscan.io/token/images/bancor_32.png', decimals: 18 },
            { address: '0x467Bccd9d29f223BcE8043b84E8C8B282827790F', symbol: 'TEL', logo: 'https://etherscan.io/token/images/telcoin_28.png', decimals: 2 },
            { address: '0xdf574c24545e5ffecb9a659c229253d4111d87e1', symbol: 'HUSD', logo: 'https://etherscan.io/token/images/husd_32.png', decimals: 8 },
            { address: '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE', symbol: 'SHIB', logo: 'https://etherscan.io/token/images/shibatoken_32.png', decimals: 18 },
            { address: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2', symbol: 'WETH', logo: 'https://etherscan.io/token/images/weth_28.png', decimals: 18 },
            { address: '0xcc8fa225d80b9c7d42f96e9570156c65d6caaa25', symbol: 'SLP', logo: 'https://etherscan.io/token/images/slp_32.png?v1', decimals: 0 },
            { address: '0xbb0e17ef65f82ab018d8edd776e8dd940327b28b', symbol: 'AXS', logo: 'https://etherscan.io/token/images/axieinfinityshard_32.png', decimals: 18 },
            { address: '0xc5bDdf9843308380375a611c18B50Fb9341f502A', symbol: 'yveCRV-DAO', logo: 'https://etherscan.io/token/images/vecrv_32.png', decimals: 18 },
            { address: '0x09a3ecafa817268f77be1283176b946c4ff2e608', symbol: 'MIR', logo: 'https://etherscan.io/token/images/wrappedmirtoken_32.png?v=45', decimals: 18 },
            { address: '0xba100000625a3754423978a60c9317c58a424e3d', symbol: 'BAL', logo: 'https://etherscan.io/token/images/Balancer_32.png', decimals: 18 },
            { address: '0x2ba592f78db6436527729929aaf6c908497cb200', symbol: 'CREAM', logo: 'https://etherscan.io/token/images/CreamFinance_32.png', decimals: 18 },
            { address: '0xdacD69347dE42baBfAEcD09dC88958378780FB62', symbol: 'ATRI', logo: 'https://etherscan.io/token/images/ataritoken_32.png?v=2', decimals: 0 },
            { address: '0x2aF1dF3AB0ab157e1E2Ad8F88A7D04fbea0c7dc6', symbol: 'BED', logo: 'https://etherscan.io/token/images/banklessbed_32.png', decimals: 18 },
            { address: '0xfAd45E47083e4607302aa43c65fB3106F1cd7607', symbol: 'HOGE', logo: 'https://etherscan.io/token/images/hogefinance_32.png', decimals: 9 },
            { address: '0xe2f2a5c287993345a840db3b0845fbc70f5935a5', symbol: 'mUSD', logo: 'https://etherscan.io/token/images/mstableusd_32.png', decimals: 18 },
            { address: '0x945facb997494cc2570096c74b5f66a3507330a1', symbol: 'mBTC', logo: 'https://etherscan.io/token/images/mBTC_32.png?v=2', decimals: 18 },
            { address: '0x056fd409e1d7a124bd7017459dfea2f387b6d5cd', symbol: 'GUSD', logo: 'https://etherscan.io/token/images/gemini_28.png', decimals: 2 },
            { address: '0x853d955acef822db058eb8505911ed77f175b99e', symbol: 'FRAX', logo: 'https://etherscan.io/token/images/fraxfinance_32.png', decimals: 18 },
            { address: '0xbc6da0fe9ad5f3b0d58160288917aa56653660e9', symbol: 'alUSD', logo: 'https://etherscan.io/token/images/alUSDCG_32.png', decimals: 18 },
            { address: '0x8dAEBADE922dF735c38C80C7eBD708Af50815fAa', symbol: 'TBTC', logo: 'https://etherscan.io/token/images/tbtc_32.png', decimals: 18 },
            { address: '0xa3BeD4E1c75D00fa6f4E5E6922DB7261B5E9AcD2', symbol: 'MTA', logo: 'https://etherscan.io/token/images/meta_32.png', decimals: 18 },
            { address: '0x765a6c174202a78561c986684df1004cbf38faeb', symbol: 'CATS', logo: 'https://etherscan.io/token/images/cryptoarena_32.png', decimals: 18 },
            { address: '0x40eb746dee876ac1e78697b7ca85142d178a1fc8', symbol: 'IAG', logo: 'https://etherscan.io/token/images/iagon_32.png', decimals: 18 },
            { address: '0x220b71671b649c03714da9c621285943f3cbcdc6', symbol: 'DIS', logo: 'https://etherscan.io/token/images/tosdis_32.png', decimals: 18 },
            { address: '0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0', symbol: 'wstETH', logo: 'https://etherscan.io/token/images/wsteth2_32.png', decimals: 18 },
            { address: '0x3f382dbd960e3a9bbceae22651e88158d2791550', symbol: 'GHST', logo: 'https://etherscan.io/token/images/AavegotchiGHST_32.png', decimals: 18 },
            { address: '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9', symbol: 'AAVE', logo: 'https://etherscan.io/token/images/aave_32.png', decimals: 18 },
            { address: '0x0cEC1A9154Ff802e7934Fc916Ed7Ca50bDE6844e', symbol: 'POOL', logo: 'https://etherscan.io/token/images/pooltogether_32.png', decimals: 18 },
            { address: '0x090185f2135308bad17527004364ebcc2d37e5f6', symbol: 'SPELL', logo: 'https://etherscan.io/token/images/spelltoken_32.png', decimals: 18 },
            { address: '0x544c42fbb96b39b21df61cf322b5edc285ee7429', symbol: 'INSUR', logo: 'https://etherscan.io/token/images/insurace2_32.png', decimals: 18 },
            { address: '0x0ab87046fbb341d058f17cbc4c1133f25a20a52f', symbol: 'gOHM', logo: 'https://etherscan.io/token/images/governanceohm1_32.png', decimals: 18 },
            { address: '0x2e9d63788249371f1dfc918a52f8d799f4a38c94', symbol: 'TOKE', logo: 'https://etherscan.io/token/images/tokemak_32.png', decimals: 18 },
            { address: '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72', symbol: 'ENS', logo: 'https://etherscan.io/token/images/ens2_32.png', decimals: 18 },
            { address: '0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2', symbol: 'MKR', logo: 'https://etherscan.io/token/images/mkr-etherscan-35.png', decimals: 18 },
            { address: '0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32', symbol: 'LDO', logo: 'https://etherscan.io/token/images/lido-dao_32.png', decimals: 18 },
            { address: '0x4c1C4957D22D8F373aeD54d0853b090666F6F9De', symbol: 'SLV', logo: 'https://etherscan.io/token/images/silverway_32.png', decimals: 18 },
            { address: '0x58b6A8A3302369DAEc383334672404Ee733aB239', symbol: 'LPT', logo: 'https://etherscan.io/token/images/livepeer_28.png', decimals: 18 },
            { address: '0xD533a949740bb3306d119CC777fa900bA034cd52', symbol: 'CRV', logo: 'https://etherscan.io/token/images/Curvefi_32.png', decimals: 18 },
            { address: '0x4104b135DBC9609Fc1A9490E61369036497660c8', symbol: 'APW', logo: 'https://etherscan.io/token/images/APWine_32.png', decimals: 18 },
            { address: '0x73968b9a57c6E53d41345FD57a6E6ae27d6CDB2F', symbol: 'SDT', logo: 'https://etherscan.io/token/images/stakedao_32.png', decimals: 18 },
            { address: '0xcAfE001067cDEF266AfB7Eb5A286dCFD277f3dE5', symbol: 'PSP', logo: 'https://etherscan.io/token/images/paraswaptoken_32.png', decimals: 18 },
            { address: '0xa0246c9032bC3A600820415aE600c6388619A14D', symbol: 'FARM', logo: 'https://etherscan.io/token/images/harvestfinance2_32.png', decimals: 18 },
            { address: '0x420412E765BFa6d85aaaC94b4f7b708C89be2e2B', symbol: 'BRZ', logo: 'https://etherscan.io/token/images/brz_32.png', decimals: 4 }
        ],
        logos: [
            { symbol: 'ETH', logo: 'https://bscscan.com/token/images/ethereum_32.png' },
            { symbol: 'cUSDC', logo: 'https://etherscan.io/token/images/compound-usdc_28.png' },
            { symbol: 'cDAI', logo: 'https://etherscan.io/token/images/compounddai_32.png' },
            { symbol: 'cETH', logo: 'https://etherscan.io/token/images/compound-eth_28.png' },
            { symbol: 'cUSDT', logo: 'https://etherscan.io/token/images/compoundcUSDT_32.png' },
            { symbol: 'CRETH2', logo: 'https://etherscan.io/token/images/CRETH2_32.png' },
            { symbol: 'stkMTA', logo: 'https://etherscan.io/token/images/meta_32.png' },
            { symbol: 'stkBPT', logo: 'https://etherscan.io/token/images/Balancer_32.png' },
            { symbol: 'mBPT', logo: 'https://etherscan.io/token/images/Balancer_32.png' },
            { symbol: 'aGUSD', logo: 'https://etherscan.io/token/images/agusd.png' },
            { symbol: 'steCRV', logo: 'https://etherscan.io/token/images/lido-steth_32.png' },
            { symbol: 'ABPT', logo: 'https://assets.coingecko.com/coins/images/16788/small/ABPT_2x.png?1625046056' },
            { symbol: 'aDAI', logo: 'https://etherscan.io/token/images/Aave_aDAI_32.png' },
            { symbol: 'stkABPT', logo: 'https://etherscan.io/token/images/aave_32.png' },
            { symbol: 'stkAAVE', logo: 'https://etherscan.io/token/images/stakedaave_32.png' },
            { symbol: 'UNI-V2', logo: 'https://etherscan.io/token/images/uniswap_32.png' },
            { symbol: 'VEN', logo: 'https://etherscan.io/token/images/vechain_28.png' },
            { symbol: 'THETA', logo: 'https://etherscan.io/token/images/theta_28.png' },
            { symbol: 'ZIL', logo: 'https://etherscan.io/token/images/zilliqa_28_2.png' },
            { symbol: 'PTaUSDC', logo: 'https://raw.githubusercontent.com/pooltogether/pooltogether-react-components/08439a1fcdf661d89211d72815eec73b26d1bc1f/src/assets/Tokens/ptausdc.png' },
            { symbol: 'ONE', logo: 'https://etherscan.io/token/images/harmonyone_32.png' }
        ],
        nfts: [
            { address: '0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85', dataQuery: 'ens', name: 'ENS Domain' },
            { address: '0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB', dataQuery: 'none', name: 'CryptoPunks' },
            { address: '0x06012c8cf97BEaD5deAe237070F9587f8E7A266d', dataQuery: 'listed', name: 'CryptoKitties' },
            { address: '0x90B3832e2F2aDe2FE382a911805B6933C056D6ed', dataQuery: 'none', name: 'PoolTogether: Pooly Supporter' },
            { address: '0x3545192b340F50d77403DC0A64cf2b32F03d00A9', dataQuery: 'none', name: 'PoolTogether: Pooly Lawyer' },
            { address: '0x5663e3E096f1743e77B8F71b5DE0CF9Dfd058523', dataQuery: 'none', name: 'PoolTogether: Pooly Judge' },
            { address: '0x92B971d307ebFc7331C23429E204A5E4adF7a833', dataQuery: 'none', name: 'PoolTogether: Club Pooly' },
            { address: '0x7Bc25283a29A3888CAb4555Ea86fF1a8C18Cc90a', dataQuery: 'indexed', name: 'Set In Merge' },
            { address: '0xE42caD6fC883877A76A26A16ed92444ab177E306', dataQuery: 'none', name: 'ConsenSys: The Merge' },
            { address: '0xBCC664B1E6848caba2Eb2f3dE6e21F81b9276dD8', dataQuery: 'none', name: 'Pfers' }
        ]
    };
    /* ========================================================================================================================================================================= */
    // Binance Smart Chain:
    exports.bsc_data = {
        tokens: [
            { address: '0x42981d0bfbAf196529376EE702F2a9Eb9092fcB5', symbol: 'SFM', logo: 'https://bscscan.com/token/images/safemoon2_32.png', decimals: 9 },
            { address: '0xe9e7cea3dedca5984780bafc599bd69add087d56', symbol: 'BUSD', logo: 'https://bscscan.com/token/images/busd_32.png', decimals: 18 },
            { address: '0x55d398326f99059ff775485246999027b3197955', symbol: 'USDT', logo: 'https://bscscan.com/token/images/busdt_32.png', decimals: 18 },
            { address: '0xacfc95585d80ab62f67a14c566c1b7a49fe91167', symbol: 'FEG', logo: 'https://bscscan.com/token/images/fegtoken_32.png', decimals: 9 },
            { address: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', symbol: 'WBNB', logo: 'https://bscscan.com/token/images/binance_32.png', decimals: 18 },
            { address: '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82', symbol: 'Cake', logo: 'https://bscscan.com/token/images/pancake_32.png?=v1', decimals: 18 },
            { address: '0x2170ed0880ac9a755fd29b2688956bd959f933f8', symbol: 'ETH', logo: 'https://bscscan.com/token/images/ethereum_32.png', decimals: 18 },
            { address: '0x4b0f1812e5df2a09796481ff14017e6005508003', symbol: 'TWT', logo: 'https://bscscan.com/token/images/trust_32.png?v=1', decimals: 18 },
            { address: '0xba2ae424d960c26247dd6c32edc70b295c744c43', symbol: 'DOGE', logo: 'https://bscscan.com/token/images/dogecoin_32.png', decimals: 8 },
            { address: '0x33a3d962955a3862c8093d1273344719f03ca17c', symbol: 'SPORE', logo: 'https://bscscan.com/token/images/sporeearth_32.png', decimals: 9 },
            { address: '0x3ee2200efb3400fabb9aacf31297cbdd1d435d47', symbol: 'ADA', logo: 'https://bscscan.com/token/images/cardano_32.png', decimals: 18 },
            { address: '0x5a41f637c3f7553dba6ddc2d3ca92641096577ea', symbol: 'JulD', logo: 'https://bscscan.com/token/images/justliquidity-juld_32.png', decimals: 18 },
            { address: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5', symbol: 'BAKE', logo: 'https://bscscan.com/token/images/bakeryswap_32.png', decimals: 18 },
            { address: '0x1d2f0da169ceb9fc7b3144628db156f3f6c60dbe', symbol: 'XRP', logo: 'https://bscscan.com/token/images/xrp_32.png', decimals: 18 },
            { address: '0xd41fdb03ba84762dd66a0af1a6c8540ff1ba5dfb', symbol: 'SFP', logo: 'https://bscscan.com/token/images/safepal_32.png', decimals: 18 },
            { address: '0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c', symbol: 'BTCB', logo: 'https://bscscan.com/token/images/btcb_32.png', decimals: 18 },
            { address: '0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d', symbol: 'USDC', logo: 'https://bscscan.com/token/images/centre-usdc_28.png', decimals: 18 },
            { address: '0xc9849e6fdb743d08faee3e34dd2d1bc69ea11a51', symbol: 'BUNNY', logo: 'https://bscscan.com/token/images/pancakebunny_32.png', decimals: 18 },
            { address: '0x4e6415a5727ea08aae4580057187923aec331227', symbol: 'FINE', logo: 'https://bscscan.com/token/images/refinable_32.png?=v3', decimals: 18 },
            { address: '0xf21768ccbc73ea5b6fd3c687208a7c2def2d966e', symbol: 'REEF', logo: 'https://bscscan.com/token/images/reeffinance_32.png', decimals: 18 },
            { address: '0xa184088a740c695e156f91f5cc086a06bb78b827', symbol: 'AUTO', logo: 'https://bscscan.com/token/images/autofarm_32.png', decimals: 18 },
            { address: '0xc1d99537392084cc02d3f52386729b79d01035ce', symbol: 'SBS', logo: 'https://bscscan.com/token/images/staysbase_32.png', decimals: 9 },
            { address: '0x7083609fce4d1d8dc0c979aab8c869ea2c873402', symbol: 'DOT', logo: 'https://bscscan.com/token/images/polkadot_32.png', decimals: 18 },
            { address: '0x111111111117dc0aa78b770fa6a738034120c302', symbol: '1INCH', logo: 'https://bscscan.com/token/images/1inch_32.png', decimals: 18 },
            { address: '0x2222227e22102fe3322098e4cbfe18cfebd57c95', symbol: 'TLM', logo: 'https://bscscan.com/token/images/alienworlds_32.png', decimals: 4 },
            { address: '0xd98560689c6e748dc37bc410b4d3096b1aa3d8c2', symbol: 'DFY', logo: 'https://bscscan.com/token/images/defivn_32.png', decimals: 18 },
            { address: '0x74926b3d118a63f6958922d3dc05eb9c6e6e00c6', symbol: 'DOGGY', logo: 'https://bscscan.com/token/images/doggy_32.png', decimals: 18 },
            { address: '0x8f0528ce5ef7b51152a59745befdd91d97091d2f', symbol: 'ALPACA', logo: 'https://bscscan.com/token/images/alpacafinance2_32.png', decimals: 18 },
            { address: '0xcf6bb5389c92bdda8a3747ddb454cb7a64626c63', symbol: 'XVS', logo: 'https://bscscan.com/token/images/venus_32.png', decimals: 18 },
            { address: '0x47bead2563dcbf3bf2c9407fea4dc236faba485a', symbol: 'SXP', logo: 'https://bscscan.com/token/images/swipe_32.png', decimals: 18 },
            { address: '0xf8a0bf9cf54bb92f17374d9e9a321e6a111a51bd', symbol: 'LINK', logo: 'https://bscscan.com/token/images/chainlink_32.png?v=2', decimals: 18 },
            { address: '0x85eac5ac2f758618dfa09bdbe0cf174e7d574d5b', symbol: 'TRX', logo: 'https://bscscan.com/token/images/tron_32.png', decimals: 18 },
            { address: '0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3', symbol: 'DAI', logo: 'https://bscscan.com/token/images/dai_32.png', decimals: 18 },
            { address: '0xae9269f27437f0fcbc232d39ec814844a51d6b8f', symbol: 'BURGER', logo: 'https://bscscan.com/token/images/burgerswap_32.png', decimals: 18 },
            { address: '0x851f7a700c5d67db59612b871338a85526752c25', symbol: 'ARGON', logo: 'https://bscscan.com/token/images/argonrun_32.png?v=2', decimals: 18 },
            { address: '0x9f589e3eabe42ebc94a44727b3f3531c0c877809', symbol: 'TKO', logo: 'https://bscscan.com/token/images/tokocrypto_32.png', decimals: 18 },
            { address: '0xac51066d7bec65dc4589368da368b212745d63e8', symbol: 'ALICE', logo: 'https://bscscan.com/token/images/alicetoken_32.png', decimals: 6 },
            { address: '0x5ac52ee5b2a633895292ff6d8a89bb9190451587', symbol: 'BSCX', logo: 'https://bscscan.com/token/images/bscex_32.png', decimals: 18 },
            { address: '0xaef0d72a118ce24fee3cd1d43d383897d05b4e99', symbol: 'WIN', logo: 'https://bscscan.com/token/images/wink_32.png', decimals: 18 },
            { address: '0xbf5140a22578168fd562dccf235e5d43a02ce9b1', symbol: 'UNI', logo: 'https://bscscan.com/token/images/uniswap_32.png', decimals: 18 },
            { address: '0xf859Bf77cBe8699013d6Dbc7C2b926Aaf307F830', symbol: 'BRY', logo: 'https://bscscan.com/token/images/berrydata_32.png', decimals: 18 },
            { address: '0x708c671aa997da536869b50b6c67fa0c32ce80b2', symbol: 'XCUR', logo: 'https://bscscan.com/token/images/curatestyle_32.png', decimals: 8 },
            { address: '0x67ee3cb086f8a16f34bee3ca72fad36f7db929e2', symbol: 'DODO', logo: 'https://bscscan.com/token/images/dodobird_32.png', decimals: 18 },
            { address: '0x60b3bc37593853c04410c4f07fe4d6748245bf77', symbol: 'SHIELD', logo: 'https://bscscan.com/token/images/shieldprotocol_32.png', decimals: 18 },
            { address: '0x4338665cbb7b2485a8855a139b75d5e34ab0db94', symbol: 'LTC', logo: 'https://bscscan.com/token/images/litecoin_32.png', decimals: 18 },
            { address: '0x9b44df3318972be845d83f961735609137c4c23c', symbol: 'PROPEL', logo: 'https://bscscan.com/token/images/payrue_32.png', decimals: 18 },
            { address: '0x101d82428437127bf1608f699cd651e6abf9766e', symbol: 'BAT', logo: 'https://bscscan.com/token/images/bat_32.png', decimals: 18 },
            { address: '0x3d6545b08693dae087e957cb1180ee38b9e3c25e', symbol: 'ETC', logo: 'https://bscscan.com/token/images/ethclassic_32.png?v=1', decimals: 18 },
            { address: '0xb59490aB09A0f526Cc7305822aC65f2Ab12f9723', symbol: 'LIT', logo: 'https://bscscan.com/token/images/litentry_32.png', decimals: 18 },
            { address: '0xa2B726B1145A4773F68593CF171187d8EBe4d495', symbol: 'INJ', logo: 'https://bscscan.com/token/images/injective_32.png', decimals: 18 },
            { address: '0x52CE071Bd9b1C4B00A0b92D298c512478CaD67e8', symbol: 'COMP', logo: 'https://bscscan.com/token/images/compound_32.png?v1', decimals: 18 },
            { address: '0xA2120b9e674d3fC3875f415A7DF52e382F141225', symbol: 'ATA', logo: 'https://bscscan.com/token/images/automata_32.png', decimals: 18 },
            { address: '0x42F6f551ae042cBe50C739158b4f0CAC0Edb9096', symbol: 'NRV', logo: 'https://bscscan.com/token/images/nerve_32.png?v=2', decimals: 18 },
            { address: '0xf16e81dce15b08f326220742020379b855b87df9', symbol: 'ICE', logo: 'https://bscscan.com/token/images/popsiclefinance_32.png', decimals: 18 },
            { address: '0xe0e514c71282b6f4e823703a39374cf58dc3ea4f', symbol: 'BELT', logo: 'https://bscscan.com/token/images/beltfinance_32.png', decimals: 18 },
            { address: '0x250632378e573c6be1ac2f97fcdf00515d0aa91b', symbol: 'BETH', logo: 'https://bscscan.com/token/images/binance-beth_32.png', decimals: 18 },
            { address: '0x03ab98f5dc94996f8c33e15cd4468794d12d41f9', symbol: 'USDN', logo: 'https://bscscan.com/token/images/neutrinousd_32.png', decimals: 18 },
            { address: '0xca3f508b8e4dd382ee878a314789373d80a5190a', symbol: 'BIFI', logo: 'https://bscscan.com/token/images/beefy_32.png?=v1', decimals: 18 },
            { address: '0xc3EAE9b061Aa0e1B9BD3436080Dc57D2d63FEdc1', symbol: 'BEAR', logo: 'https://bscscan.com/token/images/honeyfarmfinance_32.png', decimals: 18 },
            { address: '0xFa363022816aBf82f18a9C2809dCd2BB393F6AC5', symbol: 'HONEY', logo: 'https://bscscan.com/token/images/honeyfarm_32.png', decimals: 18 },
            { address: '0x3fcca8648651e5b974dd6d3e50f61567779772a8', symbol: 'POTS', logo: 'https://bscscan.com/token/images/moonpot_32.png', decimals: 18 },
            { address: '0x603c7f932ed1fc6575303d8fb018fdcbb0f39a95', symbol: 'BANANA', logo: 'https://bscscan.com/token/images/apeswap_32.png', decimals: 18 },
            { address: '0x13E1070E3a388e53Ec35480Ff494538f9FFc5b8D', symbol: 'BRICKS', logo: 'https://bscscan.com/token/images/mybricks_32.png', decimals: 9 },
            { address: '0xaBc6790673a60b8A7f588450f59D2d256b1aeF7F', symbol: 'OMN', logo: 'https://bscscan.com/token/images/omnicoin_32.png', decimals: 18 },
            { address: '0xB27ADAfFB9fEa1801459a1a81B17218288c097cc', symbol: 'POOCOIN', logo: 'https://bscscan.com/token/images/poocoin_32.png?=v2', decimals: 8 },
            { address: '0x5232152c8207653AEda5baa0ff7fb1046c23C753', symbol: 'SUBX', logo: 'https://bscscan.com/token/images/startupboost_32.png', decimals: 9 },
            { address: '0xB09FE1613fE03E7361319d2a43eDc17422f36B09', symbol: 'BOG', logo: 'https://bscscan.com/token/images/bogtools_32.png', decimals: 18 },
            { address: '0x4E7Ae924FD9a5D60b56BE486b2900efE0c6a9CA7', symbol: 'LOT', logo: 'https://bscscan.com/token/images/lotterytoken_32.png', decimals: 9 },
            { address: '0x14016E85a25aeb13065688cAFB43044C2ef86784', symbol: 'TUSD', logo: 'https://bscscan.com/token/images/trueusd_32.png', decimals: 18 },
            { address: '0x8893D5fA71389673C5c4b9b3cb4EE1ba71207556', symbol: 'NUTS', logo: 'https://bscscan.com/token/images/squirrel_32.png', decimals: 18 },
            { address: '0x0D8Ce2A99Bb6e3B7Db580eD848240e4a0F9aE153', symbol: 'FIL', logo: 'https://bscscan.com/token/images/filecoin_32.png', decimals: 18 },
            { address: '0xCC42724C6683B7E57334c4E856f4c9965ED682bD', symbol: 'MATIC', logo: 'https://bscscan.com/token/images/matic_32.png', decimals: 18 },
            { address: '0x88f1A5ae2A3BF98AEAF342D26B30a79438c9142e', symbol: 'YFI', logo: 'https://bscscan.com/token/images/yfi_32.png', decimals: 18 },
            { address: '0x9678E42ceBEb63F23197D726B29b1CB20d0064E5', symbol: 'IOTX', logo: 'https://bscscan.com/token/images/iotex_32.png', decimals: 18 },
            { address: '0x0Eb3a705fc54725037CC9e008bDede697f62F335', symbol: 'ATOM', logo: 'https://bscscan.com/token/images/cosmos_32.png', decimals: 18 },
            { address: '0xAD6cAEb32CD2c308980a548bD0Bc5AA4306c6c18', symbol: 'BAND', logo: 'https://bscscan.com/token/images/bandtoken_32.png', decimals: 18 },
            { address: '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4', symbol: 'SUSHI', logo: 'https://bscscan.com/token/images/sushiswap_32.png', decimals: 18 },
            { address: '0xa1faa113cbE53436Df28FF0aEe54275c13B40975', symbol: 'ALPHA', logo: 'https://bscscan.com/token/images/alpha_32.png?=v5', decimals: 18 },
            { address: '0x16939ef78684453bfDFb47825F8a5F714f12623a', symbol: 'XTZ', logo: 'https://bscscan.com/token/images/tezos_32.png', decimals: 18 },
            { address: '0x8fF795a6F4D97E7887C79beA79aba5cc76444aDf', symbol: 'BCH', logo: 'https://bscscan.com/token/images/bitcoincash_32.png', decimals: 18 },
            { address: '0x56b6fB708fC5732DEC1Afc8D8556423A2EDcCbD6', symbol: 'EOS', logo: 'https://bscscan.com/token/images/eos_32.png', decimals: 18 },
            { address: '0xe8c93310af068aa50bd7bf0ebfa459df2a02ceba', symbol: 'MOON', logo: 'https://bscscan.com/token/images/honeyfarmmoon_32.png', decimals: 18 },
            { address: '0x5801d0e1c7d977d78e4890880b8e579eb4943276', symbol: 'USDO', logo: 'https://bscscan.com/token/images/usdopendollar_32.png?v=1', decimals: 18 },
            { address: '0x57efFdE2759b68d86C544e88F7977e3314144859', symbol: 'DIS', logo: 'https://assets.coingecko.com/coins/images/13745/small/Tosdis-black.png?1611379744', decimals: 18 },
            { address: '0xd3b71117e6c1558c1553305b44988cd944e97300', symbol: 'YEL', logo: 'https://bscscan.com/token/images/yelfinance_32.png', decimals: 18 },
            { address: '0x08ba0619b1e7a582e0bce5bbe9843322c954c340', symbol: 'BMON', logo: 'https://bscscan.com/token/images/binamon_32.png', decimals: 18 },
            { address: '0xaf96a19c2dd4a0f6b077d9481fcc8c9102faa141', symbol: 'MOONARCH', logo: 'https://bscscan.com/token/images/moonarch_32.png', decimals: 9 },
            { address: '0x7a9f28eb62c791422aa23ceae1da9c847cbec9b0', symbol: 'WATCH', logo: 'https://bscscan.com/token/images/yieldwatch_32.png?=v1', decimals: 18 },
            { address: '0xf952fc3ca7325cc27d15885d37117676d25bfda6', symbol: 'EGG', logo: 'https://bscscan.com/token/images/goosedefi_32.png', decimals: 18 },
            { address: '0xc62ef0d8e137499833abb05dee47007d2b334ba6', symbol: 'GMX', logo: 'https://bscscan.com/token/images/gamex_32.png', decimals: 9 },
            { address: '0xe1ea2e1907d93f154234ce3b5a7418faf175fe11', symbol: 'DIESEL', logo: 'https://bscscan.com/token/images/diesel_32.png', decimals: 18 },
            { address: '0x1ce0c2827e2ef14d5c4f29a091d735a204794041', symbol: 'AVAX', logo: 'https://bscscan.com/token/images/avax_32.png', decimals: 18 },
            { address: '0x20f663cea80face82acdfa3aae6862d246ce0333', symbol: 'DRIP', logo: 'https://bscscan.com/token/images/driptoken_32.png', decimals: 18 },
            { address: '0xD9A88f9b7101046786490bAF433f0f6aB3D753E2', symbol: 'BBQ', logo: 'https://bscscan.com/token/images/barbequeswap_32.png', decimals: 18 },
            { address: '0x03ff0ff224f904be3118461335064bb48df47938', symbol: 'ONE', logo: 'https://assets.coingecko.com/coins/images/4344/small/Y88JAze.png?1565065793', decimals: 18 },
            { address: '0x7859B01BbF675d67Da8cD128a50D155cd881B576', symbol: 'XMS', logo: 'https://bscscan.com/token/images/marsecosystemtoken_32.png', decimals: 18 },
            { address: '0x2859e4544C4bB03966803b044A93563Bd2D0DD4D', symbol: 'SHIB', logo: 'https://bscscan.com/token/images/shibatoken_32.png', decimals: 18 },
            { address: '0xAD29AbB318791D579433D831ed122aFeAf29dcfe', symbol: 'FTM', logo: 'https://bscscan.com/token/images/ftm_32.png?=v2', decimals: 18 },
            { address: '0x04C747b40Be4D535fC83D09939fb0f626F32800B', symbol: 'ITAM', logo: 'https://bscscan.com/token/images/itamgames_32.png', decimals: 18 },
            { address: '0x3203c9E46cA618C8C1cE5dC67e7e9D75f5da2377', symbol: 'MBOX', logo: 'https://bscscan.com/token/images/mobox_32.png', decimals: 18 },
            { address: '0x715D400F88C167884bbCc41C5FeA407ed4D2f8A0', symbol: 'AXS', logo: 'https://bscscan.com/token/images/axieinfinity_32.png', decimals: 18 },
            { address: '0x4FA7163E153419E0E1064e418dd7A99314Ed27b6', symbol: 'HOTCROSS', logo: 'https://bscscan.com/token/images/hotcross_32.png', decimals: 18 },
            { address: '0x4691937a7508860F876c9c0a2a617E7d9E945D4B', symbol: 'WOO', logo: 'https://assets.coingecko.com/coins/images/12921/small/w2UiemF__400x400.jpg?1603670367', decimals: 18 },
            { address: '0x5A3010d4d8D3B5fB49f8B6E57FB9E48063f16700', symbol: 'BSCPAD', logo: 'https://bscscan.com/token/images/bscpad_32.png', decimals: 18 },
            { address: '0x78650B139471520656b9E7aA7A5e9276814a38e9', symbol: 'BTCST', logo: 'https://bscscan.com/token/images/btcst_32.png', decimals: 17 },
            { address: '0xaEC945e04baF28b135Fa7c640f624f8D90F1C3a6', symbol: 'C98', logo: 'https://bscscan.com/token/images/coin98bsc_32.png', decimals: 18 },
            { address: '0x1633b7157e7638C4d6593436111Bf125Ee74703F', symbol: 'SPS', logo: 'https://assets.coingecko.com/coins/images/17332/small/splinter.PNG?1627339560', decimals: 18 },
            { address: '0x20de22029ab63cf9A7Cf5fEB2b737Ca1eE4c82A6', symbol: 'CHESS', logo: 'https://bscscan.com/token/images/tranchess_32.png', decimals: 18 },
            { address: '0x5a16E8cE8cA316407c6E6307095dc9540a8D62B3', symbol: 'BTR', logo: 'https://bscscan.com/token/images/bitruetoken_32.png', decimals: 18 },
            { address: '0x039cB485212f996A9DBb85A9a75d898F94d38dA6', symbol: 'DEXE', logo: 'https://bscscan.com/token/images/dexe_32.png', decimals: 18 },
            { address: '0x928e55daB735aa8260AF3cEDadA18B5f70C72f1b', symbol: 'FRONT', logo: 'https://bscscan.com/token/images/frontier_32.png?=v1', decimals: 18 },
            { address: '0x2eD9a5C8C13b93955103B9a7C167B67Ef4d568a3', symbol: 'MASK', logo: 'https://bscscan.com/token/images/mask_32.png', decimals: 18 },
            { address: '0x98936Bde1CF1BFf1e7a8012Cee5e2583851f2067', symbol: 'ANN', logo: 'https://bscscan.com/token/images/annexfinance_32.png', decimals: 18 },
            { address: '0x3192ccddf1cdce4ff055ebc80f3f0231b86a7e30', symbol: 'INSUR', logo: 'https://bscscan.com/token/images/insurace_32.png?=v1', decimals: 18 },
            { address: '0xfb6115445Bff7b52FeB98650C87f44907E58f802', symbol: 'AAVE', logo: 'https://bscscan.com/token/images/aave_32.png', decimals: 18 },
            { address: '0x5F84ce30DC3cF7909101C69086c50De191895883', symbol: 'VRT', logo: 'https://bscscan.com/token/images/vrt_32.png?v2', decimals: 18 },
            { address: '0x0487b824c8261462F88940f97053E65bDb498446', symbol: 'WINGS', logo: 'https://bscscan.com/token/images/jetswap_32.png', decimals: 18 },
            { address: '0xf8E026dC4C0860771f691EcFFBbdfe2fa51c77CF', symbol: 'BGOV', logo: 'https://bscscan.com/token/images/bgovtoken_32.png', decimals: 18 },
            { address: '0x7979F6C54ebA05E18Ded44C4F986F49a5De551c2', symbol: 'KEBAB', logo: 'https://bscscan.com/token/images/kebabfinance_32.png', decimals: 18 },
            { address: '0xB0B924C4a31b7d4581a7F78F57ceE1E65736Be1D', symbol: 'HAPPY', logo: 'https://bscscan.com/token/images/happycoin_32.png', decimals: 9 },
            { address: '0x009cF7bC57584b7998236eff51b98A168DceA9B0', symbol: 'SYRUP', logo: 'https://bscscan.com/token/images/syrup_32.png?=v1', decimals: 18 },
            { address: '0xcAfE001067cDEF266AfB7Eb5A286dCFD277f3dE5', symbol: 'PSP', logo: 'https://bscscan.com/token/images/paraswaptoken_32.png', decimals: 18 },
            { address: '0x4e3cABD3AD77420FF9031d19899594041C420aeE', symbol: 'TITANO', logo: 'https://bscscan.com/token/images/titanofinance_32.png', decimals: 18 },
            { address: '0x84952dd90cdC57170b13D2291A8afCEdC8F97c71', symbol: 'SAFTI', logo: 'https://assets.coingecko.com/coins/images/24535/small/vHQ6BpuO_400x400.jpg?1648050874', decimals: 5 },
            { address: '0x26d3163b165BE95137CEe97241E716b2791a7572', symbol: 'DSHARE', logo: 'https://bscscan.com/token/images/dibsmoney_32.png', decimals: 18 },
            { address: '0xfd81ef21ea7cf1dc00e9c6dd261b4f3be0341d5c', symbol: 'DIBS', logo: 'https://assets.coingecko.com/coins/images/22184/small/Group_764_4.png?1641182000', decimals: 18 },
            { address: '0x1c6bc8e962427deb4106ae06a7fa2d715687395c', symbol: 'CHARGE', logo: 'https://assets.coingecko.com/coins/images/21405/small/afuIh6o9_400x400.jpg?1639087246', decimals: 18 },
            { address: '0x7deb9906bd1d77b410a56e5c23c36340bd60c983', symbol: 'STATIC', logo: 'https://assets.coingecko.com/coins/images/21404/small/1_Ve6PPOEmEu1LRjg5loJkkQ.png?1639087027', decimals: 18 },
            { address: '0xBf37f781473f3b50E82C668352984865eac9853f', symbol: 'MILK', logo: 'https://bscscan.com/token/images/thecryptoyou-milk_32.png', decimals: 18 }
        ],
        logos: [
            { symbol: 'BNB', logo: 'https://etherscan.io/token/images/bnb_28_2.png' },
            { symbol: '4Belt', logo: 'https://bscscan.com/token/images/belt-btc_32.png' },
            { symbol: 'beltBTC', logo: 'https://bscscan.com/token/images/btcb_32.png' },
            { symbol: 'beltETH', logo: 'https://bscscan.com/token/images/ethereum_32.png' },
            { symbol: 'beltBNB', logo: 'https://etherscan.io/token/images/bnb_28_2.png' },
            { symbol: 'beltBUSD', logo: 'https://bscscan.com/token/images/busd_32.png' },
            { symbol: 'WEX', logo: 'https://bscscan.com/token/images/waultswap_32.png?=v1' },
            { symbol: 'WLP', logo: 'https://bscscan.com/token/images/waultswap_32.png?=v1' },
            { symbol: 'ibALPACA', logo: 'https://bscscan.com/token/images/alpacafinance_32.png' },
            { symbol: 'ibBNB', logo: 'https://etherscan.io/token/images/bnb_28_2.png' },
            { symbol: 'ibBUSD', logo: 'https://bscscan.com/token/images/busd_32.png' },
            { symbol: 'ibUSDT', logo: 'https://bscscan.com/token/images/busdt_32.png' },
            { symbol: 'ibTUSD', logo: 'https://bscscan.com/token/images/trueusd_32.png' },
            { symbol: 'ibBTCB', logo: 'https://bscscan.com/token/images/btcb_32.png' },
            { symbol: 'ibETH', logo: 'https://bscscan.com/token/images/ethereum_32.png' },
            { symbol: 'WSG', logo: 'https://bscscan.com/token/images/wallstreetgames_32.png' },
            { symbol: 'Cake-LP', logo: 'https://bscscan.com/token/images/pancake_32.png?=v1' },
            { symbol: 'mooBeltETH', logo: 'https://bscscan.com/token/images/ethereum_32.png' },
            { symbol: 'mooBeltBTC', logo: 'https://bscscan.com/token/images/btcb_32.png' },
            { symbol: 'mooBeltBNB', logo: 'https://etherscan.io/token/images/bnb_28_2.png' },
            { symbol: 'mooYel', logo: 'https://assets.coingecko.com/coins/images/17429/small/Logo200.png?1627613989' },
            { symbol: 'crBAT', logo: 'https://bscscan.com/token/images/bat_32.png' },
            { symbol: 'moonTicketBelt4LP', logo: 'https://bscscan.com/token/images/belt-btc_32.png' },
            { symbol: 'mooBelt4BELT', logo: 'https://bscscan.com/token/images/belt-btc_32.png' },
            { symbol: 'moonTicketPotV2', logo: 'https://bscscan.com/token/images/moonpot_32.png' },
            { symbol: 'moonTicketCakeV3', logo: 'https://bscscan.com/token/images/pancake_32.png?=v1' },
            { symbol: 'APE-LP', logo: 'https://bscscan.com/token/images/apeswap_32.png' },
            { symbol: 'WINGS-LP', logo: 'https://bscscan.com/token/images/jetswap_32.png' },
            { symbol: 'INNBC', logo: 'https://bscscan.com/token/images/innbc_32-1.png' }
        ],
        nfts: []
    };
    /* ========================================================================================================================================================================= */
    // Polygon:
    exports.poly_data = {
        tokens: [
            { address: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619', symbol: 'WETH', logo: 'https://polygonscan.com/token/images/wETH_32.png', decimals: 18 },
            { address: '0x3BA4c387f786bFEE076A58914F5Bd38d668B42c3', symbol: 'BNB', logo: 'https://polygonscan.com/token/images/bnb_28_2.png', decimals: 18 },
            { address: '0xc2132d05d31c914a87c6611c10748aeb04b58e8f', symbol: 'USDT', logo: 'https://polygonscan.com/token/images/tether_32.png', decimals: 6 },
            { address: '0x2791bca1f2de4661ed88a30c99a7a9449aa84174', symbol: 'USDC', logo: 'https://polygonscan.com/token/images/centre-usdc_32.png', decimals: 6 },
            { address: '0xb33eaad8d922b1083446dc23f610c2567fb5180f', symbol: 'UNI', logo: 'https://polygonscan.com/token/images/uniswap_32.png', decimals: 18 },
            { address: '0x53e0bca35ec356bd5dddfebbd1fc0fd03fabad39', symbol: 'LINK', logo: 'https://polygonscan.com/token/images/chainlinktoken_32.png?v=6', decimals: 18 },
            { address: '0xdab529f40e671a1d4bf91361c21bf9f0c9712ab7', symbol: 'BUSD', logo: 'https://polygonscan.com/token/images/binanceusd_32.png', decimals: 18 },
            { address: '0x1bfd67037b42cf73acf2047067bd4f2c47d9bfd6', symbol: 'WBTC', logo: 'https://polygonscan.com/token/images/wBTC_32.png', decimals: 8 },
            { address: '0x8f3cf7ad23cd3cadbd9735aff958023239c6a063', symbol: 'DAI', logo: 'https://polygonscan.com/token/images/mcdDai_32.png', decimals: 18 },
            { address: '0xd6df932a45c0f255f85145f286ea0b292b21c90b', symbol: 'AAVE', logo: 'https://polygonscan.com/token/images/aave_32.png', decimals: 18 },
            { address: '0x5fe2b58c013d7601147dcdd68c143a77499f5531', symbol: 'GRT', logo: 'https://polygonscan.com/token/images/TheGraph_32.png', decimals: 18 },
            { address: '0xada58df0f643d959c2a47c9d4d4c1a4defe3f11c', symbol: 'CRO', logo: 'https://polygonscan.com/token/images/cro_32.png', decimals: 8 },
            { address: '0x6f7C932e7684666C9fd1d44527765433e01fF61d', symbol: 'MKR', logo: 'https://polygonscan.com/token/images/mkr-etherscan-35.png', decimals: 18 },
            { address: '0x0621d647cecbfb64b79e44302c1933cb4f27054d', symbol: 'AMP', logo: 'https://polygonscan.com/token/images/amp_32.png?v=2', decimals: 18 },
            { address: '0x8505b9d2254a7ae468c0e9dd10ccea3a837aef5c', symbol: 'COMP', logo: 'https://polygonscan.com/token/images/comp_32.png', decimals: 18 },
            { address: '0xd85d1e945766fea5eda9103f918bd915fbca63e6', symbol: 'CEL', logo: 'https://polygonscan.com/token/images/celsiustoken_32.png', decimals: 4 },
            { address: '0x0b3f868e0be5597d5db7feb59e1cadbb0fdda50a', symbol: 'SUSHI', logo: 'https://polygonscan.com/token/images/sushiswap-sushi_32.png', decimals: 18 },
            { address: '0xfad65eb62a97ff5ed91b23afd039956aaca6e93b', symbol: 'HT', logo: 'https://polygonscan.com/token/images/huobi_28.png', decimals: 18 },
            { address: '0x50b728d8d964fd00c2d0aad81718b71311fef68a', symbol: 'SNX', logo: 'https://polygonscan.com/token/images/synthetix-snx_32.png', decimals: 18 },
            { address: '0x692597b009d13c4049a947cab2239b7d6517875f', symbol: 'UST', logo: 'https://polygonscan.com/token/images/terra-ust_32.png', decimals: 18 },
            { address: '0x0c51f415cf478f8d08c246a6c6ee180c5dc3a012', symbol: 'HOT', logo: 'https://polygonscan.com/token/images/holo_28.png', decimals: 18 },
            { address: '0xda537104d6a5edd53c6fbba9a898708e465260b6', symbol: 'YFI', logo: 'https://polygonscan.com/token/images/yearn-yfi_32.png', decimals: 18 },
            { address: '0x2e1ad108ff1d8c782fcbbb89aad783ac49586756', symbol: 'TUSD', logo: 'https://polygonscan.com/token/images/trueusd_32.png', decimals: 18 },
            { address: '0x3cef98bb43d732e2f285ee605a8158cde967d219', symbol: 'BAT', logo: 'https://polygonscan.com/token/images/bat.png', decimals: 18 },
            { address: '0xa1c57f48f0deb89f569dfbe6e2b7f46d33606fd4', symbol: 'MANA', logo: 'https://polygonscan.com/token/images/decentraland_32.png', decimals: 18 },
            { address: '0xdf7837de1f2fa4631d716cf2502f8b230f1dcc32', symbol: 'TEL', logo: 'https://polygonscan.com/token/images/telcoin_28.png', decimals: 2 },
            { address: '0x41b3966b4ff7b427969ddf5da3627d6aeae9a48e', symbol: 'NEXO', logo: 'https://polygonscan.com/token/images/nexo_32.png', decimals: 18 },
            { address: '0x6f3b3286fd86d8b47ec737ceb3d0d354cc657b3e', symbol: 'PAX', logo: 'https://polygonscan.com/token/images/paxos_28_2.png', decimals: 18 },
            { address: '0x172370d5cd63279efa6d502dab29171933a610af', symbol: 'CRV', logo: 'https://polygonscan.com/token/images/curvefi-crv_32.png', decimals: 18 },
            { address: '0x9c2c5fd7b07e95ee044ddeba0e97a665f142394f', symbol: '1INCH', logo: 'https://polygonscan.com/token/images/1inch_32.png', decimals: 18 },
            { address: '0x7f426F6Dc648e50464a0392E60E1BB465a67E9cf', symbol: 'pAUTO', logo: 'https://polygonscan.com/token/images/pauto_32.png', decimals: 18 },
            { address: '0x845E76A8691423fbc4ECb8Dd77556Cb61c09eE25', symbol: 'pWINGS', logo: 'https://polygonscan.com/token/images/jetswappoly_32.png', decimals: 18 },
            { address: '0x831753DD7087CaC61aB5644b308642cc1c33Dc13', symbol: 'QUICK', logo: 'https://polygonscan.com/token/images/quickswap_32.png', decimals: 18 },
            { address: '0x9aF3b7DC29D3C4B1A5731408B6A9656fA7aC3b72', symbol: 'PUSD', logo: 'https://polygonscan.com/token/images/polyquity-pusd_32.png', decimals: 18 },
            { address: '0xDBf31dF14B66535aF65AaC99C32e9eA844e14501', symbol: 'renBTC', logo: 'https://polygonscan.com/token/images/renbtcpoly_32.png', decimals: 8 },
            { address: '0xfbdd194376de19a88118e84e279b977f165d01b8', symbol: 'BIFI', logo: 'https://polygonscan.com/token/images/beefy_32.png', decimals: 18 },
            { address: '0x7e9928afe96fefb820b85b4ce6597b8f660fe4f4', symbol: 'PBNB', logo: 'https://polygonscan.com/token/images/pbnb_32.png', decimals: 18 },
            { address: '0xE840B73E5287865EEc17d250bFb1536704B43B21', symbol: 'mUSD', logo: 'https://etherscan.io/token/images/mstableusd_32.png', decimals: 18 },
            { address: '0xc8a94a3d3d2dabc3c1caffffdca6a7543c3e3e65', symbol: 'GUSD', logo: 'https://polygonscan.com/token/images/gemini_28.png', decimals: 2 },
            { address: '0x104592a158490a9228070e0a8e5343b499e125d0', symbol: 'FRAX', logo: 'https://polygonscan.com/token/images/fraxpos_32.png', decimals: 18 },
            { address: '0xf501dd45a1198c2e1b5aef5314a68b9006d842e0', symbol: 'MTA', logo: 'https://polygonscan.com/token/images/meta_32.png', decimals: 18 },
            { address: '0xc8bcb58caef1be972c0b638b1dd8b0748fdc8a44', symbol: 'PEAR', logo: 'https://polygonscan.com/token/images/peartoken_32.png', decimals: 18 },
            { address: '0x80244C2441779361F35803b8C711C6c8fC6054a3', symbol: 'BONE', logo: 'https://polygonscan.com/token/images/boneswap_32.png', decimals: 18 },
            { address: '0xaa9654becca45b5bdfa5ac646c939c62b527d394', symbol: 'DINO', logo: 'https://polygonscan.com/token/images/dinoswap_32.png', decimals: 18 },
            { address: '0x3a3df212b7aa91aa0402b9035b098891d276572b', symbol: 'FISH', logo: 'https://polygonscan.com/token/images/polycat_32.png', decimals: 18 },
            { address: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270', symbol: 'WMATIC', logo: 'https://polygonscan.com/token/images/wMatic_32.png', decimals: 18 },
            { address: '0x385eeac5cb85a38a9a07a70c73e0a3271cfb54a7', symbol: 'GHST', logo: 'https://polygonscan.com/token/images/aavegotchighst_32.png', decimals: 18 },
            { address: '0x9a71012b13ca4d3d0cdc72a177df3ef03b0e76a3', symbol: 'BAL', logo: 'https://polygonscan.com/token/images/Balancer_32.png', decimals: 18 },
            { address: '0x25788a1a171ec66da6502f9975a15b609ff54cf6', symbol: 'POOL', logo: 'https://polygonscan.com/token/images/pooltogether_32.png', decimals: 18 },
            { address: '0x5d47baba0d66083c52009271faf3f50dcc01023c', symbol: 'BANANA', logo: 'https://polygonscan.com/token/images/apeswap_32.png', decimals: 18 },
            { address: '0x596eBE76e2DB4470966ea395B0d063aC6197A8C5', symbol: 'JRT', logo: 'https://polygonscan.com/token/images/jarvis_28.png', decimals: 18 },
            { address: '0x840195888Db4D6A99ED9F73FcD3B225Bb3cB1A79', symbol: 'SX', logo: 'https://polygonscan.com/token/images/sportx_32.png?v=3', decimals: 18 },
            { address: '0x2Ab4f9aC80F33071211729e45Cfc346C1f8446d5', symbol: 'CGG', logo: 'https://assets.coingecko.com/coins/images/14326/small/cgg_logo.png?1615429976', decimals: 18 },
            { address: '0x5a3064CbDCCF428ae907796cF6aD5a664CD7F3d8', symbol: 'PYQ', logo: 'https://polygonscan.com/token/images/polyquity-pyq_32.png', decimals: 18 },
            { address: '0xaECeBfcF604AD245Eaf0D5BD68459C3a7A6399c2', symbol: 'RAMP', logo: 'https://polygonscan.com/token/images/ramp_32.png', decimals: 18 },
            { address: '0x9C78EE466D6Cb57A4d01Fd887D2b5dFb2D46288f', symbol: 'MUST', logo: 'https://polygonscan.com/token/images/cometh_32.png', decimals: 18 },
            { address: '0x28C388FB1F4fa9F9eB445f0579666849EE5eeb42', symbol: 'BEL', logo: 'https://assets.coingecko.com/coins/images/12478/small/Bella.png?1602230054', decimals: 18 },
            { address: '0x2C89bbc92BD86F8075d1DEcc58C7F4E0107f286b', symbol: 'AVAX', logo: 'https://assets.coingecko.com/coins/images/12559/small/coin-round-red.png?1604021818', decimals: 18 },
            { address: '0x7DfF46370e9eA5f0Bad3C4E29711aD50062EA7A4', symbol: 'SOL', logo: 'https://assets.coingecko.com/coins/images/4128/small/coinmarketcap-solana-200.png?1616489452', decimals: 18 },
            { address: '0x61BDD9C7d4dF4Bf47A4508c0c8245505F2Af5b7b', symbol: 'AXS', logo: 'https://assets.coingecko.com/coins/images/13029/small/axie_infinity_logo.png?1604471082', decimals: 18 },
            { address: '0xe1c8f3d529bea8e3fa1fac5b416335a2f998ee1c', symbol: 'ELK', logo: 'https://assets.coingecko.com/coins/images/17813/small/elk.png?1629336971', decimals: 18 },
            { address: '0x8a0e8b4b0903929f47c3ea30973940d4a9702067', symbol: 'INSUR', logo: 'https://polygonscan.com/token/images/insurace2_32.png', decimals: 18 },
            { address: '0xd8ca34fd379d9ca3c6ee3b3905678320f5b45195', symbol: 'gOHM', logo: 'https://polygonscan.com/token/images/ohmgovernance_32.png', decimals: 18 },
            { address: '0xC168E40227E4ebD8C1caE80F7a55a4F0e6D66C97', symbol: 'DFYN', logo: 'https://polygonscan.com/token/images/dfyn_32.png', decimals: 18 },
            { address: '0x6C0AB120dBd11BA701AFF6748568311668F63FE0', symbol: 'APW', logo: 'https://etherscan.io/token/images/APWine_32.png', decimals: 18 },
            { address: '0x42d61D766B85431666B39B89C43011f24451bFf6', symbol: 'PSP', logo: 'https://polygonscan.com/token/images/paraswaptoken_32.png', decimals: 18 }
        ],
        logos: [
            { symbol: 'MATIC', logo: 'https://bscscan.com/token/images/matic_32.png' },
            { symbol: 'WEXpoly', logo: 'https://polygonscan.com/token/images/waultswap_32.png' },
            { symbol: 'WLP', logo: 'https://polygonscan.com/token/images/waultswap_32.png' },
            { symbol: 'crvUSDBTCETH', logo: 'https://polygon.curve.fi/static/icons/svg/crypto-icons-stack-2-polygon.svg#atricrypto' },
            { symbol: 'am3CRV', logo: 'https://polygonscan.com/token/images/aave_32.png' },
            { symbol: 'btcCRV', logo: 'https://polygonscan.com/token/images/renbtcpoly_32.png' },
            { symbol: 'BPSP', logo: 'https://polygonscan.com/token/images/Balancer_32.png' },
            { symbol: 'IRON-IS3USD', logo: 'https://polygonscan.com/token/images/iron_32.png' },
            { symbol: 'IS3USD', logo: 'https://polygonscan.com/token/images/iron_32.png' },
            { symbol: 'crUSDC', logo: 'https://polygonscan.com/token/images/centre-usdc_32.png' },
            { symbol: 'amWMATIC', logo: 'https://polygonscan.com/token/images/amwmatic.png' },
            { symbol: 'amWETH', logo: 'https://polygonscan.com/token/images/amweth.png' },
            { symbol: 'amDAI', logo: 'https://polygonscan.com/token/images/amdai.png' },
            { symbol: 'amUSDC', logo: 'https://polygonscan.com/token/images/amusdc.png' },
            { symbol: 'maDAI', logo: 'https://polygonscan.com/token/images/amdai.png' },
            { symbol: 'BP-MTA', logo: 'https://polygonscan.com/token/images/Balancer_32.png' },
            { symbol: 'SLP', logo: 'https://polygonscan.com/token/images/sushiswap-sushi_32.png' },
            { symbol: 'mooCurveAm3CRV', logo: 'https://polygonscan.com/token/images/aave_32.png' },
            { symbol: 'PTaUSDC', logo: 'https://raw.githubusercontent.com/pooltogether/pooltogether-react-components/08439a1fcdf661d89211d72815eec73b26d1bc1f/src/assets/Tokens/ptausdc.png' },
            { symbol: 'APE-LP', logo: 'https://bscscan.com/token/images/apeswap_32.png' },
            { symbol: 'THETA', logo: 'https://polygonscan.com/token/images/theta_28.png' },
            { symbol: 'ENJ', logo: 'https://polygonscan.com/token/images/enjin_28_2.png' },
            { symbol: 'EURT', logo: 'https://assets.coingecko.com/coins/images/17385/small/Tether_full_logo_dm.png?1627537298' },
            { symbol: 'FTM', logo: 'https://polygonscan.com/token/images/fantomtoken_32.png' },
            { symbol: 'ICE', logo: 'https://polygonscan.com/token/images/ironfinanceicetoken_32.png' },
            { symbol: 'IRON', logo: 'https://polygonscan.com/token/images/iron_32.png' },
            { symbol: 'pPOOL', logo: 'https://polygonscan.com/token/images/pooltogether_32.png' }
        ],
        nfts: [
            { address: '0x841918849E6784d7e643837Ad59571eA1fc5000B', dataQuery: 'indexed', name: 'PoolTogether: Season 1' },
            { address: '0xDb46d1Dc155634FbC732f92E853b10B288AD5a1d', dataQuery: 'indexed', name: 'Lens: Profile' },
            { address: '0x1871464F087dB27823Cff66Aa88599AA4815aE95', dataQuery: 'indexed', name: 'Galaxy: OATs' }
        ]
    };
    /* ========================================================================================================================================================================= */
    // Fantom:
    exports.ftm_data = {
        tokens: [
            { address: '0x04068da6c83afcfa0e13ba15a6696662335d5b75', symbol: 'USDC', logo: 'https://ftmscan.com/token/images/USDC_32.png', decimals: 6 },
            { address: '0xb3654dc3d10ea7645f8319668e8f54d2574fbdc8', symbol: 'LINK', logo: 'https://ftmscan.com/token/images/chainlink_32.png', decimals: 18 },
            { address: '0x321162Cd933E2Be498Cd2267a90534A804051b11', symbol: 'BTC', logo: 'https://ftmscan.com/token/images/wBTC_32.png', decimals: 8 },
            { address: '0x8d11ec38a3eb5e956b052f67da8bdc9bef8abf3e', symbol: 'DAI', logo: 'https://ftmscan.com/token/images/MCDDai_32.png', decimals: 18 },
            { address: '0x6a07A792ab2965C72a5B8088d3a069A7aC3a993B', symbol: 'AAVE', logo: 'https://ftmscan.com/token/images/aave_32.png', decimals: 18 },
            { address: '0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC', symbol: 'SUSHI', logo: 'https://ftmscan.com/token/images/sushiswap_32.png', decimals: 18 },
            { address: '0x56ee926bD8c72B2d5fa1aF4d9E4Cbb515a1E3Adc', symbol: 'SNX', logo: 'https://ftmscan.com/token/images/Synthetix_SNX_32.png', decimals: 18 },
            { address: '0x29b0Da86e484E1C0029B56e817912d778aC0EC69', symbol: 'YFI', logo: 'https://ftmscan.com/token/images/YFI_32.png', decimals: 18 },
            { address: '0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83', symbol: 'WFTM', logo: 'https://ftmscan.com/token/images/wFtm_32.png', decimals: 18 },
            { address: '0x1E4F97b9f9F913c46F1632781732927B9019C68b', symbol: 'CRV', logo: 'https://ftmscan.com/token/images/CurveFi_32.png', decimals: 18 },
            { address: '0x74b23882a30290451A17c44f4F05243b6b58C76d', symbol: 'ETH', logo: 'https://ftmscan.com/token/images/wETH_32.png', decimals: 18 },
            { address: '0x841fad6eae12c286d1fd18d1d525dffa75c7effe', symbol: 'BOO', logo: 'https://ftmscan.com/token/images/spookyswap-boo_32.png', decimals: 18 },
            { address: '0x5cc61a78f164885776aa610fb0fe1257df78e59b', symbol: 'SPIRIT', logo: 'https://ftmscan.com/token/images/spiritswap_32.png', decimals: 18 },
            { address: '0x049d68029688eabf473097a2fc38ef61633a3c7a', symbol: 'fUSDT', logo: 'https://etherscan.io/token/images/tether_32.png', decimals: 6 },
            { address: '0xd6070ae98b8069de6B494332d1A1a81B6179D960', symbol: 'BIFI', logo: 'https://bscscan.com/token/images/beefy_32.png?=v1', decimals: 18 },
            { address: '0x181F3F22C9a751E2ce673498A03E1FDFC0ebBFB6', symbol: 'EST', logo: 'https://ftmscan.com/token/images/esterfinance_32.png', decimals: 18 },
            { address: '0xDBf31dF14B66535aF65AaC99C32e9eA844e14501', symbol: 'renBTC', logo: 'https://ftmscan.com/token/images/renbtcpoly_32.png', decimals: 8 },
            { address: '0xD0660cD418a64a1d44E9214ad8e459324D8157f1', symbol: 'WOOFY', logo: 'https://etherscan.io/token/images/woofy_32.png?v=2', decimals: 12 },
            { address: '0x657A1861c15A3deD9AF0B6799a195a249ebdCbc6', symbol: 'CREAM', logo: 'https://ftmscan.com/token/images/CreamFinance_32.png', decimals: 18 },
            { address: '0x46E7628E8b4350b2716ab470eE0bA1fa9e76c6C5', symbol: 'BAND', logo: 'https://ftmscan.com/token/images/bandprotocol_32.png', decimals: 18 },
            { address: '0xB01E8419d842beebf1b70A7b5f7142abbaf7159D', symbol: 'COVER', logo: 'https://ftmscan.com/token/images/cover_32.png', decimals: 18 },
            { address: '0x44B26E839eB3572c5E959F994804A5De66600349', symbol: 'HEGIC', logo: 'https://ftmscan.com/token/images/hegic_32.png', decimals: 18 },
            { address: '0xe0654C8e6fd4D733349ac7E09f6f23DA256bF475', symbol: 'SCREAM', logo: 'https://ftmscan.com/token/images/scream_32.png', decimals: 18 },
            { address: '0xd67de0e0a0fd7b15dc8348bb9be742f3c5850454', symbol: 'BNB', logo: 'https://etherscan.io/token/images/bnb_28_2.png', decimals: 18 },
            { address: '0xc931f61b1534eb21d8c11b24f3f5ab2471d4ab50', symbol: 'BUSD', logo: 'https://bscscan.com/token/images/busd_32.png', decimals: 18 },
            { address: '0x0e121961dd741c9d49c9a04379da944a9d2fac7a', symbol: 'DIS', logo: 'https://etherscan.io/token/images/tosdis_32.png', decimals: 18 },
            { address: '0x37C045bE4641328DFEB625f1Dde610D061613497', symbol: 'JUST', logo: 'https://ftmscan.com/token/images/justyours2_32.png', decimals: 10 },
            { address: '0xdDcb3fFD12750B45d32E084887fdf1aABAb34239', symbol: 'ANY', logo: 'https://ftmscan.com/token/images/anyswap_32.png', decimals: 18 },
            { address: '0x627524d78B4fC840C887ffeC90563c7A42b671fD', symbol: 'KEK', logo: 'https://ftmscan.com/token/images/cryptokek_32.png', decimals: 18 },
            { address: '0xf16e81dce15B08F326220742020379B855B87DF9', symbol: 'ICE', logo: 'https://assets.coingecko.com/coins/images/14586/small/ice.png?1617188825', decimals: 18 },
            { address: '0x3D8f1ACCEe8e263F837138829B6C4517473d0688', symbol: 'fWINGS', logo: 'https://ftmscan.com/token/images/fwings_32.png', decimals: 18 },
            { address: '0x82f0B8B456c1A451378467398982d4834b6829c1', symbol: 'MIM', logo: 'https://ftmscan.com/token/images/mimstablecoin_32.png', decimals: 18 },
            { address: '0xd8321aa83fb0a4ecd6348d4577431310a6e0814d', symbol: 'GEIST', logo: 'https://ftmscan.com/token/images/geist_32.png', decimals: 18 },
            { address: '0x468003b688943977e6130f4f68f23aad939a1040', symbol: 'SPELL', logo: 'https://ftmscan.com/token/images/spelltoken_32.png', decimals: 18 },
            { address: '0x6c021Ae822BEa943b2E66552bDe1D2696a53fbB7', symbol: 'TOMB', logo: 'https://ftmscan.com/token/images/tomb_32.png', decimals: 18 },
            { address: '0x37F70aa9fEfc8971117BD53A1Ddc2372aa7Eec41', symbol: 'BOUJE', logo: 'https://assets.coingecko.com/coins/images/19588/small/logo_%283%29.png?1635472943', decimals: 18 },
            { address: '0x91fa20244fb509e8289ca630e5db3e9166233fdc', symbol: 'gOHM', logo: 'https://ftmscan.com/token/images/ohmgovernance_32.png', decimals: 18 },
            { address: '0xcef2b88d5599d578c8d92E7a6e6235FBfaD01eF4', symbol: 'BASTILLE', logo: 'https://assets.coingecko.com/coins/images/24058/small/logo200.png?1646203551', decimals: 18 },
            { address: '0xF24Bcf4d1e507740041C9cFd2DddB29585aDCe1e', symbol: 'BEETS', logo: 'https://ftmscan.com/token/images/beethovenx_32.png', decimals: 18 }
        ],
        logos: [
            { symbol: 'FTM', logo: 'https://etherscan.io/token/images/fantomtoken_32.png' },
            { symbol: 'fUSDTCRV', logo: 'https://ftmscan.com/token/images/CurveFi_32.png' },
            { symbol: 'mooScreamETH', logo: 'https://ftmscan.com/token/images/wETH_32.png' },
            { symbol: 'mooScreamWBTC', logo: 'https://ftmscan.com/token/images/wBTC_32.png' },
            { symbol: 'mooScreamUSDC', logo: 'https://ftmscan.com/token/images/USDC_32.png' },
            { symbol: 'crv3crypto', logo: 'https://ftmscan.com/token/images/CurveFi_32.png' },
            { symbol: 'spLP', logo: 'https://ftmscan.com/token/images/spookyswap-boo_32.png' },
            { symbol: 'IS3USD', logo: 'https://polygonscan.com/token/images/iron_32.png' },
            { symbol: 'g3CRV', logo: 'https://assets.coingecko.com/coins/images/18832/small/GEIST-token.png?1633560935' },
            { symbol: 'SPIRIT-LP', logo: 'https://ftmscan.com/token/images/spiritswap_32.png' },
            { symbol: 'BHC', logo: 'https://ftmscan.com/token/images/billionhappiness_32.png' },
            { symbol: 'IronICE', logo: 'https://polygonscan.com/token/images/ironfinanceicetoken_32.png' }
        ],
        nfts: []
    };
    /* ========================================================================================================================================================================= */
    // Avalanche:
    exports.avax_data = {
        tokens: [
            { address: '0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664', symbol: 'USDC.e', logo: 'https://snowtrace.io/token/images/centre-usdc_28.png', decimals: 6 },
            { address: '0x50b7545627a5162F82A992c33b87aDc75187B218', symbol: 'WBTC.e', logo: 'https://snowtrace.io/token/images/wrappedbitcoin_32.png', decimals: 8 },
            { address: '0xd586E7F844cEa2F87f50152665BCbc2C279D8d70', symbol: 'DAI.e', logo: 'https://snowtrace.io/token/images/MCDDai_32.png', decimals: 18 },
            { address: '0xc7198437980c041c805A1EDcbA50c1Ce5db95118', symbol: 'USDT.e', logo: 'https://snowtrace.io/token/images/tether_32.png', decimals: 6 },
            { address: '0x19860CCB0A68fd4213aB9D8266F7bBf05A8dDe98', symbol: 'BUSD.e', logo: 'https://snowtrace.io/token/images/busd_32.png', decimals: 18 },
            { address: '0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB', symbol: 'WETH.e', logo: 'https://snowtrace.io/token/images/ethereum_32.png', decimals: 18 },
            { address: '0x8eBAf22B6F053dFFeaf46f4Dd9eFA95D89ba8580', symbol: 'UNI.e', logo: 'https://snowtrace.io/token/images/uniswap_32.png', decimals: 18 },
            { address: '0x9eAaC1B23d935365bD7b542Fe22cEEe2922f52dc', symbol: 'YFI.e', logo: 'https://snowtrace.io/token/images/yfi_32.png', decimals: 18 },
            { address: '0x63a72806098Bd3D9520cC43356dD78afe5D386D9', symbol: 'AAVE.e', logo: 'https://snowtrace.io/token/images/aave_32.png', decimals: 18 },
            { address: '0x37B608519F91f70F2EeB0e5Ed9AF4061722e4F76', symbol: 'SUSHI.e', logo: 'https://snowtrace.io/token/images/sushitoken_32.png', decimals: 18 },
            { address: '0x5947BB275c521040051D82396192181b413227A3', symbol: 'LINK.e', logo: 'https://snowtrace.io/token/images/chainlinktoken_32.png', decimals: 18 },
            { address: '0xd6070ae98b8069de6B494332d1A1a81B6179D960', symbol: 'BIFI', logo: 'https://snowtrace.io/token/images/beefy_32.png', decimals: 18 },
            { address: '0x8729438EB15e2C8B576fCc6AeCdA6A148776C0F5', symbol: 'QI', logo: 'https://snowtrace.io/token/images/benqi_32.png', decimals: 18 },
            { address: '0x60781C2586D68229fde47564546784ab3fACA982', symbol: 'PNG', logo: 'https://assets.coingecko.com/coins/images/14023/small/mXGnm3Eo_400x400.jpg?1644478963', decimals: 18 },
            { address: '0xd1c3f94DE7e5B45fa4eDBBA472491a9f4B166FC4', symbol: 'XAVA', logo: 'https://snowtrace.io/token/images/avalaunch_32.png', decimals: 18 },
            { address: '0x4C9B4E1AC6F24CdE3660D5E4Ef1eBF77C710C084', symbol: 'LYD', logo: 'https://snowtrace.io/token/images/lydiafinance_32.png', decimals: 18 },
            { address: '0x617724974218A18769020A70162165A539c07E8a', symbol: 'OLIVE', logo: 'https://snowtrace.io/token/images/olivecash_32.png', decimals: 18 },
            { address: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', symbol: 'WAVAX', logo: 'https://snowtrace.io/token/images/avax_32.png', decimals: 18 },
            { address: '0x6e84a6216ea6dacc71ee8e6b0a5b7322eebc0fdd', symbol: 'JOE', logo: 'https://snowtrace.io/token/images/traderjoe_32.png', decimals: 18 },
            { address: '0xC38f41A296A4493Ff429F1238e030924A1542e50', symbol: 'SNOB', logo: 'https://snowtrace.io/token/images/snowball_32.png', decimals: 18 },
            { address: '0xe896CDeaAC9615145c0cA09C8Cd5C25bced6384c', symbol: 'PEFI', logo: 'https://snowtrace.io/token/images/penguinfinance_32.png', decimals: 18 },
            { address: '0x846D50248BAf8b7ceAA9d9B53BFd12d7D7FBB25a', symbol: 'VSO', logo: 'https://snowtrace.io/token/images/verso_32.png', decimals: 18 },
            { address: '0xa5E59761eBD4436fa4d20E1A27cBa29FB2471Fc6', symbol: 'SHERPA', logo: 'https://snowtrace.io/token/images/sherpa_32.png', decimals: 18 },
            { address: '0x59414b3089ce2AF0010e7523Dea7E2b35d776ec7', symbol: 'YAK', logo: 'https://snowtrace.io/token/images/yieldyak_32.png', decimals: 18 },
            { address: '0x408D4cD0ADb7ceBd1F1A1C33A0Ba2098E1295bAB', symbol: 'WBTC', logo: 'https://assets.coingecko.com/coins/images/7598/small/wrapped_bitcoin_wbtc.png?1548822744', decimals: 8 },
            { address: '0xa1144a6A1304bd9cbb16c800F7a867508726566E', symbol: 'BAG', logo: 'https://snowtrace.io/token/images/baguette_32.png', decimals: 18 },
            { address: '0x21c5402C3B7d40C89Cc472C9dF5dD7E51BbAb1b1', symbol: 'TUNDRA', logo: 'https://snowtrace.io/token/images/tundra_32.png', decimals: 18 },
            { address: '0x8D88e48465F30Acfb8daC0b3E35c9D6D7d36abaf', symbol: 'CNR', logo: 'https://snowtrace.io/token/images/canary_32.png', decimals: 18 },
            { address: '0xD606199557c8Ab6F4Cc70bD03FaCc96ca576f142', symbol: 'GDL', logo: 'https://snowtrace.io/token/images/gondolafinance_32.png', decimals: 18 },
            { address: '0x9Fda7cEeC4c18008096C2fE2B85F05dc300F94d0', symbol: 'MFI', logo: 'https://snowtrace.io/token/images/marginswap_32.png', decimals: 18 },
            { address: '0x81440C939f2C1E34fc7048E518a637205A632a74', symbol: 'CYCLE', logo: 'https://snowtrace.io/token/images/cyclefinance_32.png', decimals: 18 },
            { address: '0xddaaad7366b455aff8e7c82940c43ceb5829b604', symbol: 'mYAK', logo: 'https://assets.coingecko.com/coins/images/18545/small/w0xW3Oq.png?1632362417', decimals: 12 },
            { address: '0x90842eb834cFD2A1DB0b1512B254a18E4D396215', symbol: 'GB', logo: 'https://snowtrace.io/token/images/goodbridging_32.png', decimals: 9 },
            { address: '0xb54f16fb19478766a268f172c9480f8da1a7c9c3', symbol: 'TIME', logo: 'https://snowtrace.io/token/images/wonderland-time_32.png', decimals: 9 },
            { address: '0x4fbf0429599460D327BD5F55625E30E4fC066095', symbol: 'TSD', logo: 'https://snowtrace.io/token/images/teddy-tsd_32.png', decimals: 18 },
            { address: '0x094bd7B2D99711A1486FB94d4395801C6d0fdDcC', symbol: 'TEDDY', logo: 'https://snowtrace.io/token/images/teddycash_32.png', decimals: 18 },
            { address: '0x3ACa5545e76746A3Fe13eA66B24BC0eBcC51E6b4', symbol: 'EVRT', logo: 'https://snowtrace.io/token/images/everest_32.png', decimals: 18 },
            { address: '0xE1C110E1B1b4A1deD0cAf3E42BfBdbB7b5d7cE1C', symbol: 'ELK', logo: 'https://snowtrace.io/token/images/elkfinance_32.png', decimals: 18 },
            { address: '0xce1bffbd5374dac86a2893119683f4911a2f7814', symbol: 'SPELL', logo: 'https://snowtrace.io/token/images/spelltoken_32.png', decimals: 18 },
            { address: '0xB00F1ad977a949a3CCc389Ca1D1282A2946963b0', symbol: 'BOOFI', logo: 'https://assets.coingecko.com/coins/images/18727/small/xrbdgaJc_400x400.jpg?1633191904', decimals: 18 },
            { address: '0x47536F17F4fF30e64A96a7555826b8f9e66ec468', symbol: 'CRV', logo: 'https://assets.coingecko.com/coins/images/12124/small/Curve.png?1597369484', decimals: 18 },
            { address: '0xDBf31dF14B66535aF65AaC99C32e9eA844e14501', symbol: 'renBTC', logo: 'https://assets.coingecko.com/coins/images/11370/small/Bitcoin.jpg?1628072791', decimals: 8 },
            { address: '0x1f1E7c893855525b303f99bDF5c3c05Be09ca251', symbol: 'SYN', logo: 'https://snowtrace.io/token/images/synapse_32.png', decimals: 18 },
            { address: '0x264c1383EA520f73dd837F915ef3a732e204a493', symbol: 'BNB', logo: 'https://assets.coingecko.com/coins/images/825/small/binance-coin-logo.png?1547034615', decimals: 18 },
            { address: '0x130966628846BFd36ff31a822705796e8cb8C18D', symbol: 'MIM', logo: 'https://snowtrace.io/token/images/mimstablecoin_32.png', decimals: 18 },
            { address: '0xD24C2Ad096400B6FBcd2ad8B24E7acBc21A1da64', symbol: 'FRAX', logo: 'https://snowtrace.io/token/images/fraxfinance2_32.png', decimals: 18 },
            { address: '0xB1466d4cf0DCfC0bCdDcf3500F473cdACb88b56D', symbol: 'WET', logo: 'https://assets.coingecko.com/coins/images/17353/small/cropped-logo-wombat.png?1627368904', decimals: 18 },
            { address: '0xAcD7B3D9c10e97d0efA418903C0c7669E702E4C0', symbol: 'ELE', logo: 'https://assets.coingecko.com/coins/images/14541/small/elelogo_resized.png?1631114051', decimals: 18 },
            { address: '0x65378b697853568dA9ff8EaB60C13E1Ee9f4a654', symbol: 'HUSKY', logo: 'https://snowtrace.io/token/images/huskyavax_32.png', decimals: 18 },
            { address: '0x488F73cddDA1DE3664775fFd91623637383D6404', symbol: 'YTS', logo: 'https://snowtrace.io/token/images/yetiswap_32.png', decimals: 18 },
            { address: '0xb27c8941a7Df8958A1778c0259f76D1F8B711C35', symbol: 'KLO', logo: 'https://snowtrace.io/token/images/kalao_32.png', decimals: 18 },
            { address: '0x397bbd6a0e41bdf4c3f971731e180db8ad06ebc1', symbol: 'AVXT', logo: 'https://snowtrace.io/token/images/avaxtars_32.png', decimals: 6 },
            { address: '0x6e7f5c0b9f4432716bdd0a77a3601291b9d9e985', symbol: 'SPORE', logo: 'https://snowtrace.io/token/images/sporeearth_32.png', decimals: 9 },
            { address: '0xb2a85C5ECea99187A977aC34303b80AcbDdFa208', symbol: 'ROCO', logo: 'https://assets.coingecko.com/coins/images/19234/small/86109466.png?1634769540', decimals: 18 },
            { address: '0x0f34919404a290e71fc6A510cB4a6aCb8D764b24', symbol: 'BLZZ', logo: 'https://snowtrace.io/token/images/blzz_32.png', decimals: 18 },
            { address: '0xcF8419A615c57511807236751c0AF38Db4ba3351', symbol: 'AXIAL', logo: 'https://assets.coingecko.com/coins/images/20502/small/E5nD9pPv_400x400.jpg?1637139692', decimals: 18 },
            { address: '0x564A341Df6C126f90cf3ECB92120FD7190ACb401', symbol: 'TRYB', logo: 'https://snowtrace.io/token/images/bilira_32.png', decimals: 6 },
            { address: '0xa32608e873f9ddef944b24798db69d80bbb4d1ed', symbol: 'CRA', logo: 'https://snowtrace.io/token/images/crabadatoken_32.png', decimals: 18 },
            { address: '0xf693248F96Fe03422FEa95aC0aFbBBc4a8FdD172', symbol: 'TUS', logo: 'https://snowtrace.io/token/images/treasureunderthesea_32.png', decimals: 18 },
            { address: '0x544c42fbb96b39b21df61cf322b5edc285ee7429', symbol: 'INSUR', logo: 'https://snowtrace.io/token/images/insurace_32.png', decimals: 18 },
            { address: '0x346A59146b9b4a77100D369a3d18E8007A9F46a6', symbol: 'AVAI', logo: 'https://assets.coingecko.com/coins/images/18859/small/ic_orca.png?1633603714', decimals: 18 },
            { address: '0x8B1d98A91F853218ddbb066F20b8c63E782e2430', symbol: 'ORCA', logo: 'https://assets.coingecko.com/coins/images/18858/small/ic_orca.png?1633602571', decimals: 18 },
            { address: '0x321e7092a180bb43555132ec53aaa65a5bf84251', symbol: 'gOHM', logo: 'https://snowtrace.io/token/images/governanceohm_32.png', decimals: 18 },
            { address: '0x783c08b5f26e3daf8c4681f3bf49844e425b6393', symbol: 'AUSD', logo: 'https://assets.coingecko.com/coins/images/21328/small/ausd.png?1638946188', decimals: 18 },
            { address: '0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e', symbol: 'USDC', logo: 'https://snowtrace.io/token/images/usdc_32.png', decimals: 6 },
            { address: '0x9702230a8ea53601f5cd2dc00fdbc13d4df4a8c7', symbol: 'USDt', logo: 'https://snowtrace.io/token/images/tether_32.png', decimals: 18 },
            { address: '0x22d4002028f537599bE9f666d1c4Fa138522f9c8', symbol: 'PTP', logo: 'https://snowtrace.io/token/images/platypusfinance_32.png', decimals: 18 },
            { address: '0x1C20E891Bab6b1727d14Da358FAe2984Ed9B59EB', symbol: 'TUSD', logo: 'https://snowtrace.io/token/images/trueusd_32.png', decimals: 18 },
            { address: '0x1ECd47FF4d9598f89721A2866BFEb99505a413Ed', symbol: 'AVME', logo: 'https://snowtrace.io/token/images/avmeavax_32.png', decimals: 18 },
            { address: '0xb599c3590F42f8F995ECfa0f85D2980B76862fc1', symbol: 'UST', logo: 'https://snowtrace.io/token/images/wormholeust_32.png', decimals: 6 },
            { address: '0x4f60a160D8C2DDdaAfe16FCC57566dB84D674BD6', symbol: 'JEWEL', logo: 'https://snowtrace.io/token/images/jewel_32.png', decimals: 18 },
            { address: '0x449674B82F05d498E126Dd6615a1057A9c088f2C', symbol: 'LOST', logo: 'https://snowtrace.io/token/images/lostwords_32.png', decimals: 18 },
            { address: '0x152b9d0FdC40C096757F570A51E494bd4b943E50', symbol: 'BTC.b', logo: 'https://bscscan.com/token/images/btcb_32.png', decimals: 8 }
        ],
        logos: [
            { symbol: 'AVAX', logo: 'https://bscscan.com/token/images/avax_32.png' },
            { symbol: 's4D', logo: 'https://snowtrace.io/token/images/snowball_32.png' },
            { symbol: 'iPEFI', logo: 'https://penguinfinance.org/images/pools/iPefi.svg' },
            { symbol: 'PGL', logo: 'https://snowtrace.io/token/images/pangolin_32.png' },
            { symbol: 'xJOE', logo: 'https://snowtrace.io/token/images/traderjoe_32.png' },
            { symbol: 'sPGL', logo: 'https://snowtrace.io/token/images/pangolin_32.png' },
            { symbol: 'JLP', logo: 'https://snowtrace.io/token/images/traderjoe_32.png' },
            { symbol: 'sJLP', logo: 'https://snowtrace.io/token/images/traderjoe_32.png' },
            { symbol: 'sPNG', logo: 'https://snowtrace.io/token/images/pangolin_32.png' },
            { symbol: 'sDAI.e', logo: 'https://snowtrace.io/token/images/MCDDai_32.png' },
            { symbol: 'sWETH.e', logo: 'https://snowtrace.io/token/images/ethereum_32.png' },
            { symbol: 'sWBTC.e', logo: 'https://snowtrace.io/token/images/wrappedbitcoin_32.png' },
            { symbol: 'sUSDC.e', logo: 'https://snowtrace.io/token/images/centre-usdc_28.png' },
            { symbol: 'sIPEFI', logo: 'https://penguinfinance.org/images/pools/iPefi.svg' },
            { symbol: 'av3CRV', logo: 'https://snowtrace.io/token/images/aave_32.png' },
            { symbol: 'av3CRV-gauge', logo: 'https://snowtrace.io/token/images/aave_32.png' },
            { symbol: 'crvUSDBTCETH', logo: 'https://etherscan.io/token/images/Curvefi_32.png' },
            { symbol: 'crvUSDBTCETH-gauge', logo: 'https://etherscan.io/token/images/Curvefi_32.png' },
            { symbol: 'mooCurveAv3CRV', logo: 'https://snowtrace.io/token/images/aave_32.png' },
            { symbol: 'mooCurveTriCrypto', logo: 'https://etherscan.io/token/images/Curvefi_32.png' },
            { symbol: 'Lydia-LP', logo: 'https://assets.coingecko.com/coins/images/15195/small/512_pure_logo.png?1620083279' },
            { symbol: 'AS4D', logo: 'https://assets.coingecko.com/coins/images/20502/small/E5nD9pPv_400x400.jpg?1637139692' },
            { symbol: 'AC4D', logo: 'https://assets.coingecko.com/coins/images/20502/small/E5nD9pPv_400x400.jpg?1637139692' },
            { symbol: 'AM3D', logo: 'https://assets.coingecko.com/coins/images/20502/small/E5nD9pPv_400x400.jpg?1637139692' },
            { symbol: 'sAS4D', logo: 'https://assets.coingecko.com/coins/images/20502/small/E5nD9pPv_400x400.jpg?1637139692' },
            { symbol: 'sAC4D', logo: 'https://assets.coingecko.com/coins/images/20502/small/E5nD9pPv_400x400.jpg?1637139692' },
            { symbol: 'sAM3D', logo: 'https://assets.coingecko.com/coins/images/20502/small/E5nD9pPv_400x400.jpg?1637139692' },
            { symbol: 'AA3D', logo: 'https://assets.coingecko.com/coins/images/20502/small/E5nD9pPv_400x400.jpg?1637139692' },
            { symbol: 'sAA3D', logo: 'https://assets.coingecko.com/coins/images/20502/small/E5nD9pPv_400x400.jpg?1637139692' },
            { symbol: 'sWAVAX', logo: 'https://snowtrace.io/token/images/avax_32.png' },
            { symbol: 'USDC-AM3D', logo: 'https://assets.coingecko.com/coins/images/20502/small/E5nD9pPv_400x400.jpg?1637139692' },
            { symbol: 'COOKIE', logo: 'https://cookie.game/android-chrome-512x512.png' },
            { symbol: 'sCOOKIE', logo: 'https://cookie.game/android-chrome-512x512.png' },
            { symbol: 'FORTUNE', logo: 'https://cookie.game/android-chrome-512x512.png' },
            { symbol: 'BAKER', logo: 'https://cookie.game/android-chrome-512x512.png' },
            { symbol: 'COOKIE-BAKER', logo: 'https://cookie.game/android-chrome-512x512.png' },
            { symbol: 'PTavUSDCe', logo: 'https://raw.githubusercontent.com/pooltogether/pooltogether-react-components/08439a1fcdf661d89211d72815eec73b26d1bc1f/src/assets/Tokens/ptausdc.png' },
            { symbol: 'xGTR', logo: 'https://snowtrace.io/token/images/alligatormoneybags2_32.png' },
            { symbol: 'DAI', logo: 'https://snowtrace.io/token/images/MCDDai_32.png' },
            { symbol: 's3D', logo: 'https://snowtrace.io/token/images/snowball_32.png' },
            { symbol: 'ETH', logo: 'https://snowtrace.io/token/images/ethereum_32.png' },
            { symbol: 'YRT', logo: 'https://snowtrace.io/token/images/yieldyak_32.png' },
            { symbol: 'aUST', logo: 'https://snowtrace.io/token/images/wormholeust_32.png' },
            { symbol: 'xSNOB', logo: 'https://snowtrace.io/token/images/snowball_32.png' },
            { symbol: 'GTR', logo: 'https://snowtrace.io/token/images/alligatorexchange2_32.png' },
            { symbol: 'SCALES', logo: 'https://assets.coingecko.com/coins/images/20502/small/E5nD9pPv_400x400.jpg?1637139692' },
            { symbol: 'HERO', logo: 'https://assets.coingecko.com/coins/images/20502/small/E5nD9pPv_400x400.jpg?1637139692' },
            { symbol: 'sAXIAL', logo: 'https://assets.coingecko.com/coins/images/20502/small/E5nD9pPv_400x400.jpg?1637139692' },
            { symbol: 'veAXIAL', logo: 'https://assets.coingecko.com/coins/images/20502/small/E5nD9pPv_400x400.jpg?1637139692' },
            { symbol: 'vePTP', logo: 'https://snowtrace.io/token/images/platypusfinance_32.png' }
        ],
        nfts: [
            { address: '0x3555cAB4b6628BeEA81d20Cb8a832A16B69671F7', dataQuery: 'listed', name: 'Snowball: Birthday' },
            { address: '0x9fF1918d212c435AD1F1734E9C4DC2DB835161Af', dataQuery: 'listed', name: 'Snowball: Holiday Hat' },
            { address: '0x16437ED3d48315865173B85A81972f42B08732E4', dataQuery: 'listed', name: 'Snowball: Claimed Holiday Hat' },
            { address: '0x446363DCe932849A48fF073295bfEAE43d4BbcdD', dataQuery: 'indexed', name: 'Cookie Game: Season 2' },
            { address: '0xeaca081BBa46dEa92AEEF05C7f420119E2e42660', dataQuery: 'indexed', name: 'Lost Worlds: Summit Mainnet Stage' },
            { address: '0xb0De7DF258e50EADcB215a7b746Ca82d6Fd1743C', dataQuery: 'indexed', name: 'Lost Worlds: Summit Monastery' },
            { address: '0xE4333defc6bd27aD6D9961E5151656e9b3276103', dataQuery: 'indexed', name: 'Lost Worlds: Summit Subnet Stage' },
            { address: '0x483d6101AAD7A20ca710b635484f0950e49F3Fe3', dataQuery: 'indexed', name: 'Lost Worlds: Summit Tent' },
            { address: '0xC876b169076437DA243324E4975Fa06300bC8f3a', dataQuery: 'indexed', name: 'Lost Worlds: Summit Plaza Aragonesa' },
            { address: '0xe36031bd96aff29e399668Fe5f347ABdF2783ce4', dataQuery: 'indexed', name: 'Lost Worlds: Summit Trader Joe Booth' },
            { address: '0xCd9199faFB70C63De5631FF217CeDf4D2358C80C', dataQuery: 'indexed', name: 'Lost Worlds: Summit Colony Booth' },
            { address: '0x48bf0611d86C0C04bEfcE35cB8fDF42FF135c0F4', dataQuery: 'indexed', name: 'Lost Worlds: Summit Crabada Booth' },
            { address: '0x71651161b45FF1b6c1C94A544ca1111Af8191292', dataQuery: 'indexed', name: 'Lost Worlds: Summit Garden' },
            { address: '0x81D2E9dF4E634D44b1750820aD92e84f124Bc851', dataQuery: 'indexed', name: 'Lost Worlds: North America' },
            { address: '0xDB52860f308CFfE8DA6EB7281f3Bb4C92C21B121', dataQuery: 'indexed', name: 'Lost Worlds: Antarctica' },
            { address: '0x848697c66a7161ED9C4B9be1f59b83Fd11524BBd', dataQuery: 'indexed', name: 'Lost Worlds: Europe' },
            { address: '0x8E3e91f8F214d49CBd6EA54B864EA626403B4DFf', dataQuery: 'indexed', name: 'Lost Worlds: Asia' },
            { address: '0x6C1cBbF47B846CB1989FD6b6cCb3013a624726bE', dataQuery: 'indexed', name: 'Lost Worlds: Africa' },
            { address: '0xA3c1145e42e78D08c8F9AB2De9C66bb180aD8Bfa', dataQuery: 'indexed', name: 'Lost Worlds: South America' },
            { address: '0xF7B6c94837d9fA6162EDA75F0909b21eE54534BB', dataQuery: 'none', name: 'Heroes Chained: MayinHara' }
        ]
    };
    /* ========================================================================================================================================================================= */
    // Cronos:
    exports.cronos_data = {
        tokens: [
            { address: '0x97749c9B61F878a880DfE312d2594AE07AEd7656', symbol: 'MMF', logo: 'https://cronoscan.com/token/images/mmfinance_32.png', decimals: 18 },
            { address: '0x83b2AC8642aE46FC2823Bc959fFEB3c1742c48B5', symbol: 'DARK', logo: 'https://cronoscan.com/token/images/darkcryptodark_32.png', decimals: 18 },
            { address: '0x9D3BBb0e988D9Fb2d55d07Fe471Be2266AD9c81c', symbol: 'SKY', logo: 'https://cronoscan.com/token/images/darkcryptofinance_32.png', decimals: 18 },
            { address: '0xE727240728C1a5f95437b8b50AFDd0EA4AE5F0c8', symbol: 'NESS', logo: 'https://cronoscan.com/token/images/darknessshare_32.png', decimals: 18 },
            { address: '0x6582C738660bf0701f05b04DcE3c4E5Fcfcda47a', symbol: 'DUSD', logo: 'https://cronoscan.com/token/images/darknessdollar_32.png', decimals: 18 },
            { address: '0xDD73dEa10ABC2Bff99c60882EC5b2B81Bb1Dc5B2', symbol: 'TONIC', logo: 'https://cronoscan.com/token/images/tectoniccro_32.png', decimals: 18 },
            { address: '0xABd380327Fe66724FFDa91A87c772FB8D00bE488', symbol: 'LIQ', logo: 'https://assets.coingecko.com/coins/images/18749/small/liq.png?1635004173', decimals: 18 },
            { address: '0xB888d8Dd1733d72681b30c00ee76BDE93ae7aa93', symbol: 'ATOM', logo: 'https://cronoscan.com/token/images/cosmos_32.png', decimals: 6 },
            { address: '0x1a8E39ae59e5556B56b76fCBA98d22c9ae557396', symbol: 'DOGE', logo: 'https://cronoscan.com/token/images/dogecoin_32.png', decimals: 8 },
            { address: '0xbED48612BC69fA1CaB67052b42a95FB30C1bcFee', symbol: 'SHIB', logo: 'https://cronoscan.com/token/images/shibatoken_32.png', decimals: 18 },
            { address: '0x2D03bECE6747ADC00E1a131BBA1469C15fD11e03', symbol: 'VVS', logo: 'https://cronoscan.com/token/images/vvsfinance_32.png', decimals: 18 },
            { address: '0xadbd1231fb360047525BEdF962581F3eee7b49fe', symbol: 'CRONA', logo: 'https://cronoscan.com/token/images/cronaswap_32.png', decimals: 18 },
            { address: '0x66e428c3f67a68878562e79A0234c1F83c208770', symbol: 'USDT', logo: 'https://cronoscan.com/token/images/tetherusdt_32.png', decimals: 6 },
            { address: '0xc21223249CA28397B4B6541dfFaEcC539BfF0c59', symbol: 'USDC', logo: 'https://cronoscan.com/token/images/usdcbttc_32.png', decimals: 6 },
            { address: '0x062E66477Faf219F25D27dCED647BF57C3107d52', symbol: 'WBTC', logo: 'https://cronoscan.com/token/images/wbtc_32.png', decimals: 8 },
            { address: '0xe44Fd7fCb2b1581822D0c862B68222998a0c299a', symbol: 'WETH', logo: 'https://cronoscan.com/token/images/weth_32.png', decimals: 18 },
            { address: '0x57d06bB1e3B60C875cD3A4445a53217F9B44d390', symbol: 'PHNX', logo: 'https://cronoscan.com/token/images/phenixfinance_32.png', decimals: 18 },
            { address: '0xF2001B145b43032AAF5Ee2884e456CCd805F677D', symbol: 'DAI', logo: 'https://cronoscan.com/token/images/MCDDai_32.png', decimals: 18 },
            { address: '0xe6801928061CDbE32AC5AD0634427E140EFd05F9', symbol: 'BIFI', logo: 'https://assets.coingecko.com/coins/images/12704/small/token.png?1601876182', decimals: 18 }
        ],
        logos: [
            { symbol: 'CRO', logo: 'https://cronoscan.com/token/images/cryptocom_32.png' }
        ],
        nfts: []
    };
    /* ========================================================================================================================================================================= */
    // Optimism:
    exports.op_data = {
        tokens: [
            { address: '0x94b008aA00579c1307B0EF2c499aD98a8ce58e58', symbol: 'USDT', logo: 'https://optimistic.etherscan.io/token/images/tether_32.png', decimals: 6 },
            { address: '0x7F5c764cBc14f9669B88837ca1490cCa17c31607', symbol: 'USDC', logo: 'https://optimistic.etherscan.io/token/images/usdc_32.png', decimals: 6 },
            { address: '0x68f180fcCe6836688e9084f035309E29Bf0A2095', symbol: 'WBTC', logo: 'https://optimistic.etherscan.io/token/images/wbtc_28.png?v=1', decimals: 8 },
            { address: '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1', symbol: 'DAI', logo: 'https://optimistic.etherscan.io/token/images/MCDDai_32.png', decimals: 18 },
            { address: '0x350a791Bfc2C21F9Ed5d10980Dad2e2638ffa7f6', symbol: 'LINK', logo: 'https://optimistic.etherscan.io/token/images/chainlink_32.png', decimals: 18 },
            { address: '0x8700dAec35aF8Ff88c16BdF0418774CB3D7599B4', symbol: 'SNX', logo: 'https://optimistic.etherscan.io/token/images/SynthetixSNX_32.png', decimals: 18 },
            { address: '0x4200000000000000000000000000000000000006', symbol: 'WETH', logo: 'https://optimistic.etherscan.io/token/images/weth_28.png', decimals: 18 },
            { address: '0x4200000000000000000000000000000000000042', symbol: 'OP', logo: 'https://optimistic.etherscan.io/token/images/optimism_32.png', decimals: 18 },
            { address: '0xFA436399d0458Dbe8aB890c3441256E3E09022a8', symbol: 'ZIP', logo: 'https://optimistic.etherscan.io/token/images/zipswap_32.png', decimals: 18 }
        ],
        logos: [
            { symbol: 'ETH', logo: 'https://bscscan.com/token/images/ethereum_32.png' },
            { symbol: 'PTaOptUSDC', logo: 'https://raw.githubusercontent.com/pooltogether/pooltogether-react-components/08439a1fcdf661d89211d72815eec73b26d1bc1f/src/assets/Tokens/ptausdc.png' }
        ],
        nfts: [
            { address: '0xfb3999711d4f309F6B71504268F79b3fD578DA6F', dataQuery: 'none', name: 'Merge Bears: Consensus Layer Bear' },
            { address: '0x22Cd0e2680f4B9aE140E3b9AbFA3463532e290Ff', dataQuery: 'none', name: 'Merge Bears: Execution Layer Bear' },
            { address: '0x63D29F9c28Ce781DacB284A99b1239A25E3e2159', dataQuery: 'none', name: 'Merge Bears: Merge Bear' },
            { address: '0xfA14e1157F35E1dAD95dC3F822A9d18c40e360E2', dataQuery: 'indexed', name: 'Optimism Quests: Season 1' }
        ]
    };
    /* ========================================================================================================================================================================= */
    // Arbitrum:
    exports.arb_data = {
        tokens: [
            { address: '0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9', symbol: 'USDT', logo: 'https://arbiscan.io/token/images/tether_32.png', decimals: 6 },
            { address: '0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8', symbol: 'USDC', logo: 'https://arbiscan.io/token/images/centre-usdc_28.png', decimals: 6 },
            { address: '0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f', symbol: 'WBTC', logo: 'https://arbiscan.io/token/images/wbtc_28.png', decimals: 8 },
            { address: '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1', symbol: 'DAI', logo: 'https://arbiscan.io/token/images/MCDDai_32.png', decimals: 18 },
            { address: '0xf97f4df75117a78c1A5a0DBb814Af92458539FB4', symbol: 'LINK', logo: 'https://arbiscan.io/token/images/chainlink_32.png?v=1', decimals: 18 },
            { address: '0xFa7F8980b0f1E64A2062791cc3b0871572f1F7f0', symbol: 'UNI', logo: 'https://arbiscan.io/token/images/uniswap_32.png', decimals: 18 },
            { address: '0xFEa7a6a0B346362BF88A9e4A88416B77a57D6c2A', symbol: 'MIM', logo: 'https://arbiscan.io/token/images/mimstablecoin_32.png', decimals: 18 },
            { address: '0x17FC002b466eEc40DaE837Fc4bE5c67993ddBd6F', symbol: 'FRAX', logo: 'https://arbiscan.io/token/images/frax_32.png', decimals: 18 },
            { address: '0x23A941036Ae778Ac51Ab04CEa08Ed6e2FE103614', symbol: 'GRT', logo: 'https://arbiscan.io/token/images/TheGraph_32.png', decimals: 18 },
            { address: '0x11cDb42B0EB46D95f990BeDD4695A6e3fA034978', symbol: 'CRV', logo: 'https://arbiscan.io/token/images/Curvefi_32.png', decimals: 18 },
            { address: '0xd4d42F0b6DEF4CE0383636770eF773390d85c61A', symbol: 'SUSHI', logo: 'https://arbiscan.io/token/images/sushitoken_32.png', decimals: 18 },
            { address: '0xfc5A1A6EB076a2C7aD06eD22C90d7E710E35ad0a', symbol: 'GMX', logo: 'https://arbiscan.io/token/images/gmxarbi_32.png', decimals: 18 },
            { address: '0x040d1EdC9569d4Bab2D15287Dc5A4F10F56a56B8', symbol: 'BAL', logo: 'https://arbiscan.io/token/images/Balancer_32.png', decimals: 18 },
            { address: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', symbol: 'WETH', logo: 'https://arbiscan.io/token/images/weth_28.png', decimals: 18 }
        ],
        logos: [
            { symbol: 'ETH', logo: 'https://bscscan.com/token/images/ethereum_32.png' }
        ],
        nfts: [
            { address: '0xfAe39eC09730CA0F14262A636D2d7C5539353752', dataQuery: 'indexed', name: 'Arbitrum Oddysey' }
        ]
    };
    });

    var ethereum_multicall_1 = /*@__PURE__*/getAugmentedNamespace(esm$1);

    var functions = createCommonjsModule$4(function (module, exports) {
    var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fetchData = exports.parseBN = exports.getGasEstimates = exports.getTokenLogo = exports.getChainTokenData = exports.getTokens = exports.getAllTokens = exports.addXToken = exports.addDebtToken = exports.addLPToken = exports.addToken = exports.addNativeToken = exports.getWalletTXCount = exports.isAddress = exports.getWalletNFTBalance = exports.getWalletTokenBalance = exports.getWalletNativeTokenBalance = exports.getAllBalances = exports.getAllProjectBalances = exports.getProjectBalance = exports.getWalletBalance = exports.multicallComplexQuery = exports.multicallOneContractQuery = exports.multicallOneMethodQuery = exports.multicallQuery = exports.queryBlocks = exports.query = exports.updateChainProviders = exports.ignoredErrors = exports.zero = exports.defaultAddress = exports.defaultTokenLogo = exports.providers = void 0;
    // Imports:
    const axios_1 = __importDefault(axios);
    const project_lib_1 = __importDefault(projectLib);









    // Initializations:
    exports.providers = { eth: [], bsc: [], poly: [], ftm: [], avax: [], cronos: [], op: [], arb: [] };
    exports.defaultTokenLogo = 'https://cdn.jsdelivr.net/gh/atomiclabs/cryptocurrency-icons@d5c68edec1f5eaec59ac77ff2b48144679cebca1/32/icon/generic.png';
    exports.defaultAddress = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee';
    exports.zero = '0x0000000000000000000000000000000000000000';
    const maxQueryRetries = 3;
    const estimatedL1RollupGas = 5000;
    const gasAmountEstimates = [
        { type: 'nativeTransfer', gas: 21000 },
        { type: 'tokenTransfer', gas: 65000 },
        { type: 'tokenSwap', gas: 150000 },
        { type: 'nftTransfer', gas: 85000 }
    ];
    // Ignored Errors On Blockchain Queries:
    exports.ignoredErrors = [
        { chain: 'poly', address: '0x8aaa5e259f74c8114e0a471d9f2adfc66bfe09ed' },
        { chain: 'poly', address: '0x9dd12421c637689c3fc6e661c9e2f02c2f61b3eb' } // QuickSwap Dual Rewards Registry
    ];
    /* ========================================================================================================================================================================= */
    /**
     * Function to update ethers providers for a chain.
     */
    const updateChainProviders = (chain) => {
        exports.providers[chain] = chains.chains[chain].rpcs.map(url => new ethers.ethers.providers.StaticJsonRpcProvider(url, chains.chains[chain].id));
    };
    exports.updateChainProviders = updateChainProviders;
    /**
     * Function to initialize ethers providers for every chain.
     */
    const initProviders = () => {
        for (let stringChain in exports.providers) {
            let chain = stringChain;
            (0, exports.updateChainProviders)(chain);
        }
    };
    // Initializing Ethers Providers:
    initProviders();
    /* ========================================================================================================================================================================= */
    /**
     * Function to make blockchain queries.
     * @param chain The blockchain to target for this query.
     * @param address The contract's address to query.
     * @param abi The contract's ABI.
     * @param method The method to be called from the contract.
     * @param args Any arguments to pass to the method called.
     * @param block The block height from which to query info from. (Optional)
     * @returns Query results.
     */
    const query = async (chain, address, abi, method, args, block) => {
        let result = undefined;
        let errors = 0;
        let rpcID = 0;
        while (result === undefined && errors < maxQueryRetries) {
            try {
                let contract = new ethers.ethers.Contract(address, abi, exports.providers[chain][rpcID]);
                if (block) {
                    result = await contract[method](...args, { blockTag: block });
                }
                else {
                    result = await contract[method](...args);
                }
            }
            catch (_a) {
                if (++rpcID >= chains.chains[chain].rpcs.length) {
                    if (++errors >= maxQueryRetries) {
                        if (!exports.ignoredErrors.find(i => i.chain === chain && i.address === address.toLowerCase())) {
                            throw new error.WeaverError(chain, null, `Querying ${method}(${args}) on ${address}`);
                        }
                    }
                    else {
                        rpcID = 0;
                    }
                }
            }
        }
        return result;
    };
    exports.query = query;
    /* ========================================================================================================================================================================= */
    /**
     * Function to query blocks for events on a given contract.
     * @param chain The blockchain to target for this query.
     * @param address The contract's address to query.
     * @param abi The contract's ABI.
     * @param event The event name to query for.
     * @param querySize The limit to how many blocks should be queried in each batch.
     * @param args Any arguments to pass to the event filter.
     * @param options Extra info such as starting block, ending block or choosing whether to display logs or not. (Optional)
     * @returns Array of events.
     */
    const queryBlocks = async (chain, address, abi, event, querySize, args, options) => {
        const results = [];
        const startBlock = (options === null || options === void 0 ? void 0 : options.startBlock) || 1;
        const endBlock = (options === null || options === void 0 ? void 0 : options.endBlock) || await exports.providers[chain][0].getBlockNumber();
        if (endBlock > startBlock) {
            let lastQueriedBlock = startBlock;
            while (++lastQueriedBlock < endBlock) {
                let targetBlock = Math.min(lastQueriedBlock + querySize, endBlock);
                let result = undefined;
                let errors = 0;
                let rpcID = 0;
                (options === null || options === void 0 ? void 0 : options.logs) && console.info(`Querying ${event} events on blocks ${lastQueriedBlock} to ${targetBlock}...`);
                while (result === undefined) {
                    try {
                        let contract = new ethers.ethers.Contract(address, abi, exports.providers[chain][rpcID]);
                        let eventFilter = contract.filters[event](...args);
                        result = await contract.queryFilter(eventFilter, lastQueriedBlock, targetBlock);
                        (options === null || options === void 0 ? void 0 : options.logs) && result.length > 0 && console.info(`Found ${result.length} ${event} events.`);
                    }
                    catch (_a) {
                        if (++rpcID >= chains.chains[chain].rpcs.length) {
                            if (++errors >= maxQueryRetries) {
                                throw new error.WeaverError(chain, null, `Querying blocks ${lastQueriedBlock} to ${targetBlock} for events on ${address}`);
                            }
                            else {
                                rpcID = 0;
                            }
                        }
                        (options === null || options === void 0 ? void 0 : options.logs) && console.info(`Retrying query...`);
                    }
                }
                results.push(...result);
                lastQueriedBlock = targetBlock;
            }
        }
        return results;
    };
    exports.queryBlocks = queryBlocks;
    /* ========================================================================================================================================================================= */
    /**
     * Function to make multicall blockchain queries (multiple method calls in one query).
     * @param chain The blockchain to target for this query.
     * @param queries The queries to be executed.
     * @returns Query results for all given queries.
     * @see {@link multicallOneMethodQuery}, {@link multicallOneContractQuery} and {@link multicallComplexQuery} for simpler use cases.
     */
    const multicallQuery = async (chain, queries) => {
        try {
            let multicall = new ethereum_multicall_1.Multicall({ ethersProvider: exports.providers[chain][0], tryAggregate: true, multicallCustomContractAddress: chains.chains[chain].multicall });
            let results = await multicall.call(queries);
            return results;
        }
        catch (err) {
            throw new error.WeaverError(chain, null, `Invalid multicall query`, err);
        }
    };
    exports.multicallQuery = multicallQuery;
    /* ========================================================================================================================================================================= */
    /**
     * Function to make multicall blockchain queries with a singular method call to multiple contracts.
     * @param chain The blockchain to target for this query.
     * @param contracts The contracts to query.
     * @param abi The ABI needed for the given query.
     * @param methodName The method to call on each contract.
     * @param methodParameters Any arguments to pass to the method called.
     * @returns Query results for each contract.
     */
    const multicallOneMethodQuery = async (chain, contracts, abi, methodName, methodParameters) => {
        let results = {};
        let queries = [];
        let calls = [{ reference: '', methodName, methodParameters }];
        contracts.forEach(contract => {
            queries.push({ reference: contract, contractAddress: contract, abi, calls });
        });
        let multicallQueryResults = (await (0, exports.multicallQuery)(chain, queries)).results;
        contracts.forEach(contract => {
            let contractResults = multicallQueryResults[contract].callsReturnContext[0];
            if (contractResults && contractResults.success) {
                results[contract] = contractResults.returnValues;
            }
        });
        return results;
    };
    exports.multicallOneMethodQuery = multicallOneMethodQuery;
    /* ========================================================================================================================================================================= */
    /**
     * Function to make multicall blockchain queries with many method calls to a single contract.
     * @param chain The blockchain to target for this query.
     * @param contractAddress The contract to query.
     * @param abi The aggregated ABI needed for all given queries.
     * @param calls All method calls to query the target contract.
     * @returns Query results for each method call.
     */
    const multicallOneContractQuery = async (chain, contractAddress, abi, calls) => {
        let results = {};
        let query = { reference: 'oneContractQuery', contractAddress, abi, calls };
        let multicallQueryResults = (await (0, exports.multicallQuery)(chain, [query])).results;
        multicallQueryResults['oneContractQuery'].callsReturnContext.forEach(result => {
            if (result.success) {
                results[result.reference] = result.returnValues;
            }
        });
        return results;
    };
    exports.multicallOneContractQuery = multicallOneContractQuery;
    /* ========================================================================================================================================================================= */
    /**
     * Function to make multicall blockchain queries with many method calls to many contracts.
     * @param chain The blockchain to target for this query.
     * @param contracts The contracts to query.
     * @param abi The aggregated ABI needed for all given queries.
     * @param calls All method calls to query the target contracts.
     * @returns Query results for each method call, for each contract.
     */
    const multicallComplexQuery = async (chain, contracts, abi, calls) => {
        let results = {};
        let queries = [];
        contracts.forEach(contract => {
            queries.push({ reference: contract, contractAddress: contract, abi, calls });
        });
        let multicallQueryResults = (await (0, exports.multicallQuery)(chain, queries)).results;
        contracts.forEach(contract => {
            let contractResults = multicallQueryResults[contract].callsReturnContext;
            let queryResults = {};
            contractResults.forEach(result => {
                queryResults[result.reference] = result.returnValues;
            });
            results[contract] = queryResults;
        });
        return results;
    };
    exports.multicallComplexQuery = multicallComplexQuery;
    /* ========================================================================================================================================================================= */
    /**
     * Function to fetch a wallet's token balances.
     * @param chain The blockchain to query info from.
     * @param wallet The wallet to query balances for.
     * @returns All native and token balances for the specified wallet.
     */
    const getWalletBalance = async (chain, wallet) => {
        let walletBalance = [];
        walletBalance.push(...(await (0, exports.getWalletNativeTokenBalance)(chain, wallet)));
        walletBalance.push(...(await (0, exports.getWalletTokenBalance)(chain, wallet)));
        return walletBalance;
    };
    exports.getWalletBalance = getWalletBalance;
    /* ========================================================================================================================================================================= */
    /**
     * Function to fetch project balances for a given wallet.
     * @param chain The blockchain to query info from.
     * @param wallet The wallet to query balances for.
     * @param project The project/dapp to query for balances in.
     * @returns A wallet's balance on the specified project/dapp.
     */
    const getProjectBalance = async (chain, wallet, project) => {
        let projectBalance = [];
        if (projects.projects[chain].includes(project)) {
            let dapp = project_lib_1.default[chain][project];
            let balance = await dapp.get(wallet);
            projectBalance.push(...balance);
        }
        else {
            throw new error.WeaverError(chain, null, `Unknown project: ${project}`);
        }
        return projectBalance;
    };
    exports.getProjectBalance = getProjectBalance;
    /* ========================================================================================================================================================================= */
    /**
     * Function to fetch all project balances for a given wallet.
     * @param chain The blockchain to query info from.
     * @param wallet The wallet to query balances for.
     * @returns A wallet's balance on all projects/dapps on the specified chain.
     */
    const getAllProjectBalances = async (chain, wallet) => {
        let projectBalances = [];
        let promises = projects.projects[chain].map(project => (async () => {
            let projectBalance = await (0, exports.getProjectBalance)(chain, wallet, project);
            projectBalances.push(...projectBalance);
        })());
        await Promise.all(promises);
        return projectBalances;
    };
    exports.getAllProjectBalances = getAllProjectBalances;
    /* ========================================================================================================================================================================= */
    /**
     * Function to fetch all balances for a given wallet, including in their wallets and in dapps/projects.
     * @param wallet The wallet to query balances for.
     * @returns A wallet's token, project and NFT balances.
     * @see {@link getWalletBalance}, {@link getProjectBalance} and {@link getWalletNFTBalance} for more specific (and faster) queries.
     */
    const getAllBalances = async (wallet) => {
        let balances = [];
        let promises = Object.keys(chains.chains).map(stringChain => (async () => {
            let chain = stringChain;
            let nativeTokenBalance = await (0, exports.getWalletNativeTokenBalance)(chain, wallet);
            if (nativeTokenBalance.length > 0) {
                let tokenBalance = await (0, exports.getWalletTokenBalance)(chain, wallet);
                let projectBalance = await (0, exports.getAllProjectBalances)(chain, wallet);
                let nftBalance = await (0, exports.getWalletNFTBalance)(chain, wallet);
                balances.push(...nativeTokenBalance, ...tokenBalance, ...projectBalance, ...nftBalance);
            }
        })());
        await Promise.all(promises);
        return balances;
    };
    exports.getAllBalances = getAllBalances;
    /* ========================================================================================================================================================================= */
    /**
     * Function to get a wallet's native token balance.
     * @param chain The blockchain to query info from.
     * @param wallet The wallet to query native balance for.
     * @returns An array of NativeToken objects if any balance is found.
     */
    const getWalletNativeTokenBalance = async (chain, wallet) => {
        let balance = undefined;
        let errors = 0;
        let rpcID = 0;
        while (balance === undefined && errors < maxQueryRetries) {
            try {
                balance = parseInt((await exports.providers[chain][rpcID].getBalance(wallet)).toString());
            }
            catch (_a) {
                if (++rpcID >= chains.chains[chain].rpcs.length) {
                    errors++;
                    rpcID = 0;
                }
            }
        }
        if (balance && balance > 0) {
            let newToken = await (0, exports.addNativeToken)(chain, balance, wallet);
            return [newToken];
        }
        return [];
    };
    exports.getWalletNativeTokenBalance = getWalletNativeTokenBalance;
    /* ========================================================================================================================================================================= */
    /**
     * Function to get a wallet's token balance.
     * @param chain The blockchain to query info from.
     * @param wallet The wallet to query token balances for.
     * @returns An array of Token objects if any balances are found.
     */
    const getWalletTokenBalance = async (chain, wallet) => {
        let tokens = [];
        let data = (0, exports.getChainTokenData)(chain);
        if (data) {
            let addresses = data.tokens.map(token => token.address);
            let multicallResults = await (0, exports.multicallOneMethodQuery)(chain, addresses, ABIs.minABI, 'balanceOf', [wallet]);
            let promises = data.tokens.map(token => (async () => {
                let balanceResults = multicallResults[token.address];
                if (balanceResults) {
                    let rawBalance = (0, exports.parseBN)(balanceResults[0]);
                    if (rawBalance > 0) {
                        let newToken = await addTrackedToken(chain, 'wallet', 'none', token, rawBalance, wallet);
                        tokens.push(newToken);
                    }
                }
            })());
            await Promise.all(promises);
        }
        return tokens;
    };
    exports.getWalletTokenBalance = getWalletTokenBalance;
    /* ========================================================================================================================================================================= */
    /**
     * Function to get a wallet's NFT balance.
     * @param chain The blockchain to query info from.
     * @param wallet The wallet to query NFT balances for.
     * @returns An array of NFT objects if any balances are found.
     */
    const getWalletNFTBalance = async (chain, wallet) => {
        let nfts = [];
        let data = (0, exports.getChainTokenData)(chain);
        if (data) {
            let addresses = data.nfts.map(nft => nft.address);
            let multicallResults = await (0, exports.multicallOneMethodQuery)(chain, addresses, ABIs.nftABI, 'balanceOf', [wallet]);
            let promises = data.nfts.map(nft => (async () => {
                let balanceResults = multicallResults[nft.address];
                if (balanceResults) {
                    let balance = (0, exports.parseBN)(balanceResults[0]);
                    if (balance > 0) {
                        let newNFTs = await addTrackedNFTs(chain, 'wallet', 'none', nft, balance, wallet);
                        nfts.push(...newNFTs);
                    }
                }
            })());
            await Promise.all(promises);
        }
        return nfts;
    };
    exports.getWalletNFTBalance = getWalletNFTBalance;
    /* ========================================================================================================================================================================= */
    /**
     * Function to check if a hash corresponds to a valid wallet/contract address.
     * @param address The hash to check for validity.
     * @returns True or false, depending on if the hash is a valid address or not.
     */
    const isAddress = (address) => {
        return ethers.ethers.utils.isAddress(address);
    };
    exports.isAddress = isAddress;
    /* ========================================================================================================================================================================= */
    /**
     * Function to get a wallet's transaction count.
     * @param chain The blockchain to query info from.
     * @param wallet The wallet to query transaction count for.
     * @returns A number of transactions.
     */
    const getWalletTXCount = async (chain, wallet) => {
        let txs = undefined;
        let errors = 0;
        let rpcID = 0;
        while (txs === undefined && errors < maxQueryRetries) {
            try {
                txs = parseInt((await exports.providers[chain][rpcID].getTransactionCount(wallet)).toString());
            }
            catch (_a) {
                if (++rpcID >= chains.chains[chain].rpcs.length) {
                    errors++;
                    rpcID = 0;
                }
            }
        }
        if (txs) {
            return txs;
        }
        else {
            return 0;
        }
    };
    exports.getWalletTXCount = getWalletTXCount;
    /* ========================================================================================================================================================================= */
    /**
     * Function to get all relevant native token info.
     * @param chain The blockchain to query info from.
     * @param rawBalance The balance to be assigned to the native token's object, with decimals.
     * @param owner The native token owner's wallet address.
     * @returns A NativeToken object with all its information.
     */
    const addNativeToken = async (chain, rawBalance, owner) => {
        // Initializing Token Values:
        let type = 'nativeToken';
        let location = 'wallet';
        let status = 'none';
        let address = exports.defaultAddress;
        let decimals = 18;
        let balance = rawBalance / (10 ** decimals);
        let price = await (0, require$$0$1.getTokenPrice)(chain, exports.defaultAddress, decimals);
        let symbol = getNativeTokenSymbol(chain);
        // Finding Token Logo:
        let logo = (0, exports.getTokenLogo)(chain, symbol);
        return { type, chain, location, status, owner, symbol, address, balance, price, logo };
    };
    exports.addNativeToken = addNativeToken;
    /* ========================================================================================================================================================================= */
    /**
     * Function to get all relevant token info.
     * @param chain The blockchain to query info from.
     * @param location The current location of the token, either in a wallet or in some project's contract.
     * @param status The current status of the token.
     * @param address The token's address.
     * @param rawBalance The balance to be assigned to the token's object, with decimals.
     * @param owner The token owner's wallet address.
     * @param contract The contract interacted with to generate this deposit, stake, etc. (Optional)
     * @returns A Token object with all its information.
     */
    const addToken = async (chain, location, status, address, rawBalance, owner, contract) => {
        // Initializing Token Values:
        let type = 'token';
        let symbol = '';
        let decimals = 18;
        let logo;
        // Initializing Multicall:
        let calls = [
            { reference: 'symbol', methodName: 'symbol', methodParameters: [] },
            { reference: 'decimals', methodName: 'decimals', methodParameters: [] }
        ];
        // Finding Token Info:
        if (address.toLowerCase() === exports.defaultAddress) {
            symbol = getNativeTokenSymbol(chain);
            logo = (0, exports.getTokenLogo)(chain, symbol);
        }
        else {
            let token = getTrackedTokenInfo(chain, address);
            if (token) {
                symbol = token.symbol;
                decimals = token.decimals;
                logo = token.logo;
            }
            else {
                let multicallResults = await (0, exports.multicallOneContractQuery)(chain, address, ABIs.minABI, calls);
                symbol = multicallResults['symbol'][0];
                decimals = multicallResults['decimals'][0];
                logo = (0, exports.getTokenLogo)(chain, symbol);
            }
        }
        // Finding Missing Token Info:
        let balance = rawBalance / (10 ** decimals);
        let price = await (0, require$$0$1.getTokenPrice)(chain, address, decimals);
        return { type, chain, location, status, owner, symbol, address, balance, price, logo, contract };
    };
    exports.addToken = addToken;
    /* ========================================================================================================================================================================= */
    /**
     * Function to get all relevant liquidity pool token info.
     * @param chain The blockchain to query info from.
     * @param location The current location of the token, either in a wallet or in some project's contract.
     * @param status The current status of the token.
     * @param address The token's address.
     * @param rawBalance The balance to be assigned to the token's object, with decimals.
     * @param owner The token owner's wallet address.
     * @param contract The contract interacted with to generate this deposit, liquidity, etc. (Optional)
     * @returns A LPToken object with all its information.
     */
    const addLPToken = async (chain, location, status, address, rawBalance, owner, contract) => {
        // Initializing Token Values:
        let type = 'lpToken';
        let symbol = '';
        let decimals = 18;
        let symbol0 = '';
        let symbol1 = '';
        let decimals0 = 18;
        let decimals1 = 18;
        // Initializing Multicalls:
        let lpCalls = [
            { reference: 'symbol', methodName: 'symbol', methodParameters: [] },
            { reference: 'decimals', methodName: 'decimals', methodParameters: [] },
            { reference: 'reserves', methodName: 'getReserves', methodParameters: [] },
            { reference: 'totalSupply', methodName: 'totalSupply', methodParameters: [] },
            { reference: 'token0', methodName: 'token0', methodParameters: [] },
            { reference: 'token1', methodName: 'token1', methodParameters: [] }
        ];
        let tokenCalls = [
            { reference: 'symbol', methodName: 'symbol', methodParameters: [] },
            { reference: 'decimals', methodName: 'decimals', methodParameters: [] }
        ];
        // Finding LP Token Info:
        let lpMulticallResults = await (0, exports.multicallOneContractQuery)(chain, address, ABIs.lpABI, lpCalls);
        symbol = lpMulticallResults['symbol'][0];
        decimals = lpMulticallResults['decimals'][0];
        let balance = rawBalance / (10 ** decimals);
        let lpTokenReserves = lpMulticallResults['reserves'];
        let lpTokenSupply = (0, exports.parseBN)(lpMulticallResults['totalSupply'][0]) / (10 ** decimals);
        let address0 = lpMulticallResults['token0'][0];
        let address1 = lpMulticallResults['token1'][0];
        let trackedToken0 = getTrackedTokenInfo(chain, address0);
        let trackedToken1 = getTrackedTokenInfo(chain, address1);
        if (trackedToken0) {
            symbol0 = trackedToken0.symbol;
            decimals0 = trackedToken0.decimals;
        }
        else {
            let tokenMulticallResults = await (0, exports.multicallOneContractQuery)(chain, address0, ABIs.minABI, tokenCalls);
            symbol0 = tokenMulticallResults['symbol'][0];
            decimals0 = tokenMulticallResults['decimals'][0];
        }
        if (trackedToken1) {
            symbol1 = trackedToken1.symbol;
            decimals1 = trackedToken1.decimals;
        }
        else {
            let tokenMulticallResults = await (0, exports.multicallOneContractQuery)(chain, address1, ABIs.minABI, tokenCalls);
            symbol1 = tokenMulticallResults['symbol'][0];
            decimals1 = tokenMulticallResults['decimals'][0];
        }
        let supply0 = (0, exports.parseBN)(lpTokenReserves[0]) / (10 ** decimals0);
        let supply1 = (0, exports.parseBN)(lpTokenReserves[1]) / (10 ** decimals1);
        // First Paired Token:
        let token0 = {
            symbol: symbol0,
            address: address0,
            balance: (supply0 * (balance / lpTokenSupply)),
            price: await (0, require$$0$1.getTokenPrice)(chain, address0, decimals0),
            logo: (0, exports.getTokenLogo)(chain, symbol0)
        };
        // Second Paired Token:
        let token1 = {
            symbol: symbol1,
            address: address1,
            balance: (supply1 * (balance / lpTokenSupply)),
            price: await (0, require$$0$1.getTokenPrice)(chain, address1, decimals1),
            logo: (0, exports.getTokenLogo)(chain, symbol1)
        };
        return { type, chain, location, status, owner, symbol, address, balance, token0, token1, contract };
    };
    exports.addLPToken = addLPToken;
    /* ========================================================================================================================================================================= */
    /**
     * Function to get all relevant debt token info.
     * @param chain The blockchain to query info from.
     * @param location The current location of the token, either in a wallet or in some project's contract.
     * @param address The token's address.
     * @param rawBalance The balance to be assigned to the token's object, with decimals.
     * @param owner The token owner's wallet address.
     * @param contract The contract interacted with to generate this debt. (Optional)
     * @returns A DebtToken object with all its information.
     */
    const addDebtToken = async (chain, location, address, rawBalance, owner, contract) => {
        // Initializing Token Values:
        let type = 'debt';
        let status = 'borrowed';
        let symbol = '';
        let decimals = 18;
        let logo;
        // Initializing Multicall:
        let calls = [
            { reference: 'symbol', methodName: 'symbol', methodParameters: [] },
            { reference: 'decimals', methodName: 'decimals', methodParameters: [] }
        ];
        // Finding Token Info:
        if (address.toLowerCase() === exports.defaultAddress) {
            symbol = getNativeTokenSymbol(chain);
            logo = (0, exports.getTokenLogo)(chain, symbol);
        }
        else {
            let token = getTrackedTokenInfo(chain, address);
            if (token) {
                symbol = token.symbol;
                decimals = token.decimals;
                logo = token.logo;
            }
            else {
                let multicallResults = await (0, exports.multicallOneContractQuery)(chain, address, ABIs.minABI, calls);
                symbol = multicallResults['symbol'][0];
                decimals = multicallResults['decimals'][0];
                logo = (0, exports.getTokenLogo)(chain, symbol);
            }
        }
        // Finding Missing Token Info:
        let balance = rawBalance / (10 ** decimals);
        let price = await (0, require$$0$1.getTokenPrice)(chain, address, decimals);
        return { type, chain, location, status, owner, symbol, address, balance, price, logo, contract };
    };
    exports.addDebtToken = addDebtToken;
    /* ========================================================================================================================================================================= */
    /**
     * Function to get all relevant derivative/composite token info (example: xJOE).
     * @param chain The blockchain to query info from.
     * @param location The current location of the token, either in a wallet or in some project's contract.
     * @param status The current status of the token.
     * @param address The token's address.
     * @param rawBalance The balance to be assigned to the token's object, with decimals.
     * @param owner The token owner's wallet address.
     * @param underlyingAddress The underlying token's address (the token this token is built upon).
     * @param underlyingRawBalance The equivalent balance of the underlying token this xToken represents.
     * @param contract The contract interacted with to generate this deposit, stake, etc. (Optional)
     * @returns A XToken object with all its information.
     */
    const addXToken = async (chain, location, status, address, rawBalance, owner, underlyingAddress, underlyingRawBalance, contract) => {
        // Initializing Token Values:
        let type = 'xToken';
        let symbol = '';
        let decimals = 18;
        let underlyingSymbol = '';
        let underlyingDecimals = 18;
        let underlyingLogo;
        // Initializing Multicall:
        let calls = [
            { reference: 'symbol', methodName: 'symbol', methodParameters: [] },
            { reference: 'decimals', methodName: 'decimals', methodParameters: [] }
        ];
        // Finding Token Info:
        let multicallResults = await (0, exports.multicallOneContractQuery)(chain, address, ABIs.minABI, calls);
        symbol = multicallResults['symbol'][0];
        decimals = multicallResults['decimals'] ? multicallResults['decimals'][0] : 18;
        let balance = rawBalance / (10 ** decimals);
        let logo = (0, exports.getTokenLogo)(chain, symbol);
        // Finding Underlying Token Info:
        let token = getTrackedTokenInfo(chain, address);
        if (token) {
            underlyingSymbol = token.symbol;
            underlyingDecimals = token.decimals;
            underlyingLogo = token.logo;
        }
        else {
            let underlyingMulticallResults = await (0, exports.multicallOneContractQuery)(chain, underlyingAddress, ABIs.minABI, calls);
            underlyingSymbol = underlyingMulticallResults['symbol'][0];
            underlyingDecimals = underlyingMulticallResults['decimals'][0];
            underlyingLogo = (0, exports.getTokenLogo)(chain, underlyingSymbol);
        }
        // Underlying Token:
        let underlyingToken = {
            symbol: underlyingSymbol,
            address: underlyingAddress,
            balance: underlyingRawBalance / (10 ** underlyingDecimals),
            price: await (0, require$$0$1.getTokenPrice)(chain, underlyingAddress, underlyingDecimals),
            logo: underlyingLogo
        };
        return { type, chain, location, status, owner, symbol, address, balance, logo, underlyingToken, contract };
    };
    exports.addXToken = addXToken;
    /* ========================================================================================================================================================================= */
    /**
     * Function to get a list of all tracked tokens on all chains.
     * @returns A record of arrays of tracked tokens on every chain.
     */
    const getAllTokens = () => {
        let tokens = { eth: [], bsc: [], poly: [], ftm: [], avax: [], cronos: [], op: [], arb: [] };
        Object.keys(tokens).forEach(stringChain => {
            let chain = stringChain;
            tokens[chain].push(...(0, exports.getTokens)(chain));
        });
        return tokens;
    };
    exports.getAllTokens = getAllTokens;
    /* ========================================================================================================================================================================= */
    /**
     * Function to get a list of all tracked tokens on any given chain.
     * @param chain The chain to fetch tracked tokens from.
     * @returns An array of all tracked tokens in the given chain.
     */
    const getTokens = (chain) => {
        let chainTokenData = (0, exports.getChainTokenData)(chain);
        if (chainTokenData) {
            return chainTokenData.tokens;
        }
        else {
            return [];
        }
    };
    exports.getTokens = getTokens;
    /* ========================================================================================================================================================================= */
    /**
     * Helper function to get a given chains' token data.
     * @param chain The chain to fetch data from.
     * @returns The given chain's token data.
     */
    const getChainTokenData = (chain) => {
        switch (chain) {
            case 'eth':
                return tokens.eth_data;
            case 'bsc':
                return tokens.bsc_data;
            case 'poly':
                return tokens.poly_data;
            case 'ftm':
                return tokens.ftm_data;
            case 'avax':
                return tokens.avax_data;
            case 'cronos':
                return tokens.cronos_data;
            case 'op':
                return tokens.op_data;
            case 'arb':
                return tokens.arb_data;
            default:
                return undefined;
        }
    };
    exports.getChainTokenData = getChainTokenData;
    /* ========================================================================================================================================================================= */
    /**
     * Function to get a token's logo.
     * @param chain The chain to fetch data from.
     * @param symbol The token's symbol.
     * @returns The token logo if available, else a generic coin logo.
     */
    const getTokenLogo = (chain, symbol) => {
        // Initializing Default Token Logo:
        let logo = exports.defaultTokenLogo;
        // Selecting Token Data:
        let data = (0, exports.getChainTokenData)(chain);
        // Finding Token Logo:
        if (data) {
            let trackedToken = data.tokens.find(token => token.symbol === symbol);
            if (trackedToken) {
                logo = trackedToken.logo;
            }
            else {
                let token = data.logos.find(i => i.symbol === symbol);
                if (token) {
                    logo = token.logo;
                }
            }
        }
        return logo;
    };
    exports.getTokenLogo = getTokenLogo;
    /* ========================================================================================================================================================================= */
    /**
     * Function to get gas estimates for TXs on any given chain.
     * @param chain The chain to fetch data from.
     * @returns The gas price, token price and gas estimates for various TX types.
     */
    const getGasEstimates = async (chain) => {
        let gasPrice = (0, exports.parseBN)((await exports.providers[chain][0].getFeeData()).gasPrice) / (10 ** 9);
        let tokenPrice = await (0, require$$0$1.getTokenPrice)(chain, exports.defaultAddress, 18);
        let estimates = {};
        if (chain === 'op' || chain === 'arb') {
            let ethGasPrice = (0, exports.parseBN)((await exports.providers.eth[0].getFeeData()).gasPrice) / (10 ** 9);
            let ethTokenPrice = await (0, require$$0$1.getTokenPrice)('eth', exports.defaultAddress, 18);
            gasAmountEstimates.forEach(tx => {
                estimates[tx.type] = {
                    gas: tx.gas,
                    cost: ((tx.gas / (10 ** 9)) * gasPrice * tokenPrice) + ((estimatedL1RollupGas / (10 ** 9)) * ethGasPrice * ethTokenPrice)
                };
            });
            return { gasPrice, tokenPrice, estimates, ethGasPrice, ethTokenPrice };
        }
        else {
            gasAmountEstimates.forEach(tx => {
                estimates[tx.type] = {
                    gas: tx.gas,
                    cost: (tx.gas / (10 ** 9)) * gasPrice * tokenPrice
                };
            });
            return { gasPrice, tokenPrice, estimates };
        }
    };
    exports.getGasEstimates = getGasEstimates;
    /* ========================================================================================================================================================================= */
    /**
     * Helper function to parse big numbers from query results.
     * @param bn The big number to parse.
     * @returns A regular JavaScript number.
     */
    const parseBN = (bn) => {
        return parseInt(ethers.ethers.BigNumber.from(bn).toString());
    };
    exports.parseBN = parseBN;
    /* ========================================================================================================================================================================= */
    /**
     * Helper function to query data with Axios.
     * @param link The link to fetch data from.
     * @returns Data or undefined if an invalid link is given.
     */
    const fetchData = async (link) => {
        if (link.startsWith('https://')) {
            return (await axios_1.default.get(link)).data;
        }
        else if (link.startsWith('ipfs://')) {
            return (await axios_1.default.get(`https://dweb.link/ipfs/${link.slice(7)}`)).data;
        }
        else if (link.startsWith('ipns://')) {
            return (await axios_1.default.get(`https://dweb.link/ipns/${link.slice(7)}`)).data;
        }
    };
    exports.fetchData = fetchData;
    /* ========================================================================================================================================================================= */
    /**
     * Helper function to get an already tracked token's info.
     * @param chain The chain to fetch data from.
     * @param address The token's address.
     * @returns The token's data if tracked, else undefined.
     */
    const getTrackedTokenInfo = (chain, address) => {
        let data = (0, exports.getChainTokenData)(chain);
        if (data) {
            return data.tokens.find(token => token.address.toLowerCase() === address.toLowerCase());
        }
        else {
            return undefined;
        }
    };
    /* ========================================================================================================================================================================= */
    /**
     * Function to get all relevant info from an already tracked token.
     * @param chain The chain to fetch data from.
     * @param location The current location of the token, either in a wallet or in some project's contract.
     * @param status The current status of the token.
     * @param token The tracked token's information.
     * @param rawBalance The balance to be assigned to the token's object, with decimals.
     * @param owner The token owner's wallet address.
     * @returns A Token object with all its information.
     */
    const addTrackedToken = async (chain, location, status, token, rawBalance, owner) => {
        // Initializing Token Values:
        let type = 'token';
        let address = token.address;
        let symbol = token.symbol;
        let logo = token.logo;
        let decimals = token.decimals;
        let balance = rawBalance / (10 ** decimals);
        let price = await (0, require$$0$1.getTokenPrice)(chain, address, decimals);
        return { type, chain, location, status, owner, symbol, address, balance, price, logo };
    };
    /* ========================================================================================================================================================================= */
    /**
     * Function to get all relevant info from an already tracked NFT collection.
     * @param chain The blockchain to query info from.
     * @param location The current location of the NFTs in the collection, either in a wallet or in some project's contract.
     * @param status The current status of the NFT collection.
     * @param nft The tracked NFT collection's information.
     * @param owner The NFT owner's wallet address.
     * @returns An array of NFT objects with all their information.
     */
    const addTrackedNFTs = async (chain, location, status, nft, balance, owner) => {
        // Initializations:
        let nfts = [];
        let idCalls = [];
        let dataCalls = [];
        // Initializing NFT Values:
        let type = 'nft';
        let name = nft.name;
        let address = nft.address;
        // Finding Indexed Collection Info:
        if (nft.dataQuery === 'indexed') {
            for (let i = 0; i < balance; i++) {
                idCalls.push({ reference: i.toString(), methodName: 'tokenOfOwnerByIndex', methodParameters: [owner, i] });
            }
            let idMulticallResults = await (0, exports.multicallOneContractQuery)(chain, nft.address, ABIs.nftABI, idCalls);
            Object.keys(idMulticallResults).forEach(index => {
                let id = (0, exports.parseBN)(idMulticallResults[index][0]);
                dataCalls.push({ reference: id.toString(), methodName: 'tokenURI', methodParameters: [id] });
            });
            let dataMulticallResults = await (0, exports.multicallOneContractQuery)(chain, nft.address, ABIs.nftABI, dataCalls);
            let promises = Object.keys(dataMulticallResults).map(stringID => (async () => {
                let id = parseInt(stringID);
                let data = await resolveNFTData(dataMulticallResults[stringID][0]);
                nfts.push({ type, chain, location, status, owner, name, address, id, data });
            })());
            await Promise.all(promises);
            // Finding Listed Collection Info:
        }
        else if (nft.dataQuery === 'listed') {
            let IDs = (await (0, exports.query)(chain, nft.address, ABIs.nftABI, 'tokensOfOwner', [owner])).map((id) => parseInt(id));
            IDs.forEach(id => {
                dataCalls.push({ reference: id.toString(), methodName: 'tokenURI', methodParameters: [id] });
            });
            let dataMulticallResults = await (0, exports.multicallOneContractQuery)(chain, nft.address, ABIs.nftABI, dataCalls);
            let promises = Object.keys(dataMulticallResults).map(stringID => (async () => {
                let id = parseInt(stringID);
                let data = await resolveNFTData(dataMulticallResults[stringID][0]);
                nfts.push({ type, chain, location, status, owner, name, address, id, data });
            })());
            await Promise.all(promises);
            // Finding ENS Collection Info:
        }
        else if (nft.dataQuery === 'ens') {
            let domains = await (0, ens.getSubgraphDomains)(owner);
            domains.forEach(domain => {
                let data = JSON.stringify(domain);
                nfts.push({ type, chain, location, status, owner, name, address, data });
            });
            // Unsupported Collection Info Formats:
        }
        else {
            for (let i = 0; i < balance; i++) {
                nfts.push({ type, chain, location, status, owner, name, address });
            }
        }
        return nfts;
    };
    /* ========================================================================================================================================================================= */
    /**
     * Helper function to get a native token's symbol.
     * @param chain The blockchain the native token belongs to.
     * @returns The appropriate token's symbol.
     */
    const getNativeTokenSymbol = (chain) => {
        if (chain === 'bsc') {
            return 'BNB';
        }
        else if (chain === 'poly') {
            return 'MATIC';
        }
        else if (chain === 'cronos') {
            return 'CRO';
        }
        else if (chain === 'op' || chain === 'arb') {
            return 'ETH';
        }
        else {
            return chain.toUpperCase();
        }
    };
    /* ========================================================================================================================================================================= */
    /**
     * Helper function to resolve NFT URI data.
     * @param uri The NFT's URI string.
     * @returns The NFT data in stringified JSON format.
     */
    const resolveNFTData = async (uri) => {
        // Initializing Data:
        let data = uri;
        // HTTP Data URIs:
        if (uri.startsWith('http')) {
            data = await (0, exports.fetchData)(uri);
            // IPFS Data URIs:
        }
        else if (uri.startsWith('ipfs')) {
            let searchPosition = uri.lastIndexOf('?');
            if (searchPosition > 0) {
                let cleanURI = uri.slice(0, searchPosition);
                data = await (0, exports.fetchData)(cleanURI);
            }
            // IPNS Data URIs:
        }
        else if (uri.startsWith('ipns')) {
            let searchPosition = uri.lastIndexOf('?');
            if (searchPosition > 0) {
                let cleanURI = uri.slice(0, searchPosition);
                data = await (0, exports.fetchData)(cleanURI);
            }
        }
        // Verifying String Format:
        if (typeof data !== 'string') {
            data = JSON.stringify(data);
        }
        // Decoding Base64 Data:
        let base64match = data.match(/^(?:rawData|data)\:application\/json;base64(?:\s|,)/);
        if (base64match) {
            data = Buffer.from(uri.slice(base64match[0].length), 'base64').toString();
        }
        return data;
    };
    });

    var prices = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.updatePrices = exports.queryParaSwapPrice = exports.query1InchPrice = exports.queryCoinGeckoPrices = exports.checkTokenPrice = exports.getTokenPrice = exports.getNativeTokenPrices = exports.getChainTokenPrices = exports.getAllTokenPrices = exports.prices = void 0;
    // Imports:


    // Prices Object:
    exports.prices = { eth: [], bsc: [], poly: [], ftm: [], avax: [], cronos: [], op: [], arb: [] };
    // Initializations:
    const maxPriceAge = 60000 * 20; // 20 Minutes
    /* ========================================================================================================================================================================= */
    /**
     * Function to populate the `prices` object with all tracked tokens' prices.
     * @returns Current state of the `prices` object post-update.
     */
    const getAllTokenPrices = async () => {
        let promises = Object.keys(chains.chains).map(stringChain => (async () => {
            let chain = stringChain;
            await (0, exports.getChainTokenPrices)(chain);
        })());
        await Promise.all(promises);
        return exports.prices;
    };
    exports.getAllTokenPrices = getAllTokenPrices;
    /* ========================================================================================================================================================================= */
    /**
     * Function to populate the `prices` object with all tracked tokens' prices in one chain.
     * @param chain The blockchain to query tokens' prices for.
     * @returns Current state of the `prices` object post-update, including only the selected chain.
     */
    const getChainTokenPrices = async (chain) => {
        let data = (0, require$$1$1.getChainTokenData)(chain);
        let missingPrices = [];
        if (data) {
            // Querying All Tokens Through CoinGecko:
            let addresses = data.tokens.map(token => token.address);
            addresses.push(require$$1$1.defaultAddress);
            await (0, exports.queryCoinGeckoPrices)(chain, addresses);
            // Checking Missing Token Prices:
            for (let token of data.tokens) {
                let foundToken = (0, exports.checkTokenPrice)(chain, token.address);
                if (!foundToken || (Date.now() - foundToken.timestamp) > maxPriceAge) {
                    let priceFound = false;
                    // Querying 1Inch:
                    if (chains.chains[chain].inch && !priceFound) {
                        await (0, exports.query1InchPrice)(chain, token.address, token.decimals);
                        foundToken = (0, exports.checkTokenPrice)(chain, token.address);
                        if (foundToken) {
                            priceFound = true;
                        }
                    }
                    // Querying ParaSwap:
                    if (chains.chains[chain].paraswap && !priceFound) {
                        await (0, exports.queryParaSwapPrice)(chain, token.address, token.decimals);
                        foundToken = (0, exports.checkTokenPrice)(chain, token.address);
                        if (foundToken) {
                            priceFound = true;
                        }
                    }
                    // Token Redirections:
                    if (!priceFound) {
                        await redirectTokenPriceFeed(chain, token.address);
                        foundToken = (0, exports.checkTokenPrice)(chain, token.address);
                        if (foundToken) {
                            priceFound = true;
                        }
                    }
                    // Token Price Not Found:
                    if (!priceFound) {
                        missingPrices.push(token);
                    }
                }
            }
        }
        // Logging Missing Token Prices:
        if (missingPrices.length > 0) {
            let stringMissingPrices = '';
            missingPrices.forEach(token => {
                stringMissingPrices += ` ${token.symbol} (${token.address}),`;
            });
            console.warn(`${chain.toUpperCase()}: Missing Token Prices:${stringMissingPrices.slice(0, -1)}`);
        }
        // Returning Token Prices:
        return exports.prices[chain];
    };
    exports.getChainTokenPrices = getChainTokenPrices;
    /* ========================================================================================================================================================================= */
    /**
     * Function to populate the `prices` object with all native tokens' prices.
     * @returns Current state of the `prices` object post-update.
     */
    const getNativeTokenPrices = async () => {
        // Initializations:
        let nativeTokens = [];
        let stringNativeTokens = '';
        // Formatting Token IDs:
        Object.keys(chains.chains).forEach(stringChain => {
            let chain = stringChain;
            let id = chains.chains[chain].coingeckoIDs.nativeTokenID;
            nativeTokens.push({ chain, id });
            stringNativeTokens += id + ',';
        });
        // Querying Native Token Prices:
        let apiQuery = `https://api.coingecko.com/api/v3/simple/price/?ids=${stringNativeTokens.slice(0, -1)}&vs_currencies=usd`;
        try {
            let response = await (0, require$$1$1.fetchData)(apiQuery);
            nativeTokens.forEach(token => {
                (0, exports.updatePrices)(token.chain, {
                    symbol: chains.chains[token.chain].token,
                    address: require$$1$1.defaultAddress,
                    price: response[token.id].usd,
                    source: 'coingecko',
                    timestamp: Date.now()
                });
            });
        }
        catch (_a) { }
        return exports.prices;
    };
    exports.getNativeTokenPrices = getNativeTokenPrices;
    /* ========================================================================================================================================================================= */
    /**
     * Function to get a token's current price by checking all price sources sequentially until a value is found.
     * @param chain The blockchain in which the given token is in.
     * @param address The token's address.
     * @param decimals The token's decimals.
     * @returns The token's price (also updates the `prices` object).
     */
    const getTokenPrice = async (chain, address, decimals) => {
        // Initializations:
        let priceFound = false;
        let maxTime = Date.now() - maxPriceAge;
        // Querying CoinGecko:
        await (0, exports.queryCoinGeckoPrices)(chain, [address]);
        let token = (0, exports.checkTokenPrice)(chain, address);
        if (token && maxTime < token.timestamp) {
            priceFound = true;
            return token.price;
        }
        // Querying 1Inch:
        if (chains.chains[chain].inch && decimals && !priceFound) {
            await (0, exports.query1InchPrice)(chain, address, decimals);
            let token = (0, exports.checkTokenPrice)(chain, address);
            if (token && maxTime < token.timestamp) {
                priceFound = true;
                return token.price;
            }
        }
        // Querying ParaSwap:
        if (chains.chains[chain].paraswap && decimals && !priceFound) {
            await (0, exports.queryParaSwapPrice)(chain, address, decimals);
            let token = (0, exports.checkTokenPrice)(chain, address);
            if (token && maxTime < token.timestamp) {
                priceFound = true;
                return token.price;
            }
        }
        // Token Redirections:
        if (!priceFound) {
            await redirectTokenPriceFeed(chain, address);
            let token = (0, exports.checkTokenPrice)(chain, address);
            if (token && maxTime < token.timestamp) {
                priceFound = true;
                return token.price;
            }
        }
        // Logging Error & Returning Price 0:
        console.warn(`${chain.toUpperCase()}: Token Price Not Found - ${address}`);
        return 0;
    };
    exports.getTokenPrice = getTokenPrice;
    /* ========================================================================================================================================================================= */
    /**
     * Function to check a previously queried token's price.
     * @param chain The blockchain in which the given token is in.
     * @param address The token's address.
     * @returns The token's price if previously queried, else undefined.
     */
    const checkTokenPrice = (chain, address) => {
        let foundToken = exports.prices[chain].find(token => token.address == address.toLowerCase());
        if (foundToken) {
            return foundToken;
        }
        else {
            return undefined;
        }
    };
    exports.checkTokenPrice = checkTokenPrice;
    /* ========================================================================================================================================================================= */
    /**
     * Function to query token prices from CoinGecko, and update the `prices` object.
     * @param chain The blockchain in which the tokens are in.
     * @param addresses The tokens' addresses.
     */
    const queryCoinGeckoPrices = async (chain, addresses) => {
        // Initializations:
        let formattedAddresses = '';
        let needNativeQuery = false;
        // Preparing Query:
        addresses.forEach(address => {
            if (address === require$$1$1.defaultAddress) {
                needNativeQuery = true;
            }
            else {
                formattedAddresses += address.toLowerCase() + ',';
            }
        });
        // Querying Native Asset Price:
        if (needNativeQuery) {
            let apiQuery = `https://api.coingecko.com/api/v3/simple/price/?ids=${chains.chains[chain].coingeckoIDs.nativeTokenID}&vs_currencies=usd`;
            try {
                let response = await (0, require$$1$1.fetchData)(apiQuery);
                (0, exports.updatePrices)(chain, {
                    symbol: chains.chains[chain].token,
                    address: require$$1$1.defaultAddress,
                    price: response[Object.keys(response)[0]].usd,
                    source: 'coingecko',
                    timestamp: Date.now()
                });
            }
            catch (_a) { }
        }
        // Querying Token Prices:
        if (formattedAddresses.length > 0) {
            formattedAddresses = formattedAddresses.slice(0, -1);
            let apiQuery = `https://api.coingecko.com/api/v3/simple/token_price/${chains.chains[chain].coingeckoIDs.chainID}?contract_addresses=${formattedAddresses}&vs_currencies=usd`;
            try {
                let response = await (0, require$$1$1.fetchData)(apiQuery);
                let tokens = Object.keys(response);
                if (tokens.length != 0) {
                    tokens.forEach(token => {
                        if (response[token].usd) {
                            (0, exports.updatePrices)(chain, {
                                symbol: null,
                                address: token.toLowerCase(),
                                price: response[token].usd,
                                source: 'coingecko',
                                timestamp: Date.now()
                            });
                        }
                    });
                }
            }
            catch (_b) { }
        }
    };
    exports.queryCoinGeckoPrices = queryCoinGeckoPrices;
    /* ========================================================================================================================================================================= */
    /**
     * Function to query a token's price from 1Inch, and update the `prices` object.
     * @param chain The blockchain in which the token is in.
     * @param address The token's address.
     * @param decimals The token's decimals.
     */
    const query1InchPrice = async (chain, address, decimals) => {
        // Checking For Compatibility:
        if (chains.chains[chain].inch) {
            // Returning USDC Token Price:
            if (address.toLowerCase() === chains.chains[chain].usdc) {
                (0, exports.updatePrices)(chain, {
                    symbol: 'USDC',
                    address: chains.chains[chain].usdc,
                    price: 1,
                    source: '1inch',
                    timestamp: Date.now()
                });
                // Querying Token Price:
            }
            else {
                let apiQuery = `https://api.1inch.exchange/v4.0/${chains.chains[chain].id}/quote?fromTokenAddress=${address}&toTokenAddress=${chains.chains[chain].usdc}&amount=${10 ** decimals}`;
                try {
                    let response = await (0, require$$1$1.fetchData)(apiQuery);
                    if (response.protocols.length < 4) {
                        (0, exports.updatePrices)(chain, {
                            symbol: response.fromToken.symbol,
                            address: address.toLowerCase(),
                            price: response.toTokenAmount / (10 ** chains.chains[chain].usdcDecimals),
                            source: '1inch',
                            timestamp: Date.now()
                        });
                    }
                }
                catch (_a) { }
            }
        }
    };
    exports.query1InchPrice = query1InchPrice;
    /* ========================================================================================================================================================================= */
    /**
     * Function to query a token's price from ParaSwap, and update the `prices` object.
     * @param chain The blockchain in which the token is in.
     * @param address The token's address.
     * @param decimals The token's decimals.
     */
    const queryParaSwapPrice = async (chain, address, decimals) => {
        // Checking For Compatibility:
        if (chains.chains[chain].paraswap) {
            // Returning USDC Token Price:
            if (address.toLowerCase() === chains.chains[chain].usdc) {
                (0, exports.updatePrices)(chain, {
                    symbol: 'USDC',
                    address: chains.chains[chain].usdc,
                    price: 1,
                    source: 'paraswap',
                    timestamp: Date.now()
                });
                // Querying Token Price:
            }
            else {
                let apiQuery = `https://apiv5.paraswap.io/prices?srcToken=${address}&srcDecimals=${decimals}&destToken=${chains.chains[chain].usdc}&destDecimals=${chains.chains[chain].usdcDecimals}&amount=${10 ** decimals}&side=SELL&network=${chains.chains[chain].id}`;
                try {
                    let response = await (0, require$$1$1.fetchData)(apiQuery);
                    let results = Object.keys(response);
                    if (results.length != 0) {
                        (0, exports.updatePrices)(chain, {
                            symbol: null,
                            address: address.toLowerCase(),
                            price: response[results[0]].destAmount / (10 ** chains.chains[chain].usdcDecimals),
                            source: 'paraswap',
                            timestamp: Date.now()
                        });
                    }
                }
                catch (_a) { }
            }
        }
    };
    exports.queryParaSwapPrice = queryParaSwapPrice;
    /* ========================================================================================================================================================================= */
    /**
     * Function to update the `prices` object with a token's newly queried price.
     * @param chain The blockchain in which the token is in.
     * @param priceData The token's new price data.
     */
    const updatePrices = (chain, priceData) => {
        let foundPrice = exports.prices[chain].findIndex(token => token.address == priceData.address);
        if (foundPrice != -1) {
            if (priceData.timestamp > exports.prices[chain][foundPrice].timestamp) {
                exports.prices[chain][foundPrice].price = priceData.price;
                exports.prices[chain][foundPrice].source = priceData.source;
                exports.prices[chain][foundPrice].timestamp = priceData.timestamp;
            }
        }
        else {
            if (!priceData.symbol) {
                let data = (0, require$$1$1.getChainTokenData)(chain);
                if (data) {
                    let foundToken = data.tokens.find(token => token.address.toLowerCase() === priceData.address.toLowerCase());
                    if (foundToken) {
                        priceData.symbol = foundToken.symbol;
                    }
                }
            }
            exports.prices[chain].push(priceData);
        }
    };
    exports.updatePrices = updatePrices;
    /* ========================================================================================================================================================================= */
    /**
     * Function to redirect common token's price feeds where necessary to other equivalent token's price sources, and update the `prices` object.
     * @param chain The chain the original token is in.
     * @param address The original token's address.
     */
    const redirectTokenPriceFeed = async (chain, address) => {
        // Initializations:
        let proxyToken = undefined;
        // Redirecting Price Feed:
        switch (chain) {
            case 'eth':
                switch (address.toLowerCase()) {
                    // None yet.
                }
                break;
            case 'bsc':
                switch (address.toLowerCase()) {
                    // None yet.
                }
                break;
            case 'poly':
                switch (address.toLowerCase()) {
                    case '0x3ba4c387f786bfee076a58914f5bd38d668b42c3': // BNB
                        proxyToken = { chain: 'bsc', address: require$$1$1.defaultAddress, decimals: 18 };
                        break;
                }
                break;
            case 'ftm':
                switch (address.toLowerCase()) {
                    case '0x3d8f1accee8e263f837138829b6c4517473d0688': // fWINGS
                        proxyToken = { chain: 'bsc', address: '0x0487b824c8261462f88940f97053e65bdb498446', decimals: 18 };
                        break;
                }
                break;
            case 'avax':
                switch (address.toLowerCase()) {
                    // None yet.
                }
                break;
            case 'cronos':
                switch (address.toLowerCase()) {
                    case '0xbed48612bc69fa1cab67052b42a95fb30c1bcfee': // SHIB
                        proxyToken = { chain: 'eth', address: '0x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce', decimals: 18 };
                        break;
                    case '0xb888d8dd1733d72681b30c00ee76bde93ae7aa93': // ATOM
                        proxyToken = { chain: 'bsc', address: '0x0eb3a705fc54725037cc9e008bdede697f62f335', decimals: 18 };
                        break;
                    case '0x1a8e39ae59e5556b56b76fcba98d22c9ae557396': // DOGE
                        proxyToken = { chain: 'bsc', address: '0xba2ae424d960c26247dd6c32edc70b295c744c43', decimals: 8 };
                        break;
                }
                break;
            case 'op':
                switch (address.toLowerCase()) {
                    // None yet.
                }
                break;
            case 'arb':
                switch (address.toLowerCase()) {
                    // Nont yet.
                }
        }
        // Fetching Proxy Token Price & Updating Token Price:
        if (proxyToken) {
            let tokenPrice = await (0, exports.getTokenPrice)(proxyToken.chain, proxyToken.address, proxyToken.decimals);
            let proxyTokenData = (0, exports.checkTokenPrice)(proxyToken.chain, proxyToken.address);
            if (proxyTokenData) {
                (0, exports.updatePrices)(chain, {
                    symbol: null,
                    address: address.toLowerCase(),
                    price: tokenPrice,
                    source: proxyTokenData.source,
                    timestamp: Date.now()
                });
            }
        }
    };
    });

    var chainFunctions = createCommonjsModule$4(function (module, exports) {
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ETHChainFunctions = exports.ChainFunctions = void 0;
    // Imports:
    const ens$1 = __importStar(ens);
    const $ = __importStar(require$$0$1);
    const evm = __importStar(require$$1$1);



    /* ========================================================================================================================================================================= */
    // Chain-Specific Functions Class:
    class ChainFunctions {
        // Class Constructor:
        constructor(chain) {
            this.chain = chain;
            this.chain = chain;
        }
        /**
         * Function to make blockchain queries.
         * @param address The contract's address to query.
         * @param abi The contract's ABI.
         * @param method The method to be called from the contract.
         * @param args Any arguments to pass to the method called.
         * @param block The block height from which to query info from. (Optional)
         * @returns Query results.
         */
        query(address, abi, method, args, block) {
            return evm.query(this.chain, address, abi, method, args, block);
        }
        /**
         * Function to query blocks for events on a given contract.
         * @param address The contract's address to query.
         * @param abi The contract's ABI.
         * @param event The event name to query for.
         * @param querySize The limit to how many blocks should be queried in each batch.
         * @param args Any arguments to pass to the event filter.
         * @param options Extra info such as starting block, ending block or choosing whether to display logs or not. (Optional)
         * @returns Array of events.
         */
        queryBlocks(address, abi, event, querySize, args, options) {
            return evm.queryBlocks(this.chain, address, abi, event, querySize, args, options);
        }
        /**
         * Function to check if a hash corresponds to a valid wallet/contract address.
         * @param address The hash to check for validity.
         * @returns True or false, depending on if the hash is a valid address or not.
         */
        isAddress(address) {
            return evm.isAddress(address);
        }
        /**
         * Function to get a wallet's transaction count.
         * @param wallet The wallet to query transaction count for.
         * @returns A number of transactions.
         */
        getTXCount(wallet) {
            return evm.getWalletTXCount(this.chain, wallet);
        }
        /**
         * Function to fetch a wallet's token balances.
         * @param wallet The wallet to query balances for.
         * @returns All native and token balances for the specified wallet.
         */
        getWalletBalance(wallet) {
            return evm.getWalletBalance(this.chain, wallet);
        }
        /**
         * Function to fetch project balances for a given wallet.
         * @param wallet The wallet to query balances for.
         * @param project The project/dapp to query for balances in.
         * @returns A wallet's balance on the specified project/dapp.
         */
        getProjectBalance(wallet, project) {
            return evm.getProjectBalance(this.chain, wallet, project);
        }
        /**
         * Function to fetch all project balances for a given wallet.
         * @param wallet The wallet to query balances for.
         * @returns A wallet's balance on all projects/dapps.
         */
        getAllProjectBalances(wallet) {
            return evm.getAllProjectBalances(this.chain, wallet);
        }
        /**
         * Function to get a wallet's NFT balance.
         * @param wallet The wallet to query NFT balances for.
         * @returns An array of NFT objects if any balances are found.
         */
        getNFTBalance(wallet) {
            return evm.getWalletNFTBalance(this.chain, wallet);
        }
        /**
         * Function to get a list of all tracked tokens.
         * @returns An array of all tracked tokens.
         */
        getTokens() {
            return evm.getTokens(this.chain);
        }
        /**
         * Function to get a token's logo.
         * @param symbol The token's symbol.
         * @returns The token logo if available, else a generic coin logo.
         */
        getTokenLogo(symbol) {
            return evm.getTokenLogo(this.chain, symbol);
        }
        /**
         * Function to get gas estimates for TXs.
         * @returns The gas price, token price and gas estimates for various TX types.
         */
        getGasEstimates() {
            return evm.getGasEstimates(this.chain);
        }
        /**
         * Function to fetch some chain information.
         * @returns Some chain data in JSON format.
         */
        getInfo() {
            return chains.chains[this.chain];
        }
        /**
         * Function to fetch the list of projects available.
         * @returns An array of project names.
         */
        getProjects() {
            return projects.projects[this.chain];
        }
        /**
         * Function to populate the `prices` object with token prices.
         * @returns Current state of the `prices` object post-update.
         */
        getTokenPrices() {
            return $.getChainTokenPrices(this.chain);
        }
        /**
         * Function to get a token's current price.
         * @param address The token's address.
         * @param decimals The token's decimals.
         * @returns The token's price (also updates the `prices` object).
         */
        getTokenPrice(address, decimals) {
            return $.getTokenPrice(this.chain, address, decimals);
        }
        /**
         * Function to update the `prices` object with a token's newly queried price.
         * @param priceData The token's new price data.
         */
        updateTokenPrice(priceData) {
            return $.updatePrices(this.chain, priceData);
        }
        /**
         * Function to check all previously queried token prices.
         * @returns Current state of the `prices` object.
         */
        checkPrices() {
            return $.prices[this.chain];
        }
        /**
         * Function to set custom RPC endpoints.
         * @param rpcs An array of RPC endpoints to use.
         * @param options Extra toggles such as enabling the default RPC endpoints as fallbacks. (Optional)
         */
        setCustomRpcEndpoints(rpcs, options) {
            if (rpcs.length > 0) {
                if (options === null || options === void 0 ? void 0 : options.includeDefaults) {
                    chains.chains[this.chain].rpcs = [...rpcs, ...chains.defaultRpcEndpoints[this.chain]];
                }
                else {
                    chains.chains[this.chain].rpcs = [...rpcs];
                }
                evm.updateChainProviders(this.chain);
            }
            else if (!(options === null || options === void 0 ? void 0 : options.includeDefaults)) {
                throw new error.WeaverError(this.chain, null, 'No custom RPC endpoints were provided and defaults are not enabled.');
            }
        }
        /**
         * Function to get ethers providers currently intialized.
         * @returns An array of ethers static providers.
         */
        getProviders() {
            return evm.providers[this.chain];
        }
    }
    exports.ChainFunctions = ChainFunctions;
    /* ========================================================================================================================================================================= */
    // Extra ETH Functions Class:
    class ETHChainFunctions extends ChainFunctions {
        /**
         * Function to resolve an ENS domain name into an address.
         * @param name The ENS domain name to resolve.
         * @returns An address if resolvable, else null.
         */
        resolveENS(name) {
            return ens$1.resolveENS(name);
        }
        /**
         * Function to reverse lookup an ENS domain.
         * @param address The address to reverse lookup.
         * @returns An ENS domain name if resolvable, else null.
         */
        lookupENS(address) {
            return ens$1.lookupENS(address);
        }
        /**
         * Function to fetch an ENS domain's avatar.
         * @param name The ENS domain name to query info from.
         * @returns An avatar URI if available, else null.
         */
        fetchAvatarENS(name) {
            return ens$1.fetchAvatarENS(name);
        }
    }
    exports.ETHChainFunctions = ETHChainFunctions;
    });

    var types$3 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isXToken = exports.isDebtToken = exports.isLPToken = exports.isToken = exports.isNativeToken = void 0;
    // Token Type Guards:
    function isNativeToken(token) {
        return token.type === 'nativeToken';
    }
    exports.isNativeToken = isNativeToken;
    function isToken(token) {
        return token.type === 'token';
    }
    exports.isToken = isToken;
    function isLPToken(token) {
        return token.type === 'lpToken';
    }
    exports.isLPToken = isLPToken;
    function isDebtToken(token) {
        return token.type === 'debt';
    }
    exports.isDebtToken = isDebtToken;
    function isXToken(token) {
        return token.type === 'xToken';
    }
    exports.isXToken = isXToken;
    });

    var dist = createCommonjsModule$4(function (module, exports) {
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WeaverFi = void 0;
    // Imports:
    const $ = __importStar(require$$0$1);
    const evm = __importStar(require$$1$1);



    /* ========================================================================================================================================================================= */
    // WeaverFi Functionality:
    exports.WeaverFi = {
        // Chain-Specific Functions:
        eth: new chainFunctions.ETHChainFunctions('eth'),
        bsc: new chainFunctions.ChainFunctions('bsc'),
        poly: new chainFunctions.ChainFunctions('poly'),
        ftm: new chainFunctions.ChainFunctions('ftm'),
        avax: new chainFunctions.ChainFunctions('avax'),
        cronos: new chainFunctions.ChainFunctions('cronos'),
        op: new chainFunctions.ChainFunctions('op'),
        arb: new chainFunctions.ChainFunctions('arb'),
        /* ================================================== */
        /**
         * Function to get all supported chains.
         * @returns An array of all supported chain abbreviations.
         */
        getAllChains: () => {
            return Object.keys(projects.projects);
        },
        /**
         * Function to fetch information from all supported chains.
         * @returns A record of chain information in JSON format.
         */
        getAllChainInfo: () => {
            return chains.chains;
        },
        /**
         * Function to get a list of all supported projects.
         * @returns A record of project name arrays for each chain.
         */
        getAllProjects: () => {
            return projects.projects;
        },
        /**
         * Function to get a list of all tracked tokens on all chains.
         * @returns A record of arrays of tracked tokens on every chain.
         */
        getAllTokens: () => {
            return evm.getAllTokens();
        },
        /**
         * Function to populate the `prices` object with all tracked tokens' prices.
         * @returns Current state of the `prices` object post-update.
         */
        getAllTokenPrices: () => {
            return $.getAllTokenPrices();
        },
        /**
         * Function to populate the `prices` object with all native tokens' prices.
         * @returns Current state of the `prices` object post-update.
         */
        getNativeTokenPrices: () => {
            return $.getNativeTokenPrices();
        },
        /**
         * Function to check all previously queried token prices.
         * @returns Current state of the `prices` object for all chains.
         */
        checkPrices: () => {
            return $.prices;
        },
        /**
         * Function to fetch all balances for a given wallet, including in their wallets and in dapps/projects.
         * @param wallet The wallet to query balances for.
         * @returns A wallet's token, project and NFT balances.
         */
        getAllBalances: (wallet) => {
            return evm.getAllBalances(wallet);
        }
    };
    // Exporting Default Module:
    exports.default = exports.WeaverFi;
    // Exporting Types:
    __exportStar(types$3, exports);
    });

    var WeaverFi = /*@__PURE__*/getDefaultExportFromCjs(dist);

    var _format$1 = "hh-sol-artifact-1";
    var contractName$1 = "ERC721";
    var sourceName$1 = "contracts/token/ERC721/ERC721.sol";
    var abi$1 = [
    	{
    		inputs: [
    			{
    				internalType: "string",
    				name: "name_",
    				type: "string"
    			},
    			{
    				internalType: "string",
    				name: "symbol_",
    				type: "string"
    			}
    		],
    		stateMutability: "nonpayable",
    		type: "constructor"
    	},
    	{
    		anonymous: false,
    		inputs: [
    			{
    				indexed: true,
    				internalType: "address",
    				name: "owner",
    				type: "address"
    			},
    			{
    				indexed: true,
    				internalType: "address",
    				name: "approved",
    				type: "address"
    			},
    			{
    				indexed: true,
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			}
    		],
    		name: "Approval",
    		type: "event"
    	},
    	{
    		anonymous: false,
    		inputs: [
    			{
    				indexed: true,
    				internalType: "address",
    				name: "owner",
    				type: "address"
    			},
    			{
    				indexed: true,
    				internalType: "address",
    				name: "operator",
    				type: "address"
    			},
    			{
    				indexed: false,
    				internalType: "bool",
    				name: "approved",
    				type: "bool"
    			}
    		],
    		name: "ApprovalForAll",
    		type: "event"
    	},
    	{
    		anonymous: false,
    		inputs: [
    			{
    				indexed: true,
    				internalType: "address",
    				name: "from",
    				type: "address"
    			},
    			{
    				indexed: true,
    				internalType: "address",
    				name: "to",
    				type: "address"
    			},
    			{
    				indexed: true,
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			}
    		],
    		name: "Transfer",
    		type: "event"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "to",
    				type: "address"
    			},
    			{
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			}
    		],
    		name: "approve",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "owner",
    				type: "address"
    			}
    		],
    		name: "balanceOf",
    		outputs: [
    			{
    				internalType: "uint256",
    				name: "",
    				type: "uint256"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			}
    		],
    		name: "getApproved",
    		outputs: [
    			{
    				internalType: "address",
    				name: "",
    				type: "address"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "owner",
    				type: "address"
    			},
    			{
    				internalType: "address",
    				name: "operator",
    				type: "address"
    			}
    		],
    		name: "isApprovedForAll",
    		outputs: [
    			{
    				internalType: "bool",
    				name: "",
    				type: "bool"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    		],
    		name: "name",
    		outputs: [
    			{
    				internalType: "string",
    				name: "",
    				type: "string"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			}
    		],
    		name: "ownerOf",
    		outputs: [
    			{
    				internalType: "address",
    				name: "",
    				type: "address"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "from",
    				type: "address"
    			},
    			{
    				internalType: "address",
    				name: "to",
    				type: "address"
    			},
    			{
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			}
    		],
    		name: "safeTransferFrom",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "from",
    				type: "address"
    			},
    			{
    				internalType: "address",
    				name: "to",
    				type: "address"
    			},
    			{
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			},
    			{
    				internalType: "bytes",
    				name: "data",
    				type: "bytes"
    			}
    		],
    		name: "safeTransferFrom",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "operator",
    				type: "address"
    			},
    			{
    				internalType: "bool",
    				name: "approved",
    				type: "bool"
    			}
    		],
    		name: "setApprovalForAll",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "bytes4",
    				name: "interfaceId",
    				type: "bytes4"
    			}
    		],
    		name: "supportsInterface",
    		outputs: [
    			{
    				internalType: "bool",
    				name: "",
    				type: "bool"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    		],
    		name: "symbol",
    		outputs: [
    			{
    				internalType: "string",
    				name: "",
    				type: "string"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			}
    		],
    		name: "tokenURI",
    		outputs: [
    			{
    				internalType: "string",
    				name: "",
    				type: "string"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "from",
    				type: "address"
    			},
    			{
    				internalType: "address",
    				name: "to",
    				type: "address"
    			},
    			{
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			}
    		],
    		name: "transferFrom",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	}
    ];
    var bytecode$1 = "0x60806040523480156200001157600080fd5b5060405162001466380380620014668339810160408190526200003491620001db565b81516200004990600090602085019062000068565b5080516200005f90600190602084019062000068565b50505062000281565b828054620000769062000245565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013657600080fd5b81516001600160401b03808211156200015357620001536200010e565b604051601f8301601f19908116603f011681019082821181831017156200017e576200017e6200010e565b816040528381526020925086838588010111156200019b57600080fd5b600091505b83821015620001bf5785820183015181830184015290820190620001a0565b83821115620001d15760008385830101525b9695505050505050565b60008060408385031215620001ef57600080fd5b82516001600160401b03808211156200020757600080fd5b620002158683870162000124565b935060208501519150808211156200022c57600080fd5b506200023b8582860162000124565b9150509250929050565b600181811c908216806200025a57607f821691505b6020821081036200027b57634e487b7160e01b600052602260045260246000fd5b50919050565b6111d580620002916000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb465146101b3578063b88d4fde146101c6578063c87b56dd146101d9578063e985e9c5146101ec57600080fd5b80636352211e1461017757806370a082311461018a57806395d89b41146101ab57600080fd5b806301ffc9a7146100d457806306fdde03146100fc578063081812fc14610111578063095ea7b31461013c57806323b872dd1461015157806342842e0e14610164575b600080fd5b6100e76100e2366004610d14565b610228565b60405190151581526020015b60405180910390f35b61010461027a565b6040516100f39190610d89565b61012461011f366004610d9c565b61030c565b6040516001600160a01b0390911681526020016100f3565b61014f61014a366004610dd1565b610333565b005b61014f61015f366004610dfb565b61044d565b61014f610172366004610dfb565b61047e565b610124610185366004610d9c565b610499565b61019d610198366004610e37565b6104f9565b6040519081526020016100f3565b61010461057f565b61014f6101c1366004610e52565b61058e565b61014f6101d4366004610ea4565b61059d565b6101046101e7366004610d9c565b6105d5565b6100e76101fa366004610f80565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061025957506001600160e01b03198216635b5e139f60e01b145b8061027457506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461028990610fb3565b80601f01602080910402602001604051908101604052809291908181526020018280546102b590610fb3565b80156103025780601f106102d757610100808354040283529160200191610302565b820191906000526020600020905b8154815290600101906020018083116102e557829003601f168201915b5050505050905090565b600061031782610649565b506000908152600460205260409020546001600160a01b031690565b600061033e82610499565b9050806001600160a01b0316836001600160a01b0316036103b05760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806103cc57506103cc81336101fa565b61043e5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016103a7565b61044883836106ab565b505050565b6104573382610719565b6104735760405162461bcd60e51b81526004016103a790610fed565b610448838383610798565b6104488383836040518060200160405280600081525061059d565b6000818152600260205260408120546001600160a01b0316806102745760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016103a7565b60006001600160a01b0382166105635760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016103a7565b506001600160a01b031660009081526003602052604090205490565b60606001805461028990610fb3565b610599338383610909565b5050565b6105a73383610719565b6105c35760405162461bcd60e51b81526004016103a790610fed565b6105cf848484846109d7565b50505050565b60606105e082610649565b60006105f760408051602081019091526000815290565b905060008151116106175760405180602001604052806000815250610642565b8061062184610a0a565b60405160200161063292919061103a565b6040516020818303038152906040525b9392505050565b6000818152600260205260409020546001600160a01b03166106a85760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016103a7565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906106e082610499565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061072583610499565b9050806001600160a01b0316846001600160a01b0316148061076c57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806107905750836001600160a01b03166107858461030c565b6001600160a01b0316145b949350505050565b826001600160a01b03166107ab82610499565b6001600160a01b0316146107d15760405162461bcd60e51b81526004016103a790611069565b6001600160a01b0382166108335760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016103a7565b6108408383836001610a9d565b826001600160a01b031661085382610499565b6001600160a01b0316146108795760405162461bcd60e51b81526004016103a790611069565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b816001600160a01b0316836001600160a01b03160361096a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016103a7565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6109e2848484610798565b6109ee84848484610b25565b6105cf5760405162461bcd60e51b81526004016103a7906110ae565b60606000610a1783610c26565b600101905060008167ffffffffffffffff811115610a3757610a37610e8e565b6040519080825280601f01601f191660200182016040528015610a61576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610a6b57509392505050565b60018111156105cf576001600160a01b03841615610ae3576001600160a01b03841660009081526003602052604081208054839290610add908490611116565b90915550505b6001600160a01b038316156105cf576001600160a01b03831660009081526003602052604081208054839290610b1a90849061112d565b909155505050505050565b60006001600160a01b0384163b15610c1b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610b69903390899088908890600401611145565b6020604051808303816000875af1925050508015610ba4575060408051601f3d908101601f19168201909252610ba191810190611182565b60015b610c01573d808015610bd2576040519150601f19603f3d011682016040523d82523d6000602084013e610bd7565b606091505b508051600003610bf95760405162461bcd60e51b81526004016103a7906110ae565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610790565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610c655772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610c91576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610caf57662386f26fc10000830492506010015b6305f5e1008310610cc7576305f5e100830492506008015b6127108310610cdb57612710830492506004015b60648310610ced576064830492506002015b600a83106102745760010192915050565b6001600160e01b0319811681146106a857600080fd5b600060208284031215610d2657600080fd5b813561064281610cfe565b60005b83811015610d4c578181015183820152602001610d34565b838111156105cf5750506000910152565b60008151808452610d75816020860160208601610d31565b601f01601f19169290920160200192915050565b6020815260006106426020830184610d5d565b600060208284031215610dae57600080fd5b5035919050565b80356001600160a01b0381168114610dcc57600080fd5b919050565b60008060408385031215610de457600080fd5b610ded83610db5565b946020939093013593505050565b600080600060608486031215610e1057600080fd5b610e1984610db5565b9250610e2760208501610db5565b9150604084013590509250925092565b600060208284031215610e4957600080fd5b61064282610db5565b60008060408385031215610e6557600080fd5b610e6e83610db5565b915060208301358015158114610e8357600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215610eba57600080fd5b610ec385610db5565b9350610ed160208601610db5565b925060408501359150606085013567ffffffffffffffff80821115610ef557600080fd5b818701915087601f830112610f0957600080fd5b813581811115610f1b57610f1b610e8e565b604051601f8201601f19908116603f01168101908382118183101715610f4357610f43610e8e565b816040528281528a6020848701011115610f5c57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215610f9357600080fd5b610f9c83610db5565b9150610faa60208401610db5565b90509250929050565b600181811c90821680610fc757607f821691505b602082108103610fe757634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b6000835161104c818460208801610d31565b835190830190611060818360208801610d31565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008282101561112857611128611100565b500390565b6000821982111561114057611140611100565b500190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061117890830184610d5d565b9695505050505050565b60006020828403121561119457600080fd5b815161064281610cfe56fea26469706673582212202d50e5892a626ffe3099b21d34f62855f4c47c10e6cde9bcc81a34405aaad82b64736f6c634300080d0033";
    var deployedBytecode$1 = "";
    var linkReferences$1 = {
    };
    var deployedLinkReferences$1 = {
    };
    var erc721 = {
    	_format: _format$1,
    	contractName: contractName$1,
    	sourceName: sourceName$1,
    	abi: abi$1,
    	bytecode: bytecode$1,
    	deployedBytecode: deployedBytecode$1,
    	linkReferences: linkReferences$1,
    	deployedLinkReferences: deployedLinkReferences$1
    };

    var _format = "hh-sol-artifact-1";
    var contractName = "PoolygotchiHatchery";
    var sourceName = "contracts/PoolygotchiHatchery.sol";
    var abi = [
    	{
    		inputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "constructor"
    	},
    	{
    		anonymous: false,
    		inputs: [
    			{
    				indexed: true,
    				internalType: "uint64",
    				name: "id",
    				type: "uint64"
    			},
    			{
    				components: [
    					{
    						internalType: "address",
    						name: "whitelist",
    						type: "address"
    					},
    					{
    						internalType: "string",
    						name: "uri",
    						type: "string"
    					}
    				],
    				indexed: false,
    				internalType: "struct PoolygotchiHatchery.AssetLibrary",
    				name: "environment",
    				type: "tuple"
    			}
    		],
    		name: "AddEnvironment",
    		type: "event"
    	},
    	{
    		anonymous: false,
    		inputs: [
    			{
    				indexed: true,
    				internalType: "uint64",
    				name: "id",
    				type: "uint64"
    			},
    			{
    				components: [
    					{
    						internalType: "address",
    						name: "whitelist",
    						type: "address"
    					},
    					{
    						internalType: "string",
    						name: "uri",
    						type: "string"
    					}
    				],
    				indexed: false,
    				internalType: "struct PoolygotchiHatchery.AssetLibrary",
    				name: "species",
    				type: "tuple"
    			}
    		],
    		name: "AddSpecies",
    		type: "event"
    	},
    	{
    		anonymous: false,
    		inputs: [
    			{
    				indexed: true,
    				internalType: "address",
    				name: "pooler",
    				type: "address"
    			},
    			{
    				indexed: false,
    				internalType: "string",
    				name: "name",
    				type: "string"
    			},
    			{
    				indexed: false,
    				internalType: "uint64",
    				name: "speciesId",
    				type: "uint64"
    			},
    			{
    				indexed: false,
    				internalType: "uint64",
    				name: "environmentId",
    				type: "uint64"
    			},
    			{
    				indexed: false,
    				internalType: "uint256",
    				name: "amountWeekly",
    				type: "uint256"
    			},
    			{
    				indexed: false,
    				internalType: "uint256",
    				name: "startBalance",
    				type: "uint256"
    			}
    		],
    		name: "Hatch",
    		type: "event"
    	},
    	{
    		anonymous: false,
    		inputs: [
    			{
    				indexed: true,
    				internalType: "address",
    				name: "pooler",
    				type: "address"
    			},
    			{
    				indexed: false,
    				internalType: "uint64",
    				name: "speciesId",
    				type: "uint64"
    			}
    		],
    		name: "Morph",
    		type: "event"
    	},
    	{
    		anonymous: false,
    		inputs: [
    			{
    				indexed: true,
    				internalType: "address",
    				name: "pooler",
    				type: "address"
    			},
    			{
    				indexed: false,
    				internalType: "uint64",
    				name: "environmentId",
    				type: "uint64"
    			}
    		],
    		name: "Move",
    		type: "event"
    	},
    	{
    		anonymous: false,
    		inputs: [
    			{
    				indexed: true,
    				internalType: "address",
    				name: "pooler",
    				type: "address"
    			},
    			{
    				indexed: false,
    				internalType: "string",
    				name: "name",
    				type: "string"
    			}
    		],
    		name: "Name",
    		type: "event"
    	},
    	{
    		anonymous: false,
    		inputs: [
    			{
    				indexed: true,
    				internalType: "address",
    				name: "previousOwner",
    				type: "address"
    			},
    			{
    				indexed: true,
    				internalType: "address",
    				name: "newOwner",
    				type: "address"
    			}
    		],
    		name: "OwnershipTransferred",
    		type: "event"
    	},
    	{
    		anonymous: false,
    		inputs: [
    			{
    				indexed: true,
    				internalType: "address",
    				name: "pooler",
    				type: "address"
    			},
    			{
    				indexed: false,
    				internalType: "uint256",
    				name: "amountWeekly",
    				type: "uint256"
    			},
    			{
    				indexed: false,
    				internalType: "uint256",
    				name: "startBalance",
    				type: "uint256"
    			}
    		],
    		name: "SetGoal",
    		type: "event"
    	},
    	{
    		inputs: [
    			{
    				internalType: "string",
    				name: "uri",
    				type: "string"
    			},
    			{
    				internalType: "address",
    				name: "whitelist",
    				type: "address"
    			}
    		],
    		name: "addEnvironment",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "string",
    				name: "uri",
    				type: "string"
    			},
    			{
    				internalType: "address",
    				name: "whitelist",
    				type: "address"
    			}
    		],
    		name: "addSpecies",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "uint64",
    				name: "environmentId",
    				type: "uint64"
    			}
    		],
    		name: "environmentURI",
    		outputs: [
    			{
    				internalType: "string",
    				name: "",
    				type: "string"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "pooler",
    				type: "address"
    			}
    		],
    		name: "hasPoolygotchi",
    		outputs: [
    			{
    				internalType: "bool",
    				name: "",
    				type: "bool"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "string",
    				name: "name",
    				type: "string"
    			},
    			{
    				internalType: "uint64",
    				name: "speciesId",
    				type: "uint64"
    			},
    			{
    				internalType: "uint64",
    				name: "environmentId",
    				type: "uint64"
    			},
    			{
    				internalType: "uint256",
    				name: "amountWeekly",
    				type: "uint256"
    			},
    			{
    				internalType: "uint256",
    				name: "startBalance",
    				type: "uint256"
    			}
    		],
    		name: "hatch",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "uint64",
    				name: "speciesId",
    				type: "uint64"
    			}
    		],
    		name: "morphInto",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    		],
    		name: "numEnvironments",
    		outputs: [
    			{
    				internalType: "uint64",
    				name: "",
    				type: "uint64"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    		],
    		name: "numSpecies",
    		outputs: [
    			{
    				internalType: "uint64",
    				name: "",
    				type: "uint64"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    		],
    		name: "owner",
    		outputs: [
    			{
    				internalType: "address",
    				name: "",
    				type: "address"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "pooler",
    				type: "address"
    			}
    		],
    		name: "poolygotchiOf",
    		outputs: [
    			{
    				components: [
    					{
    						internalType: "uint256",
    						name: "goalAmountWeekly",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256",
    						name: "startBalance",
    						type: "uint256"
    					},
    					{
    						internalType: "uint64",
    						name: "goalStartDate",
    						type: "uint64"
    					},
    					{
    						internalType: "uint64",
    						name: "hatchDate",
    						type: "uint64"
    					},
    					{
    						internalType: "uint64",
    						name: "speciesId",
    						type: "uint64"
    					},
    					{
    						internalType: "uint64",
    						name: "environmentId",
    						type: "uint64"
    					},
    					{
    						internalType: "string",
    						name: "name",
    						type: "string"
    					}
    				],
    				internalType: "struct PoolygotchiHatchery.Poolygotchi",
    				name: "",
    				type: "tuple"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    		],
    		name: "renounceOwnership",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "uint64",
    				name: "environmentId",
    				type: "uint64"
    			}
    		],
    		name: "setEnvironment",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "uint256",
    				name: "amountWeekly",
    				type: "uint256"
    			},
    			{
    				internalType: "uint256",
    				name: "startBalance",
    				type: "uint256"
    			}
    		],
    		name: "setGoal",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "string",
    				name: "name",
    				type: "string"
    			}
    		],
    		name: "setName",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "uint64",
    				name: "speciesId",
    				type: "uint64"
    			}
    		],
    		name: "speciesURI",
    		outputs: [
    			{
    				internalType: "string",
    				name: "",
    				type: "string"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "newOwner",
    				type: "address"
    			}
    		],
    		name: "transferOwnership",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	}
    ];
    var bytecode = "0x60806040526000600460006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506000600460086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055503480156200006557600080fd5b50620000866200007a6200008c60201b60201c565b6200009460201b60201c565b62000158565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612e8b80620001686000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063d4ec9e2411610066578063d4ec9e2414610285578063f2fde38b146102a1578063f62a3edf146102bd578063f7226a94146102ed57610100565b80638da5cb5b1461021157806390a1a32a1461022f57806396c4051d1461024d578063c47f00271461026957610100565b806359387141116100d3578063593871411461019d578063641017f5146101bb578063715018a6146101d75780638114a559146101e157610100565b806305f709251461010557806329577f4c14610121578063522163d31461013d578063564ede6b1461016d575b600080fd5b61011f600480360381019061011a9190611ee5565b610309565b005b61013b60048036038101906101369190611f48565b6105d3565b005b61015760048036038101906101529190611fe6565b61078b565b604051610164919061215d565b60405180910390f35b61018760048036038101906101829190611fe6565b6109a3565b604051610194919061219a565b60405180910390f35b6101a5610a0f565b6040516101b291906121c4565b60405180910390f35b6101d560048036038101906101d09190611ee5565b610a2d565b005b6101df610cf7565b005b6101fb60048036038101906101f69190611ee5565b610d0b565b6040516102089190612229565b60405180910390f35b610219610e35565b604051610226919061225a565b60405180910390f35b610237610e5e565b60405161024491906121c4565b60405180910390f35b610267600480360381019061026291906123aa565b610e7c565b005b610283600480360381019061027e9190612406565b6110f4565b005b61029f600480360381019061029a91906123aa565b6111f4565b005b6102bb60048036038101906102b69190611fe6565b61146c565b005b6102d760048036038101906102d29190611ee5565b6114ef565b6040516102e49190612229565b60405180910390f35b6103076004803603810190610302919061244f565b611619565b005b610311611ce2565b61031a816109a3565b610359576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035090612532565b60405180910390fd5b600260008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16148061045c57508073ffffffffffffffffffffffffffffffffffffffff16633af32abf6103fe611ce2565b6040518263ffffffff1660e01b815260040161041a919061225a565b602060405180830381865afa158015610437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045b919061257e565b5b61049b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610492906125f7565b60405180910390fd5b82600460009054906101000a900467ffffffffffffffff1667ffffffffffffffff168167ffffffffffffffff1610610508576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ff90612663565b60405180910390fd5b8360016000610515611ce2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550610580611ce2565b73ffffffffffffffffffffffffffffffffffffffff167f7d8472712411cd99a7dcc2fc52f8270e6deb557166a7fab1aaa7e755cd4d5b3c856040516105c591906121c4565b60405180910390a250505050565b6105db611ce2565b6105e4816109a3565b610623576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061a90612532565b60405180910390fd5b8260016000610630611ce2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550816001600061067e611ce2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555042600160006106cc611ce2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550610737611ce2565b73ffffffffffffffffffffffffffffffffffffffff167f81347b725403364ca82f92f7c4e229e493ff57774a7f745705bf14aaaa9cad7a848460405161077e929190612692565b60405180910390a2505050565b610793611e2c565b61079b611ce2565b6107a4816109a3565b6107e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107da90612532565b60405180910390fd5b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001600382018054610919906126ea565b80601f0160208091040260200160405190810160405280929190818152602001828054610945906126ea565b80156109925780601f1061096757610100808354040283529160200191610992565b820191906000526020600020905b81548152906001019060200180831161097557829003601f168201915b505050505081525050915050919050565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16119050919050565b6000600460089054906101000a900467ffffffffffffffff16905090565b610a35611ce2565b610a3e816109a3565b610a7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7490612532565b60405180910390fd5b600360008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480610b8057508073ffffffffffffffffffffffffffffffffffffffff16633af32abf610b22611ce2565b6040518263ffffffff1660e01b8152600401610b3e919061225a565b602060405180830381865afa158015610b5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7f919061257e565b5b610bbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb6906125f7565b60405180910390fd5b82600460089054906101000a900467ffffffffffffffff1667ffffffffffffffff168167ffffffffffffffff1610610c2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c239061278d565b60405180910390fd5b8360016000610c39611ce2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550610ca4611ce2565b73ffffffffffffffffffffffffffffffffffffffff167ff16a337a35fbe4e283166807fe09172e5276de9f26837b5c4957eecb3128e88285604051610ce991906121c4565b60405180910390a250505050565b610cff611cea565b610d096000611d68565b565b606081600460009054906101000a900467ffffffffffffffff1667ffffffffffffffff168167ffffffffffffffff1610610d7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7190612663565b60405180910390fd5b600260008467ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206001018054610daf906126ea565b80601f0160208091040260200160405190810160405280929190818152602001828054610ddb906126ea565b8015610e285780601f10610dfd57610100808354040283529160200191610e28565b820191906000526020600020905b815481529060010190602001808311610e0b57829003601f168201915b5050505050915050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600460009054906101000a900467ffffffffffffffff16905090565b610e84611cea565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480610f5657508073ffffffffffffffffffffffffffffffffffffffff166301ffc9a77f3af32abf000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401610f1491906127e8565b602060405180830381865afa158015610f31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f55919061257e565b5b610f95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8c9061284f565b60405180910390fd5b60006004600081819054906101000a900467ffffffffffffffff1680929190610fbd9061289e565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550905083600260008367ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600101908161101c9190612a7a565b5082600260008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508067ffffffffffffffff167f4f86801a28a3307d5e2739d7c9a9bee76a1b3e20bb57bb6756d1980fc4280183600260008467ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206040516110e69190612c6f565b60405180910390a250505050565b6110fc611ce2565b611105816109a3565b611144576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113b90612532565b60405180910390fd5b8160016000611151611ce2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301908161119a9190612a7a565b506111a3611ce2565b73ffffffffffffffffffffffffffffffffffffffff167feedeec3d3423c6fba208b89afa320ca66f7ec1e6ef25004a2096bd963889fe28836040516111e89190612229565b60405180910390a25050565b6111fc611cea565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806112ce57508073ffffffffffffffffffffffffffffffffffffffff166301ffc9a77f3af32abf000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040161128c91906127e8565b602060405180830381865afa1580156112a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cd919061257e565b5b61130d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113049061284f565b60405180910390fd5b60006004600881819054906101000a900467ffffffffffffffff16809291906113359061289e565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550905083600360008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010190816113949190612a7a565b5082600360008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508067ffffffffffffffff167fb3cd76d6a5850cf1de4517b4abddebf04f3edd050e61bc3e4e66d983d0c7d600600360008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060405161145e9190612c6f565b60405180910390a250505050565b611474611cea565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036114e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114da90612d03565b60405180910390fd5b6114ec81611d68565b50565b606081600460089054906101000a900467ffffffffffffffff1667ffffffffffffffff168167ffffffffffffffff161061155e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115559061278d565b60405180910390fd5b600360008467ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206001018054611593906126ea565b80601f01602080910402602001604051908101604052809291908181526020018280546115bf906126ea565b801561160c5780601f106115e15761010080835404028352916020019161160c565b820191906000526020600020905b8154815290600101906020018083116115ef57829003601f168201915b5050505050915050919050565b600260008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16148061171c57508073ffffffffffffffffffffffffffffffffffffffff16633af32abf6116be611ce2565b6040518263ffffffff1660e01b81526004016116da919061225a565b602060405180830381865afa1580156116f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171b919061257e565b5b61175b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611752906125f7565b60405180910390fd5b84600460009054906101000a900467ffffffffffffffff1667ffffffffffffffff168167ffffffffffffffff16106117c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117bf90612663565b60405180910390fd5b600360008667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806118cb57508073ffffffffffffffffffffffffffffffffffffffff16633af32abf61186d611ce2565b6040518263ffffffff1660e01b8152600401611889919061225a565b602060405180830381865afa1580156118a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ca919061257e565b5b61190a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611901906125f7565b60405180910390fd5b85600460089054906101000a900467ffffffffffffffff1667ffffffffffffffff168167ffffffffffffffff1610611977576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196e9061278d565b60405180910390fd5b611987611982611ce2565b6109a3565b156119c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119be90612d6f565b60405180910390fd5b88600160006119d4611ce2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003019081611a1d9190612a7a565b508660016000611a2b611ce2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508760016000611a9b611ce2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508560016000611b0b611ce2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055508460016000611b59611ce2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055504260016000611ba7611ce2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055504260016000611c17611ce2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550611c82611ce2565b73ffffffffffffffffffffffffffffffffffffffff167fbdf6c1a4cbad11d4126b1743402dbb833a11252fe94c70f9d29f058eefe976d58a8a8a8a8a604051611ccf959493929190612d8f565b60405180910390a2505050505050505050565b600033905090565b611cf2611ce2565b73ffffffffffffffffffffffffffffffffffffffff16611d10610e35565b73ffffffffffffffffffffffffffffffffffffffff1614611d66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5d90612e35565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6040518060e001604052806000815260200160008152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600067ffffffffffffffff82169050919050565b611ec281611ea5565b8114611ecd57600080fd5b50565b600081359050611edf81611eb9565b92915050565b600060208284031215611efb57611efa611e9b565b5b6000611f0984828501611ed0565b91505092915050565b6000819050919050565b611f2581611f12565b8114611f3057600080fd5b50565b600081359050611f4281611f1c565b92915050565b60008060408385031215611f5f57611f5e611e9b565b5b6000611f6d85828601611f33565b9250506020611f7e85828601611f33565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611fb382611f88565b9050919050565b611fc381611fa8565b8114611fce57600080fd5b50565b600081359050611fe081611fba565b92915050565b600060208284031215611ffc57611ffb611e9b565b5b600061200a84828501611fd1565b91505092915050565b61201c81611f12565b82525050565b61202b81611ea5565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561206b578082015181840152602081019050612050565b60008484015250505050565b6000601f19601f8301169050919050565b600061209382612031565b61209d818561203c565b93506120ad81856020860161204d565b6120b681612077565b840191505092915050565b600060e0830160008301516120d96000860182612013565b5060208301516120ec6020860182612013565b5060408301516120ff6040860182612022565b5060608301516121126060860182612022565b5060808301516121256080860182612022565b5060a083015161213860a0860182612022565b5060c083015184820360c08601526121508282612088565b9150508091505092915050565b6000602082019050818103600083015261217781846120c1565b905092915050565b60008115159050919050565b6121948161217f565b82525050565b60006020820190506121af600083018461218b565b92915050565b6121be81611ea5565b82525050565b60006020820190506121d960008301846121b5565b92915050565b600082825260208201905092915050565b60006121fb82612031565b61220581856121df565b935061221581856020860161204d565b61221e81612077565b840191505092915050565b6000602082019050818103600083015261224381846121f0565b905092915050565b61225481611fa8565b82525050565b600060208201905061226f600083018461224b565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6122b782612077565b810181811067ffffffffffffffff821117156122d6576122d561227f565b5b80604052505050565b60006122e9611e91565b90506122f582826122ae565b919050565b600067ffffffffffffffff8211156123155761231461227f565b5b61231e82612077565b9050602081019050919050565b82818337600083830152505050565b600061234d612348846122fa565b6122df565b9050828152602081018484840111156123695761236861227a565b5b61237484828561232b565b509392505050565b600082601f83011261239157612390612275565b5b81356123a184826020860161233a565b91505092915050565b600080604083850312156123c1576123c0611e9b565b5b600083013567ffffffffffffffff8111156123df576123de611ea0565b5b6123eb8582860161237c565b92505060206123fc85828601611fd1565b9150509250929050565b60006020828403121561241c5761241b611e9b565b5b600082013567ffffffffffffffff81111561243a57612439611ea0565b5b6124468482850161237c565b91505092915050565b600080600080600060a0868803121561246b5761246a611e9b565b5b600086013567ffffffffffffffff81111561248957612488611ea0565b5b6124958882890161237c565b95505060206124a688828901611ed0565b94505060406124b788828901611ed0565b93505060606124c888828901611f33565b92505060806124d988828901611f33565b9150509295509295909350565b7f48617463686572793a20706f6f6c657220686173206e6f20706f6f6c79000000600082015250565b600061251c601d836121df565b9150612527826124e6565b602082019050919050565b6000602082019050818103600083015261254b8161250f565b9050919050565b61255b8161217f565b811461256657600080fd5b50565b60008151905061257881612552565b92915050565b60006020828403121561259457612593611e9b565b5b60006125a284828501612569565b91505092915050565b7f48617463686572793a206e6f742077686974656c697374656400000000000000600082015250565b60006125e16019836121df565b91506125ec826125ab565b602082019050919050565b60006020820190508181036000830152612610816125d4565b9050919050565b7f48617463686572793a206e6f6e6578697374656e742073706563696573000000600082015250565b600061264d601d836121df565b915061265882612617565b602082019050919050565b6000602082019050818103600083015261267c81612640565b9050919050565b61268c81611f12565b82525050565b60006040820190506126a76000830185612683565b6126b46020830184612683565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061270257607f821691505b602082108103612715576127146126bb565b5b50919050565b7f48617463686572793a206e6f6e6578697374656e7420656e7669726f6e6d656e60008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b60006127776021836121df565b91506127828261271b565b604082019050919050565b600060208201905081810360008301526127a68161276a565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6127e2816127ad565b82525050565b60006020820190506127fd60008301846127d9565b92915050565b7f48617463686572793a20696e76616c69642077686974656c6973740000000000600082015250565b6000612839601b836121df565b915061284482612803565b602082019050919050565b600060208201905081810360008301526128688161282c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006128a982611ea5565b915067ffffffffffffffff82036128c3576128c261286f565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026129307fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826128f3565b61293a86836128f3565b95508019841693508086168417925050509392505050565b6000819050919050565b600061297761297261296d84611f12565b612952565b611f12565b9050919050565b6000819050919050565b6129918361295c565b6129a561299d8261297e565b848454612900565b825550505050565b600090565b6129ba6129ad565b6129c5818484612988565b505050565b5b818110156129e9576129de6000826129b2565b6001810190506129cb565b5050565b601f821115612a2e576129ff816128ce565b612a08846128e3565b81016020851015612a17578190505b612a2b612a23856128e3565b8301826129ca565b50505b505050565b600082821c905092915050565b6000612a5160001984600802612a33565b1980831691505092915050565b6000612a6a8383612a40565b9150826002028217905092915050565b612a8382612031565b67ffffffffffffffff811115612a9c57612a9b61227f565b5b612aa682546126ea565b612ab18282856129ed565b600060209050601f831160018114612ae45760008415612ad2578287015190505b612adc8582612a5e565b865550612b44565b601f198416612af2866128ce565b60005b82811015612b1a57848901518255600182019150602085019450602081019050612af5565b86831015612b375784890151612b33601f891682612a40565b8355505b6001600288020188555050505b505050505050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612b8c612b8783612b4c565b612b59565b9050919050565b612b9c81611fa8565b82525050565b60008154612baf816126ea565b612bb9818661203c565b94506001821660008114612bd45760018114612bea57612c1d565b60ff198316865281151560200286019350612c1d565b612bf3856128ce565b60005b83811015612c1557815481890152600182019150602081019050612bf6565b808801955050505b50505092915050565b6000604083016000808401549050612c3d81612b79565b612c4a6000870182612b93565b50600184018583036020870152612c618382612ba2565b925050819250505092915050565b60006020820190508181036000830152612c898184612c26565b905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612ced6026836121df565b9150612cf882612c91565b604082019050919050565b60006020820190508181036000830152612d1c81612ce0565b9050919050565b7f48617463686572793a20616c7265616479206861746368656400000000000000600082015250565b6000612d596019836121df565b9150612d6482612d23565b602082019050919050565b60006020820190508181036000830152612d8881612d4c565b9050919050565b600060a0820190508181036000830152612da981886121f0565b9050612db860208301876121b5565b612dc560408301866121b5565b612dd26060830185612683565b612ddf6080830184612683565b9695505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612e1f6020836121df565b9150612e2a82612de9565b602082019050919050565b60006020820190508181036000830152612e4e81612e12565b905091905056fea264697066735822122056d93a537cd5d6f05b612365007a48bc5998f953eaed7e8722e58853724ba48a64736f6c63430008110033";
    var deployedBytecode = "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063d4ec9e2411610066578063d4ec9e2414610285578063f2fde38b146102a1578063f62a3edf146102bd578063f7226a94146102ed57610100565b80638da5cb5b1461021157806390a1a32a1461022f57806396c4051d1461024d578063c47f00271461026957610100565b806359387141116100d3578063593871411461019d578063641017f5146101bb578063715018a6146101d75780638114a559146101e157610100565b806305f709251461010557806329577f4c14610121578063522163d31461013d578063564ede6b1461016d575b600080fd5b61011f600480360381019061011a9190611ee5565b610309565b005b61013b60048036038101906101369190611f48565b6105d3565b005b61015760048036038101906101529190611fe6565b61078b565b604051610164919061215d565b60405180910390f35b61018760048036038101906101829190611fe6565b6109a3565b604051610194919061219a565b60405180910390f35b6101a5610a0f565b6040516101b291906121c4565b60405180910390f35b6101d560048036038101906101d09190611ee5565b610a2d565b005b6101df610cf7565b005b6101fb60048036038101906101f69190611ee5565b610d0b565b6040516102089190612229565b60405180910390f35b610219610e35565b604051610226919061225a565b60405180910390f35b610237610e5e565b60405161024491906121c4565b60405180910390f35b610267600480360381019061026291906123aa565b610e7c565b005b610283600480360381019061027e9190612406565b6110f4565b005b61029f600480360381019061029a91906123aa565b6111f4565b005b6102bb60048036038101906102b69190611fe6565b61146c565b005b6102d760048036038101906102d29190611ee5565b6114ef565b6040516102e49190612229565b60405180910390f35b6103076004803603810190610302919061244f565b611619565b005b610311611ce2565b61031a816109a3565b610359576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035090612532565b60405180910390fd5b600260008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16148061045c57508073ffffffffffffffffffffffffffffffffffffffff16633af32abf6103fe611ce2565b6040518263ffffffff1660e01b815260040161041a919061225a565b602060405180830381865afa158015610437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045b919061257e565b5b61049b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610492906125f7565b60405180910390fd5b82600460009054906101000a900467ffffffffffffffff1667ffffffffffffffff168167ffffffffffffffff1610610508576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ff90612663565b60405180910390fd5b8360016000610515611ce2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550610580611ce2565b73ffffffffffffffffffffffffffffffffffffffff167f7d8472712411cd99a7dcc2fc52f8270e6deb557166a7fab1aaa7e755cd4d5b3c856040516105c591906121c4565b60405180910390a250505050565b6105db611ce2565b6105e4816109a3565b610623576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061a90612532565b60405180910390fd5b8260016000610630611ce2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550816001600061067e611ce2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555042600160006106cc611ce2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550610737611ce2565b73ffffffffffffffffffffffffffffffffffffffff167f81347b725403364ca82f92f7c4e229e493ff57774a7f745705bf14aaaa9cad7a848460405161077e929190612692565b60405180910390a2505050565b610793611e2c565b61079b611ce2565b6107a4816109a3565b6107e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107da90612532565b60405180910390fd5b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001600382018054610919906126ea565b80601f0160208091040260200160405190810160405280929190818152602001828054610945906126ea565b80156109925780601f1061096757610100808354040283529160200191610992565b820191906000526020600020905b81548152906001019060200180831161097557829003601f168201915b505050505081525050915050919050565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16119050919050565b6000600460089054906101000a900467ffffffffffffffff16905090565b610a35611ce2565b610a3e816109a3565b610a7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7490612532565b60405180910390fd5b600360008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480610b8057508073ffffffffffffffffffffffffffffffffffffffff16633af32abf610b22611ce2565b6040518263ffffffff1660e01b8152600401610b3e919061225a565b602060405180830381865afa158015610b5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7f919061257e565b5b610bbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb6906125f7565b60405180910390fd5b82600460089054906101000a900467ffffffffffffffff1667ffffffffffffffff168167ffffffffffffffff1610610c2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c239061278d565b60405180910390fd5b8360016000610c39611ce2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550610ca4611ce2565b73ffffffffffffffffffffffffffffffffffffffff167ff16a337a35fbe4e283166807fe09172e5276de9f26837b5c4957eecb3128e88285604051610ce991906121c4565b60405180910390a250505050565b610cff611cea565b610d096000611d68565b565b606081600460009054906101000a900467ffffffffffffffff1667ffffffffffffffff168167ffffffffffffffff1610610d7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7190612663565b60405180910390fd5b600260008467ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206001018054610daf906126ea565b80601f0160208091040260200160405190810160405280929190818152602001828054610ddb906126ea565b8015610e285780601f10610dfd57610100808354040283529160200191610e28565b820191906000526020600020905b815481529060010190602001808311610e0b57829003601f168201915b5050505050915050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600460009054906101000a900467ffffffffffffffff16905090565b610e84611cea565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480610f5657508073ffffffffffffffffffffffffffffffffffffffff166301ffc9a77f3af32abf000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401610f1491906127e8565b602060405180830381865afa158015610f31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f55919061257e565b5b610f95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8c9061284f565b60405180910390fd5b60006004600081819054906101000a900467ffffffffffffffff1680929190610fbd9061289e565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550905083600260008367ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600101908161101c9190612a7a565b5082600260008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508067ffffffffffffffff167f4f86801a28a3307d5e2739d7c9a9bee76a1b3e20bb57bb6756d1980fc4280183600260008467ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206040516110e69190612c6f565b60405180910390a250505050565b6110fc611ce2565b611105816109a3565b611144576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113b90612532565b60405180910390fd5b8160016000611151611ce2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301908161119a9190612a7a565b506111a3611ce2565b73ffffffffffffffffffffffffffffffffffffffff167feedeec3d3423c6fba208b89afa320ca66f7ec1e6ef25004a2096bd963889fe28836040516111e89190612229565b60405180910390a25050565b6111fc611cea565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806112ce57508073ffffffffffffffffffffffffffffffffffffffff166301ffc9a77f3af32abf000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040161128c91906127e8565b602060405180830381865afa1580156112a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cd919061257e565b5b61130d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113049061284f565b60405180910390fd5b60006004600881819054906101000a900467ffffffffffffffff16809291906113359061289e565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550905083600360008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010190816113949190612a7a565b5082600360008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508067ffffffffffffffff167fb3cd76d6a5850cf1de4517b4abddebf04f3edd050e61bc3e4e66d983d0c7d600600360008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060405161145e9190612c6f565b60405180910390a250505050565b611474611cea565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036114e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114da90612d03565b60405180910390fd5b6114ec81611d68565b50565b606081600460089054906101000a900467ffffffffffffffff1667ffffffffffffffff168167ffffffffffffffff161061155e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115559061278d565b60405180910390fd5b600360008467ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206001018054611593906126ea565b80601f01602080910402602001604051908101604052809291908181526020018280546115bf906126ea565b801561160c5780601f106115e15761010080835404028352916020019161160c565b820191906000526020600020905b8154815290600101906020018083116115ef57829003601f168201915b5050505050915050919050565b600260008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16148061171c57508073ffffffffffffffffffffffffffffffffffffffff16633af32abf6116be611ce2565b6040518263ffffffff1660e01b81526004016116da919061225a565b602060405180830381865afa1580156116f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171b919061257e565b5b61175b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611752906125f7565b60405180910390fd5b84600460009054906101000a900467ffffffffffffffff1667ffffffffffffffff168167ffffffffffffffff16106117c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117bf90612663565b60405180910390fd5b600360008667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806118cb57508073ffffffffffffffffffffffffffffffffffffffff16633af32abf61186d611ce2565b6040518263ffffffff1660e01b8152600401611889919061225a565b602060405180830381865afa1580156118a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ca919061257e565b5b61190a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611901906125f7565b60405180910390fd5b85600460089054906101000a900467ffffffffffffffff1667ffffffffffffffff168167ffffffffffffffff1610611977576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196e9061278d565b60405180910390fd5b611987611982611ce2565b6109a3565b156119c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119be90612d6f565b60405180910390fd5b88600160006119d4611ce2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003019081611a1d9190612a7a565b508660016000611a2b611ce2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508760016000611a9b611ce2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508560016000611b0b611ce2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055508460016000611b59611ce2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055504260016000611ba7611ce2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055504260016000611c17611ce2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550611c82611ce2565b73ffffffffffffffffffffffffffffffffffffffff167fbdf6c1a4cbad11d4126b1743402dbb833a11252fe94c70f9d29f058eefe976d58a8a8a8a8a604051611ccf959493929190612d8f565b60405180910390a2505050505050505050565b600033905090565b611cf2611ce2565b73ffffffffffffffffffffffffffffffffffffffff16611d10610e35565b73ffffffffffffffffffffffffffffffffffffffff1614611d66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5d90612e35565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6040518060e001604052806000815260200160008152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600067ffffffffffffffff82169050919050565b611ec281611ea5565b8114611ecd57600080fd5b50565b600081359050611edf81611eb9565b92915050565b600060208284031215611efb57611efa611e9b565b5b6000611f0984828501611ed0565b91505092915050565b6000819050919050565b611f2581611f12565b8114611f3057600080fd5b50565b600081359050611f4281611f1c565b92915050565b60008060408385031215611f5f57611f5e611e9b565b5b6000611f6d85828601611f33565b9250506020611f7e85828601611f33565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611fb382611f88565b9050919050565b611fc381611fa8565b8114611fce57600080fd5b50565b600081359050611fe081611fba565b92915050565b600060208284031215611ffc57611ffb611e9b565b5b600061200a84828501611fd1565b91505092915050565b61201c81611f12565b82525050565b61202b81611ea5565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561206b578082015181840152602081019050612050565b60008484015250505050565b6000601f19601f8301169050919050565b600061209382612031565b61209d818561203c565b93506120ad81856020860161204d565b6120b681612077565b840191505092915050565b600060e0830160008301516120d96000860182612013565b5060208301516120ec6020860182612013565b5060408301516120ff6040860182612022565b5060608301516121126060860182612022565b5060808301516121256080860182612022565b5060a083015161213860a0860182612022565b5060c083015184820360c08601526121508282612088565b9150508091505092915050565b6000602082019050818103600083015261217781846120c1565b905092915050565b60008115159050919050565b6121948161217f565b82525050565b60006020820190506121af600083018461218b565b92915050565b6121be81611ea5565b82525050565b60006020820190506121d960008301846121b5565b92915050565b600082825260208201905092915050565b60006121fb82612031565b61220581856121df565b935061221581856020860161204d565b61221e81612077565b840191505092915050565b6000602082019050818103600083015261224381846121f0565b905092915050565b61225481611fa8565b82525050565b600060208201905061226f600083018461224b565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6122b782612077565b810181811067ffffffffffffffff821117156122d6576122d561227f565b5b80604052505050565b60006122e9611e91565b90506122f582826122ae565b919050565b600067ffffffffffffffff8211156123155761231461227f565b5b61231e82612077565b9050602081019050919050565b82818337600083830152505050565b600061234d612348846122fa565b6122df565b9050828152602081018484840111156123695761236861227a565b5b61237484828561232b565b509392505050565b600082601f83011261239157612390612275565b5b81356123a184826020860161233a565b91505092915050565b600080604083850312156123c1576123c0611e9b565b5b600083013567ffffffffffffffff8111156123df576123de611ea0565b5b6123eb8582860161237c565b92505060206123fc85828601611fd1565b9150509250929050565b60006020828403121561241c5761241b611e9b565b5b600082013567ffffffffffffffff81111561243a57612439611ea0565b5b6124468482850161237c565b91505092915050565b600080600080600060a0868803121561246b5761246a611e9b565b5b600086013567ffffffffffffffff81111561248957612488611ea0565b5b6124958882890161237c565b95505060206124a688828901611ed0565b94505060406124b788828901611ed0565b93505060606124c888828901611f33565b92505060806124d988828901611f33565b9150509295509295909350565b7f48617463686572793a20706f6f6c657220686173206e6f20706f6f6c79000000600082015250565b600061251c601d836121df565b9150612527826124e6565b602082019050919050565b6000602082019050818103600083015261254b8161250f565b9050919050565b61255b8161217f565b811461256657600080fd5b50565b60008151905061257881612552565b92915050565b60006020828403121561259457612593611e9b565b5b60006125a284828501612569565b91505092915050565b7f48617463686572793a206e6f742077686974656c697374656400000000000000600082015250565b60006125e16019836121df565b91506125ec826125ab565b602082019050919050565b60006020820190508181036000830152612610816125d4565b9050919050565b7f48617463686572793a206e6f6e6578697374656e742073706563696573000000600082015250565b600061264d601d836121df565b915061265882612617565b602082019050919050565b6000602082019050818103600083015261267c81612640565b9050919050565b61268c81611f12565b82525050565b60006040820190506126a76000830185612683565b6126b46020830184612683565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061270257607f821691505b602082108103612715576127146126bb565b5b50919050565b7f48617463686572793a206e6f6e6578697374656e7420656e7669726f6e6d656e60008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b60006127776021836121df565b91506127828261271b565b604082019050919050565b600060208201905081810360008301526127a68161276a565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6127e2816127ad565b82525050565b60006020820190506127fd60008301846127d9565b92915050565b7f48617463686572793a20696e76616c69642077686974656c6973740000000000600082015250565b6000612839601b836121df565b915061284482612803565b602082019050919050565b600060208201905081810360008301526128688161282c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006128a982611ea5565b915067ffffffffffffffff82036128c3576128c261286f565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026129307fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826128f3565b61293a86836128f3565b95508019841693508086168417925050509392505050565b6000819050919050565b600061297761297261296d84611f12565b612952565b611f12565b9050919050565b6000819050919050565b6129918361295c565b6129a561299d8261297e565b848454612900565b825550505050565b600090565b6129ba6129ad565b6129c5818484612988565b505050565b5b818110156129e9576129de6000826129b2565b6001810190506129cb565b5050565b601f821115612a2e576129ff816128ce565b612a08846128e3565b81016020851015612a17578190505b612a2b612a23856128e3565b8301826129ca565b50505b505050565b600082821c905092915050565b6000612a5160001984600802612a33565b1980831691505092915050565b6000612a6a8383612a40565b9150826002028217905092915050565b612a8382612031565b67ffffffffffffffff811115612a9c57612a9b61227f565b5b612aa682546126ea565b612ab18282856129ed565b600060209050601f831160018114612ae45760008415612ad2578287015190505b612adc8582612a5e565b865550612b44565b601f198416612af2866128ce565b60005b82811015612b1a57848901518255600182019150602085019450602081019050612af5565b86831015612b375784890151612b33601f891682612a40565b8355505b6001600288020188555050505b505050505050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612b8c612b8783612b4c565b612b59565b9050919050565b612b9c81611fa8565b82525050565b60008154612baf816126ea565b612bb9818661203c565b94506001821660008114612bd45760018114612bea57612c1d565b60ff198316865281151560200286019350612c1d565b612bf3856128ce565b60005b83811015612c1557815481890152600182019150602081019050612bf6565b808801955050505b50505092915050565b6000604083016000808401549050612c3d81612b79565b612c4a6000870182612b93565b50600184018583036020870152612c618382612ba2565b925050819250505092915050565b60006020820190508181036000830152612c898184612c26565b905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612ced6026836121df565b9150612cf882612c91565b604082019050919050565b60006020820190508181036000830152612d1c81612ce0565b9050919050565b7f48617463686572793a20616c7265616479206861746368656400000000000000600082015250565b6000612d596019836121df565b9150612d6482612d23565b602082019050919050565b60006020820190508181036000830152612d8881612d4c565b9050919050565b600060a0820190508181036000830152612da981886121f0565b9050612db860208301876121b5565b612dc560408301866121b5565b612dd26060830185612683565b612ddf6080830184612683565b9695505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612e1f6020836121df565b9150612e2a82612de9565b602082019050919050565b60006020820190508181036000830152612e4e81612e12565b905091905056fea264697066735822122056d93a537cd5d6f05b612365007a48bc5998f953eaed7e8722e58853724ba48a64736f6c63430008110033";
    var linkReferences = {
    };
    var deployedLinkReferences = {
    };
    var hatcheryInfo = {
    	_format: _format,
    	contractName: contractName,
    	sourceName: sourceName,
    	abi: abi,
    	bytecode: bytecode,
    	deployedBytecode: deployedBytecode,
    	linkReferences: linkReferences,
    	deployedLinkReferences: deployedLinkReferences
    };

    const hatcheryAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3";
    const localNetwork = {
        name: "Local Node",
        chainId: 31337,
        rpcUrls: ['http://127.0.0.1:8545/'],
        nativeCurrency: { name: "Ethereum", symbol: "ETH", decimals: 18 },
        blockExplorerUrls: ["https://etherscan.io/"]
    };
    const ethNetwork = {
        name: "Ethereum Mainnet",
        chainId: 1,
        rpcUrls: chains.chains.eth.rpcs,
        nativeCurrency: { name: "Ethereum", symbol: "ETH", decimals: 18 },
        blockExplorerUrls: ["https://etherscan.io/"]
    };
    const opNetwork = {
        name: "Optimism",
        chainId: 10,
        rpcUrls: chains.chains.op.rpcs,
        nativeCurrency: { name: "Ethereum", symbol: "ETH", decimals: 18 },
        blockExplorerUrls: ["https://optimistic.etherscan.io/"]
    };
    const polyNetwork = {
        name: "Polygon",
        chainId: 137,
        rpcUrls: chains.chains.poly.rpcs,
        nativeCurrency: { name: "Matic", symbol: "MATIC", decimals: 18 },
        blockExplorerUrls: ["https://polygonscan.com/"]
    };
    const avaxNetwork = {
        name: "Avalanche",
        chainId: 43114,
        rpcUrls: chains.chains.avax.rpcs,
        nativeCurrency: { name: "Avalanche", symbol: "AVAX", decimals: 18 },
        blockExplorerUrls: ["https://snowtrace.io/"]
    };
    const networks = {
        // Current Deployed Chain:
        poolygotchi: localNetwork,
        // Local:
        31337: localNetwork,
        local: localNetwork,
        // Ethereum:
        1: ethNetwork,
        eth: ethNetwork,
        // Optimism:
        10: opNetwork,
        op: opNetwork,
        // Polygon:
        137: polyNetwork,
        poly: polyNetwork,
        // Avalanche:
        43114: avaxNetwork,
        avax: avaxNetwork
    };

    var name$1 = "PoolTogether V4 Mainnet";
    var version$1 = {
    	major: 1,
    	minor: 8,
    	patch: 0
    };
    var tags = {
    };
    var contracts = [
    	{
    		chainId: 1,
    		address: "0x32e8D4c9d1B711BC958d0Ce8D14b41F77Bb03a64",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "ATokenYieldSource",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "contract ATokenInterface",
    						name: "_aToken",
    						type: "address"
    					},
    					{
    						internalType: "contract IAaveIncentivesController",
    						name: "_incentivesController",
    						type: "address"
    					},
    					{
    						internalType: "contract ILendingPoolAddressesProviderRegistry",
    						name: "_lendingPoolAddressesProviderRegistry",
    						type: "address"
    					},
    					{
    						internalType: "uint8",
    						name: "_decimals",
    						type: "uint8"
    					},
    					{
    						internalType: "string",
    						name: "_symbol",
    						type: "string"
    					},
    					{
    						internalType: "string",
    						name: "_name",
    						type: "string"
    					},
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IAToken",
    						name: "aToken",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "contract ILendingPoolAddressesProviderRegistry",
    						name: "lendingPoolAddressesProviderRegistry",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint8",
    						name: "decimals",
    						type: "uint8"
    					},
    					{
    						indexed: false,
    						internalType: "string",
    						name: "name",
    						type: "string"
    					},
    					{
    						indexed: false,
    						internalType: "string",
    						name: "symbol",
    						type: "string"
    					},
    					{
    						indexed: false,
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					}
    				],
    				name: "ATokenYieldSourceInitialized",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					}
    				],
    				name: "Approval",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "Claimed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "shares",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "RedeemedToken",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "Sponsored",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "shares",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					}
    				],
    				name: "SuppliedTokenTo",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					}
    				],
    				name: "Transfer",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "contract IERC20",
    						name: "token",
    						type: "address"
    					}
    				],
    				name: "TransferredERC20",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "aToken",
    				outputs: [
    					{
    						internalType: "contract ATokenInterface",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					}
    				],
    				name: "allowance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "approve",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "approveMaxAmount",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "account",
    						type: "address"
    					}
    				],
    				name: "balanceOf",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "addr",
    						type: "address"
    					}
    				],
    				name: "balanceOfToken",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "to",
    						type: "address"
    					}
    				],
    				name: "claimRewards",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "decimals",
    				outputs: [
    					{
    						internalType: "uint8",
    						name: "",
    						type: "uint8"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "subtractedValue",
    						type: "uint256"
    					}
    				],
    				name: "decreaseAllowance",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "depositToken",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "incentivesController",
    				outputs: [
    					{
    						internalType: "contract IAaveIncentivesController",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "addedValue",
    						type: "uint256"
    					}
    				],
    				name: "increaseAllowance",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "lendingPoolAddressesProviderRegistry",
    				outputs: [
    					{
    						internalType: "contract ILendingPoolAddressesProviderRegistry",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "name",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "redeemAmount",
    						type: "uint256"
    					}
    				],
    				name: "redeemToken",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "sponsor",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "mintAmount",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "to",
    						type: "address"
    					}
    				],
    				name: "supplyTokenTo",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "symbol",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "totalSupply",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "transfer",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IERC20",
    						name: "erc20Token",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "transferERC20",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "sender",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "transferFrom",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 1,
    		address: "0x6C04Eeeed2dEFedbC9A0f3f63bf14F39a189F607",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "BeaconTimelockTrigger",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IPrizeDistributionFactory",
    						name: "_prizeDistributionFactory",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawCalculatorTimelock",
    						name: "_timelock",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IPrizeDistributionFactory",
    						name: "prizeDistributionFactory",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IDrawCalculatorTimelock",
    						name: "timelock",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						indexed: false,
    						internalType: "struct IDrawBeacon.Draw",
    						name: "draw",
    						type: "tuple"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "DrawLockedAndTotalNetworkTicketSupplyPushed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "prizeDistributionFactory",
    				outputs: [
    					{
    						internalType: "contract IPrizeDistributionFactory",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "_draw",
    						type: "tuple"
    					},
    					{
    						internalType: "uint256",
    						name: "_totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "push",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "timelock",
    				outputs: [
    					{
    						internalType: "contract IDrawCalculatorTimelock",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 1,
    		address: "0x0D33612870cd9A475bBBbB7CC38fC66680dEcAC5",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "DrawBeacon",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawBuffer",
    						name: "_drawBuffer",
    						type: "address"
    					},
    					{
    						internalType: "contract RNGInterface",
    						name: "_rng",
    						type: "address"
    					},
    					{
    						internalType: "uint32",
    						name: "_nextDrawId",
    						type: "uint32"
    					},
    					{
    						internalType: "uint64",
    						name: "_beaconPeriodStart",
    						type: "uint64"
    					},
    					{
    						internalType: "uint32",
    						name: "_beaconPeriodSeconds",
    						type: "uint32"
    					},
    					{
    						internalType: "uint32",
    						name: "_rngTimeout",
    						type: "uint32"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint32",
    						name: "drawPeriodSeconds",
    						type: "uint32"
    					}
    				],
    				name: "BeaconPeriodSecondsUpdated",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint64",
    						name: "startedAt",
    						type: "uint64"
    					}
    				],
    				name: "BeaconPeriodStarted",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint32",
    						name: "nextDrawId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint64",
    						name: "beaconPeriodStartedAt",
    						type: "uint64"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IDrawBuffer",
    						name: "newDrawBuffer",
    						type: "address"
    					}
    				],
    				name: "DrawBufferUpdated",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "rngRequestId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint32",
    						name: "rngLockBlock",
    						type: "uint32"
    					}
    				],
    				name: "DrawCancelled",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "randomNumber",
    						type: "uint256"
    					}
    				],
    				name: "DrawCompleted",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "rngRequestId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint32",
    						name: "rngLockBlock",
    						type: "uint32"
    					}
    				],
    				name: "DrawStarted",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract RNGInterface",
    						name: "rngService",
    						type: "address"
    					}
    				],
    				name: "RngServiceUpdated",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint32",
    						name: "rngTimeout",
    						type: "uint32"
    					}
    				],
    				name: "RngTimeoutSet",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "beaconPeriodEndAt",
    				outputs: [
    					{
    						internalType: "uint64",
    						name: "",
    						type: "uint64"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "beaconPeriodRemainingSeconds",
    				outputs: [
    					{
    						internalType: "uint64",
    						name: "",
    						type: "uint64"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint64",
    						name: "_time",
    						type: "uint64"
    					}
    				],
    				name: "calculateNextBeaconPeriodStartTime",
    				outputs: [
    					{
    						internalType: "uint64",
    						name: "",
    						type: "uint64"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "calculateNextBeaconPeriodStartTimeFromCurrentTime",
    				outputs: [
    					{
    						internalType: "uint64",
    						name: "",
    						type: "uint64"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "canCompleteDraw",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "canStartDraw",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "cancelDraw",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "completeDraw",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getBeaconPeriodSeconds",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getBeaconPeriodStartedAt",
    				outputs: [
    					{
    						internalType: "uint64",
    						name: "",
    						type: "uint64"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getDrawBuffer",
    				outputs: [
    					{
    						internalType: "contract IDrawBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getLastRngLockBlock",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getLastRngRequestId",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getNextDrawId",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getRngService",
    				outputs: [
    					{
    						internalType: "contract RNGInterface",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getRngTimeout",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "isBeaconPeriodOver",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "isRngCompleted",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "isRngRequested",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "isRngTimedOut",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_beaconPeriodSeconds",
    						type: "uint32"
    					}
    				],
    				name: "setBeaconPeriodSeconds",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IDrawBuffer",
    						name: "newDrawBuffer",
    						type: "address"
    					}
    				],
    				name: "setDrawBuffer",
    				outputs: [
    					{
    						internalType: "contract IDrawBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract RNGInterface",
    						name: "_rngService",
    						type: "address"
    					}
    				],
    				name: "setRngService",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_rngTimeout",
    						type: "uint32"
    					}
    				],
    				name: "setRngTimeout",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "startDraw",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 1,
    		address: "0x78Ea5a9595279DC2F9608283875571b1151F19D4",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "DrawBuffer",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "uint8",
    						name: "_cardinality",
    						type: "uint8"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						indexed: false,
    						internalType: "struct IDrawBeacon.Draw",
    						name: "draw",
    						type: "tuple"
    					}
    				],
    				name: "DrawSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "MAX_CARDINALITY",
    				outputs: [
    					{
    						internalType: "uint16",
    						name: "",
    						type: "uint16"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getBufferCardinality",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					}
    				],
    				name: "getDraw",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getDrawCount",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32[]",
    						name: "_drawIds",
    						type: "uint32[]"
    					}
    				],
    				name: "getDraws",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw[]",
    						name: "",
    						type: "tuple[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getNewestDraw",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getOldestDraw",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "_draw",
    						type: "tuple"
    					}
    				],
    				name: "pushDraw",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "_newDraw",
    						type: "tuple"
    					}
    				],
    				name: "setDraw",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 1,
    		address: "0x14d0675580C7255043a3AeD3726F5D7f33292730",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "DrawCalculator",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "contract ITicket",
    						name: "_ticket",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawBuffer",
    						name: "_drawBuffer",
    						type: "address"
    					},
    					{
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "_prizeDistributionBuffer",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "ticket",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IDrawBuffer",
    						name: "drawBuffer",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "prizeDistributionBuffer",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract PrizeDistributor",
    						name: "prizeDistributor",
    						type: "address"
    					}
    				],
    				name: "PrizeDistributorSet",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "TIERS_LENGTH",
    				outputs: [
    					{
    						internalType: "uint8",
    						name: "",
    						type: "uint8"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint32[]",
    						name: "_drawIds",
    						type: "uint32[]"
    					},
    					{
    						internalType: "bytes",
    						name: "_pickIndicesForDraws",
    						type: "bytes"
    					}
    				],
    				name: "calculate",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					},
    					{
    						internalType: "bytes",
    						name: "",
    						type: "bytes"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "drawBuffer",
    				outputs: [
    					{
    						internalType: "contract IDrawBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getDrawBuffer",
    				outputs: [
    					{
    						internalType: "contract IDrawBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint32[]",
    						name: "_drawIds",
    						type: "uint32[]"
    					}
    				],
    				name: "getNormalizedBalancesForDrawIds",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getPrizeDistributionBuffer",
    				outputs: [
    					{
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "prizeDistributionBuffer",
    				outputs: [
    					{
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "ticket",
    				outputs: [
    					{
    						internalType: "contract ITicket",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 1,
    		address: "0x1DcaD946D10343cc4494D610d6273153FB071772",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "DrawCalculatorTimelock",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawCalculator",
    						name: "_calculator",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IDrawCalculator",
    						name: "drawCalculator",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint64",
    						name: "timestamp",
    						type: "uint64"
    					}
    				],
    				name: "LockedDraw",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							}
    						],
    						indexed: false,
    						internalType: "struct IDrawCalculatorTimelock.Timelock",
    						name: "timelock",
    						type: "tuple"
    					}
    				],
    				name: "TimelockSet",
    				type: "event"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "user",
    						type: "address"
    					},
    					{
    						internalType: "uint32[]",
    						name: "drawIds",
    						type: "uint32[]"
    					},
    					{
    						internalType: "bytes",
    						name: "data",
    						type: "bytes"
    					}
    				],
    				name: "calculate",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					},
    					{
    						internalType: "bytes",
    						name: "",
    						type: "bytes"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getDrawCalculator",
    				outputs: [
    					{
    						internalType: "contract IDrawCalculator",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getTimelock",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawCalculatorTimelock.Timelock",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "hasElapsed",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						internalType: "uint64",
    						name: "_timestamp",
    						type: "uint64"
    					}
    				],
    				name: "lock",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawCalculatorTimelock.Timelock",
    						name: "_timelock",
    						type: "tuple"
    					}
    				],
    				name: "setTimelock",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 1,
    		address: "0xdC90a79fcb1DBAd5F05E6C264F84AC4b0d351F94",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "L1TimelockTrigger",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "_prizeDistributionBuffer",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawCalculatorTimelock",
    						name: "_timelock",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "prizeDistributionBuffer",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IDrawCalculatorTimelock",
    						name: "timelock",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						indexed: false,
    						internalType: "struct IPrizeDistributionBuffer.PrizeDistribution",
    						name: "prizeDistribution",
    						type: "tuple"
    					}
    				],
    				name: "PrizeDistributionPushed",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "prizeDistributionBuffer",
    				outputs: [
    					{
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "_draw",
    						type: "tuple"
    					},
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionBuffer.PrizeDistribution",
    						name: "_prizeDistribution",
    						type: "tuple"
    					}
    				],
    				name: "push",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "timelock",
    				outputs: [
    					{
    						internalType: "contract IDrawCalculatorTimelock",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 1,
    		address: "0xf025a8d9E6080F885e841C8cC0E324368D7C6577",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "PrizeDistributionBuffer",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "uint8",
    						name: "_cardinality",
    						type: "uint8"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint8",
    						name: "cardinality",
    						type: "uint8"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						indexed: false,
    						internalType: "struct IPrizeDistributionBuffer.PrizeDistribution",
    						name: "prizeDistribution",
    						type: "tuple"
    					}
    				],
    				name: "PrizeDistributionSet",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getBufferCardinality",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getNewestPrizeDistribution",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionBuffer.PrizeDistribution",
    						name: "prizeDistribution",
    						type: "tuple"
    					},
    					{
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getOldestPrizeDistribution",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionBuffer.PrizeDistribution",
    						name: "prizeDistribution",
    						type: "tuple"
    					},
    					{
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					}
    				],
    				name: "getPrizeDistribution",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionBuffer.PrizeDistribution",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getPrizeDistributionCount",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32[]",
    						name: "_drawIds",
    						type: "uint32[]"
    					}
    				],
    				name: "getPrizeDistributions",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionBuffer.PrizeDistribution[]",
    						name: "",
    						type: "tuple[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionBuffer.PrizeDistribution",
    						name: "_prizeDistribution",
    						type: "tuple"
    					}
    				],
    				name: "pushPrizeDistribution",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionBuffer.PrizeDistribution",
    						name: "_prizeDistribution",
    						type: "tuple"
    					}
    				],
    				name: "setPrizeDistribution",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 1,
    		address: "0x35A0dF72E1ea94B52F9EbE0D515928eCb663f39F",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "PrizeDistributionFactory",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IPrizeTierHistory",
    						name: "_prizeTierHistory",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawBuffer",
    						name: "_drawBuffer",
    						type: "address"
    					},
    					{
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "_prizeDistributionBuffer",
    						type: "address"
    					},
    					{
    						internalType: "contract ITicket",
    						name: "_ticket",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_minPickCost",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "PrizeDistributionPushed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "PrizeDistributionSet",
    				type: "event"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						internalType: "uint256",
    						name: "_totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "calculatePrizeDistribution",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionSource.PrizeDistribution",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						internalType: "uint256",
    						name: "_totalNetworkTicketSupply",
    						type: "uint256"
    					},
    					{
    						internalType: "uint32",
    						name: "_beaconPeriodSeconds",
    						type: "uint32"
    					},
    					{
    						internalType: "uint64",
    						name: "_drawTimestamp",
    						type: "uint64"
    					}
    				],
    				name: "calculatePrizeDistributionWithDrawData",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionSource.PrizeDistribution",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "drawBuffer",
    				outputs: [
    					{
    						internalType: "contract IDrawBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "minPickCost",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "prizeDistributionBuffer",
    				outputs: [
    					{
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "prizeTierHistory",
    				outputs: [
    					{
    						internalType: "contract IPrizeTierHistory",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						internalType: "uint256",
    						name: "_totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "pushPrizeDistribution",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionSource.PrizeDistribution",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						internalType: "uint256",
    						name: "_totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "setPrizeDistribution",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionSource.PrizeDistribution",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "ticket",
    				outputs: [
    					{
    						internalType: "contract ITicket",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 1,
    		address: "0xb9a179DcA5a7bf5f8B9E088437B3A85ebB495eFe",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "PrizeDistributor",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IERC20",
    						name: "_token",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawCalculator",
    						name: "_drawCalculator",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "payout",
    						type: "uint256"
    					}
    				],
    				name: "ClaimedDraw",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IDrawCalculator",
    						name: "calculator",
    						type: "address"
    					}
    				],
    				name: "DrawCalculatorSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IERC20",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "ERC20Withdrawn",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IERC20",
    						name: "token",
    						type: "address"
    					}
    				],
    				name: "TokenSet",
    				type: "event"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint32[]",
    						name: "_drawIds",
    						type: "uint32[]"
    					},
    					{
    						internalType: "bytes",
    						name: "_data",
    						type: "bytes"
    					}
    				],
    				name: "claim",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getDrawCalculator",
    				outputs: [
    					{
    						internalType: "contract IDrawCalculator",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					}
    				],
    				name: "getDrawPayoutBalanceOf",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getToken",
    				outputs: [
    					{
    						internalType: "contract IERC20",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IDrawCalculator",
    						name: "_newCalculator",
    						type: "address"
    					}
    				],
    				name: "setDrawCalculator",
    				outputs: [
    					{
    						internalType: "contract IDrawCalculator",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IERC20",
    						name: "_erc20Token",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "withdrawERC20",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 1,
    		address: "0x2193b28b2BdfBf805506C9D91Ed2021bA6fBc888",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "PrizeFlush",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_destination",
    						type: "address"
    					},
    					{
    						internalType: "contract IStrategy",
    						name: "_strategy",
    						type: "address"
    					},
    					{
    						internalType: "contract IReserve",
    						name: "_reserve",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "destination",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IReserve",
    						name: "reserve",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IStrategy",
    						name: "strategy",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "address",
    						name: "destination",
    						type: "address"
    					}
    				],
    				name: "DestinationSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "destination",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "Flushed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "contract IReserve",
    						name: "reserve",
    						type: "address"
    					}
    				],
    				name: "ReserveSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "contract IStrategy",
    						name: "strategy",
    						type: "address"
    					}
    				],
    				name: "StrategySet",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "flush",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getDestination",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getReserve",
    				outputs: [
    					{
    						internalType: "contract IReserve",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getStrategy",
    				outputs: [
    					{
    						internalType: "contract IStrategy",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_destination",
    						type: "address"
    					}
    				],
    				name: "setDestination",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IReserve",
    						name: "_reserve",
    						type: "address"
    					}
    				],
    				name: "setReserve",
    				outputs: [
    					{
    						internalType: "contract IReserve",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IStrategy",
    						name: "_strategy",
    						type: "address"
    					}
    				],
    				name: "setStrategy",
    				outputs: [
    					{
    						internalType: "contract IStrategy",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 1,
    		address: "0x47a5ABfAcDebf5af312B034B3b748935A0259136",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "PrizeSplitStrategy",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IPrizePool",
    						name: "_prizePool",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "contract IPrizePool",
    						name: "prizePool",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "totalPrizeCaptured",
    						type: "uint256"
    					}
    				],
    				name: "Distributed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "prizeAwarded",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "contract IControlledToken",
    						name: "token",
    						type: "address"
    					}
    				],
    				name: "PrizeSplitAwarded",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "target",
    						type: "uint256"
    					}
    				],
    				name: "PrizeSplitRemoved",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "target",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint16",
    						name: "percentage",
    						type: "uint16"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "index",
    						type: "uint256"
    					}
    				],
    				name: "PrizeSplitSet",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "ONE_AS_FIXED_POINT_3",
    				outputs: [
    					{
    						internalType: "uint16",
    						name: "",
    						type: "uint16"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "distribute",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getPrizePool",
    				outputs: [
    					{
    						internalType: "contract IPrizePool",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_prizeSplitIndex",
    						type: "uint256"
    					}
    				],
    				name: "getPrizeSplit",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "address",
    								name: "target",
    								type: "address"
    							},
    							{
    								internalType: "uint16",
    								name: "percentage",
    								type: "uint16"
    							}
    						],
    						internalType: "struct IPrizeSplit.PrizeSplitConfig",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getPrizeSplits",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "address",
    								name: "target",
    								type: "address"
    							},
    							{
    								internalType: "uint16",
    								name: "percentage",
    								type: "uint16"
    							}
    						],
    						internalType: "struct IPrizeSplit.PrizeSplitConfig[]",
    						name: "",
    						type: "tuple[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "address",
    								name: "target",
    								type: "address"
    							},
    							{
    								internalType: "uint16",
    								name: "percentage",
    								type: "uint16"
    							}
    						],
    						internalType: "struct IPrizeSplit.PrizeSplitConfig",
    						name: "_prizeSplit",
    						type: "tuple"
    					},
    					{
    						internalType: "uint8",
    						name: "_prizeSplitIndex",
    						type: "uint8"
    					}
    				],
    				name: "setPrizeSplit",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "address",
    								name: "target",
    								type: "address"
    							},
    							{
    								internalType: "uint16",
    								name: "percentage",
    								type: "uint16"
    							}
    						],
    						internalType: "struct IPrizeSplit.PrizeSplitConfig[]",
    						name: "_newPrizeSplits",
    						type: "tuple[]"
    					}
    				],
    				name: "setPrizeSplits",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 1,
    		address: "0x24C3e15BdC10Ce2CB1BEc56cd43F397cE9B89430",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "PrizeTierHistory",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						indexed: false,
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "prizeTier",
    						type: "tuple"
    					}
    				],
    				name: "PrizeTierPushed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						indexed: false,
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "prizeTier",
    						type: "tuple"
    					}
    				],
    				name: "PrizeTierSet",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "count",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getNewestDrawId",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getOldestDrawId",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					}
    				],
    				name: "getPrizeTier",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "index",
    						type: "uint256"
    					}
    				],
    				name: "getPrizeTierAtIndex",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32[]",
    						name: "_drawIds",
    						type: "uint32[]"
    					}
    				],
    				name: "getPrizeTierList",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						internalType: "struct IPrizeTierHistory.PrizeTier[]",
    						name: "",
    						type: "tuple[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "newPrizeTier",
    						type: "tuple"
    					}
    				],
    				name: "popAndPush",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "nextPrizeTier",
    						type: "tuple"
    					}
    				],
    				name: "push",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "newPrizeTier",
    						type: "tuple"
    					}
    				],
    				name: "replace",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 1,
    		address: "0x3A06B40C67515cda47E44b57116488F73A441F72",
    		version: [
    			"2"
    		],
    		type: "RNGChainlink",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract VRFCoordinatorV2Interface",
    						name: "_vrfCoordinator",
    						type: "address"
    					},
    					{
    						internalType: "uint64",
    						name: "_subscriptionId",
    						type: "uint64"
    					},
    					{
    						internalType: "bytes32",
    						name: "_keyHash",
    						type: "bytes32"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "have",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "want",
    						type: "address"
    					}
    				],
    				name: "OnlyCoordinatorCanFulfill",
    				type: "error"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "bytes32",
    						name: "keyHash",
    						type: "bytes32"
    					}
    				],
    				name: "KeyHashSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "requestId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "randomNumber",
    						type: "uint256"
    					}
    				],
    				name: "RandomNumberCompleted",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "requestId",
    						type: "uint32"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "sender",
    						type: "address"
    					}
    				],
    				name: "RandomNumberRequested",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint64",
    						name: "subscriptionId",
    						type: "uint64"
    					}
    				],
    				name: "SubscriptionIdSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract VRFCoordinatorV2Interface",
    						name: "vrfCoordinator",
    						type: "address"
    					}
    				],
    				name: "VrfCoordinatorSet",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getKeyHash",
    				outputs: [
    					{
    						internalType: "bytes32",
    						name: "",
    						type: "bytes32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getLastRequestId",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "requestId",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getRequestFee",
    				outputs: [
    					{
    						internalType: "address",
    						name: "feeToken",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "requestFee",
    						type: "uint256"
    					}
    				],
    				stateMutability: "pure",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getSubscriptionId",
    				outputs: [
    					{
    						internalType: "uint64",
    						name: "",
    						type: "uint64"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getVrfCoordinator",
    				outputs: [
    					{
    						internalType: "contract VRFCoordinatorV2Interface",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_internalRequestId",
    						type: "uint32"
    					}
    				],
    				name: "isRequestComplete",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "isCompleted",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_internalRequestId",
    						type: "uint32"
    					}
    				],
    				name: "randomNumber",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "randomNum",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "requestId",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256[]",
    						name: "randomWords",
    						type: "uint256[]"
    					}
    				],
    				name: "rawFulfillRandomWords",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "requestRandomNumber",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "requestId",
    						type: "uint32"
    					},
    					{
    						internalType: "uint32",
    						name: "lockBlock",
    						type: "uint32"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "bytes32",
    						name: "_keyHash",
    						type: "bytes32"
    					}
    				],
    				name: "setKeyhash",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint64",
    						name: "_subscriptionId",
    						type: "uint64"
    					}
    				],
    				name: "setSubscriptionId",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 1,
    		address: "0xadB4D93D84b18b5D82063aCf58b21587c92fdfb5",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "Reserve",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IERC20",
    						name: "_token",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "reserveAccumulated",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "withdrawAccumulated",
    						type: "uint256"
    					}
    				],
    				name: "Checkpoint",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IERC20",
    						name: "token",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "Withdrawn",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "checkpoint",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_startTimestamp",
    						type: "uint32"
    					},
    					{
    						internalType: "uint32",
    						name: "_endTimestamp",
    						type: "uint32"
    					}
    				],
    				name: "getReserveAccumulatedBetween",
    				outputs: [
    					{
    						internalType: "uint224",
    						name: "",
    						type: "uint224"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getToken",
    				outputs: [
    					{
    						internalType: "contract IERC20",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "token",
    				outputs: [
    					{
    						internalType: "contract IERC20",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "withdrawAccumulator",
    				outputs: [
    					{
    						internalType: "uint224",
    						name: "",
    						type: "uint224"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "withdrawTo",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 1,
    		address: "0x5cFbEE38362B9A60be276763753f64245EA990F7",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "TWABDelegator",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "string",
    						name: "name_",
    						type: "string"
    					},
    					{
    						internalType: "string",
    						name: "symbol_",
    						type: "string"
    					},
    					{
    						internalType: "contract ITicket",
    						name: "_ticket",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					}
    				],
    				name: "Approval",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "slot",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegatee",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint96",
    						name: "lockUntil",
    						type: "uint96"
    					},
    					{
    						indexed: false,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					}
    				],
    				name: "DelegateeUpdated",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "slot",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint96",
    						name: "lockUntil",
    						type: "uint96"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegatee",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "contract Delegation",
    						name: "delegation",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					}
    				],
    				name: "DelegationCreated",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "slot",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					}
    				],
    				name: "DelegationFunded",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "slot",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					}
    				],
    				name: "DelegationFundedFromStake",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "representative",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "bool",
    						name: "set",
    						type: "bool"
    					}
    				],
    				name: "RepresentativeSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "ticket",
    						type: "address"
    					}
    				],
    				name: "TicketSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "TicketsStaked",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "TicketsUnstaked",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					}
    				],
    				name: "Transfer",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "slot",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					}
    				],
    				name: "TransferredDelegation",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "slot",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					}
    				],
    				name: "WithdrewDelegationToStake",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "MAX_LOCK",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					}
    				],
    				name: "allowance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "approve",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "account",
    						type: "address"
    					}
    				],
    				name: "balanceOf",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					}
    				],
    				name: "computeDelegationAddress",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_delegatee",
    						type: "address"
    					},
    					{
    						internalType: "uint96",
    						name: "_lockDuration",
    						type: "uint96"
    					}
    				],
    				name: "createDelegation",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "decimals",
    				outputs: [
    					{
    						internalType: "uint8",
    						name: "",
    						type: "uint8"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "subtractedValue",
    						type: "uint256"
    					}
    				],
    				name: "decreaseAllowance",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "delegationInstance",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "fundDelegation",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "fundDelegationFromStake",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					}
    				],
    				name: "getDelegation",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "delegation",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "delegatee",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "balance",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256",
    						name: "lockUntil",
    						type: "uint256"
    					},
    					{
    						internalType: "bool",
    						name: "wasCreated",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "addedValue",
    						type: "uint256"
    					}
    				],
    				name: "increaseAllowance",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_representative",
    						type: "address"
    					}
    				],
    				name: "isRepresentativeOf",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "bytes[]",
    						name: "_data",
    						type: "bytes[]"
    					}
    				],
    				name: "multicall",
    				outputs: [
    					{
    						internalType: "bytes[]",
    						name: "",
    						type: "bytes[]"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "name",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					},
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "deadline",
    								type: "uint256"
    							},
    							{
    								internalType: "uint8",
    								name: "v",
    								type: "uint8"
    							},
    							{
    								internalType: "bytes32",
    								name: "r",
    								type: "bytes32"
    							},
    							{
    								internalType: "bytes32",
    								name: "s",
    								type: "bytes32"
    							}
    						],
    						internalType: "struct PermitAndMulticall.Signature",
    						name: "_permitSignature",
    						type: "tuple"
    					},
    					{
    						internalType: "bytes[]",
    						name: "_data",
    						type: "bytes[]"
    					}
    				],
    				name: "permitAndMulticall",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_representative",
    						type: "address"
    					},
    					{
    						internalType: "bool",
    						name: "_set",
    						type: "bool"
    					}
    				],
    				name: "setRepresentative",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "stake",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "symbol",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "ticket",
    				outputs: [
    					{
    						internalType: "contract ITicket",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "totalSupply",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "transfer",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					}
    				],
    				name: "transferDelegationTo",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "sender",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "transferFrom",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "unstake",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_delegatee",
    						type: "address"
    					},
    					{
    						internalType: "uint96",
    						name: "_lockDuration",
    						type: "uint96"
    					}
    				],
    				name: "updateDelegatee",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "withdrawDelegationToStake",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 1,
    		address: "0xdd4d117723C257CEe402285D3aCF218E9A8236E1",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "Ticket",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "string",
    						name: "_name",
    						type: "string"
    					},
    					{
    						internalType: "string",
    						name: "_symbol",
    						type: "string"
    					},
    					{
    						internalType: "uint8",
    						name: "decimals_",
    						type: "uint8"
    					},
    					{
    						internalType: "address",
    						name: "_controller",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					}
    				],
    				name: "Approval",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegate",
    						type: "address"
    					}
    				],
    				name: "Delegated",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "string",
    						name: "name",
    						type: "string"
    					},
    					{
    						indexed: false,
    						internalType: "string",
    						name: "symbol",
    						type: "string"
    					},
    					{
    						indexed: false,
    						internalType: "uint8",
    						name: "decimals",
    						type: "uint8"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "controller",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint224",
    								name: "amount",
    								type: "uint224"
    							},
    							{
    								internalType: "uint32",
    								name: "timestamp",
    								type: "uint32"
    							}
    						],
    						indexed: false,
    						internalType: "struct ObservationLib.Observation",
    						name: "newTotalSupplyTwab",
    						type: "tuple"
    					}
    				],
    				name: "NewTotalSupplyTwab",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegate",
    						type: "address"
    					},
    					{
    						components: [
    							{
    								internalType: "uint224",
    								name: "amount",
    								type: "uint224"
    							},
    							{
    								internalType: "uint32",
    								name: "timestamp",
    								type: "uint32"
    							}
    						],
    						indexed: false,
    						internalType: "struct ObservationLib.Observation",
    						name: "newTwab",
    						type: "tuple"
    					}
    				],
    				name: "NewUserTwab",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "string",
    						name: "name",
    						type: "string"
    					},
    					{
    						indexed: false,
    						internalType: "string",
    						name: "symbol",
    						type: "string"
    					},
    					{
    						indexed: false,
    						internalType: "uint8",
    						name: "decimals",
    						type: "uint8"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "controller",
    						type: "address"
    					}
    				],
    				name: "TicketInitialized",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					}
    				],
    				name: "Transfer",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "DOMAIN_SEPARATOR",
    				outputs: [
    					{
    						internalType: "bytes32",
    						name: "",
    						type: "bytes32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					}
    				],
    				name: "allowance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "approve",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "account",
    						type: "address"
    					}
    				],
    				name: "balanceOf",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "controller",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "controllerBurn",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_operator",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "controllerBurnFrom",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					}
    				],
    				name: "controllerDelegateFor",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "controllerMint",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "decimals",
    				outputs: [
    					{
    						internalType: "uint8",
    						name: "",
    						type: "uint8"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "subtractedValue",
    						type: "uint256"
    					}
    				],
    				name: "decreaseAllowance",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					}
    				],
    				name: "delegate",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					}
    				],
    				name: "delegateOf",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_newDelegate",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_deadline",
    						type: "uint256"
    					},
    					{
    						internalType: "uint8",
    						name: "_v",
    						type: "uint8"
    					},
    					{
    						internalType: "bytes32",
    						name: "_r",
    						type: "bytes32"
    					},
    					{
    						internalType: "bytes32",
    						name: "_s",
    						type: "bytes32"
    					}
    				],
    				name: "delegateWithSignature",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					}
    				],
    				name: "getAccountDetails",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint208",
    								name: "balance",
    								type: "uint208"
    							},
    							{
    								internalType: "uint24",
    								name: "nextTwabIndex",
    								type: "uint24"
    							},
    							{
    								internalType: "uint24",
    								name: "cardinality",
    								type: "uint24"
    							}
    						],
    						internalType: "struct TwabLib.AccountDetails",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint64",
    						name: "_startTime",
    						type: "uint64"
    					},
    					{
    						internalType: "uint64",
    						name: "_endTime",
    						type: "uint64"
    					}
    				],
    				name: "getAverageBalanceBetween",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint64[]",
    						name: "_startTimes",
    						type: "uint64[]"
    					},
    					{
    						internalType: "uint64[]",
    						name: "_endTimes",
    						type: "uint64[]"
    					}
    				],
    				name: "getAverageBalancesBetween",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint64[]",
    						name: "_startTimes",
    						type: "uint64[]"
    					},
    					{
    						internalType: "uint64[]",
    						name: "_endTimes",
    						type: "uint64[]"
    					}
    				],
    				name: "getAverageTotalSuppliesBetween",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint64",
    						name: "_target",
    						type: "uint64"
    					}
    				],
    				name: "getBalanceAt",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint64[]",
    						name: "_targets",
    						type: "uint64[]"
    					}
    				],
    				name: "getBalancesAt",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint64[]",
    						name: "_targets",
    						type: "uint64[]"
    					}
    				],
    				name: "getTotalSuppliesAt",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint64",
    						name: "_target",
    						type: "uint64"
    					}
    				],
    				name: "getTotalSupplyAt",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint16",
    						name: "_index",
    						type: "uint16"
    					}
    				],
    				name: "getTwab",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint224",
    								name: "amount",
    								type: "uint224"
    							},
    							{
    								internalType: "uint32",
    								name: "timestamp",
    								type: "uint32"
    							}
    						],
    						internalType: "struct ObservationLib.Observation",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "addedValue",
    						type: "uint256"
    					}
    				],
    				name: "increaseAllowance",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "name",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					}
    				],
    				name: "nonces",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256",
    						name: "deadline",
    						type: "uint256"
    					},
    					{
    						internalType: "uint8",
    						name: "v",
    						type: "uint8"
    					},
    					{
    						internalType: "bytes32",
    						name: "r",
    						type: "bytes32"
    					},
    					{
    						internalType: "bytes32",
    						name: "s",
    						type: "bytes32"
    					}
    				],
    				name: "permit",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "symbol",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "totalSupply",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "transfer",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "sender",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "transferFrom",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 1,
    		address: "0xe7934EE0c8b877269A5688ee26dd853785212618",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "TwabRewards",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "contract ITicket",
    						name: "_ticket",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "promotionId",
    						type: "uint256"
    					}
    				],
    				name: "PromotionCreated",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "promotionId",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "PromotionDestroyed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "promotionId",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint8",
    						name: "epochNumber",
    						type: "uint8"
    					}
    				],
    				name: "PromotionEnded",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "promotionId",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "numberOfEpochs",
    						type: "uint256"
    					}
    				],
    				name: "PromotionExtended",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "promotionId",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint8[]",
    						name: "epochIds",
    						type: "uint8[]"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "RewardsClaimed",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "GRACE_PERIOD",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					},
    					{
    						internalType: "uint8[]",
    						name: "_epochIds",
    						type: "uint8[]"
    					}
    				],
    				name: "claimRewards",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IERC20",
    						name: "_token",
    						type: "address"
    					},
    					{
    						internalType: "uint64",
    						name: "_startTimestamp",
    						type: "uint64"
    					},
    					{
    						internalType: "uint256",
    						name: "_tokensPerEpoch",
    						type: "uint256"
    					},
    					{
    						internalType: "uint48",
    						name: "_epochDuration",
    						type: "uint48"
    					},
    					{
    						internalType: "uint8",
    						name: "_numberOfEpochs",
    						type: "uint8"
    					}
    				],
    				name: "createPromotion",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					}
    				],
    				name: "destroyPromotion",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					}
    				],
    				name: "endPromotion",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					},
    					{
    						internalType: "uint8",
    						name: "_numberOfEpochs",
    						type: "uint8"
    					}
    				],
    				name: "extendPromotion",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					}
    				],
    				name: "getCurrentEpochId",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					}
    				],
    				name: "getPromotion",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "address",
    								name: "creator",
    								type: "address"
    							},
    							{
    								internalType: "uint64",
    								name: "startTimestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint8",
    								name: "numberOfEpochs",
    								type: "uint8"
    							},
    							{
    								internalType: "uint48",
    								name: "epochDuration",
    								type: "uint48"
    							},
    							{
    								internalType: "uint48",
    								name: "createdAt",
    								type: "uint48"
    							},
    							{
    								internalType: "contract IERC20",
    								name: "token",
    								type: "address"
    							},
    							{
    								internalType: "uint256",
    								name: "tokensPerEpoch",
    								type: "uint256"
    							},
    							{
    								internalType: "uint256",
    								name: "rewardsUnclaimed",
    								type: "uint256"
    							}
    						],
    						internalType: "struct ITwabRewards.Promotion",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					}
    				],
    				name: "getRemainingRewards",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					},
    					{
    						internalType: "uint8[]",
    						name: "_epochIds",
    						type: "uint8[]"
    					}
    				],
    				name: "getRewardsAmount",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "ticket",
    				outputs: [
    					{
    						internalType: "contract ITicket",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 1,
    		address: "0xd89a09084555a7D0ABe7B111b1f78DFEdDd638Be",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "YieldSourcePrizePool",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IYieldSource",
    						name: "_yieldSource",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "AwardCaptured",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "winner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "Awarded",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "winner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "AwardedExternalERC20",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "winner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256[]",
    						name: "tokenIds",
    						type: "uint256[]"
    					}
    				],
    				name: "AwardedExternalERC721",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "balanceCap",
    						type: "uint256"
    					}
    				],
    				name: "BalanceCapSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "token",
    						type: "address"
    					}
    				],
    				name: "ControlledTokenAdded",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "yieldSource",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "operator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "Deposited",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "bytes",
    						name: "error",
    						type: "bytes"
    					}
    				],
    				name: "ErrorAwardingExternalERC721",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "liquidityCap",
    						type: "uint256"
    					}
    				],
    				name: "LiquidityCapSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "prizeStrategy",
    						type: "address"
    					}
    				],
    				name: "PrizeStrategySet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "Swept",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "ticket",
    						type: "address"
    					}
    				],
    				name: "TicketSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "TransferredExternalERC20",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "operator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "redeemed",
    						type: "uint256"
    					}
    				],
    				name: "Withdrawal",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "VERSION",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "award",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "awardBalance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_externalToken",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "awardExternalERC20",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_externalToken",
    						type: "address"
    					},
    					{
    						internalType: "uint256[]",
    						name: "_tokenIds",
    						type: "uint256[]"
    					}
    				],
    				name: "awardExternalERC721",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "balance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_externalToken",
    						type: "address"
    					}
    				],
    				name: "canAwardExternal",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "captureAwardBalance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract ICompLike",
    						name: "_compLike",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					}
    				],
    				name: "compLikeDelegate",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "depositTo",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_delegate",
    						type: "address"
    					}
    				],
    				name: "depositToAndDelegate",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getAccountedBalance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getBalanceCap",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getLiquidityCap",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getPrizeStrategy",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getTicket",
    				outputs: [
    					{
    						internalType: "contract ITicket",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getToken",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract ITicket",
    						name: "_controlledToken",
    						type: "address"
    					}
    				],
    				name: "isControlled",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					},
    					{
    						internalType: "bytes",
    						name: "",
    						type: "bytes"
    					}
    				],
    				name: "onERC721Received",
    				outputs: [
    					{
    						internalType: "bytes4",
    						name: "",
    						type: "bytes4"
    					}
    				],
    				stateMutability: "pure",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_balanceCap",
    						type: "uint256"
    					}
    				],
    				name: "setBalanceCap",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_liquidityCap",
    						type: "uint256"
    					}
    				],
    				name: "setLiquidityCap",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_prizeStrategy",
    						type: "address"
    					}
    				],
    				name: "setPrizeStrategy",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract ITicket",
    						name: "_ticket",
    						type: "address"
    					}
    				],
    				name: "setTicket",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "sweep",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_externalToken",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "transferExternalERC20",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_from",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "withdrawFrom",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "yieldSource",
    				outputs: [
    					{
    						internalType: "contract IYieldSource",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 137,
    		address: "0xD4F6d570133401079D213EcF4A14FA0B4bfB5b9C",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "ATokenYieldSource",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "contract ATokenInterface",
    						name: "_aToken",
    						type: "address"
    					},
    					{
    						internalType: "contract IAaveIncentivesController",
    						name: "_incentivesController",
    						type: "address"
    					},
    					{
    						internalType: "contract ILendingPoolAddressesProviderRegistry",
    						name: "_lendingPoolAddressesProviderRegistry",
    						type: "address"
    					},
    					{
    						internalType: "uint8",
    						name: "_decimals",
    						type: "uint8"
    					},
    					{
    						internalType: "string",
    						name: "_symbol",
    						type: "string"
    					},
    					{
    						internalType: "string",
    						name: "_name",
    						type: "string"
    					},
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IAToken",
    						name: "aToken",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "contract ILendingPoolAddressesProviderRegistry",
    						name: "lendingPoolAddressesProviderRegistry",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint8",
    						name: "decimals",
    						type: "uint8"
    					},
    					{
    						indexed: false,
    						internalType: "string",
    						name: "name",
    						type: "string"
    					},
    					{
    						indexed: false,
    						internalType: "string",
    						name: "symbol",
    						type: "string"
    					},
    					{
    						indexed: false,
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					}
    				],
    				name: "ATokenYieldSourceInitialized",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					}
    				],
    				name: "Approval",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "Claimed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "shares",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "RedeemedToken",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "Sponsored",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "shares",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					}
    				],
    				name: "SuppliedTokenTo",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					}
    				],
    				name: "Transfer",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "contract IERC20",
    						name: "token",
    						type: "address"
    					}
    				],
    				name: "TransferredERC20",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "aToken",
    				outputs: [
    					{
    						internalType: "contract ATokenInterface",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					}
    				],
    				name: "allowance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "approve",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "approveMaxAmount",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "account",
    						type: "address"
    					}
    				],
    				name: "balanceOf",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "addr",
    						type: "address"
    					}
    				],
    				name: "balanceOfToken",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "to",
    						type: "address"
    					}
    				],
    				name: "claimRewards",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "decimals",
    				outputs: [
    					{
    						internalType: "uint8",
    						name: "",
    						type: "uint8"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "subtractedValue",
    						type: "uint256"
    					}
    				],
    				name: "decreaseAllowance",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "depositToken",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "incentivesController",
    				outputs: [
    					{
    						internalType: "contract IAaveIncentivesController",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "addedValue",
    						type: "uint256"
    					}
    				],
    				name: "increaseAllowance",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "lendingPoolAddressesProviderRegistry",
    				outputs: [
    					{
    						internalType: "contract ILendingPoolAddressesProviderRegistry",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "name",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "redeemAmount",
    						type: "uint256"
    					}
    				],
    				name: "redeemToken",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "sponsor",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "mintAmount",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "to",
    						type: "address"
    					}
    				],
    				name: "supplyTokenTo",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "symbol",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "totalSupply",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "transfer",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IERC20",
    						name: "erc20Token",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "transferERC20",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "sender",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "transferFrom",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 137,
    		address: "0x94f23320ac3Ed351782791506266351eb4183e8d",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "BeaconTimelockTrigger",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IPrizeDistributionFactory",
    						name: "_prizeDistributionFactory",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawCalculatorTimelock",
    						name: "_timelock",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IPrizeDistributionFactory",
    						name: "prizeDistributionFactory",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IDrawCalculatorTimelock",
    						name: "timelock",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						indexed: false,
    						internalType: "struct IDrawBeacon.Draw",
    						name: "draw",
    						type: "tuple"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "DrawLockedAndTotalNetworkTicketSupplyPushed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "prizeDistributionFactory",
    				outputs: [
    					{
    						internalType: "contract IPrizeDistributionFactory",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "_draw",
    						type: "tuple"
    					},
    					{
    						internalType: "uint256",
    						name: "_totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "push",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "timelock",
    				outputs: [
    					{
    						internalType: "contract IDrawCalculatorTimelock",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 137,
    		address: "0x52325504bD35aeC31D842F62A113E9e4b665d885",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "DrawBeacon",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawBuffer",
    						name: "_drawBuffer",
    						type: "address"
    					},
    					{
    						internalType: "contract RNGInterface",
    						name: "_rng",
    						type: "address"
    					},
    					{
    						internalType: "uint32",
    						name: "_nextDrawId",
    						type: "uint32"
    					},
    					{
    						internalType: "uint64",
    						name: "_beaconPeriodStart",
    						type: "uint64"
    					},
    					{
    						internalType: "uint32",
    						name: "_beaconPeriodSeconds",
    						type: "uint32"
    					},
    					{
    						internalType: "uint32",
    						name: "_rngTimeout",
    						type: "uint32"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint32",
    						name: "drawPeriodSeconds",
    						type: "uint32"
    					}
    				],
    				name: "BeaconPeriodSecondsUpdated",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint64",
    						name: "startedAt",
    						type: "uint64"
    					}
    				],
    				name: "BeaconPeriodStarted",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint32",
    						name: "nextDrawId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint64",
    						name: "beaconPeriodStartedAt",
    						type: "uint64"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IDrawBuffer",
    						name: "newDrawBuffer",
    						type: "address"
    					}
    				],
    				name: "DrawBufferUpdated",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "rngRequestId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint32",
    						name: "rngLockBlock",
    						type: "uint32"
    					}
    				],
    				name: "DrawCancelled",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "randomNumber",
    						type: "uint256"
    					}
    				],
    				name: "DrawCompleted",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "rngRequestId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint32",
    						name: "rngLockBlock",
    						type: "uint32"
    					}
    				],
    				name: "DrawStarted",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract RNGInterface",
    						name: "rngService",
    						type: "address"
    					}
    				],
    				name: "RngServiceUpdated",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint32",
    						name: "rngTimeout",
    						type: "uint32"
    					}
    				],
    				name: "RngTimeoutSet",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "beaconPeriodEndAt",
    				outputs: [
    					{
    						internalType: "uint64",
    						name: "",
    						type: "uint64"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "beaconPeriodRemainingSeconds",
    				outputs: [
    					{
    						internalType: "uint64",
    						name: "",
    						type: "uint64"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint64",
    						name: "_time",
    						type: "uint64"
    					}
    				],
    				name: "calculateNextBeaconPeriodStartTime",
    				outputs: [
    					{
    						internalType: "uint64",
    						name: "",
    						type: "uint64"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "calculateNextBeaconPeriodStartTimeFromCurrentTime",
    				outputs: [
    					{
    						internalType: "uint64",
    						name: "",
    						type: "uint64"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "canCompleteDraw",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "canStartDraw",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "cancelDraw",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "completeDraw",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getBeaconPeriodSeconds",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getBeaconPeriodStartedAt",
    				outputs: [
    					{
    						internalType: "uint64",
    						name: "",
    						type: "uint64"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getDrawBuffer",
    				outputs: [
    					{
    						internalType: "contract IDrawBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getLastRngLockBlock",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getLastRngRequestId",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getNextDrawId",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getRngService",
    				outputs: [
    					{
    						internalType: "contract RNGInterface",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getRngTimeout",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "isBeaconPeriodOver",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "isRngCompleted",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "isRngRequested",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "isRngTimedOut",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_beaconPeriodSeconds",
    						type: "uint32"
    					}
    				],
    				name: "setBeaconPeriodSeconds",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IDrawBuffer",
    						name: "newDrawBuffer",
    						type: "address"
    					}
    				],
    				name: "setDrawBuffer",
    				outputs: [
    					{
    						internalType: "contract IDrawBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract RNGInterface",
    						name: "_rngService",
    						type: "address"
    					}
    				],
    				name: "setRngService",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_rngTimeout",
    						type: "uint32"
    					}
    				],
    				name: "setRngTimeout",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "startDraw",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 137,
    		address: "0x44B1d66E7B9d4467139924f31754F34cbC392f44",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "DrawBuffer",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "uint8",
    						name: "_cardinality",
    						type: "uint8"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						indexed: false,
    						internalType: "struct IDrawBeacon.Draw",
    						name: "draw",
    						type: "tuple"
    					}
    				],
    				name: "DrawSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "MAX_CARDINALITY",
    				outputs: [
    					{
    						internalType: "uint16",
    						name: "",
    						type: "uint16"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getBufferCardinality",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					}
    				],
    				name: "getDraw",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getDrawCount",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32[]",
    						name: "_drawIds",
    						type: "uint32[]"
    					}
    				],
    				name: "getDraws",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw[]",
    						name: "",
    						type: "tuple[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getNewestDraw",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getOldestDraw",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "_draw",
    						type: "tuple"
    					}
    				],
    				name: "pushDraw",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "_newDraw",
    						type: "tuple"
    					}
    				],
    				name: "setDraw",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 137,
    		address: "0x3976BD6F4B82C97314570A77bc1e979f7A839A24",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "DrawCalculator",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "contract ITicket",
    						name: "_ticket",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawBuffer",
    						name: "_drawBuffer",
    						type: "address"
    					},
    					{
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "_prizeDistributionBuffer",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "ticket",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IDrawBuffer",
    						name: "drawBuffer",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "prizeDistributionBuffer",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract PrizeDistributor",
    						name: "prizeDistributor",
    						type: "address"
    					}
    				],
    				name: "PrizeDistributorSet",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "TIERS_LENGTH",
    				outputs: [
    					{
    						internalType: "uint8",
    						name: "",
    						type: "uint8"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint32[]",
    						name: "_drawIds",
    						type: "uint32[]"
    					},
    					{
    						internalType: "bytes",
    						name: "_pickIndicesForDraws",
    						type: "bytes"
    					}
    				],
    				name: "calculate",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					},
    					{
    						internalType: "bytes",
    						name: "",
    						type: "bytes"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "drawBuffer",
    				outputs: [
    					{
    						internalType: "contract IDrawBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getDrawBuffer",
    				outputs: [
    					{
    						internalType: "contract IDrawBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint32[]",
    						name: "_drawIds",
    						type: "uint32[]"
    					}
    				],
    				name: "getNormalizedBalancesForDrawIds",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getPrizeDistributionBuffer",
    				outputs: [
    					{
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "prizeDistributionBuffer",
    				outputs: [
    					{
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "ticket",
    				outputs: [
    					{
    						internalType: "contract ITicket",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 137,
    		address: "0x0C22044B0aA634e26C5B5e50E2B958C7aF59c161",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "DrawCalculatorTimelock",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawCalculator",
    						name: "_calculator",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IDrawCalculator",
    						name: "drawCalculator",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint64",
    						name: "timestamp",
    						type: "uint64"
    					}
    				],
    				name: "LockedDraw",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							}
    						],
    						indexed: false,
    						internalType: "struct IDrawCalculatorTimelock.Timelock",
    						name: "timelock",
    						type: "tuple"
    					}
    				],
    				name: "TimelockSet",
    				type: "event"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "user",
    						type: "address"
    					},
    					{
    						internalType: "uint32[]",
    						name: "drawIds",
    						type: "uint32[]"
    					},
    					{
    						internalType: "bytes",
    						name: "data",
    						type: "bytes"
    					}
    				],
    				name: "calculate",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					},
    					{
    						internalType: "bytes",
    						name: "",
    						type: "bytes"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getDrawCalculator",
    				outputs: [
    					{
    						internalType: "contract IDrawCalculator",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getTimelock",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawCalculatorTimelock.Timelock",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "hasElapsed",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						internalType: "uint64",
    						name: "_timestamp",
    						type: "uint64"
    					}
    				],
    				name: "lock",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawCalculatorTimelock.Timelock",
    						name: "_timelock",
    						type: "tuple"
    					}
    				],
    				name: "setTimelock",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 137,
    		address: "0xc366bF1a054CA495c09B1A722D863ac65746138E",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "L2TimelockTrigger",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawBuffer",
    						name: "_drawBuffer",
    						type: "address"
    					},
    					{
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "_prizeDistributionBuffer",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawCalculatorTimelock",
    						name: "_timelock",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IDrawBuffer",
    						name: "drawBuffer",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "prizeDistributionBuffer",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IDrawCalculatorTimelock",
    						name: "timelock",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						indexed: false,
    						internalType: "struct IDrawBeacon.Draw",
    						name: "draw",
    						type: "tuple"
    					},
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						indexed: false,
    						internalType: "struct IPrizeDistributionBuffer.PrizeDistribution",
    						name: "prizeDistribution",
    						type: "tuple"
    					}
    				],
    				name: "DrawAndPrizeDistributionPushed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "drawBuffer",
    				outputs: [
    					{
    						internalType: "contract IDrawBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "prizeDistributionBuffer",
    				outputs: [
    					{
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "_draw",
    						type: "tuple"
    					},
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionBuffer.PrizeDistribution",
    						name: "_prizeDistribution",
    						type: "tuple"
    					}
    				],
    				name: "push",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "timelock",
    				outputs: [
    					{
    						internalType: "contract IDrawCalculatorTimelock",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 137,
    		address: "0xcf6030BDEaB4E503D186426510aD88C1DA7125A3",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "PrizeDistributionBuffer",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "uint8",
    						name: "_cardinality",
    						type: "uint8"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint8",
    						name: "cardinality",
    						type: "uint8"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						indexed: false,
    						internalType: "struct IPrizeDistributionBuffer.PrizeDistribution",
    						name: "prizeDistribution",
    						type: "tuple"
    					}
    				],
    				name: "PrizeDistributionSet",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getBufferCardinality",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getNewestPrizeDistribution",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionBuffer.PrizeDistribution",
    						name: "prizeDistribution",
    						type: "tuple"
    					},
    					{
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getOldestPrizeDistribution",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionBuffer.PrizeDistribution",
    						name: "prizeDistribution",
    						type: "tuple"
    					},
    					{
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					}
    				],
    				name: "getPrizeDistribution",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionBuffer.PrizeDistribution",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getPrizeDistributionCount",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32[]",
    						name: "_drawIds",
    						type: "uint32[]"
    					}
    				],
    				name: "getPrizeDistributions",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionBuffer.PrizeDistribution[]",
    						name: "",
    						type: "tuple[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionBuffer.PrizeDistribution",
    						name: "_prizeDistribution",
    						type: "tuple"
    					}
    				],
    				name: "pushPrizeDistribution",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionBuffer.PrizeDistribution",
    						name: "_prizeDistribution",
    						type: "tuple"
    					}
    				],
    				name: "setPrizeDistribution",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 137,
    		address: "0x38004713B1793f00c5B497E3eCC1a50697e5FfaE",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "PrizeDistributionFactory",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IPrizeTierHistory",
    						name: "_prizeTierHistory",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawBuffer",
    						name: "_drawBuffer",
    						type: "address"
    					},
    					{
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "_prizeDistributionBuffer",
    						type: "address"
    					},
    					{
    						internalType: "contract ITicket",
    						name: "_ticket",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_minPickCost",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "PrizeDistributionPushed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "PrizeDistributionSet",
    				type: "event"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						internalType: "uint256",
    						name: "_totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "calculatePrizeDistribution",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionSource.PrizeDistribution",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						internalType: "uint256",
    						name: "_totalNetworkTicketSupply",
    						type: "uint256"
    					},
    					{
    						internalType: "uint32",
    						name: "_beaconPeriodSeconds",
    						type: "uint32"
    					},
    					{
    						internalType: "uint64",
    						name: "_drawTimestamp",
    						type: "uint64"
    					}
    				],
    				name: "calculatePrizeDistributionWithDrawData",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionSource.PrizeDistribution",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "drawBuffer",
    				outputs: [
    					{
    						internalType: "contract IDrawBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "minPickCost",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "prizeDistributionBuffer",
    				outputs: [
    					{
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "prizeTierHistory",
    				outputs: [
    					{
    						internalType: "contract IPrizeTierHistory",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						internalType: "uint256",
    						name: "_totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "pushPrizeDistribution",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionSource.PrizeDistribution",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						internalType: "uint256",
    						name: "_totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "setPrizeDistribution",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionSource.PrizeDistribution",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "ticket",
    				outputs: [
    					{
    						internalType: "contract ITicket",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 137,
    		address: "0x8141BcFBcEE654c5dE17C4e2B2AF26B67f9B9056",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "PrizeDistributor",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IERC20",
    						name: "_token",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawCalculator",
    						name: "_drawCalculator",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "payout",
    						type: "uint256"
    					}
    				],
    				name: "ClaimedDraw",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IDrawCalculator",
    						name: "calculator",
    						type: "address"
    					}
    				],
    				name: "DrawCalculatorSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IERC20",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "ERC20Withdrawn",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IERC20",
    						name: "token",
    						type: "address"
    					}
    				],
    				name: "TokenSet",
    				type: "event"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint32[]",
    						name: "_drawIds",
    						type: "uint32[]"
    					},
    					{
    						internalType: "bytes",
    						name: "_data",
    						type: "bytes"
    					}
    				],
    				name: "claim",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getDrawCalculator",
    				outputs: [
    					{
    						internalType: "contract IDrawCalculator",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					}
    				],
    				name: "getDrawPayoutBalanceOf",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getToken",
    				outputs: [
    					{
    						internalType: "contract IERC20",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IDrawCalculator",
    						name: "_newCalculator",
    						type: "address"
    					}
    				],
    				name: "setDrawCalculator",
    				outputs: [
    					{
    						internalType: "contract IDrawCalculator",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IERC20",
    						name: "_erc20Token",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "withdrawERC20",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 137,
    		address: "0xA2342489470474536F04cd4DdA2e8658303b305d",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "PrizeFlush",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_destination",
    						type: "address"
    					},
    					{
    						internalType: "contract IStrategy",
    						name: "_strategy",
    						type: "address"
    					},
    					{
    						internalType: "contract IReserve",
    						name: "_reserve",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "destination",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IReserve",
    						name: "reserve",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IStrategy",
    						name: "strategy",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "address",
    						name: "destination",
    						type: "address"
    					}
    				],
    				name: "DestinationSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "destination",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "Flushed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "contract IReserve",
    						name: "reserve",
    						type: "address"
    					}
    				],
    				name: "ReserveSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "contract IStrategy",
    						name: "strategy",
    						type: "address"
    					}
    				],
    				name: "StrategySet",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "flush",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getDestination",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getReserve",
    				outputs: [
    					{
    						internalType: "contract IReserve",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getStrategy",
    				outputs: [
    					{
    						internalType: "contract IStrategy",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_destination",
    						type: "address"
    					}
    				],
    				name: "setDestination",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IReserve",
    						name: "_reserve",
    						type: "address"
    					}
    				],
    				name: "setReserve",
    				outputs: [
    					{
    						internalType: "contract IReserve",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IStrategy",
    						name: "_strategy",
    						type: "address"
    					}
    				],
    				name: "setStrategy",
    				outputs: [
    					{
    						internalType: "contract IStrategy",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 137,
    		address: "0x879e176Ae9Fe9B00c30f4827364eA9e4fB35858D",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "PrizeSplitStrategy",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IPrizePool",
    						name: "_prizePool",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "contract IPrizePool",
    						name: "prizePool",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "totalPrizeCaptured",
    						type: "uint256"
    					}
    				],
    				name: "Distributed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "prizeAwarded",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "contract IControlledToken",
    						name: "token",
    						type: "address"
    					}
    				],
    				name: "PrizeSplitAwarded",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "target",
    						type: "uint256"
    					}
    				],
    				name: "PrizeSplitRemoved",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "target",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint16",
    						name: "percentage",
    						type: "uint16"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "index",
    						type: "uint256"
    					}
    				],
    				name: "PrizeSplitSet",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "ONE_AS_FIXED_POINT_3",
    				outputs: [
    					{
    						internalType: "uint16",
    						name: "",
    						type: "uint16"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "distribute",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getPrizePool",
    				outputs: [
    					{
    						internalType: "contract IPrizePool",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_prizeSplitIndex",
    						type: "uint256"
    					}
    				],
    				name: "getPrizeSplit",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "address",
    								name: "target",
    								type: "address"
    							},
    							{
    								internalType: "uint16",
    								name: "percentage",
    								type: "uint16"
    							}
    						],
    						internalType: "struct IPrizeSplit.PrizeSplitConfig",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getPrizeSplits",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "address",
    								name: "target",
    								type: "address"
    							},
    							{
    								internalType: "uint16",
    								name: "percentage",
    								type: "uint16"
    							}
    						],
    						internalType: "struct IPrizeSplit.PrizeSplitConfig[]",
    						name: "",
    						type: "tuple[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "address",
    								name: "target",
    								type: "address"
    							},
    							{
    								internalType: "uint16",
    								name: "percentage",
    								type: "uint16"
    							}
    						],
    						internalType: "struct IPrizeSplit.PrizeSplitConfig",
    						name: "_prizeSplit",
    						type: "tuple"
    					},
    					{
    						internalType: "uint8",
    						name: "_prizeSplitIndex",
    						type: "uint8"
    					}
    				],
    				name: "setPrizeSplit",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "address",
    								name: "target",
    								type: "address"
    							},
    							{
    								internalType: "uint16",
    								name: "percentage",
    								type: "uint16"
    							}
    						],
    						internalType: "struct IPrizeSplit.PrizeSplitConfig[]",
    						name: "_newPrizeSplits",
    						type: "tuple[]"
    					}
    				],
    				name: "setPrizeSplits",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 137,
    		address: "0x1DcaD946D10343cc4494D610d6273153FB071772",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "PrizeTierHistory",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						indexed: false,
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "prizeTier",
    						type: "tuple"
    					}
    				],
    				name: "PrizeTierPushed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						indexed: false,
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "prizeTier",
    						type: "tuple"
    					}
    				],
    				name: "PrizeTierSet",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "count",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getNewestDrawId",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getOldestDrawId",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					}
    				],
    				name: "getPrizeTier",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "index",
    						type: "uint256"
    					}
    				],
    				name: "getPrizeTierAtIndex",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32[]",
    						name: "_drawIds",
    						type: "uint32[]"
    					}
    				],
    				name: "getPrizeTierList",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						internalType: "struct IPrizeTierHistory.PrizeTier[]",
    						name: "",
    						type: "tuple[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "newPrizeTier",
    						type: "tuple"
    					}
    				],
    				name: "popAndPush",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "nextPrizeTier",
    						type: "tuple"
    					}
    				],
    				name: "push",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "newPrizeTier",
    						type: "tuple"
    					}
    				],
    				name: "replace",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 137,
    		address: "0x7402d9f36904894273B31dD0d998D826c833EF93",
    		version: [
    			"2"
    		],
    		type: "RNGChainlink",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract VRFCoordinatorV2Interface",
    						name: "_vrfCoordinator",
    						type: "address"
    					},
    					{
    						internalType: "uint64",
    						name: "_subscriptionId",
    						type: "uint64"
    					},
    					{
    						internalType: "bytes32",
    						name: "_keyHash",
    						type: "bytes32"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "have",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "want",
    						type: "address"
    					}
    				],
    				name: "OnlyCoordinatorCanFulfill",
    				type: "error"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "bytes32",
    						name: "keyHash",
    						type: "bytes32"
    					}
    				],
    				name: "KeyHashSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "requestId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "randomNumber",
    						type: "uint256"
    					}
    				],
    				name: "RandomNumberCompleted",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "requestId",
    						type: "uint32"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "sender",
    						type: "address"
    					}
    				],
    				name: "RandomNumberRequested",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint64",
    						name: "subscriptionId",
    						type: "uint64"
    					}
    				],
    				name: "SubscriptionIdSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract VRFCoordinatorV2Interface",
    						name: "vrfCoordinator",
    						type: "address"
    					}
    				],
    				name: "VrfCoordinatorSet",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getKeyHash",
    				outputs: [
    					{
    						internalType: "bytes32",
    						name: "",
    						type: "bytes32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getLastRequestId",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "requestId",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getRequestFee",
    				outputs: [
    					{
    						internalType: "address",
    						name: "feeToken",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "requestFee",
    						type: "uint256"
    					}
    				],
    				stateMutability: "pure",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getSubscriptionId",
    				outputs: [
    					{
    						internalType: "uint64",
    						name: "",
    						type: "uint64"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getVrfCoordinator",
    				outputs: [
    					{
    						internalType: "contract VRFCoordinatorV2Interface",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_internalRequestId",
    						type: "uint32"
    					}
    				],
    				name: "isRequestComplete",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "isCompleted",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_internalRequestId",
    						type: "uint32"
    					}
    				],
    				name: "randomNumber",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "randomNum",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "requestId",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256[]",
    						name: "randomWords",
    						type: "uint256[]"
    					}
    				],
    				name: "rawFulfillRandomWords",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "requestRandomNumber",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "requestId",
    						type: "uint32"
    					},
    					{
    						internalType: "uint32",
    						name: "lockBlock",
    						type: "uint32"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "bytes32",
    						name: "_keyHash",
    						type: "bytes32"
    					}
    				],
    				name: "setKeyhash",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint64",
    						name: "_subscriptionId",
    						type: "uint64"
    					}
    				],
    				name: "setSubscriptionId",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 137,
    		address: "0x0F3137E09349449b62144f0918135dE548FdFeeE",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "ReceiverTimelockTrigger",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawBuffer",
    						name: "_drawBuffer",
    						type: "address"
    					},
    					{
    						internalType: "contract IPrizeDistributionFactory",
    						name: "_prizeDistributionFactory",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawCalculatorTimelock",
    						name: "_timelock",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IDrawBuffer",
    						name: "drawBuffer",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IPrizeDistributionFactory",
    						name: "prizeDistributionFactory",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IDrawCalculatorTimelock",
    						name: "timelock",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						indexed: false,
    						internalType: "struct IDrawBeacon.Draw",
    						name: "draw",
    						type: "tuple"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "DrawLockedPushedAndTotalNetworkTicketSupplyPushed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "drawBuffer",
    				outputs: [
    					{
    						internalType: "contract IDrawBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "prizeDistributionFactory",
    				outputs: [
    					{
    						internalType: "contract IPrizeDistributionFactory",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "_draw",
    						type: "tuple"
    					},
    					{
    						internalType: "uint256",
    						name: "_totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "push",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "timelock",
    				outputs: [
    					{
    						internalType: "contract IDrawCalculatorTimelock",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 137,
    		address: "0xCE148f6acFee9FEFb42A736B4976e657f35982b8",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "Reserve",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IERC20",
    						name: "_token",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "reserveAccumulated",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "withdrawAccumulated",
    						type: "uint256"
    					}
    				],
    				name: "Checkpoint",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IERC20",
    						name: "token",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "Withdrawn",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "checkpoint",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_startTimestamp",
    						type: "uint32"
    					},
    					{
    						internalType: "uint32",
    						name: "_endTimestamp",
    						type: "uint32"
    					}
    				],
    				name: "getReserveAccumulatedBetween",
    				outputs: [
    					{
    						internalType: "uint224",
    						name: "",
    						type: "uint224"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getToken",
    				outputs: [
    					{
    						internalType: "contract IERC20",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "token",
    				outputs: [
    					{
    						internalType: "contract IERC20",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "withdrawAccumulator",
    				outputs: [
    					{
    						internalType: "uint224",
    						name: "",
    						type: "uint224"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "withdrawTo",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 137,
    		address: "0x89Ee77Ce3F4C1b0346FF96E3004ff7C9f972dEF8",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "TWABDelegator",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "string",
    						name: "name_",
    						type: "string"
    					},
    					{
    						internalType: "string",
    						name: "symbol_",
    						type: "string"
    					},
    					{
    						internalType: "contract ITicket",
    						name: "_ticket",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					}
    				],
    				name: "Approval",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "slot",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegatee",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint96",
    						name: "lockUntil",
    						type: "uint96"
    					},
    					{
    						indexed: false,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					}
    				],
    				name: "DelegateeUpdated",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "slot",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint96",
    						name: "lockUntil",
    						type: "uint96"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegatee",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "contract Delegation",
    						name: "delegation",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					}
    				],
    				name: "DelegationCreated",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "slot",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					}
    				],
    				name: "DelegationFunded",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "slot",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					}
    				],
    				name: "DelegationFundedFromStake",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "representative",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "bool",
    						name: "set",
    						type: "bool"
    					}
    				],
    				name: "RepresentativeSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "ticket",
    						type: "address"
    					}
    				],
    				name: "TicketSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "TicketsStaked",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "TicketsUnstaked",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					}
    				],
    				name: "Transfer",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "slot",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					}
    				],
    				name: "TransferredDelegation",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "slot",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					}
    				],
    				name: "WithdrewDelegationToStake",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "MAX_LOCK",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					}
    				],
    				name: "allowance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "approve",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "account",
    						type: "address"
    					}
    				],
    				name: "balanceOf",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					}
    				],
    				name: "computeDelegationAddress",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_delegatee",
    						type: "address"
    					},
    					{
    						internalType: "uint96",
    						name: "_lockDuration",
    						type: "uint96"
    					}
    				],
    				name: "createDelegation",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "decimals",
    				outputs: [
    					{
    						internalType: "uint8",
    						name: "",
    						type: "uint8"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "subtractedValue",
    						type: "uint256"
    					}
    				],
    				name: "decreaseAllowance",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "delegationInstance",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "fundDelegation",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "fundDelegationFromStake",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					}
    				],
    				name: "getDelegation",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "delegation",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "delegatee",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "balance",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256",
    						name: "lockUntil",
    						type: "uint256"
    					},
    					{
    						internalType: "bool",
    						name: "wasCreated",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "addedValue",
    						type: "uint256"
    					}
    				],
    				name: "increaseAllowance",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_representative",
    						type: "address"
    					}
    				],
    				name: "isRepresentativeOf",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "bytes[]",
    						name: "_data",
    						type: "bytes[]"
    					}
    				],
    				name: "multicall",
    				outputs: [
    					{
    						internalType: "bytes[]",
    						name: "",
    						type: "bytes[]"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "name",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					},
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "deadline",
    								type: "uint256"
    							},
    							{
    								internalType: "uint8",
    								name: "v",
    								type: "uint8"
    							},
    							{
    								internalType: "bytes32",
    								name: "r",
    								type: "bytes32"
    							},
    							{
    								internalType: "bytes32",
    								name: "s",
    								type: "bytes32"
    							}
    						],
    						internalType: "struct PermitAndMulticall.Signature",
    						name: "_permitSignature",
    						type: "tuple"
    					},
    					{
    						internalType: "bytes[]",
    						name: "_data",
    						type: "bytes[]"
    					}
    				],
    				name: "permitAndMulticall",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_representative",
    						type: "address"
    					},
    					{
    						internalType: "bool",
    						name: "_set",
    						type: "bool"
    					}
    				],
    				name: "setRepresentative",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "stake",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "symbol",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "ticket",
    				outputs: [
    					{
    						internalType: "contract ITicket",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "totalSupply",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "transfer",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					}
    				],
    				name: "transferDelegationTo",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "sender",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "transferFrom",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "unstake",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_delegatee",
    						type: "address"
    					},
    					{
    						internalType: "uint96",
    						name: "_lockDuration",
    						type: "uint96"
    					}
    				],
    				name: "updateDelegatee",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "withdrawDelegationToStake",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 137,
    		address: "0x6a304dFdb9f808741244b6bfEe65ca7B3b3A6076",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "Ticket",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "string",
    						name: "_name",
    						type: "string"
    					},
    					{
    						internalType: "string",
    						name: "_symbol",
    						type: "string"
    					},
    					{
    						internalType: "uint8",
    						name: "decimals_",
    						type: "uint8"
    					},
    					{
    						internalType: "address",
    						name: "_controller",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					}
    				],
    				name: "Approval",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegate",
    						type: "address"
    					}
    				],
    				name: "Delegated",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "string",
    						name: "name",
    						type: "string"
    					},
    					{
    						indexed: false,
    						internalType: "string",
    						name: "symbol",
    						type: "string"
    					},
    					{
    						indexed: false,
    						internalType: "uint8",
    						name: "decimals",
    						type: "uint8"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "controller",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint224",
    								name: "amount",
    								type: "uint224"
    							},
    							{
    								internalType: "uint32",
    								name: "timestamp",
    								type: "uint32"
    							}
    						],
    						indexed: false,
    						internalType: "struct ObservationLib.Observation",
    						name: "newTotalSupplyTwab",
    						type: "tuple"
    					}
    				],
    				name: "NewTotalSupplyTwab",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegate",
    						type: "address"
    					},
    					{
    						components: [
    							{
    								internalType: "uint224",
    								name: "amount",
    								type: "uint224"
    							},
    							{
    								internalType: "uint32",
    								name: "timestamp",
    								type: "uint32"
    							}
    						],
    						indexed: false,
    						internalType: "struct ObservationLib.Observation",
    						name: "newTwab",
    						type: "tuple"
    					}
    				],
    				name: "NewUserTwab",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "string",
    						name: "name",
    						type: "string"
    					},
    					{
    						indexed: false,
    						internalType: "string",
    						name: "symbol",
    						type: "string"
    					},
    					{
    						indexed: false,
    						internalType: "uint8",
    						name: "decimals",
    						type: "uint8"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "controller",
    						type: "address"
    					}
    				],
    				name: "TicketInitialized",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					}
    				],
    				name: "Transfer",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "DOMAIN_SEPARATOR",
    				outputs: [
    					{
    						internalType: "bytes32",
    						name: "",
    						type: "bytes32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					}
    				],
    				name: "allowance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "approve",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "account",
    						type: "address"
    					}
    				],
    				name: "balanceOf",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "controller",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "controllerBurn",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_operator",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "controllerBurnFrom",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					}
    				],
    				name: "controllerDelegateFor",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "controllerMint",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "decimals",
    				outputs: [
    					{
    						internalType: "uint8",
    						name: "",
    						type: "uint8"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "subtractedValue",
    						type: "uint256"
    					}
    				],
    				name: "decreaseAllowance",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					}
    				],
    				name: "delegate",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					}
    				],
    				name: "delegateOf",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_newDelegate",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_deadline",
    						type: "uint256"
    					},
    					{
    						internalType: "uint8",
    						name: "_v",
    						type: "uint8"
    					},
    					{
    						internalType: "bytes32",
    						name: "_r",
    						type: "bytes32"
    					},
    					{
    						internalType: "bytes32",
    						name: "_s",
    						type: "bytes32"
    					}
    				],
    				name: "delegateWithSignature",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					}
    				],
    				name: "getAccountDetails",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint208",
    								name: "balance",
    								type: "uint208"
    							},
    							{
    								internalType: "uint24",
    								name: "nextTwabIndex",
    								type: "uint24"
    							},
    							{
    								internalType: "uint24",
    								name: "cardinality",
    								type: "uint24"
    							}
    						],
    						internalType: "struct TwabLib.AccountDetails",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint64",
    						name: "_startTime",
    						type: "uint64"
    					},
    					{
    						internalType: "uint64",
    						name: "_endTime",
    						type: "uint64"
    					}
    				],
    				name: "getAverageBalanceBetween",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint64[]",
    						name: "_startTimes",
    						type: "uint64[]"
    					},
    					{
    						internalType: "uint64[]",
    						name: "_endTimes",
    						type: "uint64[]"
    					}
    				],
    				name: "getAverageBalancesBetween",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint64[]",
    						name: "_startTimes",
    						type: "uint64[]"
    					},
    					{
    						internalType: "uint64[]",
    						name: "_endTimes",
    						type: "uint64[]"
    					}
    				],
    				name: "getAverageTotalSuppliesBetween",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint64",
    						name: "_target",
    						type: "uint64"
    					}
    				],
    				name: "getBalanceAt",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint64[]",
    						name: "_targets",
    						type: "uint64[]"
    					}
    				],
    				name: "getBalancesAt",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint64[]",
    						name: "_targets",
    						type: "uint64[]"
    					}
    				],
    				name: "getTotalSuppliesAt",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint64",
    						name: "_target",
    						type: "uint64"
    					}
    				],
    				name: "getTotalSupplyAt",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint16",
    						name: "_index",
    						type: "uint16"
    					}
    				],
    				name: "getTwab",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint224",
    								name: "amount",
    								type: "uint224"
    							},
    							{
    								internalType: "uint32",
    								name: "timestamp",
    								type: "uint32"
    							}
    						],
    						internalType: "struct ObservationLib.Observation",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "addedValue",
    						type: "uint256"
    					}
    				],
    				name: "increaseAllowance",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "name",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					}
    				],
    				name: "nonces",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256",
    						name: "deadline",
    						type: "uint256"
    					},
    					{
    						internalType: "uint8",
    						name: "v",
    						type: "uint8"
    					},
    					{
    						internalType: "bytes32",
    						name: "r",
    						type: "bytes32"
    					},
    					{
    						internalType: "bytes32",
    						name: "s",
    						type: "bytes32"
    					}
    				],
    				name: "permit",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "symbol",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "totalSupply",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "transfer",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "sender",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "transferFrom",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 137,
    		address: "0x1470c87e2db5247A36C60DE3D65D7C972C62EA0f",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "TwabRewards",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "contract ITicket",
    						name: "_ticket",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "promotionId",
    						type: "uint256"
    					}
    				],
    				name: "PromotionCreated",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "promotionId",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "PromotionDestroyed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "promotionId",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint8",
    						name: "epochNumber",
    						type: "uint8"
    					}
    				],
    				name: "PromotionEnded",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "promotionId",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "numberOfEpochs",
    						type: "uint256"
    					}
    				],
    				name: "PromotionExtended",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "promotionId",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint8[]",
    						name: "epochIds",
    						type: "uint8[]"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "RewardsClaimed",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "GRACE_PERIOD",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					},
    					{
    						internalType: "uint8[]",
    						name: "_epochIds",
    						type: "uint8[]"
    					}
    				],
    				name: "claimRewards",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IERC20",
    						name: "_token",
    						type: "address"
    					},
    					{
    						internalType: "uint64",
    						name: "_startTimestamp",
    						type: "uint64"
    					},
    					{
    						internalType: "uint256",
    						name: "_tokensPerEpoch",
    						type: "uint256"
    					},
    					{
    						internalType: "uint48",
    						name: "_epochDuration",
    						type: "uint48"
    					},
    					{
    						internalType: "uint8",
    						name: "_numberOfEpochs",
    						type: "uint8"
    					}
    				],
    				name: "createPromotion",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					}
    				],
    				name: "destroyPromotion",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					}
    				],
    				name: "endPromotion",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					},
    					{
    						internalType: "uint8",
    						name: "_numberOfEpochs",
    						type: "uint8"
    					}
    				],
    				name: "extendPromotion",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					}
    				],
    				name: "getCurrentEpochId",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					}
    				],
    				name: "getPromotion",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "address",
    								name: "creator",
    								type: "address"
    							},
    							{
    								internalType: "uint64",
    								name: "startTimestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint8",
    								name: "numberOfEpochs",
    								type: "uint8"
    							},
    							{
    								internalType: "uint48",
    								name: "epochDuration",
    								type: "uint48"
    							},
    							{
    								internalType: "uint48",
    								name: "createdAt",
    								type: "uint48"
    							},
    							{
    								internalType: "contract IERC20",
    								name: "token",
    								type: "address"
    							},
    							{
    								internalType: "uint256",
    								name: "tokensPerEpoch",
    								type: "uint256"
    							},
    							{
    								internalType: "uint256",
    								name: "rewardsUnclaimed",
    								type: "uint256"
    							}
    						],
    						internalType: "struct ITwabRewards.Promotion",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					}
    				],
    				name: "getRemainingRewards",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					},
    					{
    						internalType: "uint8[]",
    						name: "_epochIds",
    						type: "uint8[]"
    					}
    				],
    				name: "getRewardsAmount",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "ticket",
    				outputs: [
    					{
    						internalType: "contract ITicket",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 137,
    		address: "0x19DE635fb3678D8B8154E37d8C9Cdf182Fe84E60",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "YieldSourcePrizePool",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IYieldSource",
    						name: "_yieldSource",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "AwardCaptured",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "winner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "Awarded",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "winner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "AwardedExternalERC20",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "winner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256[]",
    						name: "tokenIds",
    						type: "uint256[]"
    					}
    				],
    				name: "AwardedExternalERC721",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "balanceCap",
    						type: "uint256"
    					}
    				],
    				name: "BalanceCapSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "token",
    						type: "address"
    					}
    				],
    				name: "ControlledTokenAdded",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "yieldSource",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "operator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "Deposited",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "bytes",
    						name: "error",
    						type: "bytes"
    					}
    				],
    				name: "ErrorAwardingExternalERC721",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "liquidityCap",
    						type: "uint256"
    					}
    				],
    				name: "LiquidityCapSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "prizeStrategy",
    						type: "address"
    					}
    				],
    				name: "PrizeStrategySet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "Swept",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "ticket",
    						type: "address"
    					}
    				],
    				name: "TicketSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "TransferredExternalERC20",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "operator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "redeemed",
    						type: "uint256"
    					}
    				],
    				name: "Withdrawal",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "VERSION",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "award",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "awardBalance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_externalToken",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "awardExternalERC20",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_externalToken",
    						type: "address"
    					},
    					{
    						internalType: "uint256[]",
    						name: "_tokenIds",
    						type: "uint256[]"
    					}
    				],
    				name: "awardExternalERC721",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "balance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_externalToken",
    						type: "address"
    					}
    				],
    				name: "canAwardExternal",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "captureAwardBalance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract ICompLike",
    						name: "_compLike",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					}
    				],
    				name: "compLikeDelegate",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "depositTo",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_delegate",
    						type: "address"
    					}
    				],
    				name: "depositToAndDelegate",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getAccountedBalance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getBalanceCap",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getLiquidityCap",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getPrizeStrategy",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getTicket",
    				outputs: [
    					{
    						internalType: "contract ITicket",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getToken",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract ITicket",
    						name: "_controlledToken",
    						type: "address"
    					}
    				],
    				name: "isControlled",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					},
    					{
    						internalType: "bytes",
    						name: "",
    						type: "bytes"
    					}
    				],
    				name: "onERC721Received",
    				outputs: [
    					{
    						internalType: "bytes4",
    						name: "",
    						type: "bytes4"
    					}
    				],
    				stateMutability: "pure",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_balanceCap",
    						type: "uint256"
    					}
    				],
    				name: "setBalanceCap",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_liquidityCap",
    						type: "uint256"
    					}
    				],
    				name: "setLiquidityCap",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_prizeStrategy",
    						type: "address"
    					}
    				],
    				name: "setPrizeStrategy",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract ITicket",
    						name: "_ticket",
    						type: "address"
    					}
    				],
    				name: "setTicket",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "sweep",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_externalToken",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "transferExternalERC20",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_from",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "withdrawFrom",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "yieldSource",
    				outputs: [
    					{
    						internalType: "contract IYieldSource",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 43114,
    		address: "0x7437db21A0dEB844Fa64223e2d6Db569De9648Ff",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "ATokenYieldSource",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "contract ATokenInterface",
    						name: "_aToken",
    						type: "address"
    					},
    					{
    						internalType: "contract IAaveIncentivesController",
    						name: "_incentivesController",
    						type: "address"
    					},
    					{
    						internalType: "contract ILendingPoolAddressesProviderRegistry",
    						name: "_lendingPoolAddressesProviderRegistry",
    						type: "address"
    					},
    					{
    						internalType: "uint8",
    						name: "_decimals",
    						type: "uint8"
    					},
    					{
    						internalType: "string",
    						name: "_symbol",
    						type: "string"
    					},
    					{
    						internalType: "string",
    						name: "_name",
    						type: "string"
    					},
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IAToken",
    						name: "aToken",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "contract ILendingPoolAddressesProviderRegistry",
    						name: "lendingPoolAddressesProviderRegistry",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint8",
    						name: "decimals",
    						type: "uint8"
    					},
    					{
    						indexed: false,
    						internalType: "string",
    						name: "name",
    						type: "string"
    					},
    					{
    						indexed: false,
    						internalType: "string",
    						name: "symbol",
    						type: "string"
    					},
    					{
    						indexed: false,
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					}
    				],
    				name: "ATokenYieldSourceInitialized",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					}
    				],
    				name: "Approval",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "Claimed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "shares",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "RedeemedToken",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "Sponsored",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "shares",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					}
    				],
    				name: "SuppliedTokenTo",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					}
    				],
    				name: "Transfer",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "contract IERC20",
    						name: "token",
    						type: "address"
    					}
    				],
    				name: "TransferredERC20",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "aToken",
    				outputs: [
    					{
    						internalType: "contract ATokenInterface",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					}
    				],
    				name: "allowance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "approve",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "approveMaxAmount",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "account",
    						type: "address"
    					}
    				],
    				name: "balanceOf",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "addr",
    						type: "address"
    					}
    				],
    				name: "balanceOfToken",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "to",
    						type: "address"
    					}
    				],
    				name: "claimRewards",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "decimals",
    				outputs: [
    					{
    						internalType: "uint8",
    						name: "",
    						type: "uint8"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "subtractedValue",
    						type: "uint256"
    					}
    				],
    				name: "decreaseAllowance",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "depositToken",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "incentivesController",
    				outputs: [
    					{
    						internalType: "contract IAaveIncentivesController",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "addedValue",
    						type: "uint256"
    					}
    				],
    				name: "increaseAllowance",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "lendingPoolAddressesProviderRegistry",
    				outputs: [
    					{
    						internalType: "contract ILendingPoolAddressesProviderRegistry",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "name",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "redeemAmount",
    						type: "uint256"
    					}
    				],
    				name: "redeemToken",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "sponsor",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "mintAmount",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "to",
    						type: "address"
    					}
    				],
    				name: "supplyTokenTo",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "symbol",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "totalSupply",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "transfer",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IERC20",
    						name: "erc20Token",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "transferERC20",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "sender",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "transferFrom",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 43114,
    		address: "0x3Cb049Db6d3E100b8b4765Ca051C809adcC17ed1",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "BeaconTimelockTrigger",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IPrizeDistributionFactory",
    						name: "_prizeDistributionFactory",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawCalculatorTimelock",
    						name: "_timelock",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IPrizeDistributionFactory",
    						name: "prizeDistributionFactory",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IDrawCalculatorTimelock",
    						name: "timelock",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						indexed: false,
    						internalType: "struct IDrawBeacon.Draw",
    						name: "draw",
    						type: "tuple"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "DrawLockedAndTotalNetworkTicketSupplyPushed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "prizeDistributionFactory",
    				outputs: [
    					{
    						internalType: "contract IPrizeDistributionFactory",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "_draw",
    						type: "tuple"
    					},
    					{
    						internalType: "uint256",
    						name: "_totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "push",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "timelock",
    				outputs: [
    					{
    						internalType: "contract IDrawCalculatorTimelock",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 43114,
    		address: "0x90bB095638DF36f56DB63bdC657CeE3cF5d00d7E",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "DrawBeacon",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawBuffer",
    						name: "_drawBuffer",
    						type: "address"
    					},
    					{
    						internalType: "contract RNGInterface",
    						name: "_rng",
    						type: "address"
    					},
    					{
    						internalType: "uint32",
    						name: "_nextDrawId",
    						type: "uint32"
    					},
    					{
    						internalType: "uint64",
    						name: "_beaconPeriodStart",
    						type: "uint64"
    					},
    					{
    						internalType: "uint32",
    						name: "_beaconPeriodSeconds",
    						type: "uint32"
    					},
    					{
    						internalType: "uint32",
    						name: "_rngTimeout",
    						type: "uint32"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint32",
    						name: "drawPeriodSeconds",
    						type: "uint32"
    					}
    				],
    				name: "BeaconPeriodSecondsUpdated",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint64",
    						name: "startedAt",
    						type: "uint64"
    					}
    				],
    				name: "BeaconPeriodStarted",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint32",
    						name: "nextDrawId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint64",
    						name: "beaconPeriodStartedAt",
    						type: "uint64"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IDrawBuffer",
    						name: "newDrawBuffer",
    						type: "address"
    					}
    				],
    				name: "DrawBufferUpdated",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "rngRequestId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint32",
    						name: "rngLockBlock",
    						type: "uint32"
    					}
    				],
    				name: "DrawCancelled",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "randomNumber",
    						type: "uint256"
    					}
    				],
    				name: "DrawCompleted",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "rngRequestId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint32",
    						name: "rngLockBlock",
    						type: "uint32"
    					}
    				],
    				name: "DrawStarted",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract RNGInterface",
    						name: "rngService",
    						type: "address"
    					}
    				],
    				name: "RngServiceUpdated",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint32",
    						name: "rngTimeout",
    						type: "uint32"
    					}
    				],
    				name: "RngTimeoutSet",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "beaconPeriodEndAt",
    				outputs: [
    					{
    						internalType: "uint64",
    						name: "",
    						type: "uint64"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "beaconPeriodRemainingSeconds",
    				outputs: [
    					{
    						internalType: "uint64",
    						name: "",
    						type: "uint64"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint64",
    						name: "_time",
    						type: "uint64"
    					}
    				],
    				name: "calculateNextBeaconPeriodStartTime",
    				outputs: [
    					{
    						internalType: "uint64",
    						name: "",
    						type: "uint64"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "calculateNextBeaconPeriodStartTimeFromCurrentTime",
    				outputs: [
    					{
    						internalType: "uint64",
    						name: "",
    						type: "uint64"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "canCompleteDraw",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "canStartDraw",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "cancelDraw",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "completeDraw",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getBeaconPeriodSeconds",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getBeaconPeriodStartedAt",
    				outputs: [
    					{
    						internalType: "uint64",
    						name: "",
    						type: "uint64"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getDrawBuffer",
    				outputs: [
    					{
    						internalType: "contract IDrawBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getLastRngLockBlock",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getLastRngRequestId",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getNextDrawId",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getRngService",
    				outputs: [
    					{
    						internalType: "contract RNGInterface",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getRngTimeout",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "isBeaconPeriodOver",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "isRngCompleted",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "isRngRequested",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "isRngTimedOut",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_beaconPeriodSeconds",
    						type: "uint32"
    					}
    				],
    				name: "setBeaconPeriodSeconds",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IDrawBuffer",
    						name: "newDrawBuffer",
    						type: "address"
    					}
    				],
    				name: "setDrawBuffer",
    				outputs: [
    					{
    						internalType: "contract IDrawBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract RNGInterface",
    						name: "_rngService",
    						type: "address"
    					}
    				],
    				name: "setRngService",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_rngTimeout",
    						type: "uint32"
    					}
    				],
    				name: "setRngTimeout",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "startDraw",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 43114,
    		address: "0x31bCAF169D25f938A25c2e4C762f3D1D3FA7dB2E",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "DrawBuffer",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "uint8",
    						name: "_cardinality",
    						type: "uint8"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						indexed: false,
    						internalType: "struct IDrawBeacon.Draw",
    						name: "draw",
    						type: "tuple"
    					}
    				],
    				name: "DrawSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "MAX_CARDINALITY",
    				outputs: [
    					{
    						internalType: "uint16",
    						name: "",
    						type: "uint16"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getBufferCardinality",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					}
    				],
    				name: "getDraw",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getDrawCount",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32[]",
    						name: "_drawIds",
    						type: "uint32[]"
    					}
    				],
    				name: "getDraws",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw[]",
    						name: "",
    						type: "tuple[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getNewestDraw",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getOldestDraw",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "_draw",
    						type: "tuple"
    					}
    				],
    				name: "pushDraw",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "_newDraw",
    						type: "tuple"
    					}
    				],
    				name: "setDraw",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 43114,
    		address: "0x0F5F5EF16465371152fC46C72D06fb0ec9392a47",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "DrawCalculator",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "contract ITicket",
    						name: "_ticket",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawBuffer",
    						name: "_drawBuffer",
    						type: "address"
    					},
    					{
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "_prizeDistributionBuffer",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "ticket",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IDrawBuffer",
    						name: "drawBuffer",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "prizeDistributionBuffer",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract PrizeDistributor",
    						name: "prizeDistributor",
    						type: "address"
    					}
    				],
    				name: "PrizeDistributorSet",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "TIERS_LENGTH",
    				outputs: [
    					{
    						internalType: "uint8",
    						name: "",
    						type: "uint8"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint32[]",
    						name: "_drawIds",
    						type: "uint32[]"
    					},
    					{
    						internalType: "bytes",
    						name: "_pickIndicesForDraws",
    						type: "bytes"
    					}
    				],
    				name: "calculate",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					},
    					{
    						internalType: "bytes",
    						name: "",
    						type: "bytes"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "drawBuffer",
    				outputs: [
    					{
    						internalType: "contract IDrawBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getDrawBuffer",
    				outputs: [
    					{
    						internalType: "contract IDrawBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint32[]",
    						name: "_drawIds",
    						type: "uint32[]"
    					}
    				],
    				name: "getNormalizedBalancesForDrawIds",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getPrizeDistributionBuffer",
    				outputs: [
    					{
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "prizeDistributionBuffer",
    				outputs: [
    					{
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "ticket",
    				outputs: [
    					{
    						internalType: "contract ITicket",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 43114,
    		address: "0x01eE1Ea692773f28c45D63133426f21923C3c2Ba",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "DrawCalculatorTimelock",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawCalculator",
    						name: "_calculator",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IDrawCalculator",
    						name: "drawCalculator",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint64",
    						name: "timestamp",
    						type: "uint64"
    					}
    				],
    				name: "LockedDraw",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							}
    						],
    						indexed: false,
    						internalType: "struct IDrawCalculatorTimelock.Timelock",
    						name: "timelock",
    						type: "tuple"
    					}
    				],
    				name: "TimelockSet",
    				type: "event"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "user",
    						type: "address"
    					},
    					{
    						internalType: "uint32[]",
    						name: "drawIds",
    						type: "uint32[]"
    					},
    					{
    						internalType: "bytes",
    						name: "data",
    						type: "bytes"
    					}
    				],
    				name: "calculate",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					},
    					{
    						internalType: "bytes",
    						name: "",
    						type: "bytes"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getDrawCalculator",
    				outputs: [
    					{
    						internalType: "contract IDrawCalculator",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getTimelock",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawCalculatorTimelock.Timelock",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "hasElapsed",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						internalType: "uint64",
    						name: "_timestamp",
    						type: "uint64"
    					}
    				],
    				name: "lock",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawCalculatorTimelock.Timelock",
    						name: "_timelock",
    						type: "tuple"
    					}
    				],
    				name: "setTimelock",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 43114,
    		address: "0xC660A8De5eB9E123E475Ae9A9f62dB62c92a3648",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "EIP2612PermitAndDeposit",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "contract IPrizePool",
    						name: "_prizePool",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						components: [
    							{
    								internalType: "address",
    								name: "delegate",
    								type: "address"
    							},
    							{
    								components: [
    									{
    										internalType: "uint256",
    										name: "deadline",
    										type: "uint256"
    									},
    									{
    										internalType: "uint8",
    										name: "v",
    										type: "uint8"
    									},
    									{
    										internalType: "bytes32",
    										name: "r",
    										type: "bytes32"
    									},
    									{
    										internalType: "bytes32",
    										name: "s",
    										type: "bytes32"
    									}
    								],
    								internalType: "struct Signature",
    								name: "signature",
    								type: "tuple"
    							}
    						],
    						internalType: "struct DelegateSignature",
    						name: "_delegateSignature",
    						type: "tuple"
    					}
    				],
    				name: "depositToAndDelegate",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IPrizePool",
    						name: "_prizePool",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "deadline",
    								type: "uint256"
    							},
    							{
    								internalType: "uint8",
    								name: "v",
    								type: "uint8"
    							},
    							{
    								internalType: "bytes32",
    								name: "r",
    								type: "bytes32"
    							},
    							{
    								internalType: "bytes32",
    								name: "s",
    								type: "bytes32"
    							}
    						],
    						internalType: "struct Signature",
    						name: "_permitSignature",
    						type: "tuple"
    					},
    					{
    						components: [
    							{
    								internalType: "address",
    								name: "delegate",
    								type: "address"
    							},
    							{
    								components: [
    									{
    										internalType: "uint256",
    										name: "deadline",
    										type: "uint256"
    									},
    									{
    										internalType: "uint8",
    										name: "v",
    										type: "uint8"
    									},
    									{
    										internalType: "bytes32",
    										name: "r",
    										type: "bytes32"
    									},
    									{
    										internalType: "bytes32",
    										name: "s",
    										type: "bytes32"
    									}
    								],
    								internalType: "struct Signature",
    								name: "signature",
    								type: "tuple"
    							}
    						],
    						internalType: "struct DelegateSignature",
    						name: "_delegateSignature",
    						type: "tuple"
    					}
    				],
    				name: "permitAndDepositToAndDelegate",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 43114,
    		address: "0xC8faa39E06ddB8362cb8E3FFDAdeB5bF7877ECcb",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "PrizeDistributionBuffer",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "uint8",
    						name: "_cardinality",
    						type: "uint8"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint8",
    						name: "cardinality",
    						type: "uint8"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						indexed: false,
    						internalType: "struct IPrizeDistributionBuffer.PrizeDistribution",
    						name: "prizeDistribution",
    						type: "tuple"
    					}
    				],
    				name: "PrizeDistributionSet",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getBufferCardinality",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getNewestPrizeDistribution",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionBuffer.PrizeDistribution",
    						name: "prizeDistribution",
    						type: "tuple"
    					},
    					{
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getOldestPrizeDistribution",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionBuffer.PrizeDistribution",
    						name: "prizeDistribution",
    						type: "tuple"
    					},
    					{
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					}
    				],
    				name: "getPrizeDistribution",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionBuffer.PrizeDistribution",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getPrizeDistributionCount",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32[]",
    						name: "_drawIds",
    						type: "uint32[]"
    					}
    				],
    				name: "getPrizeDistributions",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionBuffer.PrizeDistribution[]",
    						name: "",
    						type: "tuple[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionBuffer.PrizeDistribution",
    						name: "_prizeDistribution",
    						type: "tuple"
    					}
    				],
    				name: "pushPrizeDistribution",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionBuffer.PrizeDistribution",
    						name: "_prizeDistribution",
    						type: "tuple"
    					}
    				],
    				name: "setPrizeDistribution",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 43114,
    		address: "0x87FCF371D68d2429D57Bf1BadcBEEc3463F0DD37",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "PrizeDistributionFactory",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IPrizeTierHistory",
    						name: "_prizeTierHistory",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawBuffer",
    						name: "_drawBuffer",
    						type: "address"
    					},
    					{
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "_prizeDistributionBuffer",
    						type: "address"
    					},
    					{
    						internalType: "contract ITicket",
    						name: "_ticket",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_minPickCost",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "PrizeDistributionPushed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "PrizeDistributionSet",
    				type: "event"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						internalType: "uint256",
    						name: "_totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "calculatePrizeDistribution",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionSource.PrizeDistribution",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						internalType: "uint256",
    						name: "_totalNetworkTicketSupply",
    						type: "uint256"
    					},
    					{
    						internalType: "uint32",
    						name: "_beaconPeriodSeconds",
    						type: "uint32"
    					},
    					{
    						internalType: "uint64",
    						name: "_drawTimestamp",
    						type: "uint64"
    					}
    				],
    				name: "calculatePrizeDistributionWithDrawData",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionSource.PrizeDistribution",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "drawBuffer",
    				outputs: [
    					{
    						internalType: "contract IDrawBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "minPickCost",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "prizeDistributionBuffer",
    				outputs: [
    					{
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "prizeTierHistory",
    				outputs: [
    					{
    						internalType: "contract IPrizeTierHistory",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						internalType: "uint256",
    						name: "_totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "pushPrizeDistribution",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionSource.PrizeDistribution",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						internalType: "uint256",
    						name: "_totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "setPrizeDistribution",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionSource.PrizeDistribution",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "ticket",
    				outputs: [
    					{
    						internalType: "contract ITicket",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 43114,
    		address: "0x83332F908f403ce795D90f677cE3f382FE73f3D1",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "PrizeDistributor",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IERC20",
    						name: "_token",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawCalculator",
    						name: "_drawCalculator",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "payout",
    						type: "uint256"
    					}
    				],
    				name: "ClaimedDraw",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IDrawCalculator",
    						name: "calculator",
    						type: "address"
    					}
    				],
    				name: "DrawCalculatorSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IERC20",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "ERC20Withdrawn",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IERC20",
    						name: "token",
    						type: "address"
    					}
    				],
    				name: "TokenSet",
    				type: "event"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint32[]",
    						name: "_drawIds",
    						type: "uint32[]"
    					},
    					{
    						internalType: "bytes",
    						name: "_data",
    						type: "bytes"
    					}
    				],
    				name: "claim",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getDrawCalculator",
    				outputs: [
    					{
    						internalType: "contract IDrawCalculator",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					}
    				],
    				name: "getDrawPayoutBalanceOf",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getToken",
    				outputs: [
    					{
    						internalType: "contract IERC20",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IDrawCalculator",
    						name: "_newCalculator",
    						type: "address"
    					}
    				],
    				name: "setDrawCalculator",
    				outputs: [
    					{
    						internalType: "contract IDrawCalculator",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IERC20",
    						name: "_erc20Token",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "withdrawERC20",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 43114,
    		address: "0x1B20994C3894EcC862e26A9F4EC626A8489DD051",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "PrizeFlush",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_destination",
    						type: "address"
    					},
    					{
    						internalType: "contract IStrategy",
    						name: "_strategy",
    						type: "address"
    					},
    					{
    						internalType: "contract IReserve",
    						name: "_reserve",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "destination",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IReserve",
    						name: "reserve",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IStrategy",
    						name: "strategy",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "address",
    						name: "destination",
    						type: "address"
    					}
    				],
    				name: "DestinationSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "destination",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "Flushed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "contract IReserve",
    						name: "reserve",
    						type: "address"
    					}
    				],
    				name: "ReserveSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "contract IStrategy",
    						name: "strategy",
    						type: "address"
    					}
    				],
    				name: "StrategySet",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "flush",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getDestination",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getReserve",
    				outputs: [
    					{
    						internalType: "contract IReserve",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getStrategy",
    				outputs: [
    					{
    						internalType: "contract IStrategy",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_destination",
    						type: "address"
    					}
    				],
    				name: "setDestination",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IReserve",
    						name: "_reserve",
    						type: "address"
    					}
    				],
    				name: "setReserve",
    				outputs: [
    					{
    						internalType: "contract IReserve",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IStrategy",
    						name: "_strategy",
    						type: "address"
    					}
    				],
    				name: "setStrategy",
    				outputs: [
    					{
    						internalType: "contract IStrategy",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 43114,
    		address: "0xA30cB2A488dc616F060a54Ee7971d0bD832547Ec",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "PrizeSplitStrategy",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IPrizePool",
    						name: "_prizePool",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "contract IPrizePool",
    						name: "prizePool",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "totalPrizeCaptured",
    						type: "uint256"
    					}
    				],
    				name: "Distributed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "prizeAwarded",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "contract IControlledToken",
    						name: "token",
    						type: "address"
    					}
    				],
    				name: "PrizeSplitAwarded",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "target",
    						type: "uint256"
    					}
    				],
    				name: "PrizeSplitRemoved",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "target",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint16",
    						name: "percentage",
    						type: "uint16"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "index",
    						type: "uint256"
    					}
    				],
    				name: "PrizeSplitSet",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "ONE_AS_FIXED_POINT_3",
    				outputs: [
    					{
    						internalType: "uint16",
    						name: "",
    						type: "uint16"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "distribute",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getPrizePool",
    				outputs: [
    					{
    						internalType: "contract IPrizePool",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_prizeSplitIndex",
    						type: "uint256"
    					}
    				],
    				name: "getPrizeSplit",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "address",
    								name: "target",
    								type: "address"
    							},
    							{
    								internalType: "uint16",
    								name: "percentage",
    								type: "uint16"
    							}
    						],
    						internalType: "struct IPrizeSplit.PrizeSplitConfig",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getPrizeSplits",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "address",
    								name: "target",
    								type: "address"
    							},
    							{
    								internalType: "uint16",
    								name: "percentage",
    								type: "uint16"
    							}
    						],
    						internalType: "struct IPrizeSplit.PrizeSplitConfig[]",
    						name: "",
    						type: "tuple[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "address",
    								name: "target",
    								type: "address"
    							},
    							{
    								internalType: "uint16",
    								name: "percentage",
    								type: "uint16"
    							}
    						],
    						internalType: "struct IPrizeSplit.PrizeSplitConfig",
    						name: "_prizeSplit",
    						type: "tuple"
    					},
    					{
    						internalType: "uint8",
    						name: "_prizeSplitIndex",
    						type: "uint8"
    					}
    				],
    				name: "setPrizeSplit",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "address",
    								name: "target",
    								type: "address"
    							},
    							{
    								internalType: "uint16",
    								name: "percentage",
    								type: "uint16"
    							}
    						],
    						internalType: "struct IPrizeSplit.PrizeSplitConfig[]",
    						name: "_newPrizeSplits",
    						type: "tuple[]"
    					}
    				],
    				name: "setPrizeSplits",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 43114,
    		address: "0xC3DAD539E460103c860Bb9Ca547647EDbD4903b6",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "PrizeTierHistory",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						indexed: false,
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "prizeTier",
    						type: "tuple"
    					}
    				],
    				name: "PrizeTierPushed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						indexed: false,
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "prizeTier",
    						type: "tuple"
    					}
    				],
    				name: "PrizeTierSet",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "count",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getNewestDrawId",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getOldestDrawId",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					}
    				],
    				name: "getPrizeTier",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "index",
    						type: "uint256"
    					}
    				],
    				name: "getPrizeTierAtIndex",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32[]",
    						name: "_drawIds",
    						type: "uint32[]"
    					}
    				],
    				name: "getPrizeTierList",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						internalType: "struct IPrizeTierHistory.PrizeTier[]",
    						name: "",
    						type: "tuple[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "newPrizeTier",
    						type: "tuple"
    					}
    				],
    				name: "popAndPush",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "nextPrizeTier",
    						type: "tuple"
    					}
    				],
    				name: "push",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "newPrizeTier",
    						type: "tuple"
    					}
    				],
    				name: "replace",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 43114,
    		address: "0xCfC11bc4676f8DC6BAB1C46f0D34a466493987D2",
    		version: [
    			"2"
    		],
    		type: "RNGChainlink",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract VRFCoordinatorV2Interface",
    						name: "_vrfCoordinator",
    						type: "address"
    					},
    					{
    						internalType: "uint64",
    						name: "_subscriptionId",
    						type: "uint64"
    					},
    					{
    						internalType: "bytes32",
    						name: "_keyHash",
    						type: "bytes32"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "have",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "want",
    						type: "address"
    					}
    				],
    				name: "OnlyCoordinatorCanFulfill",
    				type: "error"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "bytes32",
    						name: "keyHash",
    						type: "bytes32"
    					}
    				],
    				name: "KeyHashSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "requestId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "randomNumber",
    						type: "uint256"
    					}
    				],
    				name: "RandomNumberCompleted",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "requestId",
    						type: "uint32"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "sender",
    						type: "address"
    					}
    				],
    				name: "RandomNumberRequested",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint64",
    						name: "subscriptionId",
    						type: "uint64"
    					}
    				],
    				name: "SubscriptionIdSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract VRFCoordinatorV2Interface",
    						name: "vrfCoordinator",
    						type: "address"
    					}
    				],
    				name: "VrfCoordinatorSet",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getKeyHash",
    				outputs: [
    					{
    						internalType: "bytes32",
    						name: "",
    						type: "bytes32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getLastRequestId",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "requestId",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getRequestFee",
    				outputs: [
    					{
    						internalType: "address",
    						name: "feeToken",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "requestFee",
    						type: "uint256"
    					}
    				],
    				stateMutability: "pure",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getSubscriptionId",
    				outputs: [
    					{
    						internalType: "uint64",
    						name: "",
    						type: "uint64"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getVrfCoordinator",
    				outputs: [
    					{
    						internalType: "contract VRFCoordinatorV2Interface",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_internalRequestId",
    						type: "uint32"
    					}
    				],
    				name: "isRequestComplete",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "isCompleted",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_internalRequestId",
    						type: "uint32"
    					}
    				],
    				name: "randomNumber",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "randomNum",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "requestId",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256[]",
    						name: "randomWords",
    						type: "uint256[]"
    					}
    				],
    				name: "rawFulfillRandomWords",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "requestRandomNumber",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "requestId",
    						type: "uint32"
    					},
    					{
    						internalType: "uint32",
    						name: "lockBlock",
    						type: "uint32"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "bytes32",
    						name: "_keyHash",
    						type: "bytes32"
    					}
    				],
    				name: "setKeyhash",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint64",
    						name: "_subscriptionId",
    						type: "uint64"
    					}
    				],
    				name: "setSubscriptionId",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 43114,
    		address: "0x832cB306640dD33542dBa08ca1c13DD6686A3a88",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "ReceiverTimelockTrigger",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawBuffer",
    						name: "_drawBuffer",
    						type: "address"
    					},
    					{
    						internalType: "contract IPrizeDistributionFactory",
    						name: "_prizeDistributionFactory",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawCalculatorTimelock",
    						name: "_timelock",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IDrawBuffer",
    						name: "drawBuffer",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IPrizeDistributionFactory",
    						name: "prizeDistributionFactory",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IDrawCalculatorTimelock",
    						name: "timelock",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						indexed: false,
    						internalType: "struct IDrawBeacon.Draw",
    						name: "draw",
    						type: "tuple"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "DrawLockedPushedAndTotalNetworkTicketSupplyPushed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "drawBuffer",
    				outputs: [
    					{
    						internalType: "contract IDrawBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "prizeDistributionFactory",
    				outputs: [
    					{
    						internalType: "contract IPrizeDistributionFactory",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "_draw",
    						type: "tuple"
    					},
    					{
    						internalType: "uint256",
    						name: "_totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "push",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "timelock",
    				outputs: [
    					{
    						internalType: "contract IDrawCalculatorTimelock",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 43114,
    		address: "0xf04E5B81e69Cdc3c08BC5Da64ca053AD46a3d029",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "Reserve",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IERC20",
    						name: "_token",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "reserveAccumulated",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "withdrawAccumulated",
    						type: "uint256"
    					}
    				],
    				name: "Checkpoint",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IERC20",
    						name: "token",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "Withdrawn",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "checkpoint",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_startTimestamp",
    						type: "uint32"
    					},
    					{
    						internalType: "uint32",
    						name: "_endTimestamp",
    						type: "uint32"
    					}
    				],
    				name: "getReserveAccumulatedBetween",
    				outputs: [
    					{
    						internalType: "uint224",
    						name: "",
    						type: "uint224"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getToken",
    				outputs: [
    					{
    						internalType: "contract IERC20",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "token",
    				outputs: [
    					{
    						internalType: "contract IERC20",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "withdrawAccumulator",
    				outputs: [
    					{
    						internalType: "uint224",
    						name: "",
    						type: "uint224"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "withdrawTo",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 43114,
    		address: "0xd23723fef8A16B77eaDc1fC822aE4170bA9d4009",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "TWABDelegator",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "string",
    						name: "name_",
    						type: "string"
    					},
    					{
    						internalType: "string",
    						name: "symbol_",
    						type: "string"
    					},
    					{
    						internalType: "contract ITicket",
    						name: "_ticket",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					}
    				],
    				name: "Approval",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "slot",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegatee",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint96",
    						name: "lockUntil",
    						type: "uint96"
    					},
    					{
    						indexed: false,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					}
    				],
    				name: "DelegateeUpdated",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "slot",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint96",
    						name: "lockUntil",
    						type: "uint96"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegatee",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "contract Delegation",
    						name: "delegation",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					}
    				],
    				name: "DelegationCreated",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "slot",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					}
    				],
    				name: "DelegationFunded",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "slot",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					}
    				],
    				name: "DelegationFundedFromStake",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "representative",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "bool",
    						name: "set",
    						type: "bool"
    					}
    				],
    				name: "RepresentativeSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "ticket",
    						type: "address"
    					}
    				],
    				name: "TicketSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "TicketsStaked",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "TicketsUnstaked",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					}
    				],
    				name: "Transfer",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "slot",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					}
    				],
    				name: "TransferredDelegation",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "slot",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					}
    				],
    				name: "WithdrewDelegationToStake",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "MAX_LOCK",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					}
    				],
    				name: "allowance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "approve",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "account",
    						type: "address"
    					}
    				],
    				name: "balanceOf",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					}
    				],
    				name: "computeDelegationAddress",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_delegatee",
    						type: "address"
    					},
    					{
    						internalType: "uint96",
    						name: "_lockDuration",
    						type: "uint96"
    					}
    				],
    				name: "createDelegation",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "decimals",
    				outputs: [
    					{
    						internalType: "uint8",
    						name: "",
    						type: "uint8"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "subtractedValue",
    						type: "uint256"
    					}
    				],
    				name: "decreaseAllowance",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "delegationInstance",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "fundDelegation",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "fundDelegationFromStake",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					}
    				],
    				name: "getDelegation",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "delegation",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "delegatee",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "balance",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256",
    						name: "lockUntil",
    						type: "uint256"
    					},
    					{
    						internalType: "bool",
    						name: "wasCreated",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "addedValue",
    						type: "uint256"
    					}
    				],
    				name: "increaseAllowance",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_representative",
    						type: "address"
    					}
    				],
    				name: "isRepresentativeOf",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "bytes[]",
    						name: "_data",
    						type: "bytes[]"
    					}
    				],
    				name: "multicall",
    				outputs: [
    					{
    						internalType: "bytes[]",
    						name: "",
    						type: "bytes[]"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "name",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					},
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "deadline",
    								type: "uint256"
    							},
    							{
    								internalType: "uint8",
    								name: "v",
    								type: "uint8"
    							},
    							{
    								internalType: "bytes32",
    								name: "r",
    								type: "bytes32"
    							},
    							{
    								internalType: "bytes32",
    								name: "s",
    								type: "bytes32"
    							}
    						],
    						internalType: "struct PermitAndMulticall.Signature",
    						name: "_permitSignature",
    						type: "tuple"
    					},
    					{
    						internalType: "bytes[]",
    						name: "_data",
    						type: "bytes[]"
    					}
    				],
    				name: "permitAndMulticall",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_representative",
    						type: "address"
    					},
    					{
    						internalType: "bool",
    						name: "_set",
    						type: "bool"
    					}
    				],
    				name: "setRepresentative",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "stake",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "symbol",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "ticket",
    				outputs: [
    					{
    						internalType: "contract ITicket",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "totalSupply",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "transfer",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					}
    				],
    				name: "transferDelegationTo",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "sender",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "transferFrom",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "unstake",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_delegatee",
    						type: "address"
    					},
    					{
    						internalType: "uint96",
    						name: "_lockDuration",
    						type: "uint96"
    					}
    				],
    				name: "updateDelegatee",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "withdrawDelegationToStake",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 43114,
    		address: "0xB27f379C050f6eD0973A01667458af6eCeBc1d90",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "Ticket",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "string",
    						name: "_name",
    						type: "string"
    					},
    					{
    						internalType: "string",
    						name: "_symbol",
    						type: "string"
    					},
    					{
    						internalType: "uint8",
    						name: "decimals_",
    						type: "uint8"
    					},
    					{
    						internalType: "address",
    						name: "_controller",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					}
    				],
    				name: "Approval",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegate",
    						type: "address"
    					}
    				],
    				name: "Delegated",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "string",
    						name: "name",
    						type: "string"
    					},
    					{
    						indexed: false,
    						internalType: "string",
    						name: "symbol",
    						type: "string"
    					},
    					{
    						indexed: false,
    						internalType: "uint8",
    						name: "decimals",
    						type: "uint8"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "controller",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint224",
    								name: "amount",
    								type: "uint224"
    							},
    							{
    								internalType: "uint32",
    								name: "timestamp",
    								type: "uint32"
    							}
    						],
    						indexed: false,
    						internalType: "struct ObservationLib.Observation",
    						name: "newTotalSupplyTwab",
    						type: "tuple"
    					}
    				],
    				name: "NewTotalSupplyTwab",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegate",
    						type: "address"
    					},
    					{
    						components: [
    							{
    								internalType: "uint224",
    								name: "amount",
    								type: "uint224"
    							},
    							{
    								internalType: "uint32",
    								name: "timestamp",
    								type: "uint32"
    							}
    						],
    						indexed: false,
    						internalType: "struct ObservationLib.Observation",
    						name: "newTwab",
    						type: "tuple"
    					}
    				],
    				name: "NewUserTwab",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "string",
    						name: "name",
    						type: "string"
    					},
    					{
    						indexed: false,
    						internalType: "string",
    						name: "symbol",
    						type: "string"
    					},
    					{
    						indexed: false,
    						internalType: "uint8",
    						name: "decimals",
    						type: "uint8"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "controller",
    						type: "address"
    					}
    				],
    				name: "TicketInitialized",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					}
    				],
    				name: "Transfer",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "DOMAIN_SEPARATOR",
    				outputs: [
    					{
    						internalType: "bytes32",
    						name: "",
    						type: "bytes32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					}
    				],
    				name: "allowance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "approve",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "account",
    						type: "address"
    					}
    				],
    				name: "balanceOf",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "controller",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "controllerBurn",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_operator",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "controllerBurnFrom",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					}
    				],
    				name: "controllerDelegateFor",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "controllerMint",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "decimals",
    				outputs: [
    					{
    						internalType: "uint8",
    						name: "",
    						type: "uint8"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "subtractedValue",
    						type: "uint256"
    					}
    				],
    				name: "decreaseAllowance",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					}
    				],
    				name: "delegate",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					}
    				],
    				name: "delegateOf",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_newDelegate",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_deadline",
    						type: "uint256"
    					},
    					{
    						internalType: "uint8",
    						name: "_v",
    						type: "uint8"
    					},
    					{
    						internalType: "bytes32",
    						name: "_r",
    						type: "bytes32"
    					},
    					{
    						internalType: "bytes32",
    						name: "_s",
    						type: "bytes32"
    					}
    				],
    				name: "delegateWithSignature",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					}
    				],
    				name: "getAccountDetails",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint208",
    								name: "balance",
    								type: "uint208"
    							},
    							{
    								internalType: "uint24",
    								name: "nextTwabIndex",
    								type: "uint24"
    							},
    							{
    								internalType: "uint24",
    								name: "cardinality",
    								type: "uint24"
    							}
    						],
    						internalType: "struct TwabLib.AccountDetails",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint64",
    						name: "_startTime",
    						type: "uint64"
    					},
    					{
    						internalType: "uint64",
    						name: "_endTime",
    						type: "uint64"
    					}
    				],
    				name: "getAverageBalanceBetween",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint64[]",
    						name: "_startTimes",
    						type: "uint64[]"
    					},
    					{
    						internalType: "uint64[]",
    						name: "_endTimes",
    						type: "uint64[]"
    					}
    				],
    				name: "getAverageBalancesBetween",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint64[]",
    						name: "_startTimes",
    						type: "uint64[]"
    					},
    					{
    						internalType: "uint64[]",
    						name: "_endTimes",
    						type: "uint64[]"
    					}
    				],
    				name: "getAverageTotalSuppliesBetween",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint64",
    						name: "_target",
    						type: "uint64"
    					}
    				],
    				name: "getBalanceAt",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint64[]",
    						name: "_targets",
    						type: "uint64[]"
    					}
    				],
    				name: "getBalancesAt",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint64[]",
    						name: "_targets",
    						type: "uint64[]"
    					}
    				],
    				name: "getTotalSuppliesAt",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint64",
    						name: "_target",
    						type: "uint64"
    					}
    				],
    				name: "getTotalSupplyAt",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint16",
    						name: "_index",
    						type: "uint16"
    					}
    				],
    				name: "getTwab",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint224",
    								name: "amount",
    								type: "uint224"
    							},
    							{
    								internalType: "uint32",
    								name: "timestamp",
    								type: "uint32"
    							}
    						],
    						internalType: "struct ObservationLib.Observation",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "addedValue",
    						type: "uint256"
    					}
    				],
    				name: "increaseAllowance",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "name",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					}
    				],
    				name: "nonces",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256",
    						name: "deadline",
    						type: "uint256"
    					},
    					{
    						internalType: "uint8",
    						name: "v",
    						type: "uint8"
    					},
    					{
    						internalType: "bytes32",
    						name: "r",
    						type: "bytes32"
    					},
    					{
    						internalType: "bytes32",
    						name: "s",
    						type: "bytes32"
    					}
    				],
    				name: "permit",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "symbol",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "totalSupply",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "transfer",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "sender",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "transferFrom",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 43114,
    		address: "0x01A1F0699356afeB850f5A80226C35A9319CAf74",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "TwabRewards",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "contract ITicket",
    						name: "_ticket",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "promotionId",
    						type: "uint256"
    					}
    				],
    				name: "PromotionCreated",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "promotionId",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "PromotionDestroyed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "promotionId",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint8",
    						name: "epochNumber",
    						type: "uint8"
    					}
    				],
    				name: "PromotionEnded",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "promotionId",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "numberOfEpochs",
    						type: "uint256"
    					}
    				],
    				name: "PromotionExtended",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "promotionId",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint8[]",
    						name: "epochIds",
    						type: "uint8[]"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "RewardsClaimed",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "GRACE_PERIOD",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					},
    					{
    						internalType: "uint8[]",
    						name: "_epochIds",
    						type: "uint8[]"
    					}
    				],
    				name: "claimRewards",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IERC20",
    						name: "_token",
    						type: "address"
    					},
    					{
    						internalType: "uint64",
    						name: "_startTimestamp",
    						type: "uint64"
    					},
    					{
    						internalType: "uint256",
    						name: "_tokensPerEpoch",
    						type: "uint256"
    					},
    					{
    						internalType: "uint48",
    						name: "_epochDuration",
    						type: "uint48"
    					},
    					{
    						internalType: "uint8",
    						name: "_numberOfEpochs",
    						type: "uint8"
    					}
    				],
    				name: "createPromotion",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					}
    				],
    				name: "destroyPromotion",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					}
    				],
    				name: "endPromotion",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					},
    					{
    						internalType: "uint8",
    						name: "_numberOfEpochs",
    						type: "uint8"
    					}
    				],
    				name: "extendPromotion",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					}
    				],
    				name: "getCurrentEpochId",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					}
    				],
    				name: "getPromotion",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "address",
    								name: "creator",
    								type: "address"
    							},
    							{
    								internalType: "uint64",
    								name: "startTimestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint8",
    								name: "numberOfEpochs",
    								type: "uint8"
    							},
    							{
    								internalType: "uint48",
    								name: "epochDuration",
    								type: "uint48"
    							},
    							{
    								internalType: "uint48",
    								name: "createdAt",
    								type: "uint48"
    							},
    							{
    								internalType: "contract IERC20",
    								name: "token",
    								type: "address"
    							},
    							{
    								internalType: "uint256",
    								name: "tokensPerEpoch",
    								type: "uint256"
    							},
    							{
    								internalType: "uint256",
    								name: "rewardsUnclaimed",
    								type: "uint256"
    							}
    						],
    						internalType: "struct ITwabRewards.Promotion",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					}
    				],
    				name: "getRemainingRewards",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					},
    					{
    						internalType: "uint8[]",
    						name: "_epochIds",
    						type: "uint8[]"
    					}
    				],
    				name: "getRewardsAmount",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "ticket",
    				outputs: [
    					{
    						internalType: "contract ITicket",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 43114,
    		address: "0xF830F5Cb2422d555EC34178E27094a816c8F95EC",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "YieldSourcePrizePool",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IYieldSource",
    						name: "_yieldSource",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "AwardCaptured",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "winner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "Awarded",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "winner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "AwardedExternalERC20",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "winner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256[]",
    						name: "tokenIds",
    						type: "uint256[]"
    					}
    				],
    				name: "AwardedExternalERC721",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "balanceCap",
    						type: "uint256"
    					}
    				],
    				name: "BalanceCapSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "token",
    						type: "address"
    					}
    				],
    				name: "ControlledTokenAdded",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "yieldSource",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "operator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "Deposited",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "bytes",
    						name: "error",
    						type: "bytes"
    					}
    				],
    				name: "ErrorAwardingExternalERC721",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "liquidityCap",
    						type: "uint256"
    					}
    				],
    				name: "LiquidityCapSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "prizeStrategy",
    						type: "address"
    					}
    				],
    				name: "PrizeStrategySet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "Swept",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "ticket",
    						type: "address"
    					}
    				],
    				name: "TicketSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "TransferredExternalERC20",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "operator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "redeemed",
    						type: "uint256"
    					}
    				],
    				name: "Withdrawal",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "VERSION",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "award",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "awardBalance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_externalToken",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "awardExternalERC20",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_externalToken",
    						type: "address"
    					},
    					{
    						internalType: "uint256[]",
    						name: "_tokenIds",
    						type: "uint256[]"
    					}
    				],
    				name: "awardExternalERC721",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "balance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_externalToken",
    						type: "address"
    					}
    				],
    				name: "canAwardExternal",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "captureAwardBalance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract ICompLike",
    						name: "_compLike",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					}
    				],
    				name: "compLikeDelegate",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "depositTo",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_delegate",
    						type: "address"
    					}
    				],
    				name: "depositToAndDelegate",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getAccountedBalance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getBalanceCap",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getLiquidityCap",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getPrizeStrategy",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getTicket",
    				outputs: [
    					{
    						internalType: "contract ITicket",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getToken",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract ITicket",
    						name: "_controlledToken",
    						type: "address"
    					}
    				],
    				name: "isControlled",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					},
    					{
    						internalType: "bytes",
    						name: "",
    						type: "bytes"
    					}
    				],
    				name: "onERC721Received",
    				outputs: [
    					{
    						internalType: "bytes4",
    						name: "",
    						type: "bytes4"
    					}
    				],
    				stateMutability: "pure",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_balanceCap",
    						type: "uint256"
    					}
    				],
    				name: "setBalanceCap",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_liquidityCap",
    						type: "uint256"
    					}
    				],
    				name: "setLiquidityCap",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_prizeStrategy",
    						type: "address"
    					}
    				],
    				name: "setPrizeStrategy",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract ITicket",
    						name: "_ticket",
    						type: "address"
    					}
    				],
    				name: "setTicket",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "sweep",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_externalToken",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "transferExternalERC20",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_from",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "withdrawFrom",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "yieldSource",
    				outputs: [
    					{
    						internalType: "contract IYieldSource",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 10,
    		address: "0x4ecB5300D9ec6BCA09d66bfd8Dcb532e3192dDA1",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "AaveV3YieldSource",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "contract IAToken",
    						name: "_aToken",
    						type: "address"
    					},
    					{
    						internalType: "contract IRewardsController",
    						name: "_rewardsController",
    						type: "address"
    					},
    					{
    						internalType: "contract IPoolAddressesProviderRegistry",
    						name: "_poolAddressesProviderRegistry",
    						type: "address"
    					},
    					{
    						internalType: "string",
    						name: "_name",
    						type: "string"
    					},
    					{
    						internalType: "string",
    						name: "_symbol",
    						type: "string"
    					},
    					{
    						internalType: "uint8",
    						name: "decimals_",
    						type: "uint8"
    					},
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IAToken",
    						name: "aToken",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "contract IRewardsController",
    						name: "rewardsController",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "contract IPoolAddressesProviderRegistry",
    						name: "poolAddressesProviderRegistry",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "string",
    						name: "name",
    						type: "string"
    					},
    					{
    						indexed: false,
    						internalType: "string",
    						name: "symbol",
    						type: "string"
    					},
    					{
    						indexed: false,
    						internalType: "uint8",
    						name: "decimals",
    						type: "uint8"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					}
    				],
    				name: "AaveV3YieldSourceInitialized",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					}
    				],
    				name: "Approval",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "address[]",
    						name: "rewardsList",
    						type: "address[]"
    					},
    					{
    						indexed: false,
    						internalType: "uint256[]",
    						name: "claimedAmounts",
    						type: "uint256[]"
    					}
    				],
    				name: "Claimed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "contract IERC20",
    						name: "token",
    						type: "address"
    					}
    				],
    				name: "DecreasedERC20Allowance",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "contract IERC20",
    						name: "token",
    						type: "address"
    					}
    				],
    				name: "IncreasedERC20Allowance",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "shares",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "RedeemedToken",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "shares",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					}
    				],
    				name: "SuppliedTokenTo",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					}
    				],
    				name: "Transfer",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "contract IERC20",
    						name: "token",
    						type: "address"
    					}
    				],
    				name: "TransferredERC20",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "aToken",
    				outputs: [
    					{
    						internalType: "contract IAToken",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					}
    				],
    				name: "allowance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "approve",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "account",
    						type: "address"
    					}
    				],
    				name: "balanceOf",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					}
    				],
    				name: "balanceOfToken",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					}
    				],
    				name: "claimRewards",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "decimals",
    				outputs: [
    					{
    						internalType: "uint8",
    						name: "",
    						type: "uint8"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "subtractedValue",
    						type: "uint256"
    					}
    				],
    				name: "decreaseAllowance",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IERC20",
    						name: "_token",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "decreaseERC20Allowance",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "depositToken",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "addedValue",
    						type: "uint256"
    					}
    				],
    				name: "increaseAllowance",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IERC20",
    						name: "_token",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "increaseERC20Allowance",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "name",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "poolAddressesProviderRegistry",
    				outputs: [
    					{
    						internalType: "contract IPoolAddressesProviderRegistry",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_redeemAmount",
    						type: "uint256"
    					}
    				],
    				name: "redeemToken",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "rewardsController",
    				outputs: [
    					{
    						internalType: "contract IRewardsController",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_depositAmount",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					}
    				],
    				name: "supplyTokenTo",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "symbol",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "totalSupply",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "transfer",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IERC20",
    						name: "_token",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "transferERC20",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "sender",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "transferFrom",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 10,
    		address: "0x267DD4034830Bb4ba9314e0471C1dDFD79849777",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "DrawBuffer",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "uint8",
    						name: "_cardinality",
    						type: "uint8"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						indexed: false,
    						internalType: "struct IDrawBeacon.Draw",
    						name: "draw",
    						type: "tuple"
    					}
    				],
    				name: "DrawSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "MAX_CARDINALITY",
    				outputs: [
    					{
    						internalType: "uint16",
    						name: "",
    						type: "uint16"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getBufferCardinality",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					}
    				],
    				name: "getDraw",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getDrawCount",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32[]",
    						name: "_drawIds",
    						type: "uint32[]"
    					}
    				],
    				name: "getDraws",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw[]",
    						name: "",
    						type: "tuple[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getNewestDraw",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getOldestDraw",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "_draw",
    						type: "tuple"
    					}
    				],
    				name: "pushDraw",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "_newDraw",
    						type: "tuple"
    					}
    				],
    				name: "setDraw",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 10,
    		address: "0x46d2f8e4D8Ff3d76cf252D89dD9b422f04123D2c",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "DrawCalculator",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "contract ITicket",
    						name: "_ticket",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawBuffer",
    						name: "_drawBuffer",
    						type: "address"
    					},
    					{
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "_prizeDistributionBuffer",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "ticket",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IDrawBuffer",
    						name: "drawBuffer",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "prizeDistributionBuffer",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract PrizeDistributor",
    						name: "prizeDistributor",
    						type: "address"
    					}
    				],
    				name: "PrizeDistributorSet",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "TIERS_LENGTH",
    				outputs: [
    					{
    						internalType: "uint8",
    						name: "",
    						type: "uint8"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint32[]",
    						name: "_drawIds",
    						type: "uint32[]"
    					},
    					{
    						internalType: "bytes",
    						name: "_pickIndicesForDraws",
    						type: "bytes"
    					}
    				],
    				name: "calculate",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					},
    					{
    						internalType: "bytes",
    						name: "",
    						type: "bytes"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "drawBuffer",
    				outputs: [
    					{
    						internalType: "contract IDrawBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getDrawBuffer",
    				outputs: [
    					{
    						internalType: "contract IDrawBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint32[]",
    						name: "_drawIds",
    						type: "uint32[]"
    					}
    				],
    				name: "getNormalizedBalancesForDrawIds",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getPrizeDistributionBuffer",
    				outputs: [
    					{
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "prizeDistributionBuffer",
    				outputs: [
    					{
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "ticket",
    				outputs: [
    					{
    						internalType: "contract ITicket",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 10,
    		address: "0xd23723fef8A16B77eaDc1fC822aE4170bA9d4009",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "DrawCalculatorTimelock",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawCalculator",
    						name: "_calculator",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IDrawCalculator",
    						name: "drawCalculator",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint64",
    						name: "timestamp",
    						type: "uint64"
    					}
    				],
    				name: "LockedDraw",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							}
    						],
    						indexed: false,
    						internalType: "struct IDrawCalculatorTimelock.Timelock",
    						name: "timelock",
    						type: "tuple"
    					}
    				],
    				name: "TimelockSet",
    				type: "event"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "user",
    						type: "address"
    					},
    					{
    						internalType: "uint32[]",
    						name: "drawIds",
    						type: "uint32[]"
    					},
    					{
    						internalType: "bytes",
    						name: "data",
    						type: "bytes"
    					}
    				],
    				name: "calculate",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					},
    					{
    						internalType: "bytes",
    						name: "",
    						type: "bytes"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getDrawCalculator",
    				outputs: [
    					{
    						internalType: "contract IDrawCalculator",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getTimelock",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawCalculatorTimelock.Timelock",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "hasElapsed",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						internalType: "uint64",
    						name: "_timestamp",
    						type: "uint64"
    					}
    				],
    				name: "lock",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawCalculatorTimelock.Timelock",
    						name: "_timelock",
    						type: "tuple"
    					}
    				],
    				name: "setTimelock",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 10,
    		address: "0xcddfa3BfC0e548d9A526E3355FefDf987F4e1aAE",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "EIP2612PermitAndDeposit",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "contract IPrizePool",
    						name: "_prizePool",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						components: [
    							{
    								internalType: "address",
    								name: "delegate",
    								type: "address"
    							},
    							{
    								components: [
    									{
    										internalType: "uint256",
    										name: "deadline",
    										type: "uint256"
    									},
    									{
    										internalType: "uint8",
    										name: "v",
    										type: "uint8"
    									},
    									{
    										internalType: "bytes32",
    										name: "r",
    										type: "bytes32"
    									},
    									{
    										internalType: "bytes32",
    										name: "s",
    										type: "bytes32"
    									}
    								],
    								internalType: "struct Signature",
    								name: "signature",
    								type: "tuple"
    							}
    						],
    						internalType: "struct DelegateSignature",
    						name: "_delegateSignature",
    						type: "tuple"
    					}
    				],
    				name: "depositToAndDelegate",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IPrizePool",
    						name: "_prizePool",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "deadline",
    								type: "uint256"
    							},
    							{
    								internalType: "uint8",
    								name: "v",
    								type: "uint8"
    							},
    							{
    								internalType: "bytes32",
    								name: "r",
    								type: "bytes32"
    							},
    							{
    								internalType: "bytes32",
    								name: "s",
    								type: "bytes32"
    							}
    						],
    						internalType: "struct Signature",
    						name: "_permitSignature",
    						type: "tuple"
    					},
    					{
    						components: [
    							{
    								internalType: "address",
    								name: "delegate",
    								type: "address"
    							},
    							{
    								components: [
    									{
    										internalType: "uint256",
    										name: "deadline",
    										type: "uint256"
    									},
    									{
    										internalType: "uint8",
    										name: "v",
    										type: "uint8"
    									},
    									{
    										internalType: "bytes32",
    										name: "r",
    										type: "bytes32"
    									},
    									{
    										internalType: "bytes32",
    										name: "s",
    										type: "bytes32"
    									}
    								],
    								internalType: "struct Signature",
    								name: "signature",
    								type: "tuple"
    							}
    						],
    						internalType: "struct DelegateSignature",
    						name: "_delegateSignature",
    						type: "tuple"
    					}
    				],
    				name: "permitAndDepositToAndDelegate",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 10,
    		address: "0x8e4F3098192948E342fB11ED7C4a23CD5A306973",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "PrizeDistributionBuffer",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "uint8",
    						name: "_cardinality",
    						type: "uint8"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint8",
    						name: "cardinality",
    						type: "uint8"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						indexed: false,
    						internalType: "struct IPrizeDistributionSource.PrizeDistribution",
    						name: "prizeDistribution",
    						type: "tuple"
    					}
    				],
    				name: "PrizeDistributionSet",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getBufferCardinality",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getNewestPrizeDistribution",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionSource.PrizeDistribution",
    						name: "prizeDistribution",
    						type: "tuple"
    					},
    					{
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getOldestPrizeDistribution",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionSource.PrizeDistribution",
    						name: "prizeDistribution",
    						type: "tuple"
    					},
    					{
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					}
    				],
    				name: "getPrizeDistribution",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionSource.PrizeDistribution",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getPrizeDistributionCount",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32[]",
    						name: "_drawIds",
    						type: "uint32[]"
    					}
    				],
    				name: "getPrizeDistributions",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionSource.PrizeDistribution[]",
    						name: "",
    						type: "tuple[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionSource.PrizeDistribution",
    						name: "_prizeDistribution",
    						type: "tuple"
    					}
    				],
    				name: "pushPrizeDistribution",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionSource.PrizeDistribution",
    						name: "_prizeDistribution",
    						type: "tuple"
    					}
    				],
    				name: "setPrizeDistribution",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 10,
    		address: "0x01A1F0699356afeB850f5A80226C35A9319CAf74",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "PrizeDistributionFactory",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IPrizeTierHistory",
    						name: "_prizeTierHistory",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawBuffer",
    						name: "_drawBuffer",
    						type: "address"
    					},
    					{
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "_prizeDistributionBuffer",
    						type: "address"
    					},
    					{
    						internalType: "contract ITicket",
    						name: "_ticket",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_minPickCost",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "PrizeDistributionPushed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "PrizeDistributionSet",
    				type: "event"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						internalType: "uint256",
    						name: "_totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "calculatePrizeDistribution",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionSource.PrizeDistribution",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						internalType: "uint256",
    						name: "_totalNetworkTicketSupply",
    						type: "uint256"
    					},
    					{
    						internalType: "uint32",
    						name: "_beaconPeriodSeconds",
    						type: "uint32"
    					},
    					{
    						internalType: "uint64",
    						name: "_drawTimestamp",
    						type: "uint64"
    					}
    				],
    				name: "calculatePrizeDistributionWithDrawData",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionSource.PrizeDistribution",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "drawBuffer",
    				outputs: [
    					{
    						internalType: "contract IDrawBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "minPickCost",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "prizeDistributionBuffer",
    				outputs: [
    					{
    						internalType: "contract IPrizeDistributionBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "prizeTierHistory",
    				outputs: [
    					{
    						internalType: "contract IPrizeTierHistory",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						internalType: "uint256",
    						name: "_totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "pushPrizeDistribution",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionSource.PrizeDistribution",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					},
    					{
    						internalType: "uint256",
    						name: "_totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "setPrizeDistribution",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint8",
    								name: "matchCardinality",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "startTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint104",
    								name: "numberOfPicks",
    								type: "uint104"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							}
    						],
    						internalType: "struct IPrizeDistributionSource.PrizeDistribution",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "ticket",
    				outputs: [
    					{
    						internalType: "contract ITicket",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 10,
    		address: "0x722e9BFC008358aC2d445a8d892cF7b62B550F3F",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "PrizeDistributor",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IERC20",
    						name: "_token",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawCalculator",
    						name: "_drawCalculator",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "payout",
    						type: "uint256"
    					}
    				],
    				name: "ClaimedDraw",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IDrawCalculator",
    						name: "calculator",
    						type: "address"
    					}
    				],
    				name: "DrawCalculatorSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IERC20",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "ERC20Withdrawn",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IERC20",
    						name: "token",
    						type: "address"
    					}
    				],
    				name: "TokenSet",
    				type: "event"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint32[]",
    						name: "_drawIds",
    						type: "uint32[]"
    					},
    					{
    						internalType: "bytes",
    						name: "_data",
    						type: "bytes"
    					}
    				],
    				name: "claim",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getDrawCalculator",
    				outputs: [
    					{
    						internalType: "contract IDrawCalculator",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint32",
    						name: "_drawId",
    						type: "uint32"
    					}
    				],
    				name: "getDrawPayoutBalanceOf",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getToken",
    				outputs: [
    					{
    						internalType: "contract IERC20",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IDrawCalculator",
    						name: "_newCalculator",
    						type: "address"
    					}
    				],
    				name: "setDrawCalculator",
    				outputs: [
    					{
    						internalType: "contract IDrawCalculator",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IERC20",
    						name: "_erc20Token",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "withdrawERC20",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 10,
    		address: "0x4c65F496B78b7E81c15723f56a43925E5dc3a0e1",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "PrizeFlush",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_destination",
    						type: "address"
    					},
    					{
    						internalType: "contract IStrategy",
    						name: "_strategy",
    						type: "address"
    					},
    					{
    						internalType: "contract IReserve",
    						name: "_reserve",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "destination",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IReserve",
    						name: "reserve",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IStrategy",
    						name: "strategy",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "address",
    						name: "destination",
    						type: "address"
    					}
    				],
    				name: "DestinationSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "destination",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "Flushed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "contract IReserve",
    						name: "reserve",
    						type: "address"
    					}
    				],
    				name: "ReserveSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "contract IStrategy",
    						name: "strategy",
    						type: "address"
    					}
    				],
    				name: "StrategySet",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "flush",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getDestination",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getReserve",
    				outputs: [
    					{
    						internalType: "contract IReserve",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getStrategy",
    				outputs: [
    					{
    						internalType: "contract IStrategy",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_destination",
    						type: "address"
    					}
    				],
    				name: "setDestination",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IReserve",
    						name: "_reserve",
    						type: "address"
    					}
    				],
    				name: "setReserve",
    				outputs: [
    					{
    						internalType: "contract IReserve",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IStrategy",
    						name: "_strategy",
    						type: "address"
    					}
    				],
    				name: "setStrategy",
    				outputs: [
    					{
    						internalType: "contract IStrategy",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 10,
    		address: "0x8d7355075B85B2aDD775E02ec581E0Da66326E49",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "PrizeSplitStrategy",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IPrizePool",
    						name: "_prizePool",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "contract IPrizePool",
    						name: "prizePool",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "totalPrizeCaptured",
    						type: "uint256"
    					}
    				],
    				name: "Distributed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "prizeAwarded",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "contract IControlledToken",
    						name: "token",
    						type: "address"
    					}
    				],
    				name: "PrizeSplitAwarded",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "target",
    						type: "uint256"
    					}
    				],
    				name: "PrizeSplitRemoved",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "target",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint16",
    						name: "percentage",
    						type: "uint16"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "index",
    						type: "uint256"
    					}
    				],
    				name: "PrizeSplitSet",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "ONE_AS_FIXED_POINT_3",
    				outputs: [
    					{
    						internalType: "uint16",
    						name: "",
    						type: "uint16"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "distribute",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getPrizePool",
    				outputs: [
    					{
    						internalType: "contract IPrizePool",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_prizeSplitIndex",
    						type: "uint256"
    					}
    				],
    				name: "getPrizeSplit",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "address",
    								name: "target",
    								type: "address"
    							},
    							{
    								internalType: "uint16",
    								name: "percentage",
    								type: "uint16"
    							}
    						],
    						internalType: "struct IPrizeSplit.PrizeSplitConfig",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getPrizeSplits",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "address",
    								name: "target",
    								type: "address"
    							},
    							{
    								internalType: "uint16",
    								name: "percentage",
    								type: "uint16"
    							}
    						],
    						internalType: "struct IPrizeSplit.PrizeSplitConfig[]",
    						name: "",
    						type: "tuple[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "address",
    								name: "target",
    								type: "address"
    							},
    							{
    								internalType: "uint16",
    								name: "percentage",
    								type: "uint16"
    							}
    						],
    						internalType: "struct IPrizeSplit.PrizeSplitConfig",
    						name: "_prizeSplit",
    						type: "tuple"
    					},
    					{
    						internalType: "uint8",
    						name: "_prizeSplitIndex",
    						type: "uint8"
    					}
    				],
    				name: "setPrizeSplit",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "address",
    								name: "target",
    								type: "address"
    							},
    							{
    								internalType: "uint16",
    								name: "percentage",
    								type: "uint16"
    							}
    						],
    						internalType: "struct IPrizeSplit.PrizeSplitConfig[]",
    						name: "_newPrizeSplits",
    						type: "tuple[]"
    					}
    				],
    				name: "setPrizeSplits",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 10,
    		address: "0xC88f04D5D00367Ecd016228302a1eACFaB164DBA",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "PrizeTierHistory",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						indexed: false,
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "prizeTier",
    						type: "tuple"
    					}
    				],
    				name: "PrizeTierPushed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						indexed: false,
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "prizeTier",
    						type: "tuple"
    					}
    				],
    				name: "PrizeTierSet",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "count",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getNewestDrawId",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getOldestDrawId",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					}
    				],
    				name: "getPrizeTier",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "index",
    						type: "uint256"
    					}
    				],
    				name: "getPrizeTierAtIndex",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32[]",
    						name: "_drawIds",
    						type: "uint32[]"
    					}
    				],
    				name: "getPrizeTierList",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						internalType: "struct IPrizeTierHistory.PrizeTier[]",
    						name: "",
    						type: "tuple[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "newPrizeTier",
    						type: "tuple"
    					}
    				],
    				name: "popAndPush",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "nextPrizeTier",
    						type: "tuple"
    					}
    				],
    				name: "push",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint8",
    								name: "bitRangeSize",
    								type: "uint8"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "maxPicksPerUser",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "expiryDuration",
    								type: "uint32"
    							},
    							{
    								internalType: "uint32",
    								name: "endTimestampOffset",
    								type: "uint32"
    							},
    							{
    								internalType: "uint256",
    								name: "prize",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32[16]",
    								name: "tiers",
    								type: "uint32[16]"
    							}
    						],
    						internalType: "struct IPrizeTierHistory.PrizeTier",
    						name: "newPrizeTier",
    						type: "tuple"
    					}
    				],
    				name: "replace",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 10,
    		address: "0xdd96e37D6DD515A5E7325503fb3958192F98e49F",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "ReceiverTimelockTrigger",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawBuffer",
    						name: "_drawBuffer",
    						type: "address"
    					},
    					{
    						internalType: "contract IPrizeDistributionFactory",
    						name: "_prizeDistributionFactory",
    						type: "address"
    					},
    					{
    						internalType: "contract IDrawCalculatorTimelock",
    						name: "_timelock",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IDrawBuffer",
    						name: "drawBuffer",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IPrizeDistributionFactory",
    						name: "prizeDistributionFactory",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract IDrawCalculatorTimelock",
    						name: "timelock",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint32",
    						name: "drawId",
    						type: "uint32"
    					},
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						indexed: false,
    						internalType: "struct IDrawBeacon.Draw",
    						name: "draw",
    						type: "tuple"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "DrawLockedPushedAndTotalNetworkTicketSupplyPushed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "drawBuffer",
    				outputs: [
    					{
    						internalType: "contract IDrawBuffer",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "prizeDistributionFactory",
    				outputs: [
    					{
    						internalType: "contract IPrizeDistributionFactory",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "winningRandomNumber",
    								type: "uint256"
    							},
    							{
    								internalType: "uint32",
    								name: "drawId",
    								type: "uint32"
    							},
    							{
    								internalType: "uint64",
    								name: "timestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint64",
    								name: "beaconPeriodStartedAt",
    								type: "uint64"
    							},
    							{
    								internalType: "uint32",
    								name: "beaconPeriodSeconds",
    								type: "uint32"
    							}
    						],
    						internalType: "struct IDrawBeacon.Draw",
    						name: "_draw",
    						type: "tuple"
    					},
    					{
    						internalType: "uint256",
    						name: "_totalNetworkTicketSupply",
    						type: "uint256"
    					}
    				],
    				name: "push",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "timelock",
    				outputs: [
    					{
    						internalType: "contract IDrawCalculatorTimelock",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 10,
    		address: "0x574834c934B3784aa8430A5B45724aAa2FcF2c7f",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "Reserve",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IERC20",
    						name: "_token",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "reserveAccumulated",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "withdrawAccumulated",
    						type: "uint256"
    					}
    				],
    				name: "Checkpoint",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract IERC20",
    						name: "token",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousManager",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newManager",
    						type: "address"
    					}
    				],
    				name: "ManagerTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "Withdrawn",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "checkpoint",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint32",
    						name: "_startTimestamp",
    						type: "uint32"
    					},
    					{
    						internalType: "uint32",
    						name: "_endTimestamp",
    						type: "uint32"
    					}
    				],
    				name: "getReserveAccumulatedBetween",
    				outputs: [
    					{
    						internalType: "uint224",
    						name: "",
    						type: "uint224"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getToken",
    				outputs: [
    					{
    						internalType: "contract IERC20",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "manager",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newManager",
    						type: "address"
    					}
    				],
    				name: "setManager",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "token",
    				outputs: [
    					{
    						internalType: "contract IERC20",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "withdrawAccumulator",
    				outputs: [
    					{
    						internalType: "uint224",
    						name: "",
    						type: "uint224"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "withdrawTo",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 10,
    		address: "0x469C6F4c1AdA45EB2E251685aC2bf05aEd591E70",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "TWABDelegator",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "string",
    						name: "name_",
    						type: "string"
    					},
    					{
    						internalType: "string",
    						name: "symbol_",
    						type: "string"
    					},
    					{
    						internalType: "contract ITicket",
    						name: "_ticket",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					}
    				],
    				name: "Approval",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "slot",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegatee",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint96",
    						name: "lockUntil",
    						type: "uint96"
    					},
    					{
    						indexed: false,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					}
    				],
    				name: "DelegateeUpdated",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "slot",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint96",
    						name: "lockUntil",
    						type: "uint96"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegatee",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "contract Delegation",
    						name: "delegation",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					}
    				],
    				name: "DelegationCreated",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "slot",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					}
    				],
    				name: "DelegationFunded",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "slot",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					}
    				],
    				name: "DelegationFundedFromStake",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "representative",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "bool",
    						name: "set",
    						type: "bool"
    					}
    				],
    				name: "RepresentativeSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "ticket",
    						type: "address"
    					}
    				],
    				name: "TicketSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "TicketsStaked",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "TicketsUnstaked",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					}
    				],
    				name: "Transfer",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "slot",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					}
    				],
    				name: "TransferredDelegation",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "slot",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					}
    				],
    				name: "WithdrewDelegationToStake",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "MAX_LOCK",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					}
    				],
    				name: "allowance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "approve",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "account",
    						type: "address"
    					}
    				],
    				name: "balanceOf",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					}
    				],
    				name: "computeDelegationAddress",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_delegatee",
    						type: "address"
    					},
    					{
    						internalType: "uint96",
    						name: "_lockDuration",
    						type: "uint96"
    					}
    				],
    				name: "createDelegation",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "decimals",
    				outputs: [
    					{
    						internalType: "uint8",
    						name: "",
    						type: "uint8"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "subtractedValue",
    						type: "uint256"
    					}
    				],
    				name: "decreaseAllowance",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "delegationInstance",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "fundDelegation",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "fundDelegationFromStake",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					}
    				],
    				name: "getDelegation",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "delegation",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "delegatee",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "balance",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256",
    						name: "lockUntil",
    						type: "uint256"
    					},
    					{
    						internalType: "bool",
    						name: "wasCreated",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "addedValue",
    						type: "uint256"
    					}
    				],
    				name: "increaseAllowance",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_representative",
    						type: "address"
    					}
    				],
    				name: "isRepresentativeOf",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "bytes[]",
    						name: "_data",
    						type: "bytes[]"
    					}
    				],
    				name: "multicall",
    				outputs: [
    					{
    						internalType: "bytes[]",
    						name: "",
    						type: "bytes[]"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "name",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					},
    					{
    						components: [
    							{
    								internalType: "uint256",
    								name: "deadline",
    								type: "uint256"
    							},
    							{
    								internalType: "uint8",
    								name: "v",
    								type: "uint8"
    							},
    							{
    								internalType: "bytes32",
    								name: "r",
    								type: "bytes32"
    							},
    							{
    								internalType: "bytes32",
    								name: "s",
    								type: "bytes32"
    							}
    						],
    						internalType: "struct PermitAndMulticall.Signature",
    						name: "_permitSignature",
    						type: "tuple"
    					},
    					{
    						internalType: "bytes[]",
    						name: "_data",
    						type: "bytes[]"
    					}
    				],
    				name: "permitAndMulticall",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_representative",
    						type: "address"
    					},
    					{
    						internalType: "bool",
    						name: "_set",
    						type: "bool"
    					}
    				],
    				name: "setRepresentative",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "stake",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "symbol",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "ticket",
    				outputs: [
    					{
    						internalType: "contract ITicket",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "totalSupply",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "transfer",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					}
    				],
    				name: "transferDelegationTo",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "sender",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "transferFrom",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "unstake",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_delegatee",
    						type: "address"
    					},
    					{
    						internalType: "uint96",
    						name: "_lockDuration",
    						type: "uint96"
    					}
    				],
    				name: "updateDelegatee",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_delegator",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_slot",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "withdrawDelegationToStake",
    				outputs: [
    					{
    						internalType: "contract Delegation",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 10,
    		address: "0x62BB4fc73094c83B5e952C2180B23fA7054954c4",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "Ticket",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "string",
    						name: "_name",
    						type: "string"
    					},
    					{
    						internalType: "string",
    						name: "_symbol",
    						type: "string"
    					},
    					{
    						internalType: "uint8",
    						name: "decimals_",
    						type: "uint8"
    					},
    					{
    						internalType: "address",
    						name: "_controller",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					}
    				],
    				name: "Approval",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegate",
    						type: "address"
    					}
    				],
    				name: "Delegated",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "string",
    						name: "name",
    						type: "string"
    					},
    					{
    						indexed: false,
    						internalType: "string",
    						name: "symbol",
    						type: "string"
    					},
    					{
    						indexed: false,
    						internalType: "uint8",
    						name: "decimals",
    						type: "uint8"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "controller",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						components: [
    							{
    								internalType: "uint224",
    								name: "amount",
    								type: "uint224"
    							},
    							{
    								internalType: "uint32",
    								name: "timestamp",
    								type: "uint32"
    							}
    						],
    						indexed: false,
    						internalType: "struct ObservationLib.Observation",
    						name: "newTotalSupplyTwab",
    						type: "tuple"
    					}
    				],
    				name: "NewTotalSupplyTwab",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "delegate",
    						type: "address"
    					},
    					{
    						components: [
    							{
    								internalType: "uint224",
    								name: "amount",
    								type: "uint224"
    							},
    							{
    								internalType: "uint32",
    								name: "timestamp",
    								type: "uint32"
    							}
    						],
    						indexed: false,
    						internalType: "struct ObservationLib.Observation",
    						name: "newTwab",
    						type: "tuple"
    					}
    				],
    				name: "NewUserTwab",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "string",
    						name: "name",
    						type: "string"
    					},
    					{
    						indexed: false,
    						internalType: "string",
    						name: "symbol",
    						type: "string"
    					},
    					{
    						indexed: false,
    						internalType: "uint8",
    						name: "decimals",
    						type: "uint8"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "controller",
    						type: "address"
    					}
    				],
    				name: "TicketInitialized",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					}
    				],
    				name: "Transfer",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "DOMAIN_SEPARATOR",
    				outputs: [
    					{
    						internalType: "bytes32",
    						name: "",
    						type: "bytes32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					}
    				],
    				name: "allowance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "approve",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "account",
    						type: "address"
    					}
    				],
    				name: "balanceOf",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "controller",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "controllerBurn",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_operator",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "controllerBurnFrom",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					}
    				],
    				name: "controllerDelegateFor",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "controllerMint",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "decimals",
    				outputs: [
    					{
    						internalType: "uint8",
    						name: "",
    						type: "uint8"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "subtractedValue",
    						type: "uint256"
    					}
    				],
    				name: "decreaseAllowance",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					}
    				],
    				name: "delegate",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					}
    				],
    				name: "delegateOf",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_newDelegate",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_deadline",
    						type: "uint256"
    					},
    					{
    						internalType: "uint8",
    						name: "_v",
    						type: "uint8"
    					},
    					{
    						internalType: "bytes32",
    						name: "_r",
    						type: "bytes32"
    					},
    					{
    						internalType: "bytes32",
    						name: "_s",
    						type: "bytes32"
    					}
    				],
    				name: "delegateWithSignature",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					}
    				],
    				name: "getAccountDetails",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint208",
    								name: "balance",
    								type: "uint208"
    							},
    							{
    								internalType: "uint24",
    								name: "nextTwabIndex",
    								type: "uint24"
    							},
    							{
    								internalType: "uint24",
    								name: "cardinality",
    								type: "uint24"
    							}
    						],
    						internalType: "struct TwabLib.AccountDetails",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint64",
    						name: "_startTime",
    						type: "uint64"
    					},
    					{
    						internalType: "uint64",
    						name: "_endTime",
    						type: "uint64"
    					}
    				],
    				name: "getAverageBalanceBetween",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint64[]",
    						name: "_startTimes",
    						type: "uint64[]"
    					},
    					{
    						internalType: "uint64[]",
    						name: "_endTimes",
    						type: "uint64[]"
    					}
    				],
    				name: "getAverageBalancesBetween",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint64[]",
    						name: "_startTimes",
    						type: "uint64[]"
    					},
    					{
    						internalType: "uint64[]",
    						name: "_endTimes",
    						type: "uint64[]"
    					}
    				],
    				name: "getAverageTotalSuppliesBetween",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint64",
    						name: "_target",
    						type: "uint64"
    					}
    				],
    				name: "getBalanceAt",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint64[]",
    						name: "_targets",
    						type: "uint64[]"
    					}
    				],
    				name: "getBalancesAt",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint64[]",
    						name: "_targets",
    						type: "uint64[]"
    					}
    				],
    				name: "getTotalSuppliesAt",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint64",
    						name: "_target",
    						type: "uint64"
    					}
    				],
    				name: "getTotalSupplyAt",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint16",
    						name: "_index",
    						type: "uint16"
    					}
    				],
    				name: "getTwab",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "uint224",
    								name: "amount",
    								type: "uint224"
    							},
    							{
    								internalType: "uint32",
    								name: "timestamp",
    								type: "uint32"
    							}
    						],
    						internalType: "struct ObservationLib.Observation",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "addedValue",
    						type: "uint256"
    					}
    				],
    				name: "increaseAllowance",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "name",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					}
    				],
    				name: "nonces",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "spender",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "value",
    						type: "uint256"
    					},
    					{
    						internalType: "uint256",
    						name: "deadline",
    						type: "uint256"
    					},
    					{
    						internalType: "uint8",
    						name: "v",
    						type: "uint8"
    					},
    					{
    						internalType: "bytes32",
    						name: "r",
    						type: "bytes32"
    					},
    					{
    						internalType: "bytes32",
    						name: "s",
    						type: "bytes32"
    					}
    				],
    				name: "permit",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "symbol",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "totalSupply",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "transfer",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "sender",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "transferFrom",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 10,
    		address: "0x1470c87e2db5247A36C60DE3D65D7C972C62EA0f",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "TwabRewards",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "contract ITicket",
    						name: "_ticket",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "promotionId",
    						type: "uint256"
    					}
    				],
    				name: "PromotionCreated",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "promotionId",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "PromotionDestroyed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "promotionId",
    						type: "uint256"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "recipient",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint8",
    						name: "epochNumber",
    						type: "uint8"
    					}
    				],
    				name: "PromotionEnded",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "promotionId",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "numberOfEpochs",
    						type: "uint256"
    					}
    				],
    				name: "PromotionExtended",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "promotionId",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint8[]",
    						name: "epochIds",
    						type: "uint8[]"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "user",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "RewardsClaimed",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "GRACE_PERIOD",
    				outputs: [
    					{
    						internalType: "uint32",
    						name: "",
    						type: "uint32"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					},
    					{
    						internalType: "uint8[]",
    						name: "_epochIds",
    						type: "uint8[]"
    					}
    				],
    				name: "claimRewards",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract IERC20",
    						name: "_token",
    						type: "address"
    					},
    					{
    						internalType: "uint64",
    						name: "_startTimestamp",
    						type: "uint64"
    					},
    					{
    						internalType: "uint256",
    						name: "_tokensPerEpoch",
    						type: "uint256"
    					},
    					{
    						internalType: "uint48",
    						name: "_epochDuration",
    						type: "uint48"
    					},
    					{
    						internalType: "uint8",
    						name: "_numberOfEpochs",
    						type: "uint8"
    					}
    				],
    				name: "createPromotion",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					}
    				],
    				name: "destroyPromotion",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					}
    				],
    				name: "endPromotion",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					},
    					{
    						internalType: "uint8",
    						name: "_numberOfEpochs",
    						type: "uint8"
    					}
    				],
    				name: "extendPromotion",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					}
    				],
    				name: "getCurrentEpochId",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					}
    				],
    				name: "getPromotion",
    				outputs: [
    					{
    						components: [
    							{
    								internalType: "address",
    								name: "creator",
    								type: "address"
    							},
    							{
    								internalType: "uint64",
    								name: "startTimestamp",
    								type: "uint64"
    							},
    							{
    								internalType: "uint8",
    								name: "numberOfEpochs",
    								type: "uint8"
    							},
    							{
    								internalType: "uint48",
    								name: "epochDuration",
    								type: "uint48"
    							},
    							{
    								internalType: "uint48",
    								name: "createdAt",
    								type: "uint48"
    							},
    							{
    								internalType: "contract IERC20",
    								name: "token",
    								type: "address"
    							},
    							{
    								internalType: "uint256",
    								name: "tokensPerEpoch",
    								type: "uint256"
    							},
    							{
    								internalType: "uint256",
    								name: "rewardsUnclaimed",
    								type: "uint256"
    							}
    						],
    						internalType: "struct ITwabRewards.Promotion",
    						name: "",
    						type: "tuple"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					}
    				],
    				name: "getRemainingRewards",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_user",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_promotionId",
    						type: "uint256"
    					},
    					{
    						internalType: "uint8[]",
    						name: "_epochIds",
    						type: "uint8[]"
    					}
    				],
    				name: "getRewardsAmount",
    				outputs: [
    					{
    						internalType: "uint256[]",
    						name: "",
    						type: "uint256[]"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "ticket",
    				outputs: [
    					{
    						internalType: "contract ITicket",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	},
    	{
    		chainId: 10,
    		address: "0x79Bc8bD53244bC8a9C8c27509a2d573650A83373",
    		version: [
    			1,
    			0,
    			0
    		],
    		type: "YieldSourcePrizePool",
    		abi: [
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_owner",
    						type: "address"
    					},
    					{
    						internalType: "contract IYieldSource",
    						name: "_yieldSource",
    						type: "address"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "constructor"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "AwardCaptured",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "winner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "Awarded",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "winner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "AwardedExternalERC20",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "winner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256[]",
    						name: "tokenIds",
    						type: "uint256[]"
    					}
    				],
    				name: "AwardedExternalERC721",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "balanceCap",
    						type: "uint256"
    					}
    				],
    				name: "BalanceCapSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "token",
    						type: "address"
    					}
    				],
    				name: "ControlledTokenAdded",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "yieldSource",
    						type: "address"
    					}
    				],
    				name: "Deployed",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "operator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "Deposited",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "bytes",
    						name: "error",
    						type: "bytes"
    					}
    				],
    				name: "ErrorAwardingExternalERC721",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "liquidityCap",
    						type: "uint256"
    					}
    				],
    				name: "LiquidityCapSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "pendingOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipOffered",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "prizeStrategy",
    						type: "address"
    					}
    				],
    				name: "PrizeStrategySet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "Swept",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "ticket",
    						type: "address"
    					}
    				],
    				name: "TicketSet",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					}
    				],
    				name: "TransferredExternalERC20",
    				type: "event"
    			},
    			{
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "operator",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "contract ITicket",
    						name: "token",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "amount",
    						type: "uint256"
    					},
    					{
    						indexed: false,
    						internalType: "uint256",
    						name: "redeemed",
    						type: "uint256"
    					}
    				],
    				name: "Withdrawal",
    				type: "event"
    			},
    			{
    				inputs: [
    				],
    				name: "VERSION",
    				outputs: [
    					{
    						internalType: "string",
    						name: "",
    						type: "string"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "award",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "awardBalance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_externalToken",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "awardExternalERC20",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_externalToken",
    						type: "address"
    					},
    					{
    						internalType: "uint256[]",
    						name: "_tokenIds",
    						type: "uint256[]"
    					}
    				],
    				name: "awardExternalERC721",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "balance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_externalToken",
    						type: "address"
    					}
    				],
    				name: "canAwardExternal",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "captureAwardBalance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "claimOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract ICompLike",
    						name: "_compLike",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					}
    				],
    				name: "compLikeDelegate",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "depositTo",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					},
    					{
    						internalType: "address",
    						name: "_delegate",
    						type: "address"
    					}
    				],
    				name: "depositToAndDelegate",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getAccountedBalance",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getBalanceCap",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getLiquidityCap",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getPrizeStrategy",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getTicket",
    				outputs: [
    					{
    						internalType: "contract ITicket",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "getToken",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract ITicket",
    						name: "_controlledToken",
    						type: "address"
    					}
    				],
    				name: "isControlled",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					},
    					{
    						internalType: "bytes",
    						name: "",
    						type: "bytes"
    					}
    				],
    				name: "onERC721Received",
    				outputs: [
    					{
    						internalType: "bytes4",
    						name: "",
    						type: "bytes4"
    					}
    				],
    				stateMutability: "pure",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "owner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "pendingOwner",
    				outputs: [
    					{
    						internalType: "address",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "renounceOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_balanceCap",
    						type: "uint256"
    					}
    				],
    				name: "setBalanceCap",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "uint256",
    						name: "_liquidityCap",
    						type: "uint256"
    					}
    				],
    				name: "setLiquidityCap",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_prizeStrategy",
    						type: "address"
    					}
    				],
    				name: "setPrizeStrategy",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "contract ITicket",
    						name: "_ticket",
    						type: "address"
    					}
    				],
    				name: "setTicket",
    				outputs: [
    					{
    						internalType: "bool",
    						name: "",
    						type: "bool"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "sweep",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_to",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "_externalToken",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "transferExternalERC20",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_newOwner",
    						type: "address"
    					}
    				],
    				name: "transferOwnership",
    				outputs: [
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    					{
    						internalType: "address",
    						name: "_from",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "_amount",
    						type: "uint256"
    					}
    				],
    				name: "withdrawFrom",
    				outputs: [
    					{
    						internalType: "uint256",
    						name: "",
    						type: "uint256"
    					}
    				],
    				stateMutability: "nonpayable",
    				type: "function"
    			},
    			{
    				inputs: [
    				],
    				name: "yieldSource",
    				outputs: [
    					{
    						internalType: "contract IYieldSource",
    						name: "",
    						type: "address"
    					}
    				],
    				stateMutability: "view",
    				type: "function"
    			}
    		],
    		tags: [
    		],
    		extensions: {
    		}
    	}
    ];
    var mainnet = {
    	name: name$1,
    	version: version$1,
    	tags: tags,
    	contracts: contracts
    };

    function calculateFractionOfPrize(tierTotalPrizes, tierValue) {
      var value = tierValue ? tierValue.toString() : '0';
      var totalPrizes = tierTotalPrizes || '1';
      var valueAtTierIndexUnformatted = parseUnits(value, 9);
      return valueAtTierIndexUnformatted.div(totalPrizes);
    }

    function calculateNormalizeBalancePicksFromTotalPicks(numberOfPicks, normalizedBalance) {
      if (!numberOfPicks || !normalizedBalance) return BigNumber.from(0);
      return BigNumber.from(numberOfPicks).mul(BigNumber.from(normalizedBalance)).div(BigNumber.from('1000000000000000000'));
    }

    function createDrawResultsObject(drawId) {
      return {
        prizes: [],
        totalValue: BigNumber.from('0'),
        drawId: drawId
      };
    }

    function _extends() {
      _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      return _extends.apply(this, arguments);
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

      return arr2;
    }

    function _createForOfIteratorHelperLoose(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (it) return (it = it.call(o)).next.bind(it);

      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;
        return function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var sortByPrizeAwardableDesc = function sortByPrizeAwardableDesc(a, b) {
      var bSubA = b.amount.sub(a.amount);
      if (bSubA.isZero()) return 0;
      if (bSubA.isNegative()) return -1;
      return 1;
    };

    var debug$2 = /*#__PURE__*/(() => (() => null))('pt:v4-utils-js');

    function filterResultsByValue(drawResults, maxPicksPerUser) {
      // if the user has more winning picks than max pick per user for the draw, we sort by value and remove the lowest value picks
      if (drawResults.prizes.length > maxPicksPerUser) {
        debug$2("user has more claims (" + drawResults.prizes.length + ") than the max picks per user (" + maxPicksPerUser + "). Sorting.."); // sort by value

        var descendingSortedPrizes = drawResults.prizes.filter(function (prizeAwardable) {
          return !prizeAwardable.amount.isZero();
        }).sort(sortByPrizeAwardableDesc); // remove the lowest value picks up to the max picks per user

        var slicedDescendingSortedPrizes = descendingSortedPrizes.slice(0, maxPicksPerUser); // sum the sorted values

        var newTotalValue = slicedDescendingSortedPrizes.reduce(function (accumulator, currentValue) {
          return accumulator.add(currentValue.amount);
        }, BigNumber.from(0));
        return _extends({}, drawResults, {
          totalValue: newTotalValue,
          prizes: slicedDescendingSortedPrizes
        });
      } // if not greater than max picks per user, return the whole array


      return drawResults;
    }

    function filterUndefinedValues(ts) {
      return ts.filter(function (t) {
        return Boolean(t);
      });
    }

    var debug$3 = /*#__PURE__*/(() => (() => null))('pt:v4-utils-js'); //SOLIDITY SIG: function _findBitMatchesAtIndex(uint256 word1, uint256 word2, uint256 indexOffset, uint8 _bitRangeMaskValue)


    function findBitMatchesAtIndex(word1, word2, matchIndex, bitRangeSize) {
      var indexOffset = matchIndex * bitRangeSize;
      debug$3("indexOffset: ", indexOffset);
      var word1DataHexString = word1.toHexString();
      var word2DataHexString = word2.toHexString();
      debug$3(word1DataHexString);
      debug$3(word2DataHexString);
      var bitRangeMaxInt = Math.pow(2, bitRangeSize) - 1; // debug(`Max int: `, bitRangeMaxInt.toString(16))

      var mask = BigInt(bitRangeMaxInt) << BigInt(indexOffset.toString());
      debug$3(mask.toString(16));
      var bits1 = BigInt(word1DataHexString) & BigInt(mask.toString());
      debug$3("bits1: ", bits1.toString(16));
      var bits2 = BigInt(word2DataHexString) & BigInt(mask.toString());
      debug$3("bits2: ", bits2.toString(16));
      var match = bits1 === bits2;
      debug$3("DrawCalculator:: matching " + bits1.toString() + " with " + bits2.toString() + ": " + match);
      return match;
    }

    function hashUserAddress(address) {
      return keccak256(['address'], [address]);
    }

    function isBitRangeSizeValid(bitRangeSize, matchCardinality) {
      return bitRangeSize <= Math.floor(256 / matchCardinality);
    }

    function sumTwoBigNumbers(bn1, bn2) {
      return BigNumber.from(bn1).add(BigNumber.from(bn2));
    }
    function sumBigNumbers$1(numbers) {
      return numbers.reduce(sumTwoBigNumbers, BigNumber.from(0));
    }

    function isTiersValid(tiers) {
      var total = sumBigNumbers$1(tiers); // @dev The tier total percentage must be less than 1e9
      // @dev Tiers are denominated in 1e9 and represented as a percentage (e.g. 0.1 = 10%).

      return !BigNumber.from(total).gt(1000000000);
    }

    function sanityCheckPrizeDistribution(prizeDistribution) {
      var validBitRangeSize = isBitRangeSizeValid(prizeDistribution.bitRangeSize, prizeDistribution.matchCardinality);
      if (!validBitRangeSize) return 'DrawCalc/bitRangeSize-too-large';
      var validTiers = isTiersValid(prizeDistribution.tiers);
      if (!validTiers) return 'DrawCalc/tiers-gt-100%';
      return '';
    }

    var sortByBigNumberAsc = function sortByBigNumberAsc(a, b) {
      var aSubB = a.sub(b);
      if (aSubB.isZero()) return 0;
      if (aSubB.isNegative()) return -1;
      return 1;
    };
    var sortByBigNumberDesc = function sortByBigNumberDesc(a, b) {
      var bSubA = b.sub(a);
      if (bSubA.isZero()) return 0;
      if (bSubA.isNegative()) return -1;
      return 1;
    };

    var formatTierPercentage = function formatTierPercentage(tier) {
      return parseUnits(tier, 9).toNumber();
    };

    var parseTierPercentage = function parseTierPercentage(tier) {
      return parseUnits(tier, 9);
    };

    function updateDrawResultsWithWinningPicks(pickPrizes, results, picks) {
      var _result = results;
      pickPrizes.forEach(function (pickPrize, index) {
        var pick = picks[index];
        if (pickPrize.amount.eq(0)) return;

        var prizeAwardable = _extends({}, pickPrize, {
          pick: BigNumber.from(pick.index)
        });

        _result.totalValue = _result.totalValue.add(prizeAwardable.amount);

        _result.prizes.push(prizeAwardable);
      });
      return _result;
    }



    var index$1 = {
        __proto__: null,
        createDrawResultsObject: createDrawResultsObject,
        filterResultsByValue: filterResultsByValue,
        filterUndefinedValues: filterUndefinedValues,
        findBitMatchesAtIndex: findBitMatchesAtIndex,
        hashUserAddress: hashUserAddress,
        isBitRangeSizeValid: isBitRangeSizeValid,
        isTiersValid: isTiersValid,
        sanityCheckPrizeDistribution: sanityCheckPrizeDistribution,
        sumBigNumbers: sumBigNumbers$1,
        sumTwoBigNumbers: sumTwoBigNumbers,
        sortByBigNumberDesc: sortByBigNumberDesc,
        sortByBigNumberAsc: sortByBigNumberAsc,
        sortByPrizeAwardableDesc: sortByPrizeAwardableDesc,
        formatTierPercentage: formatTierPercentage,
        parseTierPercentage: parseTierPercentage,
        updateDrawResultsWithWinningPicks: updateDrawResultsWithWinningPicks
    };

    function calculateNumberOfMatches(pickNumber, winningRandomNumber, matchCardinality, bitRangeSize) {
      var numberOfMatches = 0;

      var _pickNumber = BigNumber.from(pickNumber);

      var _winningRandomNumber = BigNumber.from(winningRandomNumber);

      for (var matchIndex = 0; matchIndex < matchCardinality; matchIndex++) {
        if (!findBitMatchesAtIndex(_pickNumber, _winningRandomNumber, matchIndex, bitRangeSize)) {
          break;
        }

        numberOfMatches++;
      }

      return numberOfMatches;
    }

    function calculateNumberOfPrizesForTierIndex(bitRangeSize, tierIndex) {
      if (tierIndex > 0) {
        return (1 << bitRangeSize * tierIndex) - (1 << bitRangeSize * (tierIndex - 1));
      } else {
        return 1;
      }
    }

    /**
     * Calculates the random number for a pick for a user at a given index.
     * @param address
     * @param pickIndex
     * @returns
     */

    function calculatePick(address, pickIndex) {
      var _pickIndex = BigNumber.from(pickIndex);

      var abiEncodedValue = pack(['bytes32', 'uint256'], [address, _pickIndex]);
      var userRandomNumber = keccak256(['address'], [abiEncodedValue]);
      return {
        index: _pickIndex.toNumber(),
        hash: userRandomNumber
      };
    }

    function calculatePrizeForTierPercentage(tierIndex, tierValue, bitRangeSize, prizeAmount) {
      var numberOfPrizes = calculateNumberOfPrizesForTierIndex(bitRangeSize, tierIndex);
      var fractionOfPrize = calculateFractionOfPrize(numberOfPrizes, tierValue);
      var expectedPrizeAmount = prizeAmount.mul(fractionOfPrize);
      expectedPrizeAmount = expectedPrizeAmount.div(BigNumber.from('1000000000000000000'));
      return expectedPrizeAmount;
    }

    function calculateTierIndexFromMatches(matchCardinality, numberOfMatches) {
      if (numberOfMatches > matchCardinality) throw new Error('numberOfMatches cannot be greater than matchCardinality');
      return matchCardinality - numberOfMatches;
    }

    var MAXIUMUM_TIERS_LENGTH = 16;

    function computePrizeAmount(tierIndex, tierValue, bitRangeSize, prizeAmount) {
      if (tierIndex > MAXIUMUM_TIERS_LENGTH) {
        return {
          amount: BigNumber.from(0),
          tierIndex: -1
        };
      }

      var expectedPrizeAmount = calculatePrizeForTierPercentage(tierIndex, tierValue, bitRangeSize, prizeAmount);
      return {
        amount: expectedPrizeAmount,
        tierIndex: tierIndex
      };
    }

    function computePickPrize(pickHash, winningRandomNumber, bitRangeSize, matchCardinality, prize, tiers) {
      var numberOfMatches = calculateNumberOfMatches(pickHash, winningRandomNumber, matchCardinality, bitRangeSize);
      var tierIndex = calculateTierIndexFromMatches(matchCardinality, numberOfMatches);
      var pickAmount = computePrizeAmount(tierIndex, tiers[tierIndex], bitRangeSize, prize);
      return pickAmount;
    }

    function computePicksPrizes(picks, winningRandomNumber, bitRangeSize, matchCardinality, prize, tiers) {
      return picks.map(function (pick) {
        return computePickPrize(pick.hash, winningRandomNumber, bitRangeSize, matchCardinality, prize, tiers);
      });
    }

    function createCommonjsModule$2(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    createCommonjsModule$2(function (module) {
    /**
     * Copyright (c) 2014-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var runtime = (function (exports) {

      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined$1; // More compressible than void 0.
      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
        return obj[key];
      }
      try {
        // IE 8 has a broken Object.defineProperty that only works on DOM objects.
        define({}, "");
      } catch (err) {
        define = function(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []);

        // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.
        generator._invoke = makeInvokeMethod(innerFn, self, context);

        return generator;
      }
      exports.wrap = wrap;

      // Try/catch helper to minimize deoptimizations. Returns a completion
      // record like context.tryEntries[i].completion. This interface could
      // have been (and was previously) designed to take a closure to be
      // invoked without arguments, but in all the cases we care about we
      // already have an existing method we want to call, so there's no need
      // to create a new function object. We can even get away with assuming
      // the method takes exactly one argument, since that happens to be true
      // in every case, so we don't have to touch the arguments object. The
      // only additional allocation required is the completion record, which
      // has a stable shape and so hopefully should be cheap to allocate.
      function tryCatch(fn, obj, arg) {
        try {
          return { type: "normal", arg: fn.call(obj, arg) };
        } catch (err) {
          return { type: "throw", arg: err };
        }
      }

      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed";

      // Returning this object from the innerFn has the same effect as
      // breaking out of the dispatch switch statement.
      var ContinueSentinel = {};

      // Dummy constructor functions that we use as the .constructor and
      // .constructor.prototype properties for functions that return Generator
      // objects. For full spec compliance, you may wish to configure your
      // minifier not to mangle the names of these two functions.
      function Generator() {}
      function GeneratorFunction() {}
      function GeneratorFunctionPrototype() {}

      // This is a polyfill for %IteratorPrototype% for environments that
      // don't natively support it.
      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });

      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      if (NativeIteratorPrototype &&
          NativeIteratorPrototype !== Op &&
          hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
      }

      var Gp = GeneratorFunctionPrototype.prototype =
        Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = GeneratorFunctionPrototype;
      define(Gp, "constructor", GeneratorFunctionPrototype);
      define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
      GeneratorFunction.displayName = define(
        GeneratorFunctionPrototype,
        toStringTagSymbol,
        "GeneratorFunction"
      );

      // Helper for defining the .next, .throw, and .return methods of the
      // Iterator interface in terms of a single ._invoke method.
      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function(method) {
          define(prototype, method, function(arg) {
            return this._invoke(method, arg);
          });
        });
      }

      exports.isGeneratorFunction = function(genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor
          ? ctor === GeneratorFunction ||
            // For the native GeneratorFunction constructor, the best we can
            // do is to check its .name property.
            (ctor.displayName || ctor.name) === "GeneratorFunction"
          : false;
      };

      exports.mark = function(genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          define(genFun, toStringTagSymbol, "GeneratorFunction");
        }
        genFun.prototype = Object.create(Gp);
        return genFun;
      };

      // Within the body of any async function, `await x` is transformed to
      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
      // `hasOwn.call(value, "__await")` to determine if the yielded value is
      // meant to be awaited.
      exports.awrap = function(arg) {
        return { __await: arg };
      };

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);
          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;
            if (value &&
                typeof value === "object" &&
                hasOwn.call(value, "__await")) {
              return PromiseImpl.resolve(value.__await).then(function(value) {
                invoke("next", value, resolve, reject);
              }, function(err) {
                invoke("throw", err, resolve, reject);
              });
            }

            return PromiseImpl.resolve(value).then(function(unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration.
              result.value = unwrapped;
              resolve(result);
            }, function(error) {
              // If a rejected Promise was yielded, throw the rejection back
              // into the async generator function so it can be handled there.
              return invoke("throw", error, resolve, reject);
            });
          }
        }

        var previousPromise;

        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function(resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise =
            // If enqueue has been called before, then we want to wait until
            // all previous Promises have been resolved before calling invoke,
            // so that results are always delivered in the correct order. If
            // enqueue has not been called before, then it is important to
            // call invoke immediately, without waiting on a callback to fire,
            // so that the async generator function has the opportunity to do
            // any necessary setup in a predictable way. This predictability
            // is why the Promise constructor synchronously invokes its
            // executor callback, and why async functions synchronously
            // execute code before the first await. Since we implement simple
            // async functions in terms of async generators, it is especially
            // important to get this right, even though it requires care.
            previousPromise ? previousPromise.then(
              callInvokeWithMethodAndArg,
              // Avoid propagating failures to Promises returned by later
              // invocations of the iterator.
              callInvokeWithMethodAndArg
            ) : callInvokeWithMethodAndArg();
        }

        // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).
        this._invoke = enqueue;
      }

      defineIteratorMethods(AsyncIterator.prototype);
      define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      });
      exports.AsyncIterator = AsyncIterator;

      // Note that simple async functions are implemented on top of
      // AsyncIterator objects; they just return a Promise for the value of
      // the final result produced by the iterator.
      exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;

        var iter = new AsyncIterator(
          wrap(innerFn, outerFn, self, tryLocsList),
          PromiseImpl
        );

        return exports.isGeneratorFunction(outerFn)
          ? iter // If outerFn is a generator, return the full iterator.
          : iter.next().then(function(result) {
              return result.done ? result.value : iter.next();
            });
      };

      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;

        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }

          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            }

            // Be forgiving, per 25.3.3.3.3 of the spec:
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
            return doneResult();
          }

          context.method = method;
          context.arg = arg;

          while (true) {
            var delegate = context.delegate;
            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);
              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if (context.method === "next") {
              // Setting context._sent for legacy support of Babel's
              // function.sent implementation.
              context.sent = context._sent = context.arg;

            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }

              context.dispatchException(context.arg);

            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }

            state = GenStateExecuting;

            var record = tryCatch(innerFn, self, context);
            if (record.type === "normal") {
              // If an exception is thrown from innerFn, we leave state ===
              // GenStateExecuting and loop back for another invocation.
              state = context.done
                ? GenStateCompleted
                : GenStateSuspendedYield;

              if (record.arg === ContinueSentinel) {
                continue;
              }

              return {
                value: record.arg,
                done: context.done
              };

            } else if (record.type === "throw") {
              state = GenStateCompleted;
              // Dispatch the exception by looping back around to the
              // context.dispatchException(context.arg) call above.
              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      }

      // Call delegate.iterator[context.method](context.arg) and handle the
      // result, either by returning a { value, done } result from the
      // delegate iterator, or by modifying context.method and context.arg,
      // setting context.delegate to null, and returning the ContinueSentinel.
      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];
        if (method === undefined$1) {
          // A .throw or .return when the delegate iterator has no .throw
          // method always terminates the yield* loop.
          context.delegate = null;

          if (context.method === "throw") {
            // Note: ["return"] must be used for ES3 parsing compatibility.
            if (delegate.iterator["return"]) {
              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              context.method = "return";
              context.arg = undefined$1;
              maybeInvokeDelegate(delegate, context);

              if (context.method === "throw") {
                // If maybeInvokeDelegate(context) changed context.method from
                // "return" to "throw", let that override the TypeError below.
                return ContinueSentinel;
              }
            }

            context.method = "throw";
            context.arg = new TypeError(
              "The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);

        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }

        var info = record.arg;

        if (! info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }

        if (info.done) {
          // Assign the result of the finished delegate to the temporary
          // variable specified by delegate.resultName (see delegateYield).
          context[delegate.resultName] = info.value;

          // Resume execution at the desired location (see delegateYield).
          context.next = delegate.nextLoc;

          // If context.method was "throw" but the delegate handled the
          // exception, let the outer generator proceed normally. If
          // context.method was "next", forget context.arg since it has been
          // "consumed" by the delegate iterator. If context.method was
          // "return", allow the original .return call to continue in the
          // outer generator.
          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined$1;
          }

        } else {
          // Re-yield the result returned by the delegate method.
          return info;
        }

        // The delegate iterator is finished, so forget it and continue with
        // the outer generator.
        context.delegate = null;
        return ContinueSentinel;
      }

      // Define Generator.prototype.{next,throw,return} in terms of the
      // unified ._invoke helper method.
      defineIteratorMethods(Gp);

      define(Gp, toStringTagSymbol, "Generator");

      // A Generator should always return itself as the iterator object when the
      // @@iterator function is called on it. Some browsers' implementations of the
      // iterator prototype chain incorrectly implement this, causing the Generator
      // object to not be returned from this call. This ensures that doesn't happen.
      // See https://github.com/facebook/regenerator/issues/274 for more details.
      define(Gp, iteratorSymbol, function() {
        return this;
      });

      define(Gp, "toString", function() {
        return "[object Generator]";
      });

      function pushTryEntry(locs) {
        var entry = { tryLoc: locs[0] };

        if (1 in locs) {
          entry.catchLoc = locs[1];
        }

        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }

        this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }

      function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [{ tryLoc: "root" }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }

      exports.keys = function(object) {
        var keys = [];
        for (var key in object) {
          keys.push(key);
        }
        keys.reverse();

        // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.
        return function next() {
          while (keys.length) {
            var key = keys.pop();
            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          }

          // To avoid creating an additional object, we just hang the .value
          // and .done properties off the next function object itself. This
          // also ensures that the minifier will not anonymize the function.
          next.done = true;
          return next;
        };
      };

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }

          if (typeof iterable.next === "function") {
            return iterable;
          }

          if (!isNaN(iterable.length)) {
            var i = -1, next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }

              next.value = undefined$1;
              next.done = true;

              return next;
            };

            return next.next = next;
          }
        }

        // Return an iterator with no values.
        return { next: doneResult };
      }
      exports.values = values;

      function doneResult() {
        return { value: undefined$1, done: true };
      }

      Context.prototype = {
        constructor: Context,

        reset: function(skipTempReset) {
          this.prev = 0;
          this.next = 0;
          // Resetting context._sent for legacy support of Babel's
          // function.sent implementation.
          this.sent = this._sent = undefined$1;
          this.done = false;
          this.delegate = null;

          this.method = "next";
          this.arg = undefined$1;

          this.tryEntries.forEach(resetTryEntry);

          if (!skipTempReset) {
            for (var name in this) {
              // Not sure about the optimal order of these conditions:
              if (name.charAt(0) === "t" &&
                  hasOwn.call(this, name) &&
                  !isNaN(+name.slice(1))) {
                this[name] = undefined$1;
              }
            }
          }
        },

        stop: function() {
          this.done = true;

          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;
          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }

          return this.rval;
        },

        dispatchException: function(exception) {
          if (this.done) {
            throw exception;
          }

          var context = this;
          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;

            if (caught) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              context.method = "next";
              context.arg = undefined$1;
            }

            return !! caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;

            if (entry.tryLoc === "root") {
              // Exception thrown outside of any try block that could handle
              // it, so set the completion value of the entire function to
              // throw the exception.
              return handle("end");
            }

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }

              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }

              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }

              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },

        abrupt: function(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc <= this.prev &&
                hasOwn.call(entry, "finallyLoc") &&
                this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          if (finallyEntry &&
              (type === "break" ||
               type === "continue") &&
              finallyEntry.tryLoc <= arg &&
              arg <= finallyEntry.finallyLoc) {
            // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
          }

          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;

          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }

          return this.complete(record);
        },

        complete: function(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }

          if (record.type === "break" ||
              record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }

          return ContinueSentinel;
        },

        finish: function(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },

        "catch": function(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;
              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }
              return thrown;
            }
          }

          // The context.catch method must only be called with a location
          // argument that corresponds to a known catch block.
          throw new Error("illegal catch attempt");
        },

        delegateYield: function(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };

          if (this.method === "next") {
            // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined$1;
          }

          return ContinueSentinel;
        }
      };

      // Regardless of whether this script is executing as a CommonJS module
      // or not, return the runtime object so that we can declare the variable
      // regeneratorRuntime in the outer scope, which allows this module to be
      // injected easily by `bin/regenerator --include-runtime script.js`.
      return exports;

    }(
      // If this script is executing as a CommonJS module, use module.exports
      // as the regeneratorRuntime namespace. Otherwise create a new empty
      // object. Either way, the resulting object will be used to initialize
      // the regeneratorRuntime variable at the top of this file.
       module.exports 
    ));

    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      // This module should not be running in strict mode, so the above
      // assignment should always work unless something is misconfigured. Just
      // in case runtime.js accidentally runs in strict mode, in modern engines
      // we can explicitly access globalThis. In older engines we can escape
      // strict mode using a global Function call. This could conceivably fail
      // if a Content Security Policy forbids using Function, but in that case
      // the proper solution is to fix the accidental strict mode problem. If
      // you've misconfigured your bundler to force strict mode and applied a
      // CSP to forbid Function, and you're not willing to fix either of those
      // problems, please detail your unique predicament in a GitHub issue.
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
    });

    function computeUserPicks(totalNumberOfPicks, address, normalizedBalance) {
      var numberOfPicks = calculateNormalizeBalancePicksFromTotalPicks(totalNumberOfPicks, normalizedBalance);
      var usersAddressHashed = hashUserAddress(address);
      var picks = [];
      var numberOfPicksRemaining = numberOfPicks.toNumber();

      for (var pickIndex = 0; pickIndex < numberOfPicksRemaining; pickIndex++) {
        picks.push(calculatePick(usersAddressHashed, pickIndex));
      }

      return picks;
    }

    function computeUserWinningPicksForRandomNumber(randomNumber, bitRangeSize, matchCardinality, numberOfPicks, prize, tiers, userAddress, userNormalizedBalance, drawId) {
      var _userNormalizedBalance = BigNumber.from(userNormalizedBalance);

      var _prize = BigNumber.from(prize);

      var _randomNumber = BigNumber.from(randomNumber);

      var userPicks = computeUserPicks(numberOfPicks, userAddress, _userNormalizedBalance);
      var pickPrizes = computePicksPrizes(userPicks, _randomNumber, bitRangeSize, matchCardinality, _prize, tiers);
      return updateDrawResultsWithWinningPicks(pickPrizes, createDrawResultsObject(drawId), userPicks);
    }

    function encodeWinningPicks(userAddress, drawResults) {
      var claim = {
        userAddress: userAddress,
        drawIds: [],
        winningPickIndices: [],
        encodedWinningPickIndices: ''
      };

      if (drawResults.length === 0) {
        return claim;
      }

      drawResults.forEach(function (drawResult) {
        if (drawResult.totalValue.gt(BigNumber.from(0))) {
          claim.drawIds.push(drawResult.drawId); // now add the pickIndices data

          var winningPicks = [];

          for (var _iterator = _createForOfIteratorHelperLoose(drawResult.prizes), _step; !(_step = _iterator()).done;) {
            var prizeAwardable = _step.value;
            winningPicks.push(BigNumber.from(prizeAwardable.pick));
          }

          claim.winningPickIndices.push(winningPicks);
        }
      });
      claim.winningPickIndices = claim.winningPickIndices.map(function (data) {
        return data.sort(sortByBigNumberAsc);
      });
      claim.encodedWinningPickIndices = defaultAbiCoder.encode(['uint256[][]'], [claim.winningPickIndices]);
      return claim;
    }

    Object.defineProperty(exports, '__esModule', { value: true });

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$5 = function(d, b) {
        extendStatics$5 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics$5(d, b);
    };

    function __extends$5(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics$5(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __awaiter$5(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator$5(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    exports.__awaiter = __awaiter$5;
    exports.__extends = __extends$5;
    exports.__generator = __generator$5;

    var _tslib$1 = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    var Call = /** @class */ (function () {
        function Call(caller, fd, to, data, resolve, reject) {
            this.caller = caller;
            this.fd = fd;
            this.to = to;
            this.data = data;
            this.resolve = resolve;
            this.reject = reject;
        }
        return Call;
    }());

    var Call_2 = Call;

    var Call_1 = /*#__PURE__*/Object.defineProperty({
    	Call: Call_2
    }, '__esModule', {value: true});

    var _tslib = /*@__PURE__*/getAugmentedNamespace(_tslib$1);

    var Context = /** @class */ (function () {
        function Context(contract) {
            this.contract = contract;
            this.calls = new Array();
        }
        Context.prototype.call = function (to, fd, data) {
            var resolveCb;
            var rejectCb;
            var promise = new Promise(function (resolve, reject) {
                resolveCb = resolve;
                rejectCb = reject;
            });
            var call = new Call_1.Call(this.contract, fd, to, data, resolveCb, rejectCb);
            this.calls.push(call);
            return promise;
        };
        Context.prototype.flush = function () {
            var oldCalls = this.calls;
            this.calls = new Array();
            return oldCalls;
        };
        return Context;
    }());
    var MulticallContract = /** @class */ (function () {
        function MulticallContract(__name, abi, __address) {
            var _this = this;
            this.__name = __name;
            this.__address = __address;
            this.__interface = new ethers.ethers.utils.Interface(abi);
            this.__functionContext = /** @class */ (function (_super) {
                _tslib.__extends(FunctionContext, _super);
                function FunctionContext() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return FunctionContext;
            }(Context));
            Object.keys(this.__interface.functions).forEach(function (functionName) {
                var fd = _this.__interface.functions[functionName];
                if (/function/i.test(fd.type)) {
                    _this.addFunction(fd);
                    _this.addPrototypeFunction(fd);
                }
            });
        }
        MulticallContract.prototype.addFunction = function (fd) {
            var _this = this;
            var that = this;
            var callback = function () {
                var params = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    params[_i] = arguments[_i];
                }
                // create a new context and return it
                // @ts-ignore
                var context = new _this.__functionContext(that);
                return context[fd.name].apply(context, params);
            };
            this[fd.name] = callback;
            this[fd.format()] = callback;
        };
        MulticallContract.prototype.addPrototypeFunction = function (fd) {
            var that = this;
            var callback = function () {
                var params = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    params[_i] = arguments[_i];
                }
                var data = that.__interface.encodeFunctionData(fd, params);
                this.call(this.contract.__address, fd, data);
                return this;
            };
            this.__functionContext.prototype[fd.name] = callback;
            this.__functionContext.prototype[fd.format()] = callback;
        };
        return MulticallContract;
    }());

    var Context_1 = Context;
    var MulticallContract_2 = MulticallContract;

    var MulticallContract_1 = /*#__PURE__*/Object.defineProperty({
    	Context: Context_1,
    	MulticallContract: MulticallContract_2
    }, '__esModule', {value: true});

    var MULTICALL_ADDRESSES = {
        1: '0xeefba1e63905ef1d7acba5a8513c70307c1ce441',
        4: '0x42ad527de7d4e9d9d011ac45b31d8551f8fe9821',
        5: '0x77dca2c955b15e9de4dbbcf1246b4b85b651e50e',
        10: '0x142e2feac30d7fc3b61f9ee85fccad8e560154cc',
        69: '0x91c88479F21203444D2B20Aa001f951EC8CF2F68',
        42: '0x2cc8688c5f75e365aaeeb4ea8d6a480405a48d2a',
        56: '0xbEDe4875F56aaAB7a6aBbF9E423e0ba9E0a90b2A',
        100: '0xb5b692a88bdfc81ca69dcb1d924f59f0413a602a',
        137: '0x95028E5B8a734bb7E2071F96De89BABe75be9C8E',
        42161: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',
        43113: '0xccc75e78Dce6A20bCCa3a30deB23Cb4D23df993a',
        43114: '0x98e2060F672FD1656a07bc12D7253b5e41bF3876',
        42220: '0x75F59534dd892c1f8a7B172D639FA854D529ada3',
        80001: '0x08411ADd0b5AA8ee47563b146743C13b3556c9Cc' // MULTICALL_ADDRESS_MUMBAI
    };
    function multicallAddressOrThrow(chainId) {
        return _tslib.__awaiter(this, void 0, void 0, function () {
            var address, msg;
            return _tslib.__generator(this, function (_a) {
                address = MULTICALL_ADDRESSES[chainId];
                if (address === undefined) {
                    msg = "multicall is not available on the network ".concat(chainId);
                    console.error(msg);
                    throw new Error(msg);
                }
                return [2 /*return*/, address];
            });
        });
    }
    function networkSupportsMulticall(chainId) {
        return _tslib.__awaiter(this, void 0, void 0, function () {
            var address;
            return _tslib.__generator(this, function (_a) {
                address = MULTICALL_ADDRESSES[chainId];
                return [2 /*return*/, address !== undefined];
            });
        });
    }

    var MULTICALL_ADDRESSES_1 = MULTICALL_ADDRESSES;
    var multicallAddressOrThrow_1 = multicallAddressOrThrow;
    var networkSupportsMulticall_1 = networkSupportsMulticall;

    var multicallAddresses = /*#__PURE__*/Object.defineProperty({
    	MULTICALL_ADDRESSES: MULTICALL_ADDRESSES_1,
    	multicallAddressOrThrow: multicallAddressOrThrow_1,
    	networkSupportsMulticall: networkSupportsMulticall_1
    }, '__esModule', {value: true});

    var AGGREGATE_SELECTOR = '0x252dba42';
    function prepareTransaction(chainId, data) {
        return _tslib.__awaiter(this, void 0, void 0, function () {
            var address, callData;
            return _tslib.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, multicallAddresses.multicallAddressOrThrow(chainId)];
                    case 1:
                        address = _a.sent();
                        callData = AGGREGATE_SELECTOR + data.substr(2);
                        return [2 /*return*/, {
                                to: address,
                                data: callData
                            }];
                }
            });
        });
    }

    var AGGREGATE_SELECTOR_1 = AGGREGATE_SELECTOR;
    var prepareTransaction_2 = prepareTransaction;

    var prepareTransaction_1 = /*#__PURE__*/Object.defineProperty({
    	AGGREGATE_SELECTOR: AGGREGATE_SELECTOR_1,
    	prepareTransaction: prepareTransaction_2
    }, '__esModule', {value: true});

    /**
     * Helpers.
     */
    var s$6 = 1000;
    var m$3 = s$6 * 60;
    var h$5 = m$3 * 60;
    var d$4 = h$5 * 24;
    var w$3 = d$4 * 7;
    var y$6 = d$4 * 365.25;

    /**
     * Parse or format the given `val`.
     *
     * Options:
     *
     *  - `long` verbose formatting [false]
     *
     * @param {String|Number} val
     * @param {Object} [options]
     * @throws {Error} throw an error if val is not a non-empty string or a number
     * @return {String|Number}
     * @api public
     */

    var ms$1 = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === 'string' && val.length > 0) {
        return parse(val);
      } else if (type === 'number' && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        'val is not a non-empty string or a valid number. val=' +
          JSON.stringify(val)
      );
    };

    /**
     * Parse the given `str` and return milliseconds.
     *
     * @param {String} str
     * @return {Number}
     * @api private
     */

    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || 'ms').toLowerCase();
      switch (type) {
        case 'years':
        case 'year':
        case 'yrs':
        case 'yr':
        case 'y':
          return n * y$6;
        case 'weeks':
        case 'week':
        case 'w':
          return n * w$3;
        case 'days':
        case 'day':
        case 'd':
          return n * d$4;
        case 'hours':
        case 'hour':
        case 'hrs':
        case 'hr':
        case 'h':
          return n * h$5;
        case 'minutes':
        case 'minute':
        case 'mins':
        case 'min':
        case 'm':
          return n * m$3;
        case 'seconds':
        case 'second':
        case 'secs':
        case 'sec':
        case 's':
          return n * s$6;
        case 'milliseconds':
        case 'millisecond':
        case 'msecs':
        case 'msec':
        case 'ms':
          return n;
        default:
          return undefined;
      }
    }

    /**
     * Short format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */

    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d$4) {
        return Math.round(ms / d$4) + 'd';
      }
      if (msAbs >= h$5) {
        return Math.round(ms / h$5) + 'h';
      }
      if (msAbs >= m$3) {
        return Math.round(ms / m$3) + 'm';
      }
      if (msAbs >= s$6) {
        return Math.round(ms / s$6) + 's';
      }
      return ms + 'ms';
    }

    /**
     * Long format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */

    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d$4) {
        return plural(ms, msAbs, d$4, 'day');
      }
      if (msAbs >= h$5) {
        return plural(ms, msAbs, h$5, 'hour');
      }
      if (msAbs >= m$3) {
        return plural(ms, msAbs, m$3, 'minute');
      }
      if (msAbs >= s$6) {
        return plural(ms, msAbs, s$6, 'second');
      }
      return ms + ' ms';
    }

    /**
     * Pluralization helper.
     */

    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
    }

    /**
     * This is the common logic for both the Node.js and web browser
     * implementations of `debug()`.
     */

    function setup(env) {
    	createDebug.debug = createDebug;
    	createDebug.default = createDebug;
    	createDebug.coerce = coerce;
    	createDebug.disable = disable;
    	createDebug.enable = enable;
    	createDebug.enabled = enabled;
    	createDebug.humanize = ms$1;
    	createDebug.destroy = destroy;

    	Object.keys(env).forEach(key => {
    		createDebug[key] = env[key];
    	});

    	/**
    	* The currently active debug mode names, and names to skip.
    	*/

    	createDebug.names = [];
    	createDebug.skips = [];

    	/**
    	* Map of special "%n" handling functions, for the debug "format" argument.
    	*
    	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
    	*/
    	createDebug.formatters = {};

    	/**
    	* Selects a color for a debug namespace
    	* @param {String} namespace The namespace string for the debug instance to be colored
    	* @return {Number|String} An ANSI color code for the given namespace
    	* @api private
    	*/
    	function selectColor(namespace) {
    		let hash = 0;

    		for (let i = 0; i < namespace.length; i++) {
    			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
    			hash |= 0; // Convert to 32bit integer
    		}

    		return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    	}
    	createDebug.selectColor = selectColor;

    	/**
    	* Create a debugger with the given `namespace`.
    	*
    	* @param {String} namespace
    	* @return {Function}
    	* @api public
    	*/
    	function createDebug(namespace) {
    		let prevTime;
    		let enableOverride = null;
    		let namespacesCache;
    		let enabledCache;

    		function debug(...args) {
    			// Disabled?
    			if (!debug.enabled) {
    				return;
    			}

    			const self = debug;

    			// Set `diff` timestamp
    			const curr = Number(new Date());
    			const ms = curr - (prevTime || curr);
    			self.diff = ms;
    			self.prev = prevTime;
    			self.curr = curr;
    			prevTime = curr;

    			args[0] = createDebug.coerce(args[0]);

    			if (typeof args[0] !== 'string') {
    				// Anything else let's inspect with %O
    				args.unshift('%O');
    			}

    			// Apply any `formatters` transformations
    			let index = 0;
    			args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
    				// If we encounter an escaped % then don't increase the array index
    				if (match === '%%') {
    					return '%';
    				}
    				index++;
    				const formatter = createDebug.formatters[format];
    				if (typeof formatter === 'function') {
    					const val = args[index];
    					match = formatter.call(self, val);

    					// Now we need to remove `args[index]` since it's inlined in the `format`
    					args.splice(index, 1);
    					index--;
    				}
    				return match;
    			});

    			// Apply env-specific formatting (colors, etc.)
    			createDebug.formatArgs.call(self, args);

    			const logFn = self.log || createDebug.log;
    			logFn.apply(self, args);
    		}

    		debug.namespace = namespace;
    		debug.useColors = createDebug.useColors();
    		debug.color = createDebug.selectColor(namespace);
    		debug.extend = extend;
    		debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

    		Object.defineProperty(debug, 'enabled', {
    			enumerable: true,
    			configurable: false,
    			get: () => {
    				if (enableOverride !== null) {
    					return enableOverride;
    				}
    				if (namespacesCache !== createDebug.namespaces) {
    					namespacesCache = createDebug.namespaces;
    					enabledCache = createDebug.enabled(namespace);
    				}

    				return enabledCache;
    			},
    			set: v => {
    				enableOverride = v;
    			}
    		});

    		// Env-specific initialization logic for debug instances
    		if (typeof createDebug.init === 'function') {
    			createDebug.init(debug);
    		}

    		return debug;
    	}

    	function extend(namespace, delimiter) {
    		const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
    		newDebug.log = this.log;
    		return newDebug;
    	}

    	/**
    	* Enables a debug mode by namespaces. This can include modes
    	* separated by a colon and wildcards.
    	*
    	* @param {String} namespaces
    	* @api public
    	*/
    	function enable(namespaces) {
    		createDebug.save(namespaces);
    		createDebug.namespaces = namespaces;

    		createDebug.names = [];
    		createDebug.skips = [];

    		let i;
    		const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    		const len = split.length;

    		for (i = 0; i < len; i++) {
    			if (!split[i]) {
    				// ignore empty strings
    				continue;
    			}

    			namespaces = split[i].replace(/\*/g, '.*?');

    			if (namespaces[0] === '-') {
    				createDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));
    			} else {
    				createDebug.names.push(new RegExp('^' + namespaces + '$'));
    			}
    		}
    	}

    	/**
    	* Disable debug output.
    	*
    	* @return {String} namespaces
    	* @api public
    	*/
    	function disable() {
    		const namespaces = [
    			...createDebug.names.map(toNamespace),
    			...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
    		].join(',');
    		createDebug.enable('');
    		return namespaces;
    	}

    	/**
    	* Returns true if the given mode name is enabled, false otherwise.
    	*
    	* @param {String} name
    	* @return {Boolean}
    	* @api public
    	*/
    	function enabled(name) {
    		if (name[name.length - 1] === '*') {
    			return true;
    		}

    		let i;
    		let len;

    		for (i = 0, len = createDebug.skips.length; i < len; i++) {
    			if (createDebug.skips[i].test(name)) {
    				return false;
    			}
    		}

    		for (i = 0, len = createDebug.names.length; i < len; i++) {
    			if (createDebug.names[i].test(name)) {
    				return true;
    			}
    		}

    		return false;
    	}

    	/**
    	* Convert regexp to namespace
    	*
    	* @param {RegExp} regxep
    	* @return {String} namespace
    	* @api private
    	*/
    	function toNamespace(regexp) {
    		return regexp.toString()
    			.substring(2, regexp.toString().length - 2)
    			.replace(/\.\*\?$/, '*');
    	}

    	/**
    	* Coerce `val`.
    	*
    	* @param {Mixed} val
    	* @return {Mixed}
    	* @api private
    	*/
    	function coerce(val) {
    		if (val instanceof Error) {
    			return val.stack || val.message;
    		}
    		return val;
    	}

    	/**
    	* XXX DO NOT USE. This is a temporary stub function.
    	* XXX It WILL be removed in the next major release.
    	*/
    	function destroy() {
    		console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
    	}

    	createDebug.enable(createDebug.load());

    	return createDebug;
    }

    var common = setup;

    /* eslint-env browser */

    var browser$4 = createCommonjsModule$4(function (module, exports) {
    /**
     * This is the web browser implementation of `debug()`.
     */

    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = (() => {
    	let warned = false;

    	return () => {
    		if (!warned) {
    			warned = true;
    			console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
    		}
    	};
    })();

    /**
     * Colors.
     */

    exports.colors = [
    	'#0000CC',
    	'#0000FF',
    	'#0033CC',
    	'#0033FF',
    	'#0066CC',
    	'#0066FF',
    	'#0099CC',
    	'#0099FF',
    	'#00CC00',
    	'#00CC33',
    	'#00CC66',
    	'#00CC99',
    	'#00CCCC',
    	'#00CCFF',
    	'#3300CC',
    	'#3300FF',
    	'#3333CC',
    	'#3333FF',
    	'#3366CC',
    	'#3366FF',
    	'#3399CC',
    	'#3399FF',
    	'#33CC00',
    	'#33CC33',
    	'#33CC66',
    	'#33CC99',
    	'#33CCCC',
    	'#33CCFF',
    	'#6600CC',
    	'#6600FF',
    	'#6633CC',
    	'#6633FF',
    	'#66CC00',
    	'#66CC33',
    	'#9900CC',
    	'#9900FF',
    	'#9933CC',
    	'#9933FF',
    	'#99CC00',
    	'#99CC33',
    	'#CC0000',
    	'#CC0033',
    	'#CC0066',
    	'#CC0099',
    	'#CC00CC',
    	'#CC00FF',
    	'#CC3300',
    	'#CC3333',
    	'#CC3366',
    	'#CC3399',
    	'#CC33CC',
    	'#CC33FF',
    	'#CC6600',
    	'#CC6633',
    	'#CC9900',
    	'#CC9933',
    	'#CCCC00',
    	'#CCCC33',
    	'#FF0000',
    	'#FF0033',
    	'#FF0066',
    	'#FF0099',
    	'#FF00CC',
    	'#FF00FF',
    	'#FF3300',
    	'#FF3333',
    	'#FF3366',
    	'#FF3399',
    	'#FF33CC',
    	'#FF33FF',
    	'#FF6600',
    	'#FF6633',
    	'#FF9900',
    	'#FF9933',
    	'#FFCC00',
    	'#FFCC33'
    ];

    /**
     * Currently only WebKit-based Web Inspectors, Firefox >= v31,
     * and the Firebug extension (any Firefox version) are known
     * to support "%c" CSS customizations.
     *
     * TODO: add a `localStorage` variable to explicitly enable/disable colors
     */

    // eslint-disable-next-line complexity
    function useColors() {
    	// NB: In an Electron preload script, document will be defined but not fully
    	// initialized. Since we know we're in Chrome, we'll just detect this case
    	// explicitly
    	if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
    		return true;
    	}

    	// Internet Explorer and Edge do not support colors.
    	if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    		return false;
    	}

    	// Is webkit? http://stackoverflow.com/a/16459606/376773
    	// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    	return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    		// Is firebug? http://stackoverflow.com/a/398120/376773
    		(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    		// Is firefox >= v31?
    		// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    		// Double check webkit in userAgent just in case we are in a worker
    		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
    }

    /**
     * Colorize log arguments if enabled.
     *
     * @api public
     */

    function formatArgs(args) {
    	args[0] = (this.useColors ? '%c' : '') +
    		this.namespace +
    		(this.useColors ? ' %c' : ' ') +
    		args[0] +
    		(this.useColors ? '%c ' : ' ') +
    		'+' + module.exports.humanize(this.diff);

    	if (!this.useColors) {
    		return;
    	}

    	const c = 'color: ' + this.color;
    	args.splice(1, 0, c, 'color: inherit');

    	// The final "%c" is somewhat tricky, because there could be other
    	// arguments passed either before or after the %c, so we need to
    	// figure out the correct index to insert the CSS into
    	let index = 0;
    	let lastC = 0;
    	args[0].replace(/%[a-zA-Z%]/g, match => {
    		if (match === '%%') {
    			return;
    		}
    		index++;
    		if (match === '%c') {
    			// We only are interested in the *last* %c
    			// (the user may have provided their own)
    			lastC = index;
    		}
    	});

    	args.splice(lastC, 0, c);
    }

    /**
     * Invokes `console.debug()` when available.
     * No-op when `console.debug` is not a "function".
     * If `console.debug` is not available, falls back
     * to `console.log`.
     *
     * @api public
     */
    exports.log = console.debug || console.log || (() => {});

    /**
     * Save `namespaces`.
     *
     * @param {String} namespaces
     * @api private
     */
    function save(namespaces) {
    	try {
    		if (namespaces) {
    			exports.storage.setItem('debug', namespaces);
    		} else {
    			exports.storage.removeItem('debug');
    		}
    	} catch (error) {
    		// Swallow
    		// XXX (@Qix-) should we be logging these?
    	}
    }

    /**
     * Load `namespaces`.
     *
     * @return {String} returns the previously persisted debug modes
     * @api private
     */
    function load() {
    	let r;
    	try {
    		r = exports.storage.getItem('debug');
    	} catch (error) {
    		// Swallow
    		// XXX (@Qix-) should we be logging these?
    	}

    	// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
    	if (!r && typeof process !== 'undefined' && 'env' in process) {
    		r = process.env.DEBUG;
    	}

    	return r;
    }

    /**
     * Localstorage attempts to return the localstorage.
     *
     * This is necessary because safari throws
     * when a user disables cookies/localstorage
     * and you attempt to access it.
     *
     * @return {LocalStorage}
     * @api private
     */

    function localstorage() {
    	try {
    		// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
    		// The Browser also has localStorage in the global context.
    		return localStorage;
    	} catch (error) {
    		// Swallow
    		// XXX (@Qix-) should we be logging these?
    	}
    }

    module.exports = common(exports);

    const {formatters} = module.exports;

    /**
     * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
     */

    formatters.j = function (v) {
    	try {
    		return JSON.stringify(v);
    	} catch (error) {
    		return '[UnexpectedJSONParseError]: ' + error.message;
    	}
    };
    });

    var debug$1 = browser$4('etherplex:PayloadAggregator');
    var aggregateCalls = function () {
        var contexts = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            contexts[_i] = arguments[_i];
        }
        var result = {};
        var calls = [];
        contexts.forEach(function (caller) {
            result[caller.contract.__name] = {};
            calls = calls.concat(caller.flush());
        });
        debug$1("Result ".concat(result, "..."));
        debug$1("Found ".concat(calls.length, " calls..."));
        return [result, calls];
    };

    var aggregateCalls_2 = aggregateCalls;

    var aggregateCalls_1 = /*#__PURE__*/Object.defineProperty({
    	aggregateCalls: aggregateCalls_2
    }, '__esModule', {value: true});

    function decodeCalls(returnData) {
        var _a = ethers.ethers.utils.defaultAbiCoder.decode(['uint256', 'bytes[]'], returnData), blockNumber = _a[0], results = _a[1];
        return [blockNumber, results];
    }

    var decodeCalls_2 = decodeCalls;

    var decodeCalls_1 = /*#__PURE__*/Object.defineProperty({
    	decodeCalls: decodeCalls_2
    }, '__esModule', {value: true});

    function decodeFunctionResults(result, calls, returnValues) {
        for (var i = 0; i < returnValues.length; i++) {
            var call = calls[i];
            var decoded = call.caller.__interface.decodeFunctionResult(call.fd, returnValues[i]);
            result[call.caller.__name][call.fd.name] = decoded;
            result[call.caller.__name][call.fd.format()] = decoded;
        }
        return result;
    }

    var decodeFunctionResults_2 = decodeFunctionResults;

    var decodeFunctionResults_1 = /*#__PURE__*/Object.defineProperty({
    	decodeFunctionResults: decodeFunctionResults_2
    }, '__esModule', {value: true});

    function encodeCalls(calls) {
        return ethers.ethers.utils.defaultAbiCoder.encode([
            abi$2.ParamType.fromObject({
                components: [
                    { name: 'target', type: 'address' },
                    { name: 'callData', type: 'bytes' }
                ],
                name: 'data',
                type: 'tuple[]'
            })
        ], [calls.map(function (call) { return [call.to, call.data]; })]);
    }

    var encodeCalls_2 = encodeCalls;

    var encodeCalls_1 = /*#__PURE__*/Object.defineProperty({
    	encodeCalls: encodeCalls_2
    }, '__esModule', {value: true});

    var debug = browser$4('etherplex:MulticallExecutor');
    var MulticallExecutor = /** @class */ (function () {
        function MulticallExecutor(provider) {
            this.provider = provider;
        }
        MulticallExecutor.prototype.executeCallers = function () {
            var contexts = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                contexts[_i] = arguments[_i];
            }
            return _tslib.__awaiter(this, void 0, void 0, function () {
                var _a, result, calls, _b, returnValues, decoded;
                return _tslib.__generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _a = aggregateCalls_1.aggregateCalls.apply(void 0, contexts), result = _a[0], calls = _a[1];
                            return [4 /*yield*/, this.executeCalls(calls)];
                        case 1:
                            _b = _c.sent(), _b[0], returnValues = _b[1];
                            decoded = decodeFunctionResults_1.decodeFunctionResults(result, calls, returnValues);
                            return [2 /*return*/, decoded];
                    }
                });
            });
        };
        MulticallExecutor.prototype.executeCalls = function (calls) {
            return _tslib.__awaiter(this, void 0, void 0, function () {
                var data, result, values;
                var _this = this;
                return _tslib.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.multicallSupported()];
                        case 1:
                            if (!_a.sent()) return [3 /*break*/, 3];
                            debug("Multicall is supported");
                            data = encodeCalls_1.encodeCalls(calls);
                            debug("Encoded data: ".concat(data));
                            debug(calls);
                            return [4 /*yield*/, this.executeMulticallData(data)];
                        case 2:
                            result = _a.sent();
                            return [2 /*return*/, decodeCalls_1.decodeCalls(result)];
                        case 3: return [4 /*yield*/, Promise.all(calls.map(function (call) { return _tslib.__awaiter(_this, void 0, void 0, function () { return _tslib.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this.provider.call({ to: call.to, data: call.data })];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            }); }); }))];
                        case 4:
                            values = _a.sent();
                            return [2 /*return*/, [null, values]];
                    }
                });
            });
        };
        MulticallExecutor.prototype.multicallSupported = function () {
            return _tslib.__awaiter(this, void 0, void 0, function () {
                var network;
                return _tslib.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.provider.getNetwork()];
                        case 1:
                            network = _a.sent();
                            return [4 /*yield*/, multicallAddresses.networkSupportsMulticall(network.chainId)];
                        case 2: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        MulticallExecutor.prototype.executeMulticallData = function (data) {
            return _tslib.__awaiter(this, void 0, void 0, function () {
                var network, tx, result;
                return _tslib.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.provider.getNetwork()];
                        case 1:
                            network = _a.sent();
                            return [4 /*yield*/, prepareTransaction_1.prepareTransaction(network.chainId, data)];
                        case 2:
                            tx = _a.sent();
                            return [4 /*yield*/, this.provider.call(tx)];
                        case 3:
                            result = _a.sent();
                            return [2 /*return*/, result];
                    }
                });
            });
        };
        MulticallExecutor.prototype.executeRegularCalls = function (calls) {
            return _tslib.__awaiter(this, void 0, void 0, function () {
                var values;
                var _this = this;
                return _tslib.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, Promise.all(calls.map(function (call) { return _tslib.__awaiter(_this, void 0, void 0, function () { return _tslib.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this.provider.call({ to: call.to, data: call.data })];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            }); }); }))];
                        case 1:
                            values = _a.sent();
                            return [2 /*return*/, values];
                    }
                });
            });
        };
        return MulticallExecutor;
    }());

    var MulticallExecutor_2 = MulticallExecutor;

    var MulticallExecutor_1 = /*#__PURE__*/Object.defineProperty({
    	MulticallExecutor: MulticallExecutor_2
    }, '__esModule', {value: true});

    function batch(provider) {
        var _a;
        var contexts = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            contexts[_i - 1] = arguments[_i];
        }
        return (_a = new MulticallExecutor_1.MulticallExecutor(provider)).executeCallers.apply(_a, contexts);
    }

    var batch_2 = batch;

    var batch_1$1 = /*#__PURE__*/Object.defineProperty({
    	batch: batch_2
    }, '__esModule', {value: true});

    function contract(name, abiOrContract, address) {
        var result;
        if (address) {
            result = new MulticallContract_1.MulticallContract(name, abiOrContract, address);
        }
        else {
            var abi = abiOrContract.abi;
            address = abiOrContract.address;
            result = new MulticallContract_1.MulticallContract(name, abi, address);
        }
        return result;
    }

    var contract_2 = contract;

    var contract_1$1 = /*#__PURE__*/Object.defineProperty({
    	contract: contract_2
    }, '__esModule', {value: true});

    function encodeData$1() {
        var contexts = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            contexts[_i] = arguments[_i];
        }
        var _a = aggregateCalls_1.aggregateCalls.apply(void 0, contexts), result = _a[0], calls = _a[1];
        var data = encodeCalls_1.encodeCalls(calls);
        return [result, calls, data];
    }

    var encodeData_2 = encodeData$1;

    var encodeData_1 = /*#__PURE__*/Object.defineProperty({
    	encodeData: encodeData_2
    }, '__esModule', {value: true});

    function decodeData(result, calls, callResponse) {
        var _a = decodeCalls_1.decodeCalls(callResponse), returnValues = _a[1];
        var decodedData = decodeFunctionResults_1.decodeFunctionResults(result, calls, returnValues);
        return decodedData;
    }

    var decodeData_2 = decodeData;

    var decodeData_1 = /*#__PURE__*/Object.defineProperty({
    	decodeData: decodeData_2
    }, '__esModule', {value: true});

    MulticallContract_1.Context;
    MulticallContract_1.MulticallContract;
    multicallAddresses.MULTICALL_ADDRESSES;
    multicallAddresses.multicallAddressOrThrow;
    multicallAddresses.networkSupportsMulticall;
    prepareTransaction_1.AGGREGATE_SELECTOR;
    prepareTransaction_1.prepareTransaction;
    MulticallExecutor_1.MulticallExecutor;
    var batch_1 = batch_1$1.batch;
    var contract_1 = contract_1$1.contract;
    encodeData_1.encodeData;
    decodeData_1.decodeData;

    function createCommonjsModule$1(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    createCommonjsModule$1(function (module) {
    /**
     * Copyright (c) 2014-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var runtime = (function (exports) {

      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined$1; // More compressible than void 0.
      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
        return obj[key];
      }
      try {
        // IE 8 has a broken Object.defineProperty that only works on DOM objects.
        define({}, "");
      } catch (err) {
        define = function(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []);

        // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.
        generator._invoke = makeInvokeMethod(innerFn, self, context);

        return generator;
      }
      exports.wrap = wrap;

      // Try/catch helper to minimize deoptimizations. Returns a completion
      // record like context.tryEntries[i].completion. This interface could
      // have been (and was previously) designed to take a closure to be
      // invoked without arguments, but in all the cases we care about we
      // already have an existing method we want to call, so there's no need
      // to create a new function object. We can even get away with assuming
      // the method takes exactly one argument, since that happens to be true
      // in every case, so we don't have to touch the arguments object. The
      // only additional allocation required is the completion record, which
      // has a stable shape and so hopefully should be cheap to allocate.
      function tryCatch(fn, obj, arg) {
        try {
          return { type: "normal", arg: fn.call(obj, arg) };
        } catch (err) {
          return { type: "throw", arg: err };
        }
      }

      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed";

      // Returning this object from the innerFn has the same effect as
      // breaking out of the dispatch switch statement.
      var ContinueSentinel = {};

      // Dummy constructor functions that we use as the .constructor and
      // .constructor.prototype properties for functions that return Generator
      // objects. For full spec compliance, you may wish to configure your
      // minifier not to mangle the names of these two functions.
      function Generator() {}
      function GeneratorFunction() {}
      function GeneratorFunctionPrototype() {}

      // This is a polyfill for %IteratorPrototype% for environments that
      // don't natively support it.
      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });

      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      if (NativeIteratorPrototype &&
          NativeIteratorPrototype !== Op &&
          hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
      }

      var Gp = GeneratorFunctionPrototype.prototype =
        Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = GeneratorFunctionPrototype;
      define(Gp, "constructor", GeneratorFunctionPrototype);
      define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
      GeneratorFunction.displayName = define(
        GeneratorFunctionPrototype,
        toStringTagSymbol,
        "GeneratorFunction"
      );

      // Helper for defining the .next, .throw, and .return methods of the
      // Iterator interface in terms of a single ._invoke method.
      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function(method) {
          define(prototype, method, function(arg) {
            return this._invoke(method, arg);
          });
        });
      }

      exports.isGeneratorFunction = function(genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor
          ? ctor === GeneratorFunction ||
            // For the native GeneratorFunction constructor, the best we can
            // do is to check its .name property.
            (ctor.displayName || ctor.name) === "GeneratorFunction"
          : false;
      };

      exports.mark = function(genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          define(genFun, toStringTagSymbol, "GeneratorFunction");
        }
        genFun.prototype = Object.create(Gp);
        return genFun;
      };

      // Within the body of any async function, `await x` is transformed to
      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
      // `hasOwn.call(value, "__await")` to determine if the yielded value is
      // meant to be awaited.
      exports.awrap = function(arg) {
        return { __await: arg };
      };

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);
          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;
            if (value &&
                typeof value === "object" &&
                hasOwn.call(value, "__await")) {
              return PromiseImpl.resolve(value.__await).then(function(value) {
                invoke("next", value, resolve, reject);
              }, function(err) {
                invoke("throw", err, resolve, reject);
              });
            }

            return PromiseImpl.resolve(value).then(function(unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration.
              result.value = unwrapped;
              resolve(result);
            }, function(error) {
              // If a rejected Promise was yielded, throw the rejection back
              // into the async generator function so it can be handled there.
              return invoke("throw", error, resolve, reject);
            });
          }
        }

        var previousPromise;

        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function(resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise =
            // If enqueue has been called before, then we want to wait until
            // all previous Promises have been resolved before calling invoke,
            // so that results are always delivered in the correct order. If
            // enqueue has not been called before, then it is important to
            // call invoke immediately, without waiting on a callback to fire,
            // so that the async generator function has the opportunity to do
            // any necessary setup in a predictable way. This predictability
            // is why the Promise constructor synchronously invokes its
            // executor callback, and why async functions synchronously
            // execute code before the first await. Since we implement simple
            // async functions in terms of async generators, it is especially
            // important to get this right, even though it requires care.
            previousPromise ? previousPromise.then(
              callInvokeWithMethodAndArg,
              // Avoid propagating failures to Promises returned by later
              // invocations of the iterator.
              callInvokeWithMethodAndArg
            ) : callInvokeWithMethodAndArg();
        }

        // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).
        this._invoke = enqueue;
      }

      defineIteratorMethods(AsyncIterator.prototype);
      define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      });
      exports.AsyncIterator = AsyncIterator;

      // Note that simple async functions are implemented on top of
      // AsyncIterator objects; they just return a Promise for the value of
      // the final result produced by the iterator.
      exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;

        var iter = new AsyncIterator(
          wrap(innerFn, outerFn, self, tryLocsList),
          PromiseImpl
        );

        return exports.isGeneratorFunction(outerFn)
          ? iter // If outerFn is a generator, return the full iterator.
          : iter.next().then(function(result) {
              return result.done ? result.value : iter.next();
            });
      };

      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;

        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }

          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            }

            // Be forgiving, per 25.3.3.3.3 of the spec:
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
            return doneResult();
          }

          context.method = method;
          context.arg = arg;

          while (true) {
            var delegate = context.delegate;
            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);
              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if (context.method === "next") {
              // Setting context._sent for legacy support of Babel's
              // function.sent implementation.
              context.sent = context._sent = context.arg;

            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }

              context.dispatchException(context.arg);

            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }

            state = GenStateExecuting;

            var record = tryCatch(innerFn, self, context);
            if (record.type === "normal") {
              // If an exception is thrown from innerFn, we leave state ===
              // GenStateExecuting and loop back for another invocation.
              state = context.done
                ? GenStateCompleted
                : GenStateSuspendedYield;

              if (record.arg === ContinueSentinel) {
                continue;
              }

              return {
                value: record.arg,
                done: context.done
              };

            } else if (record.type === "throw") {
              state = GenStateCompleted;
              // Dispatch the exception by looping back around to the
              // context.dispatchException(context.arg) call above.
              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      }

      // Call delegate.iterator[context.method](context.arg) and handle the
      // result, either by returning a { value, done } result from the
      // delegate iterator, or by modifying context.method and context.arg,
      // setting context.delegate to null, and returning the ContinueSentinel.
      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];
        if (method === undefined$1) {
          // A .throw or .return when the delegate iterator has no .throw
          // method always terminates the yield* loop.
          context.delegate = null;

          if (context.method === "throw") {
            // Note: ["return"] must be used for ES3 parsing compatibility.
            if (delegate.iterator["return"]) {
              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              context.method = "return";
              context.arg = undefined$1;
              maybeInvokeDelegate(delegate, context);

              if (context.method === "throw") {
                // If maybeInvokeDelegate(context) changed context.method from
                // "return" to "throw", let that override the TypeError below.
                return ContinueSentinel;
              }
            }

            context.method = "throw";
            context.arg = new TypeError(
              "The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);

        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }

        var info = record.arg;

        if (! info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }

        if (info.done) {
          // Assign the result of the finished delegate to the temporary
          // variable specified by delegate.resultName (see delegateYield).
          context[delegate.resultName] = info.value;

          // Resume execution at the desired location (see delegateYield).
          context.next = delegate.nextLoc;

          // If context.method was "throw" but the delegate handled the
          // exception, let the outer generator proceed normally. If
          // context.method was "next", forget context.arg since it has been
          // "consumed" by the delegate iterator. If context.method was
          // "return", allow the original .return call to continue in the
          // outer generator.
          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined$1;
          }

        } else {
          // Re-yield the result returned by the delegate method.
          return info;
        }

        // The delegate iterator is finished, so forget it and continue with
        // the outer generator.
        context.delegate = null;
        return ContinueSentinel;
      }

      // Define Generator.prototype.{next,throw,return} in terms of the
      // unified ._invoke helper method.
      defineIteratorMethods(Gp);

      define(Gp, toStringTagSymbol, "Generator");

      // A Generator should always return itself as the iterator object when the
      // @@iterator function is called on it. Some browsers' implementations of the
      // iterator prototype chain incorrectly implement this, causing the Generator
      // object to not be returned from this call. This ensures that doesn't happen.
      // See https://github.com/facebook/regenerator/issues/274 for more details.
      define(Gp, iteratorSymbol, function() {
        return this;
      });

      define(Gp, "toString", function() {
        return "[object Generator]";
      });

      function pushTryEntry(locs) {
        var entry = { tryLoc: locs[0] };

        if (1 in locs) {
          entry.catchLoc = locs[1];
        }

        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }

        this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }

      function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [{ tryLoc: "root" }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }

      exports.keys = function(object) {
        var keys = [];
        for (var key in object) {
          keys.push(key);
        }
        keys.reverse();

        // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.
        return function next() {
          while (keys.length) {
            var key = keys.pop();
            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          }

          // To avoid creating an additional object, we just hang the .value
          // and .done properties off the next function object itself. This
          // also ensures that the minifier will not anonymize the function.
          next.done = true;
          return next;
        };
      };

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }

          if (typeof iterable.next === "function") {
            return iterable;
          }

          if (!isNaN(iterable.length)) {
            var i = -1, next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }

              next.value = undefined$1;
              next.done = true;

              return next;
            };

            return next.next = next;
          }
        }

        // Return an iterator with no values.
        return { next: doneResult };
      }
      exports.values = values;

      function doneResult() {
        return { value: undefined$1, done: true };
      }

      Context.prototype = {
        constructor: Context,

        reset: function(skipTempReset) {
          this.prev = 0;
          this.next = 0;
          // Resetting context._sent for legacy support of Babel's
          // function.sent implementation.
          this.sent = this._sent = undefined$1;
          this.done = false;
          this.delegate = null;

          this.method = "next";
          this.arg = undefined$1;

          this.tryEntries.forEach(resetTryEntry);

          if (!skipTempReset) {
            for (var name in this) {
              // Not sure about the optimal order of these conditions:
              if (name.charAt(0) === "t" &&
                  hasOwn.call(this, name) &&
                  !isNaN(+name.slice(1))) {
                this[name] = undefined$1;
              }
            }
          }
        },

        stop: function() {
          this.done = true;

          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;
          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }

          return this.rval;
        },

        dispatchException: function(exception) {
          if (this.done) {
            throw exception;
          }

          var context = this;
          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;

            if (caught) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              context.method = "next";
              context.arg = undefined$1;
            }

            return !! caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;

            if (entry.tryLoc === "root") {
              // Exception thrown outside of any try block that could handle
              // it, so set the completion value of the entire function to
              // throw the exception.
              return handle("end");
            }

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }

              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }

              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }

              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },

        abrupt: function(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc <= this.prev &&
                hasOwn.call(entry, "finallyLoc") &&
                this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          if (finallyEntry &&
              (type === "break" ||
               type === "continue") &&
              finallyEntry.tryLoc <= arg &&
              arg <= finallyEntry.finallyLoc) {
            // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
          }

          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;

          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }

          return this.complete(record);
        },

        complete: function(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }

          if (record.type === "break" ||
              record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }

          return ContinueSentinel;
        },

        finish: function(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },

        "catch": function(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;
              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }
              return thrown;
            }
          }

          // The context.catch method must only be called with a location
          // argument that corresponds to a known catch block.
          throw new Error("illegal catch attempt");
        },

        delegateYield: function(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };

          if (this.method === "next") {
            // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined$1;
          }

          return ContinueSentinel;
        }
      };

      // Regardless of whether this script is executing as a CommonJS module
      // or not, return the runtime object so that we can declare the variable
      // regeneratorRuntime in the outer scope, which allows this module to be
      // injected easily by `bin/regenerator --include-runtime script.js`.
      return exports;

    }(
      // If this script is executing as a CommonJS module, use module.exports
      // as the regeneratorRuntime namespace. Otherwise create a new empty
      // object. Either way, the resulting object will be used to initialize
      // the regeneratorRuntime variable at the top of this file.
       module.exports 
    ));

    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      // This module should not be running in strict mode, so the above
      // assignment should always work unless something is misconfigured. Just
      // in case runtime.js accidentally runs in strict mode, in modern engines
      // we can explicitly access globalThis. In older engines we can escape
      // strict mode using a global Function call. This could conceivably fail
      // if a Content Security Policy forbids using Function, but in that case
      // the proper solution is to fix the accidental strict mode problem. If
      // you've misconfigured your bundler to force strict mode and applied a
      // CSP to forbid Function, and you're not willing to fix either of those
      // problems, please detail your unique predicament in a GitHub issue.
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
    });

    /**
     * Constant for chain ids
     */
    var NETWORK = /*#__PURE__*/Object.freeze({
      'mainnet': 1,
      'homestead': 1,
      'ropsten': 3,
      'rinkeby': 4,
      'goerli': 5,
      'kovan': 42,
      'bsc': 56,
      'poa-sokol': 77,
      'bsc-testnet': 97,
      'poa': 99,
      'xdai': 100,
      'polygon': 137,
      'matic': 137,
      'mumbai': 80001,
      'optimism': 10,
      'optimism-goerli': 420,
      'avalanche': 43114,
      'fuji': 43113,
      'celo': 42220,
      'celo-testnet': 44787,
      'arbitrum': 42161,
      'arbitrum-goerli': 421613
    });
    /**
     * Ethereum networks
     */

    /*#__PURE__*/Object.freeze([NETWORK.mainnet, NETWORK.goerli]);
    /*#__PURE__*/Object.freeze([NETWORK.polygon, NETWORK.mumbai]);
    /*#__PURE__*/Object.freeze([NETWORK.avalanche, NETWORK.fuji]);
    /*#__PURE__*/Object.freeze([NETWORK.celo, NETWORK['celo-testnet']]);
    /*#__PURE__*/Object.freeze([NETWORK.optimism, NETWORK['optimism-goerli']]);
    /*#__PURE__*/Object.freeze([NETWORK.arbitrum, NETWORK['arbitrum-goerli']]);

    var _GOVERNANCE_CONTRACT_, _Object$freeze;
    (_GOVERNANCE_CONTRACT_ = {}, _GOVERNANCE_CONTRACT_[NETWORK.mainnet] = {
      GovernorAlpha: '0xB3a87172F555ae2a2AB79Be60B336D2F7D0187f0',
      GovernanceToken: '0x0cEC1A9154Ff802e7934Fc916Ed7Ca50bDE6844e',
      GovernanceReserve: '0xdb8E47BEFe4646fCc62BE61EEE5DF350404c124F',
      MerkleDistributor: '0xBE1a33519F586A4c8AA37525163Df8d67997016f'
    }, _GOVERNANCE_CONTRACT_[NETWORK.rinkeby] = {
      GovernorAlpha: '0x9B63243CD27102fbEc9FAf67CA1a858dcC16Ee01',
      GovernanceToken: '0xc4E90a8Dc6CaAb329f08ED3C8abc6b197Cf0F40A',
      GovernanceReserve: '0xA5224da01a5A792946E4270a02457EB75412c84c',
      MerkleDistributor: '0x93a6540DcE05a4A5E5B906eB97bBCBb723768F2D'
    }, _GOVERNANCE_CONTRACT_[NETWORK.polygon] = {
      GovernanceToken: '0x25788a1a171ec66Da6502f9975a15B609fF54CF6'
    }, _GOVERNANCE_CONTRACT_);
    /*#__PURE__*/Object.freeze((_Object$freeze = {}, _Object$freeze[NETWORK.mainnet] = {
      pool: '0x0cEC1A9154Ff802e7934Fc916Ed7Ca50bDE6844e',
      ppool: '0x27d22a7648e955e510a40bdb058333e9190d12d4'
    }, _Object$freeze[NETWORK.rinkeby] = {
      pool: '0xc4E90a8Dc6CaAb329f08ED3C8abc6b197Cf0F40A'
    }, _Object$freeze[NETWORK.polygon] = {
      polygon_bridge: '0x25788a1a171ec66Da6502f9975a15B609fF54CF6',
      ppool: '0xd80eaa761ccfdc8698999d73c96cec39fbb1fc48'
    }, _Object$freeze[NETWORK.optimism] = {
      pool: '0x395ae52bb17aef68c2888d941736a71dc6d4e125'
    }, _Object$freeze));
    var CURRENCIES;

    (function (CURRENCIES) {
      CURRENCIES["USD"] = "USD";
      CURRENCIES["CAD"] = "CAD";
      CURRENCIES["EUR"] = "EUR";
    })(CURRENCIES || (CURRENCIES = {}));

    /**
     * Recursively looks through an object, converting all big numbers into actual BigNumbers
     * @param {any} data json blob
     * @returns
     */

    var deserializeBigNumbers = function deserializeBigNumbers(data) {
      try {
        if (Array.isArray(data)) {
          data.forEach(deserializeBigNumbers);
        } else if (typeof data === 'object' && data !== null) {
          Object.keys(data).forEach(function (key) {
            if (Array.isArray(data[key])) {
              data[key].forEach(deserializeBigNumbers);
            } else if (typeof data[key] === 'object' && data[key] !== null) {
              var _data$key;

              if (((_data$key = data[key]) == null ? void 0 : _data$key.type) === 'BigNumber') {
                data[key] = BigNumber.from(data[key]);
              } else {
                deserializeBigNumbers(data[key]);
              }
            }
          });
        }

        return data;
      } catch (e) {
        return data;
      }
    };

    var _PRIZE_POOL_ADDRESSES, _POD_ADDRESSES, _LP_PRIZE_POOL_METADA, _POOL_PRIZE_POOL_ADDR;
    var DEXES;

    (function (DEXES) {
      DEXES["UniSwap"] = "UniSwap";
      DEXES["SushiSwap"] = "SushiSwap";
    })(DEXES || (DEXES = {})); // V3 contract addresses to maintain support for.


    /*#__PURE__*/Object.freeze({
      CHAIN_IDS: {
        mainnets: [NETWORK.mainnet, NETWORK.polygon, NETWORK.bsc, NETWORK.celo],
        testnets: [NETWORK.rinkeby]
      },
      PRIZE_POOL_ADDRESSES: (_PRIZE_POOL_ADDRESSES = {}, _PRIZE_POOL_ADDRESSES[NETWORK.mainnet] = [{
        prizePool: '0xebfb47a7ad0fd6e57323c8a42b2e5a6a4f68fc1a',
        symbol: 'PT-cDAI',
        subgraphVersion: '3.1.0',
        tokenFaucets: ['0xf362ce295f2a4eae4348ffc8cdbce8d729ccb8eb']
      }, {
        prizePool: '0x0650d780292142835f6ac58dd8e2a336e87b4393',
        symbol: 'PT-cUNI',
        subgraphVersion: '3.1.0',
        tokenFaucets: ['0xa5dddefd30e234be2ac6fc1a0364cfd337aa0f61']
      }, {
        prizePool: '0xde9ec95d7708b8319ccca4b8bc92c0a3b70bf416',
        symbol: 'PT-cUSDC',
        subgraphVersion: '3.1.0',
        tokenFaucets: ['0xbd537257fad96e977b9e545be583bbf7028f30b9']
      }, {
        prizePool: '0x396b4489da692788e327e2e4b2b0459a5ef26791',
        symbol: 'PT-stPOOL',
        subgraphVersion: '3.3.2',
        tokenFaucets: ['0x30430419b86e9512e6d93fc2b0791d98dbeb637b']
      }, {
        prizePool: '0xbc82221e131c082336cf698f0ca3ebd18afd4ce7',
        symbol: 'PT-cCOMP',
        subgraphVersion: '3.1.0',
        tokenFaucets: ['0x72f06a78bbaac0489067a1973b0cef61841d58bc']
      }, {
        prizePool: '0xc2a7dfb76e93d12a1bb1fa151b9900158090395d',
        symbol: 'PT-stBADGER',
        subgraphVersion: '3.3.2',
        tokenFaucets: ['0x40f76363129118b34cc2af44963192c3e8690ba6']
      }, {
        prizePool: '0xc32a0f9dfe2d93e8a60ba0200e033a59aec91559',
        symbol: 'PT-xSUSHI',
        subgraphVersion: '3.3.8',
        tokenFaucets: ['0xddcf915656471b7c44217fb8c51f9888701e759a', '0xd186302304fd367488b5087af5b12cb9b7cf7540']
      }, {
        prizePool: '0x3af7072d29adde20fc7e173a7cb9e45307d2fb0a',
        symbol: 'POOL-ETH-UNI-V2-LP',
        subgraphVersion: '3.3.8',
        tokenFaucets: ['0x9a29401ef1856b669f55ae5b24505b3b6faeb370']
      }, {
        prizePool: '0x65c8827229fbd63f9de9fdfd400c9d264066a336',
        symbol: 'gUSD-0x65C882',
        subgraphVersion: '3.3.8'
      }, {
        prizePool: '0x103a8ed831bec3b33a0018a16337fbfd604bbba9',
        symbol: 'RAI-0x103a8e',
        subgraphVersion: '3.3.8'
      }, {
        prizePool: '0x5b746a07d36a9c8583313983d83d2fc029dcf7bf',
        symbol: 'sUSD-0x5b746a',
        subgraphVersion: '3.3.8'
      }, {
        prizePool: '0x244d223c0ad484aa27691c4efd2218a71b240c8c',
        symbol: 'bUSD-0x244D22',
        subgraphVersion: '3.3.8'
      }, {
        prizePool: '0x639d4140a1f7723b7cefef7505d1d7be11a43de0',
        symbol: 'UNI-V2-0x639d41',
        subgraphVersion: '3.1.0'
      }, {
        prizePool: '0xc7d56c06F136EFff93e349C7BF8cc46bBF5D902c',
        symbol: 'USDT-0xc7d56c',
        subgraphVersion: '3.3.8'
      }], _PRIZE_POOL_ADDRESSES[NETWORK.rinkeby] = [{
        prizePool: '0x4706856fa8bb747d50b4ef8547fe51ab5edc4ac2',
        symbol: 'PT-cDAI',
        subgraphVersion: '3.1.0',
        tokenFaucets: ['0x5d5af77cf99f7015e615f9b3286a27c5b6090707']
      }, {
        prizePool: '0xab068f220e10eed899b54f1113de7e354c9a8eb7',
        symbol: 'PT-cBAT',
        subgraphVersion: '3.1.0',
        tokenFaucets: ['0x97b99693613aaa74a3fa0b2f05378b8f6a74a893']
      }, {
        prizePool: '0x95bca36b53ab0c54b162672454fe4be869a6f9ca',
        symbol: 'USDC-0x95bca3',
        subgraphVersion: '3.3.2'
      }, {
        prizePool: '0xc8e1ea1afb7361cd647ad1a54a6c074f1174eb6e',
        symbol: 'BAT-0xc8e1ea',
        subgraphVersion: '3.3.2'
      }, {
        prizePool: '0x84ed0f89c033fe7dadfc4d5f2a516ebd9dc15644',
        symbol: 'DAI-0x84ed0f',
        subgraphVersion: '3.3.8'
      }, {
        prizePool: '0xe19b8887677432707ae4dd1ce6b50ef9abd44bb6',
        symbol: 'USDC-0xe19b88',
        subgraphVersion: '3.3.8'
      }, {
        prizePool: '0x7355f97fBA5237aEdFE2CdAad50A4eA3cF070A98',
        symbol: 'FAST-DAI-0x7355f9',
        subgraphVersion: '3.3.8'
      }, {
        prizePool: '0x8A358f613ddCca865D005414c1690920E4e9b132',
        symbol: 'LP',
        subgraphVersion: '',
        tokenFaucets: ['0x97B99693613aaA74A3fa0B2f05378b8F6A74a893']
      }], _PRIZE_POOL_ADDRESSES[NETWORK.bsc] = [{
        prizePool: '0x06D75Eb5cA4Da7F7C7A043714172CF109D07a5F8',
        symbol: 'CAKE-0x06D75E',
        subgraphVersion: '3.4.3'
      }, {
        prizePool: '0x2f4Fc07E4Bd097C68774E5bdAbA98d948219F827',
        symbol: 'WBNB-0x2f4Fc0',
        subgraphVersion: '3.4.3'
      }], _PRIZE_POOL_ADDRESSES[NETWORK.polygon] = [{
        prizePool: '0x887e17d791dcb44bfdda3023d26f7a04ca9c7ef4',
        symbol: 'USDT-0x887E17',
        subgraphVersion: '3.3.8',
        tokenFaucets: ['0x90a8d8ee6fdb1875028c6537877e6704b2646c51', '0x951A969324127Fcc19D3498d6954A296E3B9C33c', '0x12533c9fe479ab8c27e55c1b7697e0647fadb153']
      }, {
        prizePool: '0xee06abe9e2af61cabcb13170e01266af2defa946',
        symbol: 'USDC-0xee06ab',
        subgraphVersion: '3.4.3',
        tokenFaucets: ['0x6cbc003fe015d753180f072d904ba841b2415498']
      }, {
        prizePool: '0x2aC049f07d56Ed04F84Ff80022A71a1A2d8cE19b',
        symbol: 'POOL-0x2aC049',
        subgraphVersion: ''
      }], _PRIZE_POOL_ADDRESSES[NETWORK.celo] = [{
        prizePool: '0x6F634F531ED0043B94527F68EC7861B4B1Ab110d',
        symbol: 'CELO-cUSD',
        subgraphVersion: '3.4.5',
        tokenFaucets: ['0xc777e1db58c386b8827bc1321fc2fef03ee5a7b7']
      }, {
        prizePool: '0xbe55435BdA8f0A2A20D2Ce98cC21B0AF5bfB7c83',
        symbol: 'CELO-cEUR',
        subgraphVersion: '3.4.5',
        tokenFaucets: ['0xd7bb81038d60e3530b9d550cd17de605bd27b937']
      }], _PRIZE_POOL_ADDRESSES),
      POD_ADDRESSES: (_POD_ADDRESSES = {}, _POD_ADDRESSES[NETWORK.mainnet] = [{
        // DAI Pod
        pod: '0x2f994e2E4F3395649eeE8A89092e63Ca526dA829',
        prizePool: '0xEBfb47A7ad0FD6e57323C8A42B2E5A6a4F68fc1a'
      }, {
        // USDC Pod
        pod: '0x386EB78f2eE79AddE8Bdb0a0e27292755ebFea58',
        prizePool: '0xde9ec95d7708B8319CCca4b8BC92c0a3B70bf416'
      }], _POD_ADDRESSES[NETWORK.rinkeby] = [{
        // DAI Pod
        pod: '0x4A26b34A902045CFb573aCb681550ba30AA79783',
        prizePool: '0x4706856FA8Bb747D50b4EF8547FE51Ab5Edc4Ac2'
      }], _POD_ADDRESSES),
      LP_PRIZE_POOL_METADATA: (_LP_PRIZE_POOL_METADA = {}, _LP_PRIZE_POOL_METADA[NETWORK.mainnet] = [{
        prizePool: '0x3af7072d29adde20fc7e173a7cb9e45307d2fb0a',
        tokens: {
          ticket: {
            address: '0xeb8928ee92efb06c44d072a24c2bcb993b61e543',
            name: 'PT UNI-V2 LP Ticket',
            symbol: 'PTUNI POOL-ETH'
          },
          underlyingToken: {
            address: '0x85cb0bab616fe88a89a35080516a8928f38b518b',
            dex: DEXES.UniSwap,
            name: 'Uniswap POOL/ETH LP',
            pair: 'POOL/ETH',
            symbol: 'UNI-V2 LP',
            token1: {
              symbol: 'POOL',
              address: '0x0cEC1A9154Ff802e7934Fc916Ed7Ca50bDE6844e'
            },
            token2: {
              symbol: 'ETH',
              address: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' // WETH

            }
          },
          tokenFaucetDripToken: {
            address: '0x0cEC1A9154Ff802e7934Fc916Ed7Ca50bDE6844e',
            symbol: 'POOL'
          }
        },
        tokenFaucets: ['0x9a29401ef1856b669f55ae5b24505b3b6faeb370']
      }], _LP_PRIZE_POOL_METADA[NETWORK.rinkeby] = [{
        prizePool: '0x8A358f613ddCca865D005414c1690920E4e9b132',
        tokens: {
          ticket: {
            address: '0x9b8c6fd165e0bffb93e6f2cf564d2cc7271e120f',
            name: 'PT UNI-V2 LP Ticket',
            symbol: 'PTUNI POOL-ETH'
          },
          underlyingToken: {
            address: '0x91A590A2D78c71775318524c198a0f2000112108',
            dex: DEXES.UniSwap,
            name: 'Uniswap POOL/ETH LP Rinkeby',
            pair: 'POOL/ETH',
            symbol: 'UNI-V2 LP',
            token1: {
              symbol: 'POOL',
              address: '0xc4E90a8Dc6CaAb329f08ED3C8abc6b197Cf0F40A'
            },
            token2: {
              symbol: 'ETH',
              address: '0xc778417e063141139fce010982780140aa0cd5ab'
            }
          },
          tokenFaucetDripToken: {
            address: '0xc4E90a8Dc6CaAb329f08ED3C8abc6b197Cf0F40A',
            symbol: 'POOL'
          }
        },
        tokenFaucets: ['0x97B99693613aaA74A3fa0B2f05378b8F6A74a893']
      }], _LP_PRIZE_POOL_METADA),
      POOL_PRIZE_POOL_ADDRESSES: (_POOL_PRIZE_POOL_ADDR = {}, _POOL_PRIZE_POOL_ADDR[NETWORK.mainnet] = ['0x396b4489da692788e327e2e4b2b0459a5ef26791'], _POOL_PRIZE_POOL_ADDR[NETWORK.polygon] = ['0x2aC049f07d56Ed04F84Ff80022A71a1A2d8cE19b'], _POOL_PRIZE_POOL_ADDR[NETWORK.rinkeby] = ['0x4706856fa8bb747d50b4ef8547fe51ab5edc4ac2'], _POOL_PRIZE_POOL_ADDR)
    });

    /**
     * A shortlist of PoolTogether v4 contract names that are used by the classes in this repo.
     */

    var ContractType;

    (function (ContractType) {
      ContractType["YieldSourcePrizePool"] = "YieldSourcePrizePool";
      ContractType["Ticket"] = "Ticket";
      ContractType["Token"] = "Token";
      ContractType["PrizeDistributor"] = "PrizeDistributor";
      ContractType["DrawBuffer"] = "DrawBuffer";
      ContractType["DrawBeacon"] = "DrawBeacon";
      ContractType["DrawCalculator"] = "DrawCalculator";
      ContractType["DrawCalculatorTimelock"] = "DrawCalculatorTimelock";
      ContractType["PrizeDistributionBuffer"] = "PrizeDistributionBuffer";
      ContractType["PrizeDistributionFactory"] = "PrizeDistributionFactory";
      ContractType["PrizeTierHistory"] = "PrizeTierHistory"; // ... more contract types
    })(ContractType || (ContractType = {}));

    var PrizeApiStatus;

    (function (PrizeApiStatus) {
      PrizeApiStatus["loading"] = "LOADING";
      PrizeApiStatus["success"] = "SUCCESS";
      PrizeApiStatus["failure"] = "FAILURE";
    })(PrizeApiStatus || (PrizeApiStatus = {}));

    var createContract = function createContract(address, contractInterface, provider) {
      return new Contract(address, contractInterface, provider);
    };

    function createInterface(abi) {
      return new Interface(abi);
    }

    function getContractsByType(contracts, type) {
      return contracts.filter(function (contract) {
        return contract.type === type;
      });
    }

    /**
     * Reads the contract list and pulls out connected contracts based on the
     * children extension.
     *
     * NOTE: This extension is added in the intialize functions for creating the instances of
     * PrizePoolNetwork and PrizeDistributors
     */

    function sortContractsByContractTypeAndChildren(contracts, contractType) {
      var prizePoolContracts = getContractsByType(contracts, contractType);
      return prizePoolContracts.map(function (prizePoolContract) {
        return [prizePoolContract].concat(findChildContracts(prizePoolContract, contracts));
      });
    }

    function findChildContracts(parentContract, contracts) {
      var _parentContract$exten;

      var children = (_parentContract$exten = parentContract.extensions) == null ? void 0 : _parentContract$exten.children;
      if (!children) return [];
      if (!Array.isArray(children)) throw new Error('Invalid children extension');
      var childContracts = [];
      children.forEach(function (childIdentifier) {
        var childContract = contracts.find(function (contract) {
          return isMatchingContractIdentifier(childIdentifier, contract);
        });
        if (childContract) childContracts.push(childContract);
      });
      return childContracts;
    }

    function isMatchingContractIdentifier(contractIdentifier, contract) {
      return contractIdentifier.address === contract.address && contractIdentifier.chainId === contract.chainId;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var runtime_1 = createCommonjsModule(function (module) {
    /**
     * Copyright (c) 2014-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var runtime = (function (exports) {

      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined$1; // More compressible than void 0.
      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
        return obj[key];
      }
      try {
        // IE 8 has a broken Object.defineProperty that only works on DOM objects.
        define({}, "");
      } catch (err) {
        define = function(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []);

        // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.
        generator._invoke = makeInvokeMethod(innerFn, self, context);

        return generator;
      }
      exports.wrap = wrap;

      // Try/catch helper to minimize deoptimizations. Returns a completion
      // record like context.tryEntries[i].completion. This interface could
      // have been (and was previously) designed to take a closure to be
      // invoked without arguments, but in all the cases we care about we
      // already have an existing method we want to call, so there's no need
      // to create a new function object. We can even get away with assuming
      // the method takes exactly one argument, since that happens to be true
      // in every case, so we don't have to touch the arguments object. The
      // only additional allocation required is the completion record, which
      // has a stable shape and so hopefully should be cheap to allocate.
      function tryCatch(fn, obj, arg) {
        try {
          return { type: "normal", arg: fn.call(obj, arg) };
        } catch (err) {
          return { type: "throw", arg: err };
        }
      }

      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed";

      // Returning this object from the innerFn has the same effect as
      // breaking out of the dispatch switch statement.
      var ContinueSentinel = {};

      // Dummy constructor functions that we use as the .constructor and
      // .constructor.prototype properties for functions that return Generator
      // objects. For full spec compliance, you may wish to configure your
      // minifier not to mangle the names of these two functions.
      function Generator() {}
      function GeneratorFunction() {}
      function GeneratorFunctionPrototype() {}

      // This is a polyfill for %IteratorPrototype% for environments that
      // don't natively support it.
      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });

      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      if (NativeIteratorPrototype &&
          NativeIteratorPrototype !== Op &&
          hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
      }

      var Gp = GeneratorFunctionPrototype.prototype =
        Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = GeneratorFunctionPrototype;
      define(Gp, "constructor", GeneratorFunctionPrototype);
      define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
      GeneratorFunction.displayName = define(
        GeneratorFunctionPrototype,
        toStringTagSymbol,
        "GeneratorFunction"
      );

      // Helper for defining the .next, .throw, and .return methods of the
      // Iterator interface in terms of a single ._invoke method.
      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function(method) {
          define(prototype, method, function(arg) {
            return this._invoke(method, arg);
          });
        });
      }

      exports.isGeneratorFunction = function(genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor
          ? ctor === GeneratorFunction ||
            // For the native GeneratorFunction constructor, the best we can
            // do is to check its .name property.
            (ctor.displayName || ctor.name) === "GeneratorFunction"
          : false;
      };

      exports.mark = function(genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          define(genFun, toStringTagSymbol, "GeneratorFunction");
        }
        genFun.prototype = Object.create(Gp);
        return genFun;
      };

      // Within the body of any async function, `await x` is transformed to
      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
      // `hasOwn.call(value, "__await")` to determine if the yielded value is
      // meant to be awaited.
      exports.awrap = function(arg) {
        return { __await: arg };
      };

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);
          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;
            if (value &&
                typeof value === "object" &&
                hasOwn.call(value, "__await")) {
              return PromiseImpl.resolve(value.__await).then(function(value) {
                invoke("next", value, resolve, reject);
              }, function(err) {
                invoke("throw", err, resolve, reject);
              });
            }

            return PromiseImpl.resolve(value).then(function(unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration.
              result.value = unwrapped;
              resolve(result);
            }, function(error) {
              // If a rejected Promise was yielded, throw the rejection back
              // into the async generator function so it can be handled there.
              return invoke("throw", error, resolve, reject);
            });
          }
        }

        var previousPromise;

        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function(resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise =
            // If enqueue has been called before, then we want to wait until
            // all previous Promises have been resolved before calling invoke,
            // so that results are always delivered in the correct order. If
            // enqueue has not been called before, then it is important to
            // call invoke immediately, without waiting on a callback to fire,
            // so that the async generator function has the opportunity to do
            // any necessary setup in a predictable way. This predictability
            // is why the Promise constructor synchronously invokes its
            // executor callback, and why async functions synchronously
            // execute code before the first await. Since we implement simple
            // async functions in terms of async generators, it is especially
            // important to get this right, even though it requires care.
            previousPromise ? previousPromise.then(
              callInvokeWithMethodAndArg,
              // Avoid propagating failures to Promises returned by later
              // invocations of the iterator.
              callInvokeWithMethodAndArg
            ) : callInvokeWithMethodAndArg();
        }

        // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).
        this._invoke = enqueue;
      }

      defineIteratorMethods(AsyncIterator.prototype);
      define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      });
      exports.AsyncIterator = AsyncIterator;

      // Note that simple async functions are implemented on top of
      // AsyncIterator objects; they just return a Promise for the value of
      // the final result produced by the iterator.
      exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;

        var iter = new AsyncIterator(
          wrap(innerFn, outerFn, self, tryLocsList),
          PromiseImpl
        );

        return exports.isGeneratorFunction(outerFn)
          ? iter // If outerFn is a generator, return the full iterator.
          : iter.next().then(function(result) {
              return result.done ? result.value : iter.next();
            });
      };

      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;

        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }

          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            }

            // Be forgiving, per 25.3.3.3.3 of the spec:
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
            return doneResult();
          }

          context.method = method;
          context.arg = arg;

          while (true) {
            var delegate = context.delegate;
            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);
              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if (context.method === "next") {
              // Setting context._sent for legacy support of Babel's
              // function.sent implementation.
              context.sent = context._sent = context.arg;

            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }

              context.dispatchException(context.arg);

            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }

            state = GenStateExecuting;

            var record = tryCatch(innerFn, self, context);
            if (record.type === "normal") {
              // If an exception is thrown from innerFn, we leave state ===
              // GenStateExecuting and loop back for another invocation.
              state = context.done
                ? GenStateCompleted
                : GenStateSuspendedYield;

              if (record.arg === ContinueSentinel) {
                continue;
              }

              return {
                value: record.arg,
                done: context.done
              };

            } else if (record.type === "throw") {
              state = GenStateCompleted;
              // Dispatch the exception by looping back around to the
              // context.dispatchException(context.arg) call above.
              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      }

      // Call delegate.iterator[context.method](context.arg) and handle the
      // result, either by returning a { value, done } result from the
      // delegate iterator, or by modifying context.method and context.arg,
      // setting context.delegate to null, and returning the ContinueSentinel.
      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];
        if (method === undefined$1) {
          // A .throw or .return when the delegate iterator has no .throw
          // method always terminates the yield* loop.
          context.delegate = null;

          if (context.method === "throw") {
            // Note: ["return"] must be used for ES3 parsing compatibility.
            if (delegate.iterator["return"]) {
              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              context.method = "return";
              context.arg = undefined$1;
              maybeInvokeDelegate(delegate, context);

              if (context.method === "throw") {
                // If maybeInvokeDelegate(context) changed context.method from
                // "return" to "throw", let that override the TypeError below.
                return ContinueSentinel;
              }
            }

            context.method = "throw";
            context.arg = new TypeError(
              "The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);

        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }

        var info = record.arg;

        if (! info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }

        if (info.done) {
          // Assign the result of the finished delegate to the temporary
          // variable specified by delegate.resultName (see delegateYield).
          context[delegate.resultName] = info.value;

          // Resume execution at the desired location (see delegateYield).
          context.next = delegate.nextLoc;

          // If context.method was "throw" but the delegate handled the
          // exception, let the outer generator proceed normally. If
          // context.method was "next", forget context.arg since it has been
          // "consumed" by the delegate iterator. If context.method was
          // "return", allow the original .return call to continue in the
          // outer generator.
          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined$1;
          }

        } else {
          // Re-yield the result returned by the delegate method.
          return info;
        }

        // The delegate iterator is finished, so forget it and continue with
        // the outer generator.
        context.delegate = null;
        return ContinueSentinel;
      }

      // Define Generator.prototype.{next,throw,return} in terms of the
      // unified ._invoke helper method.
      defineIteratorMethods(Gp);

      define(Gp, toStringTagSymbol, "Generator");

      // A Generator should always return itself as the iterator object when the
      // @@iterator function is called on it. Some browsers' implementations of the
      // iterator prototype chain incorrectly implement this, causing the Generator
      // object to not be returned from this call. This ensures that doesn't happen.
      // See https://github.com/facebook/regenerator/issues/274 for more details.
      define(Gp, iteratorSymbol, function() {
        return this;
      });

      define(Gp, "toString", function() {
        return "[object Generator]";
      });

      function pushTryEntry(locs) {
        var entry = { tryLoc: locs[0] };

        if (1 in locs) {
          entry.catchLoc = locs[1];
        }

        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }

        this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }

      function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [{ tryLoc: "root" }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }

      exports.keys = function(object) {
        var keys = [];
        for (var key in object) {
          keys.push(key);
        }
        keys.reverse();

        // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.
        return function next() {
          while (keys.length) {
            var key = keys.pop();
            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          }

          // To avoid creating an additional object, we just hang the .value
          // and .done properties off the next function object itself. This
          // also ensures that the minifier will not anonymize the function.
          next.done = true;
          return next;
        };
      };

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }

          if (typeof iterable.next === "function") {
            return iterable;
          }

          if (!isNaN(iterable.length)) {
            var i = -1, next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }

              next.value = undefined$1;
              next.done = true;

              return next;
            };

            return next.next = next;
          }
        }

        // Return an iterator with no values.
        return { next: doneResult };
      }
      exports.values = values;

      function doneResult() {
        return { value: undefined$1, done: true };
      }

      Context.prototype = {
        constructor: Context,

        reset: function(skipTempReset) {
          this.prev = 0;
          this.next = 0;
          // Resetting context._sent for legacy support of Babel's
          // function.sent implementation.
          this.sent = this._sent = undefined$1;
          this.done = false;
          this.delegate = null;

          this.method = "next";
          this.arg = undefined$1;

          this.tryEntries.forEach(resetTryEntry);

          if (!skipTempReset) {
            for (var name in this) {
              // Not sure about the optimal order of these conditions:
              if (name.charAt(0) === "t" &&
                  hasOwn.call(this, name) &&
                  !isNaN(+name.slice(1))) {
                this[name] = undefined$1;
              }
            }
          }
        },

        stop: function() {
          this.done = true;

          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;
          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }

          return this.rval;
        },

        dispatchException: function(exception) {
          if (this.done) {
            throw exception;
          }

          var context = this;
          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;

            if (caught) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              context.method = "next";
              context.arg = undefined$1;
            }

            return !! caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;

            if (entry.tryLoc === "root") {
              // Exception thrown outside of any try block that could handle
              // it, so set the completion value of the entire function to
              // throw the exception.
              return handle("end");
            }

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }

              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }

              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }

              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },

        abrupt: function(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc <= this.prev &&
                hasOwn.call(entry, "finallyLoc") &&
                this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          if (finallyEntry &&
              (type === "break" ||
               type === "continue") &&
              finallyEntry.tryLoc <= arg &&
              arg <= finallyEntry.finallyLoc) {
            // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
          }

          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;

          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }

          return this.complete(record);
        },

        complete: function(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }

          if (record.type === "break" ||
              record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }

          return ContinueSentinel;
        },

        finish: function(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },

        "catch": function(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;
              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }
              return thrown;
            }
          }

          // The context.catch method must only be called with a location
          // argument that corresponds to a known catch block.
          throw new Error("illegal catch attempt");
        },

        delegateYield: function(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };

          if (this.method === "next") {
            // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined$1;
          }

          return ContinueSentinel;
        }
      };

      // Regardless of whether this script is executing as a CommonJS module
      // or not, return the runtime object so that we can declare the variable
      // regeneratorRuntime in the outer scope, which allows this module to be
      // injected easily by `bin/regenerator --include-runtime script.js`.
      return exports;

    }(
      // If this script is executing as a CommonJS module, use module.exports
      // as the regeneratorRuntime namespace. Otherwise create a new empty
      // object. Either way, the resulting object will be used to initialize
      // the regeneratorRuntime variable at the top of this file.
       module.exports 
    ));

    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      // This module should not be running in strict mode, so the above
      // assignment should always work unless something is misconfigured. Just
      // in case runtime.js accidentally runs in strict mode, in modern engines
      // we can explicitly access globalThis. In older engines we can escape
      // strict mode using a global Function call. This could conceivably fail
      // if a Content Security Policy forbids using Function, but in that case
      // the proper solution is to fix the accidental strict mode problem. If
      // you've misconfigured your bundler to force strict mode and applied a
      // CSP to forbid Function, and you're not willing to fix either of those
      // problems, please detail your unique predicament in a GitHub issue.
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
    });

    function getTokenData(_x) {
      return _getTokenData.apply(this, arguments);
    }

    function _getTokenData() {
      _getTokenData = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(tokenContract) {
        var namePromise, symbolPromise, decimalsPromise, results;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                namePromise = tokenContract.functions.name();
                symbolPromise = tokenContract.functions.symbol();
                decimalsPromise = tokenContract.functions.decimals();
                _context.next = 5;
                return Promise.all([namePromise, symbolPromise, decimalsPromise]);

              case 5:
                results = _context.sent;
                return _context.abrupt("return", {
                  name: results[0][0],
                  symbol: results[1][0],
                  decimals: results[2][0]
                });

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return _getTokenData.apply(this, arguments);
    }

    function getUsersERC20Balance(_x2, _x3) {
      return _getUsersERC20Balance.apply(this, arguments);
    }

    function _getUsersERC20Balance() {
      _getUsersERC20Balance = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(usersAddress, tokenContract) {
        var result;
        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return tokenContract.functions.balanceOf(usersAddress);

              case 2:
                result = _context2.sent;
                return _context2.abrupt("return", result[0]);

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
      return _getUsersERC20Balance.apply(this, arguments);
    }

    /**
     * Throws an error if the provided address is invalid.
     * @param errorPrefix the class and function name of where the error occurred
     * @param address the address to validate
     */

    function validateAddress(errorPrefix, address) {
      var isValidAddress = isAddress(address);

      if (!isValidAddress) {
        throw new Error(errorPrefix + (" | Invalid address: '" + address + "'"));
      }
    }
    /**
     * Throws an error if the Signer provided is not on the chain id provided.
     * @param errorPrefix the class and function name of where the error occurred
     * @param signer a Signer to validate
     * @param chainId the network to check for
     */

    function validateSignerNetwork(_x, _x2, _x3) {
      return _validateSignerNetwork.apply(this, arguments);
    }
    /**
     * Throws an error if the signerOrProvider is not a Signer
     * @param errorPrefix the class and function name of where the error occurred
     * @param signerOrProvider a Signer or Provider to check
     */

    function _validateSignerNetwork() {
      _validateSignerNetwork = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(errorPrefix, signer, chainId) {
        var signerChainId;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return signer.getChainId();

              case 2:
                signerChainId = _context.sent;

                if (!(signerChainId !== chainId)) {
                  _context.next = 5;
                  break;
                }

                throw new Error(errorPrefix + (" | Signer is on network " + signerChainId + ". Expected network " + chainId));

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return _validateSignerNetwork.apply(this, arguments);
    }

    function validateIsSigner(errorPrefix, signerOrProvider) {
      if (!Signer.isSigner(signerOrProvider)) {
        throw new Error(errorPrefix + ' | signerOrProvider is not a signer');
      }
    }
    /**
     * Throws and error if the Signer or Provider is not on the chain id provided.
     * @param errorPrefix the class and function name of where the error occurred
     * @param signerOrProvider a Signer or Provider to check
     * @param chainId the network to check for
     */

    function validateSignerOrProviderNetwork(_x4, _x5, _x6) {
      return _validateSignerOrProviderNetwork.apply(this, arguments);
    }

    function _validateSignerOrProviderNetwork() {
      _validateSignerOrProviderNetwork = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(errorPrefix, signerOrProvider, chainId) {
        var signerOrProviderChainId, _yield$signerOrProvid, providerChainId;

        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!Provider.isProvider(signerOrProvider)) {
                  _context2.next = 8;
                  break;
                }

                _context2.next = 3;
                return signerOrProvider.getNetwork();

              case 3:
                _yield$signerOrProvid = _context2.sent;
                providerChainId = _yield$signerOrProvid.chainId;
                signerOrProviderChainId = providerChainId;
                _context2.next = 12;
                break;

              case 8:
                if (!Signer.isSigner(signerOrProvider)) {
                  _context2.next = 12;
                  break;
                }

                _context2.next = 11;
                return signerOrProvider.getChainId();

              case 11:
                signerOrProviderChainId = _context2.sent;

              case 12:
                if (signerOrProviderChainId) {
                  _context2.next = 16;
                  break;
                }

                throw new Error(errorPrefix + " | Invalid value for signerOrProvider");

              case 16:
                if (!(signerOrProviderChainId !== chainId)) {
                  _context2.next = 18;
                  break;
                }

                throw new Error(errorPrefix + (" | Provider is on network " + signerOrProviderChainId + ". Expected network " + chainId));

              case 18:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
      return _validateSignerOrProviderNetwork.apply(this, arguments);
    }

    /**
     * Finds a specific contract in the contract list and returns the metadata and ethers Contract.
     * If an addressOverride is supplied, it will be used to look up the contract in the metadata list. If it is not found, the first contract found in the list of that type regardless of version will be used.
     * @param chainId
     * @param signerOrProvider
     * @param contractType
     * @param contractMetadataList
     * @param addressOverride
     * @returns
     */

    function getMetadataAndContract(chainId, signerOrProvider, contractType, contractMetadataList, addressOverride) {
      var contractMetadata;

      if (!!addressOverride) {
        contractMetadata = contractMetadataList.find(function (contract) {
          return contract.type === contractType && contract.chainId === chainId && contract.address === addressOverride;
        });
      } // Fallback for no addressOverride provided or found


      if (!contractMetadata) {
        contractMetadata = contractMetadataList.find(function (contract) {
          return contract.type === contractType && contract.chainId === chainId;
        });
      }

      if (!contractMetadata) {
        throw new Error("Invalid contract list. Missing " + contractType + ".");
      }

      var contract = createContract(addressOverride || contractMetadata.address, createInterface(contractMetadata.abi), signerOrProvider);
      return {
        contractMetadata: contractMetadata,
        contract: contract
      };
    }

    function createContractMetadata(chainId, address, type, abi, version, tags, extensions) {
      if (version === void 0) {
        version = {
          major: 1,
          minor: 0,
          patch: 0
        };
      }

      if (tags === void 0) {
        tags = [];
      }

      if (extensions === void 0) {
        extensions = {};
      }

      return {
        chainId: chainId,
        address: address,
        version: version,
        type: type,
        abi: abi,
        tags: tags,
        extensions: extensions
      };
    }

    var ERC20Abi = [{
      constant: true,
      inputs: [],
      name: 'name',
      outputs: [{
        name: '',
        type: 'string'
      }],
      payable: false,
      stateMutability: 'view',
      type: 'function'
    }, {
      constant: false,
      inputs: [{
        name: 'spender',
        type: 'address'
      }, {
        name: 'value',
        type: 'uint256'
      }],
      name: 'approve',
      outputs: [{
        name: '',
        type: 'bool'
      }],
      payable: false,
      stateMutability: 'nonpayable',
      type: 'function'
    }, {
      constant: true,
      inputs: [],
      name: 'totalSupply',
      outputs: [{
        name: '',
        type: 'uint256'
      }],
      payable: false,
      stateMutability: 'view',
      type: 'function'
    }, {
      constant: false,
      inputs: [{
        name: 'from',
        type: 'address'
      }, {
        name: 'to',
        type: 'address'
      }, {
        name: 'value',
        type: 'uint256'
      }],
      name: 'transferFrom',
      outputs: [{
        name: '',
        type: 'bool'
      }],
      payable: false,
      stateMutability: 'nonpayable',
      type: 'function'
    }, {
      constant: true,
      inputs: [],
      name: 'decimals',
      outputs: [{
        name: '',
        type: 'uint8'
      }],
      payable: false,
      stateMutability: 'view',
      type: 'function'
    }, {
      constant: false,
      inputs: [{
        name: 'spender',
        type: 'address'
      }, {
        name: 'addedValue',
        type: 'uint256'
      }],
      name: 'increaseAllowance',
      outputs: [{
        name: '',
        type: 'bool'
      }],
      payable: false,
      stateMutability: 'nonpayable',
      type: 'function'
    }, {
      constant: false,
      inputs: [{
        name: 'to',
        type: 'address'
      }, {
        name: 'value',
        type: 'uint256'
      }],
      name: 'mint',
      outputs: [{
        name: '',
        type: 'bool'
      }],
      payable: false,
      stateMutability: 'nonpayable',
      type: 'function'
    }, {
      constant: true,
      inputs: [{
        name: 'owner',
        type: 'address'
      }],
      name: 'balanceOf',
      outputs: [{
        name: '',
        type: 'uint256'
      }],
      payable: false,
      stateMutability: 'view',
      type: 'function'
    }, {
      constant: true,
      inputs: [],
      name: 'symbol',
      outputs: [{
        name: '',
        type: 'string'
      }],
      payable: false,
      stateMutability: 'view',
      type: 'function'
    }, {
      constant: false,
      inputs: [{
        name: 'account',
        type: 'address'
      }],
      name: 'addMinter',
      outputs: [],
      payable: false,
      stateMutability: 'nonpayable',
      type: 'function'
    }, {
      constant: false,
      inputs: [],
      name: 'renounceMinter',
      outputs: [],
      payable: false,
      stateMutability: 'nonpayable',
      type: 'function'
    }, {
      constant: false,
      inputs: [{
        name: 'spender',
        type: 'address'
      }, {
        name: 'subtractedValue',
        type: 'uint256'
      }],
      name: 'decreaseAllowance',
      outputs: [{
        name: '',
        type: 'bool'
      }],
      payable: false,
      stateMutability: 'nonpayable',
      type: 'function'
    }, {
      constant: false,
      inputs: [{
        name: 'to',
        type: 'address'
      }, {
        name: 'value',
        type: 'uint256'
      }],
      name: 'transfer',
      outputs: [{
        name: '',
        type: 'bool'
      }],
      payable: false,
      stateMutability: 'nonpayable',
      type: 'function'
    }, {
      constant: true,
      inputs: [{
        name: 'account',
        type: 'address'
      }],
      name: 'isMinter',
      outputs: [{
        name: '',
        type: 'bool'
      }],
      payable: false,
      stateMutability: 'view',
      type: 'function'
    }, {
      constant: false,
      inputs: [{
        name: 'sender',
        type: 'address'
      }],
      name: 'initialize',
      outputs: [],
      payable: false,
      stateMutability: 'nonpayable',
      type: 'function'
    }, {
      constant: true,
      inputs: [{
        name: 'owner',
        type: 'address'
      }, {
        name: 'spender',
        type: 'address'
      }],
      name: 'allowance',
      outputs: [{
        name: '',
        type: 'uint256'
      }],
      payable: false,
      stateMutability: 'view',
      type: 'function'
    }, {
      anonymous: false,
      inputs: [{
        indexed: true,
        name: 'account',
        type: 'address'
      }],
      name: 'MinterAdded',
      type: 'event'
    }, {
      anonymous: false,
      inputs: [{
        indexed: true,
        name: 'account',
        type: 'address'
      }],
      name: 'MinterRemoved',
      type: 'event'
    }, {
      anonymous: false,
      inputs: [{
        indexed: true,
        name: 'from',
        type: 'address'
      }, {
        indexed: true,
        name: 'to',
        type: 'address'
      }, {
        indexed: false,
        name: 'value',
        type: 'uint256'
      }],
      name: 'Transfer',
      type: 'event'
    }, {
      anonymous: false,
      inputs: [{
        indexed: true,
        name: 'owner',
        type: 'address'
      }, {
        indexed: true,
        name: 'spender',
        type: 'address'
      }, {
        indexed: false,
        name: 'value',
        type: 'uint256'
      }],
      name: 'Approval',
      type: 'event'
    }];

    var createEmptyDrawResult = function createEmptyDrawResult(drawId) {
      return {
        drawId: drawId,
        totalValue: BigNumber.from(0),
        prizes: []
      };
    };

    var formatDrawResultsFromLegacyDrawResults = function formatDrawResultsFromLegacyDrawResults(LEGACY_drawResult) {
      var _prizes = LEGACY_drawResult.prizes;

      var prizes = _prizes.map(function (prize) {
        return {
          amount: BigNumber.from(prize.amount),
          tierIndex: 'distributionIndex' in prize ? prize.distributionIndex : prize.tierIndex,
          pick: BigNumber.from(prize.pick)
        };
      });

      var drawResults = {
        drawId: LEGACY_drawResult.drawId,
        totalValue: LEGACY_drawResult.totalValue,
        prizes: prizes
      };
      return drawResults;
    };

    var sumBigNumbers = function sumBigNumbers(values) {
      return values.reduce(function (sum, value) {
        return sum.add(value);
      }, BigNumber.from(0));
    };

    var formatDrawResultsFromPrizes = function formatDrawResultsFromPrizes(drawId, _allPrizes, maxPicksPerUser) {
      var prizes = _allPrizes.map(function (prize) {
        return {
          amount: BigNumber.from(prize.amount),
          tierIndex: prize.tier,
          pick: BigNumber.from(prize.pick)
        };
      });

      var totalValue = sumBigNumbers(prizes.map(function (prize) {
        return prize.amount;
      }));
      var drawResults = index$1.filterResultsByValue({
        drawId: drawId,
        totalValue: totalValue,
        prizes: prizes
      }, maxPicksPerUser);
      return drawResults;
    };

    /**
     * Currently the Prize API is only running for a select group of networks.
     */

    var PRIZE_API_SUPPORTED_NETWORKS = /*#__PURE__*/Object.freeze([NETWORK.avalanche, NETWORK.mainnet, NETWORK.polygon, NETWORK.optimism, NETWORK['goerli'], NETWORK['optimism-goerli']]);
    /**
     * PoolTogether Prize API.
     * Provides easy access to PoolTogether Prize APIs.
     */

    var PrizeApi = /*#__PURE__*/function () {
      function PrizeApi() {}

      /**
       * Fetches a users DrawResults for the provided draw id
       * @param chainId the chain id the PrizeDistributor is deployed on
       * @param usersAddress the address of the user to fetch draw results for
       * @param prizeDistributorAddress the address of the PrizeDistributor to fetch prizes for
       * @param drawId the id of the draw to check
       * @param maxPicksPerUser the maximum number of picks per user
       */
      PrizeApi.getUsersDrawResultsByDraw =
      /*#__PURE__*/
      function () {
        var _getUsersDrawResultsByDraw = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(chainId, usersAddress, prizeDistributorAddress, drawId, maxPicksPerUser) {
          var drawResults;
          return runtime_1.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return this.getUsersDrawResultsByDraws(chainId, usersAddress, prizeDistributorAddress, [drawId], [maxPicksPerUser]);

                case 2:
                  drawResults = _context.sent;
                  return _context.abrupt("return", drawResults[drawId]);

                case 4:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function getUsersDrawResultsByDraw(_x, _x2, _x3, _x4, _x5) {
          return _getUsersDrawResultsByDraw.apply(this, arguments);
        }

        return getUsersDrawResultsByDraw;
      }()
      /**
       * Fetches a users DrawResults for the provided draw ids.
       * Checks the status of the Prize API, falls back to the CloudFlare worker if Prize API status is invalid.
       * @param chainId the chain id the PrizeDistributor is deployed on
       * @param usersAddress the address of the user to fetch draw results for
       * @param prizeDistributorAddress the address of the PrizeDistributor to fetch prizes for
       * @param drawIds a list of draw ids to check for prizes
       * @param maxPicksPerUserPerDraw the maximum number of picks per user for each drwa
       */
      ;

      PrizeApi.getUsersDrawResultsByDraws =
      /*#__PURE__*/
      function () {
        var _getUsersDrawResultsByDraws = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(chainId, usersAddress, prizeDistributorAddress, drawIds, maxPicksPerUserPerDraw) {
          var _this = this;

          var drawResults, drawResultsPromises;
          return runtime_1.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  drawResults = {};
                  drawResultsPromises = drawIds.map( /*#__PURE__*/function () {
                    var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(drawId, index) {
                      var drawResult, apiStatus, _drawResult, _drawResult2, error;

                      return runtime_1.wrap(function _callee2$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              _context2.prev = 0;

                              if (PRIZE_API_SUPPORTED_NETWORKS.includes(chainId)) {
                                _context2.next = 9;
                                break;
                              }

                              console.warn("Prize API only supports networks: " + PRIZE_API_SUPPORTED_NETWORKS.join(', ') + ".");
                              _context2.next = 5;
                              return _this.computeDrawResultsOnCloudFlareWorker(chainId, usersAddress, prizeDistributorAddress, drawId);

                            case 5:
                              drawResult = _context2.sent;
                              drawResults[drawId] = drawResult;
                              _context2.next = 23;
                              break;

                            case 9:
                              _context2.next = 11;
                              return _this.checkPrizeApiStatus(chainId, prizeDistributorAddress, drawId);

                            case 11:
                              apiStatus = _context2.sent;

                              if (!apiStatus) {
                                _context2.next = 19;
                                break;
                              }

                              _context2.next = 15;
                              return _this.getDrawResultsFromPrizeApi(chainId, usersAddress, prizeDistributorAddress, drawId, maxPicksPerUserPerDraw[index]);

                            case 15:
                              _drawResult = _context2.sent;
                              drawResults[drawId] = _drawResult;
                              _context2.next = 23;
                              break;

                            case 19:
                              _context2.next = 21;
                              return _this.computeDrawResultsOnCloudFlareWorker(chainId, usersAddress, prizeDistributorAddress, drawId);

                            case 21:
                              _drawResult2 = _context2.sent;
                              drawResults[drawId] = _drawResult2;

                            case 23:
                              _context2.next = 30;
                              break;

                            case 25:
                              _context2.prev = 25;
                              _context2.t0 = _context2["catch"](0);
                              error = _context2.t0;
                              console.error(error.message);
                              throw error;

                            case 30:
                            case "end":
                              return _context2.stop();
                          }
                        }
                      }, _callee2, null, [[0, 25]]);
                    }));

                    return function (_x11, _x12) {
                      return _ref.apply(this, arguments);
                    };
                  }());
                  _context3.next = 4;
                  return Promise.all(drawResultsPromises);

                case 4:
                  return _context3.abrupt("return", drawResults);

                case 5:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }));

        function getUsersDrawResultsByDraws(_x6, _x7, _x8, _x9, _x10) {
          return _getUsersDrawResultsByDraws.apply(this, arguments);
        }

        return getUsersDrawResultsByDraws;
      }()
      /**
       * Fetches precomputed prizes from the Prize API.
       * The Prize API only supports a limited set of networks, see https://dev.pooltogether.com/protocol/api/prize-api for more info.
       * @param chainId
       * @param usersAddress
       * @param prizeDistributorAddress
       * @param drawId
       * @param maxPicksPerUser
       * @returns
       */
      ;

      PrizeApi.getDrawResultsFromPrizeApi =
      /*#__PURE__*/
      function () {
        var _getDrawResultsFromPrizeApi = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(chainId, usersAddress, prizeDistributorAddress, drawId, maxPicksPerUser) {
          var url, response, prizesJson, prizes, drawResult;
          return runtime_1.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  if (PRIZE_API_SUPPORTED_NETWORKS.includes(chainId)) {
                    _context4.next = 2;
                    break;
                  }

                  throw new Error("PrizeApi | Prize API only supports networks: " + PRIZE_API_SUPPORTED_NETWORKS.join(', ') + ".");

                case 2:
                  url = this.getDrawResultsUrl(chainId, prizeDistributorAddress, usersAddress, drawId);
                  _context4.next = 5;
                  return fetch(url);

                case 5:
                  response = _context4.sent;

                  if (!(response.status === 404)) {
                    _context4.next = 8;
                    break;
                  }

                  return _context4.abrupt("return", createEmptyDrawResult(drawId));

                case 8:
                  _context4.next = 10;
                  return response.json();

                case 10:
                  prizesJson = _context4.sent;
                  prizes = deserializeBigNumbers(prizesJson);
                  drawResult = formatDrawResultsFromPrizes(drawId, prizes, maxPicksPerUser);
                  return _context4.abrupt("return", drawResult);

                case 14:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function getDrawResultsFromPrizeApi(_x13, _x14, _x15, _x16, _x17) {
          return _getDrawResultsFromPrizeApi.apply(this, arguments);
        }

        return getDrawResultsFromPrizeApi;
      }()
      /**
       * Computes the users prizes in a CloudFlare worker.
       * @param chainId
       * @param usersAddress
       * @param prizeDistributorAddress
       * @param drawId
       */
      ;

      PrizeApi.computeDrawResultsOnCloudFlareWorker =
      /*#__PURE__*/
      function () {
        var _computeDrawResultsOnCloudFlareWorker = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(chainId, usersAddress, prizeDistributorAddress, drawId) {
          var url, response, drawResultsJson, LEGACY_drawResult, drawResult;
          return runtime_1.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  url = this.getCloudFlareDrawResultsUrl(chainId, prizeDistributorAddress, usersAddress, drawId);
                  _context5.next = 3;
                  return fetch(url);

                case 3:
                  response = _context5.sent;
                  _context5.next = 6;
                  return response.json();

                case 6:
                  drawResultsJson = _context5.sent;
                  LEGACY_drawResult = deserializeBigNumbers(drawResultsJson);
                  drawResult = formatDrawResultsFromLegacyDrawResults(LEGACY_drawResult);
                  return _context5.abrupt("return", drawResult);

                case 10:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function computeDrawResultsOnCloudFlareWorker(_x18, _x19, _x20, _x21) {
          return _computeDrawResultsOnCloudFlareWorker.apply(this, arguments);
        }

        return computeDrawResultsOnCloudFlareWorker;
      }()
      /**
       * Computes the users prizes locally.
       * NOTE: This is a heavy calculation and not recommended on users devices.
       * @param usersAddress
       * @param prizeDistributorAddress
       * @param drawId
       * @param provider
       */
      ;

      PrizeApi.computeDrawResults =
      /*#__PURE__*/
      function () {
        var _computeDrawResults = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(usersAddress, prizeDistributorAddress, drawId, provider) {
          var prizeDistributorContract, response, drawCalculatorTimelockAddress, drawCalculatorTimelockContract, drawCalculatorAddress, drawCalculatorContract, drawBufferAddress, prizeDistributionBufferAddress, normalizedBalance, drawBufferContract, prizeDistributionBufferContract, draw, prizeDistribution, drawResults;
          return runtime_1.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  // Get Draw Calculator Timelock address
                  prizeDistributorContract = contract_1(prizeDistributorAddress, PartialPrizeDistributorAbi, prizeDistributorAddress); // @ts-ignore

                  _context6.next = 3;
                  return batch_1(provider, prizeDistributorContract.getDrawCalculator());

                case 3:
                  response = _context6.sent;
                  drawCalculatorTimelockAddress = response[prizeDistributorAddress].getDrawCalculator[0]; // Get Draw Calculator address
                  // It's assumed that the PristDistributor has a DrawCalculatorTimelock set up, if it does not, this second getDrawCalculator call will fail. That means the contract is not a DrawCalculatorTimelock and just a DrawCalculator.

                  drawCalculatorTimelockContract = contract_1(drawCalculatorTimelockAddress, PartialDrawCalculatorTimelockAbi, drawCalculatorTimelockAddress);
                  _context6.prev = 6;
                  _context6.next = 9;
                  return batch_1(provider, drawCalculatorTimelockContract.getDrawCalculator());

                case 9:
                  response = _context6.sent;
                  drawCalculatorAddress = response[drawCalculatorTimelockAddress].getDrawCalculator[0];
                  _context6.next = 17;
                  break;

                case 13:
                  _context6.prev = 13;
                  _context6.t0 = _context6["catch"](6);
                  console.warn("Prize Distributor at " + prizeDistributorAddress + " is not using a DrawCalculatorTimelock");
                  drawCalculatorAddress = drawCalculatorTimelockAddress;

                case 17:
                  // Get Draw Buffer & Prize Distribution Buffer addresses and the users normalized balance
                  drawCalculatorContract = contract_1(drawCalculatorAddress, PartialDrawCalculatorAbi, drawCalculatorAddress);
                  _context6.next = 20;
                  return batch_1(provider, drawCalculatorContract // @ts-ignore
                  .getDrawBuffer().getPrizeDistributionBuffer().getNormalizedBalancesForDrawIds(usersAddress, [drawId]));

                case 20:
                  response = _context6.sent;
                  drawBufferAddress = response[drawCalculatorAddress].getDrawBuffer[0];
                  prizeDistributionBufferAddress = response[drawCalculatorAddress].getPrizeDistributionBuffer[0];
                  normalizedBalance = response[drawCalculatorAddress].getNormalizedBalancesForDrawIds[0][0]; // If user had no balance, short circuit

                  if (!normalizedBalance.isZero()) {
                    _context6.next = 26;
                    break;
                  }

                  return _context6.abrupt("return", createEmptyDrawResult(drawId));

                case 26:
                  // Get the draw and prize distribution
                  drawBufferContract = contract_1(drawBufferAddress, PartialDrawBufferAbi, drawBufferAddress);
                  prizeDistributionBufferContract = contract_1(prizeDistributionBufferAddress, PartialPrizeDistributionBufferAbi, prizeDistributionBufferAddress);
                  _context6.next = 30;
                  return batch_1(provider, // @ts-ignore
                  drawBufferContract.getDraw(drawId), // @ts-ignore
                  prizeDistributionBufferContract.getPrizeDistribution(drawId));

                case 30:
                  response = _context6.sent;
                  draw = response[drawBufferAddress].getDraw[0];
                  prizeDistribution = response[prizeDistributionBufferAddress].getPrizeDistribution[0];
                  drawResults = computeUserWinningPicksForRandomNumber(draw.winningRandomNumber, prizeDistribution.bitRangeSize, prizeDistribution.matchCardinality, prizeDistribution.numberOfPicks, prizeDistribution.prize, prizeDistribution.tiers, usersAddress, normalizedBalance, draw.drawId);
                  return _context6.abrupt("return", index$1.filterResultsByValue(drawResults, prizeDistribution.maxPicksPerUser));

                case 35:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, null, [[6, 13]]);
        }));

        function computeDrawResults(_x22, _x23, _x24, _x25) {
          return _computeDrawResults.apply(this, arguments);
        }

        return computeDrawResults;
      }()
      /**
       * Checks the status of a particular draw and returns true if the data is available for the requested draw.
       * @param chainId
       * @param prizeDistributorAddress
       * @param drawId
       * @returns
       */
      ;

      PrizeApi.checkPrizeApiStatus =
      /*#__PURE__*/
      function () {
        var _checkPrizeApiStatus = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(chainId, prizeDistributorAddress, drawId) {
          var response, requestStatus, drawResultsStatusJson;
          return runtime_1.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  _context7.next = 2;
                  return fetch(this.getDrawResultsStatusUrl(chainId, prizeDistributorAddress, drawId));

                case 2:
                  response = _context7.sent;
                  requestStatus = response.status;

                  if (!(requestStatus !== 200)) {
                    _context7.next = 6;
                    break;
                  }

                  throw new Error("PrizeApi | Draw " + drawId + " for Prize Distributor " + prizeDistributorAddress + " on " + chainId + " calculation status not found.");

                case 6:
                  _context7.next = 8;
                  return response.json();

                case 8:
                  drawResultsStatusJson = _context7.sent;

                  if (!(drawResultsStatusJson.cliStatus !== undefined)) {
                    _context7.next = 11;
                    break;
                  }

                  return _context7.abrupt("return", drawResultsStatusJson.cliStatus === 'ok');

                case 11:
                  return _context7.abrupt("return", drawResultsStatusJson.status === PrizeApiStatus.success);

                case 12:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));

        function checkPrizeApiStatus(_x26, _x27, _x28) {
          return _checkPrizeApiStatus.apply(this, arguments);
        }

        return checkPrizeApiStatus;
      }() // URLs

      /**
       * Returns the URL for pre-calculated prizes from the Prize API
       * TODO: Fix the casing functions once Kames fixes the bug
       * @param chainId
       * @param prizeDistributorAddress
       * @param usersAddress
       * @param drawId
       * @returns
       */
      ;

      PrizeApi.getDrawResultsUrl = function getDrawResultsUrl(chainId, prizeDistributorAddress, usersAddress, drawId) {
        return "https://api.pooltogether.com/prizes/" + chainId + "/" + prizeDistributorAddress.toLowerCase() + "/draw/" + drawId + "/" + usersAddress.toLowerCase() + ".json";
      }
      /**
       * Returns the URL for the status of the calculations for the draw requested from the Prize API
       * @param chainId
       * @param prizeDistributorAddress
       * @param usersAddress
       * @param drawId
       * @returns
       */
      ;

      PrizeApi.getDrawResultsStatusUrl = function getDrawResultsStatusUrl(chainId, prizeDistributorAddress, drawId) {
        return "https://api.pooltogether.com/prizes/" + chainId + "/" + prizeDistributorAddress.toLowerCase() + "/draw/" + drawId + "/status.json";
      }
      /**
       * Returns the URL for the status of the calculations for the draw requested from the Prize API
       * @param chainId
       * @param prizeDistributorAddress
       * @param usersAddress
       * @param drawId
       * @returns
       */
      ;

      PrizeApi.getAllPrizesUrl = function getAllPrizesUrl(chainId, prizeDistributorAddress, drawId) {
        return "https://api.pooltogether.com/prizes/" + chainId + "/" + prizeDistributorAddress.toLowerCase() + "/draw/" + drawId + "/prizes.json";
      }
      /**
       * Returns the URL that the prizes can be calculated at on CloudFlare
       * @param chainId
       * @param prizeDistributorAddress
       * @param usersAddress
       * @param drawId
       * @returns
       */
      ;

      PrizeApi.getCloudFlareDrawResultsUrl = function getCloudFlareDrawResultsUrl(chainId, prizeDistributorAddress, usersAddress, drawId) {
        return "https://tsunami-prizes-production.pooltogether-api.workers.dev/" + chainId + "/" + prizeDistributorAddress + "/prizes/" + usersAddress + "/" + drawId + "/";
      };

      return PrizeApi;
    }(); // Partial ABIs with the minimal interfaces to fetch the required data for computing prizes

    var PartialPrizeDistributorAbi = [{
      inputs: [],
      name: 'getDrawCalculator',
      outputs: [{
        internalType: 'contract IDrawCalculator',
        name: '',
        type: 'address'
      }],
      stateMutability: 'view',
      type: 'function'
    }];
    var PartialDrawCalculatorTimelockAbi = [{
      inputs: [],
      name: 'getDrawCalculator',
      outputs: [{
        internalType: 'contract IDrawCalculator',
        name: '',
        type: 'address'
      }],
      stateMutability: 'view',
      type: 'function'
    }];
    var PartialDrawCalculatorAbi = [{
      inputs: [{
        internalType: 'address',
        name: '_user',
        type: 'address'
      }, {
        internalType: 'uint32[]',
        name: '_drawIds',
        type: 'uint32[]'
      }],
      name: 'getNormalizedBalancesForDrawIds',
      outputs: [{
        internalType: 'uint256[]',
        name: '',
        type: 'uint256[]'
      }],
      stateMutability: 'view',
      type: 'function'
    }, {
      inputs: [],
      name: 'getPrizeDistributionBuffer',
      outputs: [{
        internalType: 'contract IPrizeDistributionBuffer',
        name: '',
        type: 'address'
      }],
      stateMutability: 'view',
      type: 'function'
    }, {
      inputs: [],
      name: 'getDrawBuffer',
      outputs: [{
        internalType: 'contract IDrawBuffer',
        name: '',
        type: 'address'
      }],
      stateMutability: 'view',
      type: 'function'
    }];
    var PartialDrawBufferAbi = [{
      inputs: [{
        internalType: 'uint32',
        name: 'drawId',
        type: 'uint32'
      }],
      name: 'getDraw',
      outputs: [{
        components: [{
          internalType: 'uint256',
          name: 'winningRandomNumber',
          type: 'uint256'
        }, {
          internalType: 'uint32',
          name: 'drawId',
          type: 'uint32'
        }, {
          internalType: 'uint64',
          name: 'timestamp',
          type: 'uint64'
        }, {
          internalType: 'uint64',
          name: 'beaconPeriodStartedAt',
          type: 'uint64'
        }, {
          internalType: 'uint32',
          name: 'beaconPeriodSeconds',
          type: 'uint32'
        }],
        internalType: 'struct IDrawBeacon.Draw',
        name: '',
        type: 'tuple'
      }],
      stateMutability: 'view',
      type: 'function'
    }];
    var PartialPrizeDistributionBufferAbi = [{
      inputs: [{
        internalType: 'uint32',
        name: '_drawId',
        type: 'uint32'
      }],
      name: 'getPrizeDistribution',
      outputs: [{
        components: [{
          internalType: 'uint8',
          name: 'bitRangeSize',
          type: 'uint8'
        }, {
          internalType: 'uint8',
          name: 'matchCardinality',
          type: 'uint8'
        }, {
          internalType: 'uint32',
          name: 'startTimestampOffset',
          type: 'uint32'
        }, {
          internalType: 'uint32',
          name: 'endTimestampOffset',
          type: 'uint32'
        }, {
          internalType: 'uint32',
          name: 'maxPicksPerUser',
          type: 'uint32'
        }, {
          internalType: 'uint32',
          name: 'expiryDuration',
          type: 'uint32'
        }, {
          internalType: 'uint104',
          name: 'numberOfPicks',
          type: 'uint104'
        }, {
          internalType: 'uint32[16]',
          name: 'tiers',
          type: 'uint32[16]'
        }, {
          internalType: 'uint256',
          name: 'prize',
          type: 'uint256'
        }],
        internalType: 'struct IPrizeDistributionBuffer.PrizeDistribution',
        name: '',
        type: 'tuple'
      }],
      stateMutability: 'view',
      type: 'function'
    }];

    /**
     * A Prize Distributor.
     * Provides access to the contracts for viewing expiration times on draws, timelock timers and checking/claiming prizes for a user. Can be instantiated with an ethers Signer or Provider. Use a Signer if you want to claim transactions for a user. If a provider is provided, only read methods are available.
     */

    var PrizeDistributor = /*#__PURE__*/function () {
      /**
       * Create an instance of a PrizeDistributor by providing the metadata of the PrizeDistributor contract, an ethers Provider or Signer for the network the PrizeDistributor contract is deployed on and a list of contract metadata for the other contracts that make up the PrizeDistributor.
       * @param prizeDistributorMetadata
       * @param signerOrProvider
       * @param contractMetadataList
       */
      function PrizeDistributor(prizeDistributorMetadata, signerOrProvider, contractMetadataList) {
        // Get contract metadata & ethers contracts
        var _getMetadataAndContra = getMetadataAndContract(prizeDistributorMetadata.chainId, signerOrProvider, ContractType.DrawCalculatorTimelock, contractMetadataList),
            drawCalculatorTimelockMetadata = _getMetadataAndContra.contractMetadata,
            drawCalculatorTimelockContract = _getMetadataAndContra.contract;

        var prizeDistributorContract = new Contract(prizeDistributorMetadata.address, prizeDistributorMetadata.abi, signerOrProvider); // Set data

        this.signerOrProvider = signerOrProvider;
        this.contractMetadataList = contractMetadataList;
        this.chainId = prizeDistributorMetadata.chainId;
        this.address = prizeDistributorMetadata.address; // Set metadata

        this.prizeDistributorMetadata = prizeDistributorMetadata;
        this.drawCalculatorTimelockMetadata = drawCalculatorTimelockMetadata; // Set ethers contracts

        this.prizeDistributorContract = prizeDistributorContract;
        this.drawCalculatorTimelockContract = drawCalculatorTimelockContract; // Initialized later - requires a fetch

        this.drawCalculatorMetadata = undefined;
        this.drawCalculatorContract = undefined;
        this.drawBufferMetadata = undefined;
        this.drawBufferContract = undefined;
        this.prizeDistributionsBufferMetadata = undefined;
        this.prizeDistributionsBufferContract = undefined;
        this.prizeTierHistoryMetadata = undefined;
        this.prizeTierHistoryContract = undefined;
      }
      /**
       * Returns a unique id string for this PrizeDistributor.
       * @returns a unique id for the PrizeDistributor
       */


      var _proto = PrizeDistributor.prototype;

      _proto.id = function id() {
        return this.prizeDistributorMetadata.address + "-" + this.prizeDistributorMetadata.chainId;
      } //////////////////////////// Ethers write functions ////////////////////////////

      /**
       * Fetches a users prizes for the provided draw and submits a transaction to claim them to the Signer.
       * PrizeDistributor must be initialized with a Signer.
       * @param drawId the draw id to claim prizes for
       * @param maxPicksPerUser the maximum picks per user from the PrizeDistribution for the provided draw id
       * @param overrides optional overrides for the transaction creation
       * @returns the transaction response
       */
      ;

      _proto.claimPrizesByDraw =
      /*#__PURE__*/
      function () {
        var _claimPrizesByDraw = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(drawId, maxPicksPerUser, overrides) {
          var errorPrefix, usersAddress, drawResults;
          return runtime_1.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  errorPrefix = 'PrizeDistributors [claim] | ';
                  _context.next = 3;
                  return this.getUsersAddress(errorPrefix);

                case 3:
                  usersAddress = _context.sent;
                  _context.next = 6;
                  return this.getUsersDrawResultsForDrawId(usersAddress, drawId, maxPicksPerUser);

                case 6:
                  drawResults = _context.sent;
                  return _context.abrupt("return", this.claimPrizesByDrawResults(drawResults, overrides));

                case 8:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function claimPrizesByDraw(_x, _x2, _x3) {
          return _claimPrizesByDraw.apply(this, arguments);
        }

        return claimPrizesByDraw;
      }()
      /**
       * Submits a transaction to claim a users prizes
       * PrizeDistributor must be initialized with a Signer.
       * @param drawResults the prize results for a user for a specific draw
       * @param overrides optional overrides for the transaction creation
       * @returns the transaction response
       */
      ;

      _proto.claimPrizesByDrawResults =
      /*#__PURE__*/
      function () {
        var _claimPrizesByDrawResults = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(drawResults, overrides) {
          var errorPrefix, usersAddress, claim;
          return runtime_1.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  errorPrefix = 'PrizeDistributors [claimPrizes] | ';
                  _context2.next = 3;
                  return this.getUsersAddress(errorPrefix);

                case 3:
                  usersAddress = _context2.sent;
                  _context2.next = 6;
                  return this.validateSignerNetwork(errorPrefix);

                case 6:
                  if (!drawResults.totalValue.isZero()) {
                    _context2.next = 8;
                    break;
                  }

                  throw new Error(errorPrefix + 'No prizes to claim.');

                case 8:
                  claim = encodeWinningPicks(usersAddress, [drawResults]);

                  if (!Boolean(overrides)) {
                    _context2.next = 13;
                    break;
                  }

                  return _context2.abrupt("return", this.prizeDistributorContract.claim(claim.userAddress, claim.drawIds, claim.encodedWinningPickIndices, overrides));

                case 13:
                  return _context2.abrupt("return", this.prizeDistributorContract.claim(claim.userAddress, claim.drawIds, claim.encodedWinningPickIndices));

                case 14:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function claimPrizesByDrawResults(_x4, _x5) {
          return _claimPrizesByDrawResults.apply(this, arguments);
        }

        return claimPrizesByDrawResults;
      }()
      /**
       * Submits a transaction to claim a users prizes across multiple draws
       * PrizeDistributor must be initialized with a Signer.
       * @param drawResults an object of the users draw results to claim keyed by draw ids
       * @param overrides optional overrides for the transaction creation
       * @returns the transaction response
       */
      ;

      _proto.claimPrizesAcrossMultipleDrawsByDrawResults =
      /*#__PURE__*/
      function () {
        var _claimPrizesAcrossMultipleDrawsByDrawResults = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(drawResults, overrides) {
          var errorPrefix, usersAddress, drawResultsList, totalValueToClaim, claim;
          return runtime_1.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  errorPrefix = 'PrizeDistributors [claimPrizes] | ';
                  _context3.next = 3;
                  return this.getUsersAddress(errorPrefix);

                case 3:
                  usersAddress = _context3.sent;
                  _context3.next = 6;
                  return this.validateSignerNetwork(errorPrefix);

                case 6:
                  drawResultsList = Object.values(drawResults);
                  totalValueToClaim = drawResultsList.reduce(function (total, drawResult) {
                    return total.add(drawResult.totalValue);
                  }, BigNumber.from(0));

                  if (!totalValueToClaim.isZero()) {
                    _context3.next = 10;
                    break;
                  }

                  throw new Error(errorPrefix + 'No prizes to claim.');

                case 10:
                  claim = encodeWinningPicks(usersAddress, drawResultsList);

                  if (!Boolean(overrides)) {
                    _context3.next = 15;
                    break;
                  }

                  return _context3.abrupt("return", this.prizeDistributorContract.claim(claim.userAddress, claim.drawIds, claim.encodedWinningPickIndices, overrides));

                case 15:
                  return _context3.abrupt("return", this.prizeDistributorContract.claim(claim.userAddress, claim.drawIds, claim.encodedWinningPickIndices));

                case 16:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function claimPrizesAcrossMultipleDrawsByDrawResults(_x6, _x7) {
          return _claimPrizesAcrossMultipleDrawsByDrawResults.apply(this, arguments);
        }

        return claimPrizesAcrossMultipleDrawsByDrawResults;
      }() //////////////////////////// Ethers read functions ////////////////////////////

      /**
       * Fetches the upcoming prize tier data from the prize tier history contract. This data is used for the next prize distribution that will be added to the Prize Distribution Buffer for the beacon Prize Pool.
       * @returns the upcoming prize tier
       */
      ;

      _proto.getUpcomingPrizeTier =
      /*#__PURE__*/
      function () {
        var _getUpcomingPrizeTier = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {
          var prizeTierHistoryContract, _yield$prizeTierHisto, drawId, result, prizeTier;

          return runtime_1.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return this.getPrizeTierHistoryContract();

                case 2:
                  prizeTierHistoryContract = _context4.sent;
                  _context4.next = 5;
                  return prizeTierHistoryContract.functions.getNewestDrawId();

                case 5:
                  _yield$prizeTierHisto = _context4.sent;
                  drawId = _yield$prizeTierHisto[0];
                  _context4.next = 9;
                  return prizeTierHistoryContract.functions.getPrizeTier(drawId);

                case 9:
                  result = _context4.sent;
                  prizeTier = {
                    bitRangeSize: result[0].bitRangeSize,
                    expiryDuration: result[0].expiryDuration,
                    maxPicksPerUser: result[0].maxPicksPerUser,
                    prize: result[0].prize,
                    tiers: result[0].tiers,
                    endTimestampOffset: result[0].endTimestampOffset,
                    drawId: result[0].drawId,
                    dpr: result[0].dpr
                  };
                  return _context4.abrupt("return", prizeTier);

                case 12:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function getUpcomingPrizeTier() {
          return _getUpcomingPrizeTier.apply(this, arguments);
        }

        return getUpcomingPrizeTier;
      }()
      /**
       * Fetches decimals, name and symbol for the Token that will be distributed.
       * @returns the decimals, name and symbol for the token
       */
      ;

      _proto.getTokenData =
      /*#__PURE__*/
      function () {
        var _getTokenData2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5() {
          var tokenContract;
          return runtime_1.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return this.getTokenContract();

                case 2:
                  tokenContract = _context5.sent;
                  return _context5.abrupt("return", getTokenData(tokenContract));

                case 4:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function getTokenData$1() {
          return _getTokenData2.apply(this, arguments);
        }

        return getTokenData$1;
      }()
      /**
       * Fetches the newest Draw in the DrawBuffer related to the PrizeDistributor.
       * NOTE: Will throw an error if the buffer is empty.
       * @returns the newest draw in the draw buffer
       */
      ;

      _proto.getNewestDraw =
      /*#__PURE__*/
      function () {
        var _getNewestDraw = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6() {
          var drawBufferContract, result, draw;
          return runtime_1.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _context6.next = 2;
                  return this.getDrawBufferContract();

                case 2:
                  drawBufferContract = _context6.sent;
                  _context6.next = 5;
                  return drawBufferContract.functions.getNewestDraw();

                case 5:
                  result = _context6.sent;
                  draw = result[0];
                  return _context6.abrupt("return", {
                    drawId: draw.drawId,
                    timestamp: draw.timestamp,
                    winningRandomNumber: draw.winningRandomNumber,
                    beaconPeriodStartedAt: draw.beaconPeriodStartedAt,
                    beaconPeriodSeconds: draw.beaconPeriodSeconds
                  });

                case 8:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function getNewestDraw() {
          return _getNewestDraw.apply(this, arguments);
        }

        return getNewestDraw;
      }()
      /**
       * Fetches the oldest Draw in the DrawBuffer related to the PrizeDistributor.
       * @returns the oldest draw in the draw buffer
       */
      ;

      _proto.getOldestDraw =
      /*#__PURE__*/
      function () {
        var _getOldestDraw = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7() {
          var drawBufferContract, result, draw;
          return runtime_1.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  _context7.next = 2;
                  return this.getDrawBufferContract();

                case 2:
                  drawBufferContract = _context7.sent;
                  _context7.next = 5;
                  return drawBufferContract.functions.getOldestDraw();

                case 5:
                  result = _context7.sent;
                  draw = result[0];
                  return _context7.abrupt("return", {
                    drawId: draw.drawId,
                    timestamp: draw.timestamp,
                    winningRandomNumber: draw.winningRandomNumber,
                    beaconPeriodStartedAt: draw.beaconPeriodStartedAt,
                    beaconPeriodSeconds: draw.beaconPeriodSeconds
                  });

                case 8:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));

        function getOldestDraw() {
          return _getOldestDraw.apply(this, arguments);
        }

        return getOldestDraw;
      }()
      /**
       * Fetches the newest PrizeDistribution in the PrizeDistributionBuffer related to the PrizeDistributor.
       * NOTE: Will throw an error if the buffer is empty.
       * @returns the newest prize distribution in the prize distribution buffer
       */
      ;

      _proto.getNewestPrizeDistribution =
      /*#__PURE__*/
      function () {
        var _getNewestPrizeDistribution = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8() {
          var prizeDistributionBufferContract, result, prizeDistribution, drawId;
          return runtime_1.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  _context8.next = 2;
                  return this.getPrizeDistributionsBufferContract();

                case 2:
                  prizeDistributionBufferContract = _context8.sent;
                  _context8.next = 5;
                  return prizeDistributionBufferContract.functions.getNewestPrizeDistribution();

                case 5:
                  result = _context8.sent;
                  prizeDistribution = result[0];
                  drawId = result[1];
                  return _context8.abrupt("return", {
                    prizeDistribution: {
                      matchCardinality: prizeDistribution.matchCardinality,
                      numberOfPicks: prizeDistribution.numberOfPicks,
                      tiers: prizeDistribution.tiers,
                      bitRangeSize: prizeDistribution.bitRangeSize,
                      prize: prizeDistribution.prize,
                      startTimestampOffset: prizeDistribution.drawStartTimestampOffset,
                      endTimestampOffset: prizeDistribution.drawEndTimestampOffset,
                      maxPicksPerUser: prizeDistribution.maxPicksPerUser
                    },
                    drawId: drawId
                  });

                case 9:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8, this);
        }));

        function getNewestPrizeDistribution() {
          return _getNewestPrizeDistribution.apply(this, arguments);
        }

        return getNewestPrizeDistribution;
      }()
      /**
       * Fetches the oldest PrizeDistribution in the PrizeDistributionBuffer related to the PrizeDistributor.
       * @returns the oldest prize distribution in the prize distribution buffer
       */
      ;

      _proto.getOldestPrizeDistribution =
      /*#__PURE__*/
      function () {
        var _getOldestPrizeDistribution = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9() {
          var prizeDistributionBufferContract, result, prizeDistribution, drawId;
          return runtime_1.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  _context9.next = 2;
                  return this.getPrizeDistributionsBufferContract();

                case 2:
                  prizeDistributionBufferContract = _context9.sent;
                  _context9.next = 5;
                  return prizeDistributionBufferContract.functions.getOldestPrizeDistribution();

                case 5:
                  result = _context9.sent;
                  prizeDistribution = result[0];
                  drawId = result[1];
                  return _context9.abrupt("return", {
                    prizeDistribution: {
                      matchCardinality: prizeDistribution.matchCardinality,
                      numberOfPicks: prizeDistribution.numberOfPicks,
                      tiers: prizeDistribution.tiers,
                      bitRangeSize: prizeDistribution.bitRangeSize,
                      prize: prizeDistribution.prize,
                      startTimestampOffset: prizeDistribution.drawStartTimestampOffset,
                      endTimestampOffset: prizeDistribution.drawEndTimestampOffset,
                      maxPicksPerUser: prizeDistribution.maxPicksPerUser
                    },
                    drawId: drawId
                  });

                case 9:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9, this);
        }));

        function getOldestPrizeDistribution() {
          return _getOldestPrizeDistribution.apply(this, arguments);
        }

        return getOldestPrizeDistribution;
      }()
      /**
       * Fetches the id and end time stamp of the draw that is currently in the DrawCalcluatorTimelock.
       * @returns the draw id and the end time as a unix time stamp in seconds
       */
      ;

      _proto.getTimelockDrawId =
      /*#__PURE__*/
      function () {
        var _getTimelockDrawId = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10() {
          var drawCalculatorTimelockContract, timelockResult, _timelockResult$, endTimeSeconds, drawId;

          return runtime_1.wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  _context10.next = 2;
                  return this.getDrawCalculatorTimelockContract();

                case 2:
                  drawCalculatorTimelockContract = _context10.sent;

                  if (drawCalculatorTimelockContract) {
                    _context10.next = 5;
                    break;
                  }

                  return _context10.abrupt("return", null);

                case 5:
                  _context10.next = 7;
                  return drawCalculatorTimelockContract.functions.getTimelock();

                case 7:
                  timelockResult = _context10.sent;
                  _timelockResult$ = timelockResult[0], endTimeSeconds = _timelockResult$[0], drawId = _timelockResult$[1];
                  return _context10.abrupt("return", {
                    drawId: drawId,
                    endTimeSeconds: endTimeSeconds
                  });

                case 10:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee10, this);
        }));

        function getTimelockDrawId() {
          return _getTimelockDrawId.apply(this, arguments);
        }

        return getTimelockDrawId;
      }()
      /**
       * Fetches the range of draw ids that are available in the DrawBuffer.
       * @returns a list of draw ids in the buffer
       */
      ;

      _proto.getDrawIdsFromDrawBuffer =
      /*#__PURE__*/
      function () {
        var _getDrawIdsFromDrawBuffer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11() {
          var _yield$Promise$allSet, oldestDrawResponse, newestDrawResponse, oldestId, newestId, drawIds, i;

          return runtime_1.wrap(function _callee11$(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  _context11.next = 2;
                  return Promise.allSettled([this.getOldestDraw(), this.getNewestDraw()]);

                case 2:
                  _yield$Promise$allSet = _context11.sent;
                  oldestDrawResponse = _yield$Promise$allSet[0];
                  newestDrawResponse = _yield$Promise$allSet[1];

                  if (!(newestDrawResponse.status === 'rejected' || oldestDrawResponse.status === 'rejected')) {
                    _context11.next = 7;
                    break;
                  }

                  return _context11.abrupt("return", []);

                case 7:
                  oldestId = oldestDrawResponse.value.drawId;
                  newestId = newestDrawResponse.value.drawId;
                  drawIds = [];

                  for (i = oldestId; i <= newestId; i++) {
                    drawIds.push(i);
                  }

                  return _context11.abrupt("return", drawIds);

                case 12:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee11, this);
        }));

        function getDrawIdsFromDrawBuffer() {
          return _getDrawIdsFromDrawBuffer.apply(this, arguments);
        }

        return getDrawIdsFromDrawBuffer;
      }()
      /**
       * Fetches the range of draw ids for the prize distributions that are available in the PrizeDistributionBuffer.
       * @returns a list of draw ids in the buffer
       */
      ;

      _proto.getDrawIdsFromPrizeDistributionBuffer =
      /*#__PURE__*/
      function () {
        var _getDrawIdsFromPrizeDistributionBuffer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12() {
          var _yield$Promise$allSet2, oldestPrizeDistributionResponse, newestPrizeDistributionResponse, oldestId, newestId, drawIds, i;

          return runtime_1.wrap(function _callee12$(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  _context12.next = 2;
                  return Promise.allSettled([this.getOldestPrizeDistribution(), this.getNewestPrizeDistribution()]);

                case 2:
                  _yield$Promise$allSet2 = _context12.sent;
                  oldestPrizeDistributionResponse = _yield$Promise$allSet2[0];
                  newestPrizeDistributionResponse = _yield$Promise$allSet2[1];

                  if (!(newestPrizeDistributionResponse.status === 'rejected' || oldestPrizeDistributionResponse.status === 'rejected')) {
                    _context12.next = 7;
                    break;
                  }

                  return _context12.abrupt("return", []);

                case 7:
                  oldestId = oldestPrizeDistributionResponse.value.drawId;
                  newestId = newestPrizeDistributionResponse.value.drawId;
                  drawIds = [];

                  for (i = oldestId; i <= newestId; i++) {
                    drawIds.push(i);
                  }

                  return _context12.abrupt("return", drawIds);

                case 12:
                case "end":
                  return _context12.stop();
              }
            }
          }, _callee12, this);
        }));

        function getDrawIdsFromPrizeDistributionBuffer() {
          return _getDrawIdsFromPrizeDistributionBuffer.apply(this, arguments);
        }

        return getDrawIdsFromPrizeDistributionBuffer;
      }()
      /**
       * Gets the list of draw ids of draws that have are available in both the DrawBuffer and PrizeDistributionBuffer.
       * @returns a list of draw ids in both buffers
       */
      ;

      _proto.getValidDrawIds =
      /*#__PURE__*/
      function () {
        var _getValidDrawIds = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13() {
          var _yield$Promise$allSet3, oldestPrizeDistributionResponse, newestPrizeDistributionResponse, oldestDrawResponse, newestDrawResponse, oldestPrizeDistributionId, newestPrizeDistributionId, oldestDrawId, newestDrawId, newestIds, oldestId, newestId, validIds, i;

          return runtime_1.wrap(function _callee13$(_context13) {
            while (1) {
              switch (_context13.prev = _context13.next) {
                case 0:
                  _context13.next = 2;
                  return Promise.allSettled([this.getOldestPrizeDistribution(), this.getNewestPrizeDistribution(), this.getOldestDraw(), this.getNewestDraw()]);

                case 2:
                  _yield$Promise$allSet3 = _context13.sent;
                  oldestPrizeDistributionResponse = _yield$Promise$allSet3[0];
                  newestPrizeDistributionResponse = _yield$Promise$allSet3[1];
                  oldestDrawResponse = _yield$Promise$allSet3[2];
                  newestDrawResponse = _yield$Promise$allSet3[3];

                  if (!(oldestPrizeDistributionResponse.status === 'rejected' || newestPrizeDistributionResponse.status === 'rejected' || newestDrawResponse.status === 'rejected' || oldestDrawResponse.status === 'rejected')) {
                    _context13.next = 9;
                    break;
                  }

                  return _context13.abrupt("return", []);

                case 9:
                  oldestPrizeDistributionId = oldestPrizeDistributionResponse.value.drawId;
                  newestPrizeDistributionId = newestPrizeDistributionResponse.value.drawId;
                  oldestDrawId = oldestDrawResponse.value.drawId;
                  newestDrawId = newestDrawResponse.value.drawId;
                  newestIds = [newestDrawId, newestPrizeDistributionId];
                  oldestId = Math.max(oldestPrizeDistributionId, oldestDrawId);
                  newestId = Math.min.apply(Math, newestIds);

                  if (!(newestId < oldestId)) {
                    _context13.next = 18;
                    break;
                  }

                  return _context13.abrupt("return", []);

                case 18:
                  validIds = [];

                  for (i = oldestId; i <= newestId; i++) {
                    validIds.push(i);
                  }

                  return _context13.abrupt("return", validIds);

                case 21:
                case "end":
                  return _context13.stop();
              }
            }
          }, _callee13, this);
        }));

        function getValidDrawIds() {
          return _getValidDrawIds.apply(this, arguments);
        }

        return getValidDrawIds;
      }()
      /**
       * Fetches Draws and PrizeDistributions from their respective buffers for the provided list of draw ids.
       * @param drawIds the list of draw ids to fetch Draws and PrizeDistributions for
       * @returns an object full of Draws and PrizeDistributions keyed by their draw id
       */
      ;

      _proto.getDrawsAndPrizeDistributions =
      /*#__PURE__*/
      function () {
        var _getDrawsAndPrizeDistributions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14(drawIds) {
          var _yield$Promise$allSet4, drawsResponse, prizeDistributionsResponse, drawsAndPrizeDistributions;

          return runtime_1.wrap(function _callee14$(_context14) {
            while (1) {
              switch (_context14.prev = _context14.next) {
                case 0:
                  _context14.next = 2;
                  return Promise.allSettled([this.getDraws(drawIds), this.getPrizeDistributions(drawIds)]);

                case 2:
                  _yield$Promise$allSet4 = _context14.sent;
                  drawsResponse = _yield$Promise$allSet4[0];
                  prizeDistributionsResponse = _yield$Promise$allSet4[1];

                  if (!(drawsResponse.status === 'rejected' || prizeDistributionsResponse.status === 'rejected')) {
                    _context14.next = 7;
                    break;
                  }

                  return _context14.abrupt("return", this.getDrawsAndPrizeDistributions(drawIds.sort(function (a, b) {
                    return a - b;
                  }).slice(0, drawIds.length - 1)));

                case 7:
                  drawsAndPrizeDistributions = {};
                  Object.values(drawsResponse.value).forEach(function (draw, index) {
                    drawsAndPrizeDistributions[draw.drawId] = {
                      draw: draw,
                      prizeDistribution: prizeDistributionsResponse.value[index]
                    };
                  });
                  return _context14.abrupt("return", drawsAndPrizeDistributions);

                case 10:
                case "end":
                  return _context14.stop();
              }
            }
          }, _callee14, this);
        }));

        function getDrawsAndPrizeDistributions(_x8) {
          return _getDrawsAndPrizeDistributions.apply(this, arguments);
        }

        return getDrawsAndPrizeDistributions;
      }()
      /**
       * Fetches a Draw from the DrawBuffer.
       * @param drawId the draw id of the Draw to fetch
       * @returns the Draw
       */
      ;

      _proto.getDraw =
      /*#__PURE__*/
      function () {
        var _getDraw = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15(drawId) {
          var drawBufferContract, response;
          return runtime_1.wrap(function _callee15$(_context15) {
            while (1) {
              switch (_context15.prev = _context15.next) {
                case 0:
                  _context15.next = 2;
                  return this.getDrawBufferContract();

                case 2:
                  drawBufferContract = _context15.sent;
                  _context15.next = 5;
                  return drawBufferContract.functions.getDraw(drawId);

                case 5:
                  response = _context15.sent;
                  return _context15.abrupt("return", {
                    drawId: response[0].drawId,
                    timestamp: response[0].timestamp,
                    winningRandomNumber: response[0].winningRandomNumber,
                    beaconPeriodStartedAt: response[0].beaconPeriodStartedAt,
                    beaconPeriodSeconds: response[0].beaconPeriodSeconds
                  });

                case 7:
                case "end":
                  return _context15.stop();
              }
            }
          }, _callee15, this);
        }));

        function getDraw(_x9) {
          return _getDraw.apply(this, arguments);
        }

        return getDraw;
      }()
      /**
       * Fetches multiple Draws from the DrawBuffer.
       * @param drawIds a list of draw ids to fetch
       * @returns an object with Draws keyed by their draw ids
       */
      ;

      _proto.getDraws =
      /*#__PURE__*/
      function () {
        var _getDraws = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16(drawIds) {
          var draws, drawBufferContract, response;
          return runtime_1.wrap(function _callee16$(_context16) {
            while (1) {
              switch (_context16.prev = _context16.next) {
                case 0:
                  draws = {};

                  if (!(!drawIds || drawIds.length === 0)) {
                    _context16.next = 3;
                    break;
                  }

                  return _context16.abrupt("return", draws);

                case 3:
                  _context16.next = 5;
                  return this.getDrawBufferContract();

                case 5:
                  drawBufferContract = _context16.sent;
                  _context16.next = 8;
                  return drawBufferContract.functions.getDraws(drawIds);

                case 8:
                  response = _context16.sent;
                  response[0].forEach(function (draw) {
                    draws[draw.drawId] = {
                      drawId: draw.drawId,
                      timestamp: draw.timestamp,
                      winningRandomNumber: draw.winningRandomNumber,
                      beaconPeriodStartedAt: draw.beaconPeriodStartedAt,
                      beaconPeriodSeconds: draw.beaconPeriodSeconds
                    };
                  });
                  return _context16.abrupt("return", draws);

                case 11:
                case "end":
                  return _context16.stop();
              }
            }
          }, _callee16, this);
        }));

        function getDraws(_x10) {
          return _getDraws.apply(this, arguments);
        }

        return getDraws;
      }()
      /**
       * Fetches a PrizeDistribution from the PrizeDistributionBuffer.
       * @param drawId the draw id for the PrizeDistribution to fetch
       * @returns the PrizeDistribution
       */
      ;

      _proto.getPrizeDistribution =
      /*#__PURE__*/
      function () {
        var _getPrizeDistribution = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee17(drawId) {
          var prizeDistributionsBufferContract, result;
          return runtime_1.wrap(function _callee17$(_context17) {
            while (1) {
              switch (_context17.prev = _context17.next) {
                case 0:
                  _context17.next = 2;
                  return this.getPrizeDistributionsBufferContract();

                case 2:
                  prizeDistributionsBufferContract = _context17.sent;
                  _context17.next = 5;
                  return prizeDistributionsBufferContract.functions.getPrizeDistribution(drawId);

                case 5:
                  result = _context17.sent;
                  return _context17.abrupt("return", {
                    matchCardinality: result[0].matchCardinality,
                    tiers: result[0].tiers,
                    bitRangeSize: result[0].bitRangeSize,
                    maxPicksPerUser: result[0].maxPicksPerUser,
                    numberOfPicks: result[0].numberOfPicks,
                    expiryDuration: result[0].expiryDuration,
                    prize: result[0].prize,
                    startTimestampOffset: result[0].startTimestampOffset,
                    endTimestampOffset: result[0].endTimestampOffset
                  });

                case 7:
                case "end":
                  return _context17.stop();
              }
            }
          }, _callee17, this);
        }));

        function getPrizeDistribution(_x11) {
          return _getPrizeDistribution.apply(this, arguments);
        }

        return getPrizeDistribution;
      }()
      /**
       * Fetches multiple PrizeDistributions from the PrizeDistributionBuffer.
       * @param drawIds a list of draw ids to fetch PrizeDistributions for
       * @returns an object with PrizeDistributions keyed by draw ids
       */
      ;

      _proto.getPrizeDistributions =
      /*#__PURE__*/
      function () {
        var _getPrizeDistributions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee18(drawIds) {
          var prizeDistributionsBufferContract, prizeDistributionsResults, prizeDistributions;
          return runtime_1.wrap(function _callee18$(_context18) {
            while (1) {
              switch (_context18.prev = _context18.next) {
                case 0:
                  if (!(!drawIds || drawIds.length === 0)) {
                    _context18.next = 2;
                    break;
                  }

                  return _context18.abrupt("return", {});

                case 2:
                  _context18.next = 4;
                  return this.getPrizeDistributionsBufferContract();

                case 4:
                  prizeDistributionsBufferContract = _context18.sent;
                  _context18.next = 7;
                  return prizeDistributionsBufferContract.functions.getPrizeDistributions(drawIds);

                case 7:
                  prizeDistributionsResults = _context18.sent;
                  prizeDistributions = {};
                  prizeDistributionsResults[0].forEach(function (result, index) {
                    prizeDistributions[drawIds[index]] = {
                      matchCardinality: result.matchCardinality,
                      tiers: result.tiers,
                      bitRangeSize: result.bitRangeSize,
                      maxPicksPerUser: result.maxPicksPerUser,
                      numberOfPicks: result.numberOfPicks,
                      prize: result.prize,
                      expiryDuration: result.expiryDuration,
                      startTimestampOffset: result.startTimestampOffset,
                      endTimestampOffset: result.endTimestampOffset
                    };
                  });
                  return _context18.abrupt("return", prizeDistributions);

                case 11:
                case "end":
                  return _context18.stop();
              }
            }
          }, _callee18, this);
        }));

        function getPrizeDistributions(_x12) {
          return _getPrizeDistributions.apply(this, arguments);
        }

        return getPrizeDistributions;
      }()
      /**
       * Fetches the amount of tokens a user claimed for a draw.
       * @param usersAddress the address of the user to check
       * @param drawId the draw id to check
       * @returns the amount a user claimed
       */
      ;

      _proto.getUsersClaimedAmount =
      /*#__PURE__*/
      function () {
        var _getUsersClaimedAmount = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee19(usersAddress, drawId) {
          var errorPrefix, result;
          return runtime_1.wrap(function _callee19$(_context19) {
            while (1) {
              switch (_context19.prev = _context19.next) {
                case 0:
                  errorPrefix = 'PrizeDistributors [getUsersClaimedAmount] |';
                  _context19.next = 3;
                  return validateAddress(errorPrefix, usersAddress);

                case 3:
                  _context19.next = 5;
                  return this.prizeDistributorContract.functions.getDrawPayoutBalanceOf(usersAddress, drawId);

                case 5:
                  result = _context19.sent;
                  return _context19.abrupt("return", result[0]);

                case 7:
                case "end":
                  return _context19.stop();
              }
            }
          }, _callee19, this);
        }));

        function getUsersClaimedAmount(_x13, _x14) {
          return _getUsersClaimedAmount.apply(this, arguments);
        }

        return getUsersClaimedAmount;
      }()
      /**
       * Fetches the amount of tokens a user claimed for multiple draws.
       * @param usersAddress the address of the user to check
       * @param drawIds a list of draw ids to check
       * @returns an object of claimed amounts keyed by the draw ids
       */
      ;

      _proto.getUsersClaimedAmounts =
      /*#__PURE__*/
      function () {
        var _getUsersClaimedAmounts = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee20(usersAddress, drawIds) {
          var _this = this;

          var claimedAmounts;
          return runtime_1.wrap(function _callee20$(_context20) {
            while (1) {
              switch (_context20.prev = _context20.next) {
                case 0:
                  claimedAmounts = {};
                  _context20.next = 3;
                  return Promise.all(drawIds.map(function (drawId) {
                    return _this.getUsersClaimedAmount(usersAddress, drawId).then(function (claimedAmount) {
                      claimedAmounts[drawId] = claimedAmount;
                    });
                  }));

                case 3:
                  return _context20.abrupt("return", claimedAmounts);

                case 4:
                case "end":
                  return _context20.stop();
              }
            }
          }, _callee20);
        }));

        function getUsersClaimedAmounts(_x15, _x16) {
          return _getUsersClaimedAmounts.apply(this, arguments);
        }

        return getUsersClaimedAmounts;
      }()
      /**
       * Fetches a users normalized balance for several draw ids.
       * @param usersAddress the address of a user to fetch normalized balances for
       * @param drawIds a list of draw ids to fetch normalized balances for
       * @returns an object of normalized balances keyed by draw ids
       */
      ;

      _proto.getUsersNormalizedBalancesForDrawIds =
      /*#__PURE__*/
      function () {
        var _getUsersNormalizedBalancesForDrawIds = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee21(usersAddress, drawIds) {
          var errorPrefix, drawCalculatorContract, result;
          return runtime_1.wrap(function _callee21$(_context21) {
            while (1) {
              switch (_context21.prev = _context21.next) {
                case 0:
                  errorPrefix = 'PrizeDistributors [getUsersNormalizedBalancesForDrawIds] |';
                  _context21.next = 3;
                  return validateAddress(errorPrefix, usersAddress);

                case 3:
                  _context21.next = 5;
                  return this.getDrawCalculatorContract();

                case 5:
                  drawCalculatorContract = _context21.sent;
                  _context21.next = 8;
                  return drawCalculatorContract.functions.getNormalizedBalancesForDrawIds(usersAddress, drawIds);

                case 8:
                  result = _context21.sent;
                  return _context21.abrupt("return", result[0]);

                case 10:
                case "end":
                  return _context21.stop();
              }
            }
          }, _callee21, this);
        }));

        function getUsersNormalizedBalancesForDrawIds(_x17, _x18) {
          return _getUsersNormalizedBalancesForDrawIds.apply(this, arguments);
        }

        return getUsersNormalizedBalancesForDrawIds;
      }()
      /**
       * Fetches the claimable prizes a user won for a specific Draw.
       * @param usersAddress the users address to fetch prizes for
       * @param drawId the draw id to fetch prizes for
       * @param maxPicksPerUser the maximum number of picks per user from the matching prize distribution
       * @returns the results for user for the provided draw
       */
      ;

      _proto.getUsersDrawResultsForDrawId =
      /*#__PURE__*/
      function () {
        var _getUsersDrawResultsForDrawId = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee22(usersAddress, drawId, maxPicksPerUser) {
          return runtime_1.wrap(function _callee22$(_context22) {
            while (1) {
              switch (_context22.prev = _context22.next) {
                case 0:
                  return _context22.abrupt("return", PrizeApi.getUsersDrawResultsByDraw(this.chainId, usersAddress, this.prizeDistributorMetadata.address, drawId, maxPicksPerUser));

                case 1:
                case "end":
                  return _context22.stop();
              }
            }
          }, _callee22, this);
        }));

        function getUsersDrawResultsForDrawId(_x19, _x20, _x21) {
          return _getUsersDrawResultsForDrawId.apply(this, arguments);
        }

        return getUsersDrawResultsForDrawId;
      }()
      /**
       * Fetches the claimable prizes a user won for multiple Draws.
       * @param usersAddress the users address to fetch prizes for
       * @param drawIds the draw ids to fetch prizes for
       * @param maxPicksPerUserPerDraw the maximum number of picks per user from the matching prize distribution for each draw
       * @returns the results for user for the provided draw
       */
      ;

      _proto.getUsersDrawResultsForDrawIds =
      /*#__PURE__*/
      function () {
        var _getUsersDrawResultsForDrawIds = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee23(usersAddress, drawIds, maxPicksPerUserPerDraw) {
          return runtime_1.wrap(function _callee23$(_context23) {
            while (1) {
              switch (_context23.prev = _context23.next) {
                case 0:
                  return _context23.abrupt("return", PrizeApi.getUsersDrawResultsByDraws(this.chainId, usersAddress, this.prizeDistributorMetadata.address, drawIds, maxPicksPerUserPerDraw));

                case 1:
                case "end":
                  return _context23.stop();
              }
            }
          }, _callee23, this);
        }));

        function getUsersDrawResultsForDrawIds(_x22, _x23, _x24) {
          return _getUsersDrawResultsForDrawIds.apply(this, arguments);
        }

        return getUsersDrawResultsForDrawIds;
      }() // NOTE: Claimed event functions commented out as events on networks other than Ethereum mainnet are unreliable.

      /**
       *
       * @param usersAddress
       * @returns
       */
      // async getUsersClaimedEvents(usersAddress: string) {
      //   const errorPrefix = 'PrizeDistributors [getUsersClaimedEvents] |'
      //   await validateAddress(errorPrefix, usersAddress)
      //   const eventFilter = this.prizeDistributorContract.filters.ClaimedDraw(usersAddress)
      //   return await this.prizeDistributorContract.queryFilter(eventFilter)
      // }

      /**
       *
       * @param usersAddress
       * @param draw
       * @returns
       */
      // async getUsersClaimedEvent(usersAddress: string, draw: Draw): Promise<Event> {
      //   const eventFilter = this.prizeDistributorContract.filters.ClaimedDraw(usersAddress, draw.drawId)
      //   const events = await this.prizeDistributorContract.queryFilter(eventFilter)
      //   return events[0]
      // }
      //////////////////////////// Ethers Contracts Initializers ////////////////////////////

      /**
       * Fetches a contract address, finds the relevant metadata in the ContractList and creates an ethers Contract for that contract. The ethers Contract is cached on the instance of the PrizeDistributor and is returned immediately if already stored.
       * @param key the key for the requested contract to be stored on the PrizeDistributor
       * @param contractType the contract name
       * @param getContractAddress a function to fetch the contract address
       * @returns an ethers Contract for the provided address and contract type
       */
      ;

      _proto.getAndSetEthersContract =
      /*#__PURE__*/
      function () {
        var _getAndSetEthersContract = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee24(key, contractType, getContractAddress) {
          var contractKey, metadataKey, contractAddress, _getMetadataAndContra2, contractMetadata, contract;

          return runtime_1.wrap(function _callee24$(_context24) {
            while (1) {
              switch (_context24.prev = _context24.next) {
                case 0:
                  contractKey = key + "Contract";
                  metadataKey = key + "Metadata"; // @ts-ignore

                  if (!(this[contractKey] !== undefined)) {
                    _context24.next = 4;
                    break;
                  }

                  return _context24.abrupt("return", this[contractKey]);

                case 4:
                  _context24.next = 6;
                  return getContractAddress();

                case 6:
                  contractAddress = _context24.sent;
                  _getMetadataAndContra2 = getMetadataAndContract(this.chainId, this.signerOrProvider, contractType, this.contractMetadataList, contractAddress), contractMetadata = _getMetadataAndContra2.contractMetadata, contract = _getMetadataAndContra2.contract; // @ts-ignore

                  this[metadataKey] = contractMetadata; // @ts-ignore

                  this[contractKey] = contract;
                  return _context24.abrupt("return", contract);

                case 11:
                case "end":
                  return _context24.stop();
              }
            }
          }, _callee24, this);
        }));

        function getAndSetEthersContract(_x25, _x26, _x27) {
          return _getAndSetEthersContract.apply(this, arguments);
        }

        return getAndSetEthersContract;
      }()
      /**
       * Fetches the address of the DrawCalculator and caches the ethers Contract for the DrawCalculator
       * @returns an ethers Contract for the DrawCalculator related to this PrizeDistributor
       */
      ;

      _proto.getDrawCalculatorContract =
      /*#__PURE__*/
      function () {
        var _getDrawCalculatorContract = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee26() {
          var _this2 = this;

          var getAddress;
          return runtime_1.wrap(function _callee26$(_context26) {
            while (1) {
              switch (_context26.prev = _context26.next) {
                case 0:
                  getAddress = /*#__PURE__*/function () {
                    var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee25() {
                      var result, address, contractMetadata, drawCalculatorTimelockContract;
                      return runtime_1.wrap(function _callee25$(_context25) {
                        while (1) {
                          switch (_context25.prev = _context25.next) {
                            case 0:
                              _context25.next = 2;
                              return _this2.prizeDistributorContract.functions.getDrawCalculator();

                            case 2:
                              result = _context25.sent;
                              address = result[0];
                              contractMetadata = _this2.contractMetadataList.find(function (contractMetadata) {
                                return contractMetadata.chainId === _this2.chainId && contractMetadata.address === address;
                              });

                              if (!((contractMetadata == null ? void 0 : contractMetadata.type) === ContractType.DrawCalculatorTimelock)) {
                                _context25.next = 14;
                                break;
                              }

                              drawCalculatorTimelockContract = new Contract(address, contractMetadata.abi, _this2.signerOrProvider);
                              _context25.next = 9;
                              return drawCalculatorTimelockContract.functions.getDrawCalculator();

                            case 9:
                              result = _context25.sent;
                              address = result[0];
                              return _context25.abrupt("return", address);

                            case 14:
                              return _context25.abrupt("return", address);

                            case 15:
                            case "end":
                              return _context25.stop();
                          }
                        }
                      }, _callee25);
                    }));

                    return function getAddress() {
                      return _ref.apply(this, arguments);
                    };
                  }();

                  return _context26.abrupt("return", this.getAndSetEthersContract('drawCalculator', ContractType.DrawCalculator, getAddress));

                case 2:
                case "end":
                  return _context26.stop();
              }
            }
          }, _callee26, this);
        }));

        function getDrawCalculatorContract() {
          return _getDrawCalculatorContract.apply(this, arguments);
        }

        return getDrawCalculatorContract;
      }()
      /**
       * Fetches the address of the DrawBuffer and caches the ethers Contract for the DrawBuffer.
       * @returns an ethers Contract for the DrawBuffer related to this PrizeDistributor
       */
      ;

      _proto.getDrawBufferContract =
      /*#__PURE__*/
      function () {
        var _getDrawBufferContract = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee28() {
          var _this3 = this;

          var getAddress;
          return runtime_1.wrap(function _callee28$(_context28) {
            while (1) {
              switch (_context28.prev = _context28.next) {
                case 0:
                  getAddress = /*#__PURE__*/function () {
                    var _ref2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee27() {
                      var drawCalculatorContract, result;
                      return runtime_1.wrap(function _callee27$(_context27) {
                        while (1) {
                          switch (_context27.prev = _context27.next) {
                            case 0:
                              _context27.next = 2;
                              return _this3.getDrawCalculatorContract();

                            case 2:
                              drawCalculatorContract = _context27.sent;
                              _context27.next = 5;
                              return drawCalculatorContract.functions.getDrawBuffer();

                            case 5:
                              result = _context27.sent;
                              return _context27.abrupt("return", result[0]);

                            case 7:
                            case "end":
                              return _context27.stop();
                          }
                        }
                      }, _callee27);
                    }));

                    return function getAddress() {
                      return _ref2.apply(this, arguments);
                    };
                  }();

                  return _context28.abrupt("return", this.getAndSetEthersContract('drawBuffer', ContractType.DrawBuffer, getAddress));

                case 2:
                case "end":
                  return _context28.stop();
              }
            }
          }, _callee28, this);
        }));

        function getDrawBufferContract() {
          return _getDrawBufferContract.apply(this, arguments);
        }

        return getDrawBufferContract;
      }()
      /**
       * Fetches the address of the PrizeDistributionsBuffer and caches the ethers Contract for the PrizeDistributionsBuffer.
       * @returns an ethers Contract for the PrizeDistributionsBuffer related to this PrizeDistributor
       */
      ;

      _proto.getPrizeDistributionsBufferContract =
      /*#__PURE__*/
      function () {
        var _getPrizeDistributionsBufferContract = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee30() {
          var _this4 = this;

          var getAddress;
          return runtime_1.wrap(function _callee30$(_context30) {
            while (1) {
              switch (_context30.prev = _context30.next) {
                case 0:
                  getAddress = /*#__PURE__*/function () {
                    var _ref3 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee29() {
                      var drawCalculatorContract, result;
                      return runtime_1.wrap(function _callee29$(_context29) {
                        while (1) {
                          switch (_context29.prev = _context29.next) {
                            case 0:
                              _context29.next = 2;
                              return _this4.getDrawCalculatorContract();

                            case 2:
                              drawCalculatorContract = _context29.sent;
                              _context29.next = 5;
                              return drawCalculatorContract.functions.getPrizeDistributionBuffer();

                            case 5:
                              result = _context29.sent;
                              return _context29.abrupt("return", result[0]);

                            case 7:
                            case "end":
                              return _context29.stop();
                          }
                        }
                      }, _callee29);
                    }));

                    return function getAddress() {
                      return _ref3.apply(this, arguments);
                    };
                  }();

                  return _context30.abrupt("return", this.getAndSetEthersContract('prizeDistributionsBuffer', ContractType.PrizeDistributionBuffer, getAddress));

                case 2:
                case "end":
                  return _context30.stop();
              }
            }
          }, _callee30, this);
        }));

        function getPrizeDistributionsBufferContract() {
          return _getPrizeDistributionsBufferContract.apply(this, arguments);
        }

        return getPrizeDistributionsBufferContract;
      }()
      /**
       * Fetches the address of the Token that is distributed by this PrizeDistributor and caches the ethers Contract for the ERC20 Token.
       * @returns an ethers Contract for the ERC20 Token related to this PrizeDistributor
       */
      ;

      _proto.getTokenContract =
      /*#__PURE__*/
      function () {
        var _getTokenContract = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee32() {
          var _this5 = this;

          var getAddress, tokenAddress, tokenMetadata, tokenContract;
          return runtime_1.wrap(function _callee32$(_context32) {
            while (1) {
              switch (_context32.prev = _context32.next) {
                case 0:
                  if (!(this.tokenContract !== undefined)) {
                    _context32.next = 2;
                    break;
                  }

                  return _context32.abrupt("return", this.tokenContract);

                case 2:
                  getAddress = /*#__PURE__*/function () {
                    var _ref4 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee31() {
                      var result;
                      return runtime_1.wrap(function _callee31$(_context31) {
                        while (1) {
                          switch (_context31.prev = _context31.next) {
                            case 0:
                              _context31.next = 2;
                              return _this5.prizeDistributorContract.functions.getToken();

                            case 2:
                              result = _context31.sent;
                              return _context31.abrupt("return", result[0]);

                            case 4:
                            case "end":
                              return _context31.stop();
                          }
                        }
                      }, _callee31);
                    }));

                    return function getAddress() {
                      return _ref4.apply(this, arguments);
                    };
                  }();

                  _context32.next = 5;
                  return getAddress();

                case 5:
                  tokenAddress = _context32.sent;
                  tokenMetadata = createContractMetadata(this.chainId, tokenAddress, ContractType.Token, ERC20Abi);
                  tokenContract = new Contract(tokenMetadata.address, tokenMetadata.abi, this.signerOrProvider);
                  this.tokenMetadata = tokenMetadata;
                  this.tokenContract = tokenContract;
                  return _context32.abrupt("return", tokenContract);

                case 11:
                case "end":
                  return _context32.stop();
              }
            }
          }, _callee32, this);
        }));

        function getTokenContract() {
          return _getTokenContract.apply(this, arguments);
        }

        return getTokenContract;
      }();

      _proto.getPrizeDistributionFactoryContract = /*#__PURE__*/function () {
        var _getPrizeDistributionFactoryContract = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee34() {
          var _this6 = this;

          var getAddress;
          return runtime_1.wrap(function _callee34$(_context34) {
            while (1) {
              switch (_context34.prev = _context34.next) {
                case 0:
                  getAddress = /*#__PURE__*/function () {
                    var _ref5 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee33() {
                      var prizeDistributionBufferContract, result;
                      return runtime_1.wrap(function _callee33$(_context33) {
                        while (1) {
                          switch (_context33.prev = _context33.next) {
                            case 0:
                              _context33.next = 2;
                              return _this6.getPrizeDistributionsBufferContract();

                            case 2:
                              prizeDistributionBufferContract = _context33.sent;
                              _context33.next = 5;
                              return prizeDistributionBufferContract.functions.manager();

                            case 5:
                              result = _context33.sent;
                              return _context33.abrupt("return", result[0]);

                            case 7:
                            case "end":
                              return _context33.stop();
                          }
                        }
                      }, _callee33);
                    }));

                    return function getAddress() {
                      return _ref5.apply(this, arguments);
                    };
                  }();

                  return _context34.abrupt("return", this.getAndSetEthersContract('prizeDistributionFactory', ContractType.PrizeDistributionFactory, getAddress));

                case 2:
                case "end":
                  return _context34.stop();
              }
            }
          }, _callee34, this);
        }));

        function getPrizeDistributionFactoryContract() {
          return _getPrizeDistributionFactoryContract.apply(this, arguments);
        }

        return getPrizeDistributionFactoryContract;
      }();

      _proto.getPrizeTierHistoryContract = /*#__PURE__*/function () {
        var _getPrizeTierHistoryContract = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee36() {
          var _this7 = this;

          var getAddress;
          return runtime_1.wrap(function _callee36$(_context36) {
            while (1) {
              switch (_context36.prev = _context36.next) {
                case 0:
                  getAddress = /*#__PURE__*/function () {
                    var _ref6 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee35() {
                      var prizeDistributionFactoryContract, result;
                      return runtime_1.wrap(function _callee35$(_context35) {
                        while (1) {
                          switch (_context35.prev = _context35.next) {
                            case 0:
                              _context35.next = 2;
                              return _this7.getPrizeDistributionFactoryContract();

                            case 2:
                              prizeDistributionFactoryContract = _context35.sent;
                              _context35.next = 5;
                              return prizeDistributionFactoryContract.functions.prizeTierHistory();

                            case 5:
                              result = _context35.sent;
                              return _context35.abrupt("return", result[0]);

                            case 7:
                            case "end":
                              return _context35.stop();
                          }
                        }
                      }, _callee35);
                    }));

                    return function getAddress() {
                      return _ref6.apply(this, arguments);
                    };
                  }();

                  return _context36.abrupt("return", this.getAndSetEthersContract('prizeTierHistory', ContractType.PrizeTierHistory, getAddress));

                case 2:
                case "end":
                  return _context36.stop();
              }
            }
          }, _callee36, this);
        }));

        function getPrizeTierHistoryContract() {
          return _getPrizeTierHistoryContract.apply(this, arguments);
        }

        return getPrizeTierHistoryContract;
      }()
      /*
       * Fetches the address of the set DrawCalculator on the PrizeDistributor and checks if it is a DrawCalculatorTimelock
       * @returns an ethers Contract for the DrawCalculator related to this PrizeDistributor
       */
      ;

      _proto.getDrawCalculatorTimelockContract =
      /*#__PURE__*/
      function () {
        var _getDrawCalculatorTimelockContract = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee38() {
          var _this8 = this;

          var getAddress, contractAddress, _getMetadataAndContra3, contractMetadata, contract;

          return runtime_1.wrap(function _callee38$(_context38) {
            while (1) {
              switch (_context38.prev = _context38.next) {
                case 0:
                  if (!this.drawCalculatorContract) {
                    _context38.next = 2;
                    break;
                  }

                  return _context38.abrupt("return", this.drawCalculatorContract);

                case 2:
                  getAddress = /*#__PURE__*/function () {
                    var _ref7 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee37() {
                      var result, address, contractMetadata;
                      return runtime_1.wrap(function _callee37$(_context37) {
                        while (1) {
                          switch (_context37.prev = _context37.next) {
                            case 0:
                              _context37.next = 2;
                              return _this8.prizeDistributorContract.functions.getDrawCalculator();

                            case 2:
                              result = _context37.sent;
                              address = result[0];
                              contractMetadata = _this8.contractMetadataList.find(function (contractMetadata) {
                                return contractMetadata.chainId === _this8.chainId && contractMetadata.address === address;
                              });

                              if (!((contractMetadata == null ? void 0 : contractMetadata.type) === ContractType.DrawCalculatorTimelock)) {
                                _context37.next = 9;
                                break;
                              }

                              return _context37.abrupt("return", address);

                            case 9:
                              return _context37.abrupt("return", undefined);

                            case 10:
                            case "end":
                              return _context37.stop();
                          }
                        }
                      }, _callee37);
                    }));

                    return function getAddress() {
                      return _ref7.apply(this, arguments);
                    };
                  }();

                  _context38.next = 5;
                  return getAddress();

                case 5:
                  contractAddress = _context38.sent;

                  if (contractAddress) {
                    _context38.next = 8;
                    break;
                  }

                  return _context38.abrupt("return", null);

                case 8:
                  _getMetadataAndContra3 = getMetadataAndContract(this.chainId, this.signerOrProvider, ContractType.DrawCalculatorTimelock, this.contractMetadataList, contractAddress), contractMetadata = _getMetadataAndContra3.contractMetadata, contract = _getMetadataAndContra3.contract;
                  this.drawCalculatorTimelockMetadata = contractMetadata;
                  this.drawCalculatorContract = contract;
                  return _context38.abrupt("return", contract);

                case 12:
                case "end":
                  return _context38.stop();
              }
            }
          }, _callee38, this);
        }));

        function getDrawCalculatorTimelockContract() {
          return _getDrawCalculatorTimelockContract.apply(this, arguments);
        }

        return getDrawCalculatorTimelockContract;
      }() //////////////////////////// Methods ////////////////////////////

      /**
       * Returns the users address of the provided Signer.
       * PrizeDistributor must be initialized with a Signer.
       * @param errorPrefix the class and function name of where the error occurred
       * @returns the address of the user
       */
      ;

      _proto.getUsersAddress =
      /*#__PURE__*/
      function () {
        var _getUsersAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee39(errorPrefix) {
          return runtime_1.wrap(function _callee39$(_context39) {
            while (1) {
              switch (_context39.prev = _context39.next) {
                case 0:
                  if (errorPrefix === void 0) {
                    errorPrefix = 'PrizeDistributors [getUsersAddress] |';
                  }

                  _context39.next = 3;
                  return this.validateIsSigner(errorPrefix);

                case 3:
                  _context39.next = 5;
                  return this.signerOrProvider.getAddress();

                case 5:
                  return _context39.abrupt("return", _context39.sent);

                case 6:
                case "end":
                  return _context39.stop();
              }
            }
          }, _callee39, this);
        }));

        function getUsersAddress(_x28) {
          return _getUsersAddress.apply(this, arguments);
        }

        return getUsersAddress;
      }() //////////////////////////// Validation methods ////////////////////////////

      /**
       * Validates that a Signer is on the network the PrizeDistributor is deployed on.
       * @param errorPrefix the class and function name of where the error occurred
       */
      ;

      _proto.validateSignerNetwork =
      /*#__PURE__*/
      function () {
        var _validateSignerNetwork2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee40(errorPrefix) {
          return runtime_1.wrap(function _callee40$(_context40) {
            while (1) {
              switch (_context40.prev = _context40.next) {
                case 0:
                  validateSignerNetwork(errorPrefix, this.signerOrProvider, this.chainId);

                case 1:
                case "end":
                  return _context40.stop();
              }
            }
          }, _callee40, this);
        }));

        function validateSignerNetwork$1(_x29) {
          return _validateSignerNetwork2.apply(this, arguments);
        }

        return validateSignerNetwork$1;
      }()
      /**
       * Validates that the data provided for providerOrSigner is a Signer.
       * @param errorPrefix the class and function name of where the error occurred
       */
      ;

      _proto.validateIsSigner =
      /*#__PURE__*/
      function () {
        var _validateIsSigner2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee41(errorPrefix) {
          return runtime_1.wrap(function _callee41$(_context41) {
            while (1) {
              switch (_context41.prev = _context41.next) {
                case 0:
                  validateIsSigner(errorPrefix, this.signerOrProvider);

                case 1:
                case "end":
                  return _context41.stop();
              }
            }
          }, _callee41, this);
        }));

        function validateIsSigner$1(_x30) {
          return _validateIsSigner2.apply(this, arguments);
        }

        return validateIsSigner$1;
      }();

      return PrizeDistributor;
    }();
    /**
     * Utility function to create several PrizeDistributors from a contract list.
     * @param contractList a list of all of the relevant contract metadata for all of the PrizeDistributors to create
     * @param signersOrProviders signers or providers for all of the networks the PrizeDistributors are deployed on keyed by the chain id
     * @returns a list of PrizeDistributors
     */

    function initializePrizeDistributors(contractList, signersOrProviders) {
      var prizeDistributorContracts = contractList.contracts.filter(function (contract) {
        return contract.type === ContractType.PrizeDistributor;
      });
      return prizeDistributorContracts.map(function (prizeDistributorContract) {
        return new PrizeDistributor(prizeDistributorContract, signersOrProviders[prizeDistributorContract.chainId], contractList.contracts);
      });
    }

    /**
     * A Prize Pool.
     * Provides read only functions for the contracts that make up the deployment of this Prize Pool.
     */

    var PrizePool = /*#__PURE__*/function () {
      /**
       * Create an instance of a PrizePool by providing the metadata for the YieldSourcePrizePool contract, an ethers Provider or Signer for the network the Prize Pool is deployed on and a list of contract metadata for the other contracts that make up the Prize Pool.
       * @constructor
       * @param prizePoolMetadata the metadata for the YieldSourcePrizePool contract in the Prize Pool
       * @param signerOrProvider a Provider or Signer for the network the Prize Pool deployment is on
       * @param contractMetadataList an array of metadata for the Prize Pool
       */
      function PrizePool(prizePoolMetadata, signerOrProvider, contractMetadataList) {
        // Get contract metadata & ethers contracts
        var prizePoolContract = new Contract(prizePoolMetadata.address, prizePoolMetadata.abi, signerOrProvider); // Set data

        this.contractMetadataList = contractMetadataList;
        this.signerOrProvider = signerOrProvider;
        this.chainId = prizePoolMetadata.chainId;
        this.address = prizePoolMetadata.address; // Set metadata

        this.prizePoolMetadata = prizePoolMetadata;
        this.ticketMetadata = undefined;
        this.tokenMetadata = undefined; // Set ethers contracts

        this.prizePoolContract = prizePoolContract;
        this.ticketContract = undefined;
        this.tokenContract = undefined;
      }
      /**
       * Returns a unique id string for this Prize Pool.
       * @returns a unique id for the Prize Pool
       */


      var _proto = PrizePool.prototype;

      _proto.id = function id() {
        return this.prizePoolMetadata.address + "-" + this.prizePoolMetadata.chainId;
      } //////////////////////////// Ethers read functions ////////////////////////////

      /**
       * Fetches a users balances for the Prize Pool underlying Token and Ticket.
       * @param usersAddress the users address to fetch balances for
       * @returns the users balances for the underlying deposit token and the ticket token
       */
      ;

      _proto.getUsersPrizePoolBalances =
      /*#__PURE__*/
      function () {
        var _getUsersPrizePoolBalances = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(usersAddress) {
          var errorPrefix, tokenContract, ticketContract, tokenBalancePromise, ticketBalancePromise, _yield$Promise$all, token, ticket;

          return runtime_1.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  errorPrefix = 'PrizePool [getUsersPrizePoolBalances] | ';
                  _context.next = 3;
                  return validateAddress(errorPrefix, usersAddress);

                case 3:
                  _context.next = 5;
                  return validateSignerOrProviderNetwork(errorPrefix, this.signerOrProvider, this.chainId);

                case 5:
                  _context.next = 7;
                  return this.getTokenContract();

                case 7:
                  tokenContract = _context.sent;
                  _context.next = 10;
                  return this.getTicketContract();

                case 10:
                  ticketContract = _context.sent;
                  tokenBalancePromise = getUsersERC20Balance(usersAddress, tokenContract);
                  ticketBalancePromise = getUsersERC20Balance(usersAddress, ticketContract);
                  _context.next = 15;
                  return Promise.all([tokenBalancePromise, ticketBalancePromise]);

                case 15:
                  _yield$Promise$all = _context.sent;
                  token = _yield$Promise$all[0];
                  ticket = _yield$Promise$all[1];
                  return _context.abrupt("return", {
                    token: token,
                    ticket: ticket
                  });

                case 19:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function getUsersPrizePoolBalances(_x) {
          return _getUsersPrizePoolBalances.apply(this, arguments);
        }

        return getUsersPrizePoolBalances;
      }()
      /**
       * Fetches a users balance for the Prize Pools Ticket.
       * @param usersAddress the address to fetch the balance for
       * @returns the users ticket balance
       */
      ;

      _proto.getUsersTicketBalance =
      /*#__PURE__*/
      function () {
        var _getUsersTicketBalance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(usersAddress) {
          var errorPrefix, ticketContract;
          return runtime_1.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  errorPrefix = 'PrizePool [getUsersTicketBalance] | ';
                  _context2.next = 3;
                  return validateAddress(errorPrefix, usersAddress);

                case 3:
                  _context2.next = 5;
                  return validateSignerOrProviderNetwork(errorPrefix, this.signerOrProvider, this.chainId);

                case 5:
                  _context2.next = 7;
                  return this.getTicketContract();

                case 7:
                  ticketContract = _context2.sent;
                  return _context2.abrupt("return", getUsersERC20Balance(usersAddress, ticketContract));

                case 9:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function getUsersTicketBalance(_x2) {
          return _getUsersTicketBalance.apply(this, arguments);
        }

        return getUsersTicketBalance;
      }()
      /**
       * Fetches a users Ticket TWAB at a specific unix timestamp.
       * @param usersAddress the address to fetch the ticket TWAB for
       * @param startTimestamp the start timestamp to fetch in seconds
       * @param endTimestamp the end timestamp to fetch in seconds
       * @returns the users TWAB between the requested times
       */
      ;

      _proto.getUsersAverageBalanceBetween =
      /*#__PURE__*/
      function () {
        var _getUsersAverageBalanceBetween = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(usersAddress, startTimestamp, endTimestamp) {
          var errorPrefix, ticketContract, result, twab;
          return runtime_1.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  errorPrefix = 'PrizePool [getUsersAverageBalanceBetween] | ';
                  _context3.next = 3;
                  return validateAddress(errorPrefix, usersAddress);

                case 3:
                  _context3.next = 5;
                  return validateSignerOrProviderNetwork(errorPrefix, this.signerOrProvider, this.chainId);

                case 5:
                  _context3.next = 7;
                  return this.getTicketContract();

                case 7:
                  ticketContract = _context3.sent;
                  _context3.next = 10;
                  return ticketContract.functions.getAverageBalanceBetween(usersAddress, startTimestamp, endTimestamp);

                case 10:
                  result = _context3.sent;
                  twab = result[0];
                  return _context3.abrupt("return", twab);

                case 13:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function getUsersAverageBalanceBetween(_x3, _x4, _x5) {
          return _getUsersAverageBalanceBetween.apply(this, arguments);
        }

        return getUsersAverageBalanceBetween;
      }()
      /**
       * Fetches a users Ticket TWAB at a specific unix timestamp.
       * @param usersAddress the address to fetch the ticket TWAB for
       * @param unixTimestamp the unix timestamp to fetch in seconds
       * @returns the users TWAB at the requested time
       */
      ;

      _proto.getUsersTicketTwabAt =
      /*#__PURE__*/
      function () {
        var _getUsersTicketTwabAt = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(usersAddress, unixTimestamp) {
          var errorPrefix, ticketContract, result, twab;
          return runtime_1.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  errorPrefix = 'PrizePool [getUsersTicketBalance] | ';
                  _context4.next = 3;
                  return validateAddress(errorPrefix, usersAddress);

                case 3:
                  _context4.next = 5;
                  return validateSignerOrProviderNetwork(errorPrefix, this.signerOrProvider, this.chainId);

                case 5:
                  _context4.next = 7;
                  return this.getTicketContract();

                case 7:
                  ticketContract = _context4.sent;
                  _context4.next = 10;
                  return ticketContract.functions.getBalanceAt(usersAddress, unixTimestamp);

                case 10:
                  result = _context4.sent;
                  twab = result[0];
                  return _context4.abrupt("return", twab);

                case 13:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function getUsersTicketTwabAt(_x6, _x7) {
          return _getUsersTicketTwabAt.apply(this, arguments);
        }

        return getUsersTicketTwabAt;
      }()
      /**
       * Fetches a users balance for the Prize Pools underlying Token.
       * @param usersAddress the address to fetch the balance for
       * @returns the users token balance
       */
      ;

      _proto.getUsersTokenBalance =
      /*#__PURE__*/
      function () {
        var _getUsersTokenBalance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(usersAddress) {
          var errorPrefix, tokenContract;
          return runtime_1.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  errorPrefix = 'PrizePool [getUsersTokenBalance] | ';
                  _context5.next = 3;
                  return validateAddress(errorPrefix, usersAddress);

                case 3:
                  _context5.next = 5;
                  return validateSignerOrProviderNetwork(errorPrefix, this.signerOrProvider, this.chainId);

                case 5:
                  _context5.next = 7;
                  return this.getTokenContract();

                case 7:
                  tokenContract = _context5.sent;
                  return _context5.abrupt("return", getUsersERC20Balance(usersAddress, tokenContract));

                case 9:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function getUsersTokenBalance(_x8) {
          return _getUsersTokenBalance.apply(this, arguments);
        }

        return getUsersTokenBalance;
      }()
      /**
       * Fetches a users deposit allowance for the Prize Pool.
       * @param usersAddress the address to fetch the deposit allowance for
       * @returns the amount the user has approved for deposits
       */
      ;

      _proto.getUsersDepositAllowance =
      /*#__PURE__*/
      function () {
        var _getUsersDepositAllowance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(usersAddress) {
          var errorPrefix, tokenContract, prizePoolAddress, result, allowanceUnformatted;
          return runtime_1.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  errorPrefix = 'PrizePool [getUsersDepositAllowance] | ';
                  _context6.next = 3;
                  return validateAddress(errorPrefix, usersAddress);

                case 3:
                  _context6.next = 5;
                  return validateSignerOrProviderNetwork(errorPrefix, this.signerOrProvider, this.chainId);

                case 5:
                  _context6.next = 7;
                  return this.getTokenContract();

                case 7:
                  tokenContract = _context6.sent;
                  prizePoolAddress = this.prizePoolMetadata.address;
                  _context6.next = 11;
                  return tokenContract.functions.allowance(usersAddress, prizePoolAddress);

                case 11:
                  result = _context6.sent;
                  allowanceUnformatted = result[0];
                  return _context6.abrupt("return", {
                    allowanceUnformatted: allowanceUnformatted,
                    isApproved: !allowanceUnformatted.isZero()
                  });

                case 14:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function getUsersDepositAllowance(_x9) {
          return _getUsersDepositAllowance.apply(this, arguments);
        }

        return getUsersDepositAllowance;
      }()
      /**
       * Fetches the address a user has delegated to.
       * @param usersAddress the address to fetch the delegate for
       * @returns the address a user has delegated to
       */
      ;

      _proto.getUsersTicketDelegate =
      /*#__PURE__*/
      function () {
        var _getUsersTicketDelegate = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(usersAddress) {
          var errorPrefix, ticketContract, result;
          return runtime_1.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  errorPrefix = 'PrizePool [getUsersTicketDelegate] | ';
                  _context7.next = 3;
                  return validateAddress(errorPrefix, usersAddress);

                case 3:
                  _context7.next = 5;
                  return this.getTicketContract();

                case 5:
                  ticketContract = _context7.sent;
                  _context7.next = 8;
                  return ticketContract.functions.delegateOf(usersAddress);

                case 8:
                  result = _context7.sent;
                  return _context7.abrupt("return", result[0]);

                case 10:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));

        function getUsersTicketDelegate(_x10) {
          return _getUsersTicketDelegate.apply(this, arguments);
        }

        return getUsersTicketDelegate;
      }()
      /**
       * Fetches decimals, name and symbol for the underling Token.
       * @returns decimals, name and symbol for the underling token
       */
      ;

      _proto.getTokenData =
      /*#__PURE__*/
      function () {
        var _getTokenData2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8() {
          var errorPrefix, tokenContract;
          return runtime_1.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  errorPrefix = 'PrizePool [getTokenData] | ';
                  _context8.next = 3;
                  return validateSignerOrProviderNetwork(errorPrefix, this.signerOrProvider, this.chainId);

                case 3:
                  _context8.next = 5;
                  return this.getTokenContract();

                case 5:
                  tokenContract = _context8.sent;
                  return _context8.abrupt("return", getTokenData(tokenContract));

                case 7:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8, this);
        }));

        function getTokenData$1() {
          return _getTokenData2.apply(this, arguments);
        }

        return getTokenData$1;
      }()
      /**
       * Fetches decimals, name and symbol for the Ticket.
       * @returns decimals, name and symbol for the ticket
       */
      ;

      _proto.getTicketData =
      /*#__PURE__*/
      function () {
        var _getTicketData = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9() {
          var errorPrefix, ticketContract;
          return runtime_1.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  errorPrefix = 'PrizePool [getTicketData] | ';
                  _context9.next = 3;
                  return validateSignerOrProviderNetwork(errorPrefix, this.signerOrProvider, this.chainId);

                case 3:
                  _context9.next = 5;
                  return this.getTicketContract();

                case 5:
                  ticketContract = _context9.sent;
                  return _context9.abrupt("return", getTokenData(ticketContract));

                case 7:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9, this);
        }));

        function getTicketData() {
          return _getTicketData.apply(this, arguments);
        }

        return getTicketData;
      }()
      /**
       * Fetches total supply for the Ticket.
       * @returns the total supply of the ticket
       */
      ;

      _proto.getTicketTotalSupply =
      /*#__PURE__*/
      function () {
        var _getTicketTotalSupply = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10() {
          var errorPrefix, ticketContract, result, totalSupply;
          return runtime_1.wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  errorPrefix = 'PrizePool [getTicketData] | ';
                  _context10.next = 3;
                  return validateSignerOrProviderNetwork(errorPrefix, this.signerOrProvider, this.chainId);

                case 3:
                  _context10.next = 5;
                  return this.getTicketContract();

                case 5:
                  ticketContract = _context10.sent;
                  _context10.next = 8;
                  return ticketContract.functions.totalSupply();

                case 8:
                  result = _context10.sent;
                  totalSupply = result[0];
                  return _context10.abrupt("return", totalSupply);

                case 11:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee10, this);
        }));

        function getTicketTotalSupply() {
          return _getTicketTotalSupply.apply(this, arguments);
        }

        return getTicketTotalSupply;
      }()
      /**
       * Fetches total supply for the Ticket accounting for the TWAB.
       * @param unixTimestamp the unix timestamp to fetch in seconds
       * @returns the ticket total supply TWAB at the requested time
       */
      ;

      _proto.getTicketTwabTotalSupplyAt =
      /*#__PURE__*/
      function () {
        var _getTicketTwabTotalSupplyAt = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(unixTimestamp) {
          var errorPrefix, ticketContract, result, totalSupply;
          return runtime_1.wrap(function _callee11$(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  errorPrefix = 'PrizePool [getTicketTwabTotalSupplyAt] | ';
                  _context11.next = 3;
                  return validateSignerOrProviderNetwork(errorPrefix, this.signerOrProvider, this.chainId);

                case 3:
                  _context11.next = 5;
                  return this.getTicketContract();

                case 5:
                  ticketContract = _context11.sent;
                  _context11.next = 8;
                  return ticketContract.functions.getTotalSupplyAt(unixTimestamp);

                case 8:
                  result = _context11.sent;
                  totalSupply = result[0];
                  return _context11.abrupt("return", totalSupply);

                case 11:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee11, this);
        }));

        function getTicketTwabTotalSupplyAt(_x11) {
          return _getTicketTwabTotalSupplyAt.apply(this, arguments);
        }

        return getTicketTwabTotalSupplyAt;
      }() // NOTE: Gas estimates are commented out as they are quite unreliable.

      /**
       * Fetches a gas estimate for depositing from the Prize Pool.
       * @param usersAddress string
       * @param amount BigNumber
       * @returns BigNumber
       */
      // async getDepositGasEstimate(usersAddress: string, amount: BigNumber): Promise<BigNumber> {
      //   const errorPrefix = 'PrizePool [getUsersDepositAllowance] | '
      //   await validateAddress(errorPrefix, usersAddress)
      //   await validateSignerOrProviderNetwork(errorPrefix, this.signerOrProvider, this.chainId)
      //   return await this.prizePoolContract.estimateGas.depositTo(usersAddress, amount)
      // }

      /**
       * Fetches a gas estimate for withdrawing from the Prize Pool.
       * @param usersAddress string
       * @param amount BigNumber
       * @returns BigNumber
       */
      // async getWithdrawGasEstimate(usersAddress: string, amount: BigNumber): Promise<BigNumber> {
      //   const errorPrefix = 'PrizePool [getWithdrawGasEstimate] | '
      //   await validateAddress(errorPrefix, usersAddress)
      //   await validateSignerOrProviderNetwork(errorPrefix, this.signerOrProvider, this.chainId)
      //   return await this.prizePoolContract.estimateGas.withdrawFrom(usersAddress, amount)
      // }

      /**
       * Fetches a gas estimate for approving deposits into the Prize Pool.
       * @param usersAddress string
       * @returns BigNumber
       */
      // async getApprovalGasEstimate(usersAddress: string): Promise<BigNumber> {
      //   const errorPrefix = 'PrizePool [getApprovalGasEstimate] | '
      //   await validateAddress(errorPrefix, usersAddress)
      //   const tokenContract = await this.getTokenContract()
      //   const prizePoolAddress = this.prizePoolMetadata.address
      //   return await tokenContract.estimateGas.approve(prizePoolAddress, MaxUint256)
      // }
      //////////////////////////// Ethers Contracts Initializers ////////////////////////////

      /**
       * Fetches the addresses to build an instance of an ethers Contract for the Ticket
       * @returns an ethers contract for the ticket
       */
      ;

      _proto.getTicketContract =
      /*#__PURE__*/
      function () {
        var _getTicketContract = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13() {
          var _this = this;

          var getAddress, ticketAddress, _getMetadataAndContra, ticketMetadata, ticketContract;

          return runtime_1.wrap(function _callee13$(_context13) {
            while (1) {
              switch (_context13.prev = _context13.next) {
                case 0:
                  if (!(this.ticketContract !== undefined)) {
                    _context13.next = 2;
                    break;
                  }

                  return _context13.abrupt("return", this.ticketContract);

                case 2:
                  getAddress = /*#__PURE__*/function () {
                    var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12() {
                      var result;
                      return runtime_1.wrap(function _callee12$(_context12) {
                        while (1) {
                          switch (_context12.prev = _context12.next) {
                            case 0:
                              _context12.next = 2;
                              return _this.prizePoolContract.functions.getTicket();

                            case 2:
                              result = _context12.sent;
                              return _context12.abrupt("return", result[0]);

                            case 4:
                            case "end":
                              return _context12.stop();
                          }
                        }
                      }, _callee12);
                    }));

                    return function getAddress() {
                      return _ref.apply(this, arguments);
                    };
                  }();

                  _context13.next = 5;
                  return getAddress();

                case 5:
                  ticketAddress = _context13.sent;
                  _getMetadataAndContra = getMetadataAndContract(this.chainId, this.signerOrProvider, ContractType.Ticket, this.contractMetadataList, ticketAddress), ticketMetadata = _getMetadataAndContra.contractMetadata, ticketContract = _getMetadataAndContra.contract;
                  this.ticketMetadata = ticketMetadata;
                  this.ticketContract = ticketContract;
                  return _context13.abrupt("return", ticketContract);

                case 10:
                case "end":
                  return _context13.stop();
              }
            }
          }, _callee13, this);
        }));

        function getTicketContract() {
          return _getTicketContract.apply(this, arguments);
        }

        return getTicketContract;
      }()
      /**
       * Fetches the addresses to build an instance of an ethers Contract for the underlying Token
       * @returns an ethers contract for the underlying token
       */
      ;

      _proto.getTokenContract =
      /*#__PURE__*/
      function () {
        var _getTokenContract = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15() {
          var _this2 = this;

          var getAddress, tokenAddress, tokenMetadata, tokenContract;
          return runtime_1.wrap(function _callee15$(_context15) {
            while (1) {
              switch (_context15.prev = _context15.next) {
                case 0:
                  if (!(this.tokenContract !== undefined)) {
                    _context15.next = 2;
                    break;
                  }

                  return _context15.abrupt("return", this.tokenContract);

                case 2:
                  getAddress = /*#__PURE__*/function () {
                    var _ref2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14() {
                      var result;
                      return runtime_1.wrap(function _callee14$(_context14) {
                        while (1) {
                          switch (_context14.prev = _context14.next) {
                            case 0:
                              _context14.next = 2;
                              return _this2.prizePoolContract.functions.getToken();

                            case 2:
                              result = _context14.sent;
                              return _context14.abrupt("return", result[0]);

                            case 4:
                            case "end":
                              return _context14.stop();
                          }
                        }
                      }, _callee14);
                    }));

                    return function getAddress() {
                      return _ref2.apply(this, arguments);
                    };
                  }();

                  _context15.next = 5;
                  return getAddress();

                case 5:
                  tokenAddress = _context15.sent;
                  tokenMetadata = createContractMetadata(this.chainId, tokenAddress, ContractType.Token, ERC20Abi);
                  tokenContract = new Contract(tokenMetadata.address, tokenMetadata.abi, this.signerOrProvider);
                  this.tokenMetadata = tokenMetadata;
                  this.tokenContract = tokenContract;
                  return _context15.abrupt("return", tokenContract);

                case 11:
                case "end":
                  return _context15.stop();
              }
            }
          }, _callee15, this);
        }));

        function getTokenContract() {
          return _getTokenContract.apply(this, arguments);
        }

        return getTokenContract;
      }();

      return PrizePool;
    }();
    /**
     * A utility function to create several PrizePools from a contract list.
     * @param contractList a list of all of the relevant contract metadata for all of the Prize Pools
     * @param providers providers for all of the networks in the list of Prize Pools
     * @returns a list of initialized PrizePools
     */

    function initializePrizePools(contractList, providers) {
      var prizePoolContractLists = sortContractsByContractTypeAndChildren(contractList.contracts, ContractType.YieldSourcePrizePool);
      var prizePools = [];
      prizePoolContractLists.forEach(function (contracts) {
        var prizePoolMetadata = contracts.find(function (contract) {
          return contract.type === ContractType.YieldSourcePrizePool;
        });
        var provider = providers[prizePoolMetadata.chainId];

        try {
          prizePools.push(new PrizePool(prizePoolMetadata, provider, contractList.contracts));
        } catch (e) {
          var error = e;
          console.error(error.message);
        }
      });
      return prizePools;
    }

    /**
     * A Prize Pool Network.
     * The network consists of one or more Prize Pools and Prize Distributors. PrizePoolNetwork provides read only functions for reading data from the contracts that make up the network. Initializes several PrizePools and PrizeDistributors on creation.
     */

    var PrizePoolNetwork = /*#__PURE__*/function () {
      /**
       * Create an instance of a PrizePoolNetwork by providing ethers Providers for each relevant network and a Contract List.
       * @constructor
       * @param providers ethers Providers for each network in the Prize Pool Network, keyed by their chain id.
       * @param prizePoolNetworkContractList a Contract List containing all of the relevant metadata for the Prize Pool Network.
       */
      function PrizePoolNetwork(providers, prizePoolNetworkContractList) {
        this.providers = providers;
        this.contractList = prizePoolNetworkContractList;
        this.prizePools = initializePrizePools(prizePoolNetworkContractList, providers);
        this.prizeDistributors = initializePrizeDistributors(prizePoolNetworkContractList, providers); // DrawBeacon

        var drawBeaconContractMetadata = prizePoolNetworkContractList.contracts.find(function (c) {
          return c.type === ContractType.DrawBeacon;
        });
        var beaconChainId = drawBeaconContractMetadata.chainId;
        var beaconProvider = providers[beaconChainId];
        var drawBeaconContract = new Contract(drawBeaconContractMetadata.address, drawBeaconContractMetadata.abi, beaconProvider); // DrawBuffer

        var drawBufferContractMetadata = prizePoolNetworkContractList.contracts.find(function (c) {
          return c.type === ContractType.DrawBuffer && c.chainId === beaconChainId;
        });
        var drawBufferContract = new Contract(drawBufferContractMetadata.address, drawBufferContractMetadata.abi, beaconProvider); // Set values

        this.beaconChainId = beaconChainId;
        this.beaconAddress = drawBeaconContractMetadata.address;
        this.drawBeaconMetadata = drawBeaconContractMetadata;
        this.drawBeaconContract = drawBeaconContract;
        this.drawBufferMetadata = drawBufferContractMetadata;
        this.drawBufferContract = drawBufferContract;
      }
      /**
       * Returns a unique id string for this PrizePoolNetwork.
       * @returns a unique id for the PrizePoolNetwork
       */


      var _proto = PrizePoolNetwork.prototype;

      _proto.id = function id() {
        return "prize-pool-network-" + this.beaconChainId + "-" + this.beaconAddress;
      } //////////////////////////// Ethers read functions ////////////////////////////

      /**
       * Fetch the users balances for all relevant tokens for all Prize Pools in the Prize Pool Network.
       * @param usersAddress address to get balances for.
       * @returns an array of objects containing the chain id & Prize Pool address and a balances object with the users balances for relevant tokens to the prize pool
       */
      ;

      _proto.getUsersPrizePoolBalances =
      /*#__PURE__*/
      function () {
        var _getUsersPrizePoolBalances = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(usersAddress) {
          var balancesPromises;
          return runtime_1.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  balancesPromises = this.prizePools.map( /*#__PURE__*/function () {
                    var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(prizePool) {
                      var balances;
                      return runtime_1.wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              _context.next = 2;
                              return prizePool.getUsersPrizePoolBalances(usersAddress);

                            case 2:
                              balances = _context.sent;
                              return _context.abrupt("return", {
                                chainId: prizePool.chainId,
                                address: prizePool.address,
                                balances: balances
                              });

                            case 4:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee);
                    }));

                    return function (_x2) {
                      return _ref.apply(this, arguments);
                    };
                  }());
                  return _context2.abrupt("return", Promise.all(balancesPromises));

                case 2:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function getUsersPrizePoolBalances(_x) {
          return _getUsersPrizePoolBalances.apply(this, arguments);
        }

        return getUsersPrizePoolBalances;
      }()
      /**
       * Fetch the current Draw Beacon period data from the beacon Prize Pool.
       * @returns the current draw beacon period.
       */
      ;

      _proto.getDrawBeaconPeriod =
      /*#__PURE__*/
      function () {
        var _getDrawBeaconPeriod = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {
          var _yield$Promise$all, periodSecondsResult, periodStartedAtResult, nextDrawIdResult, startedAtSeconds, periodSeconds, endsAtSeconds, drawId;

          return runtime_1.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return Promise.all([this.drawBeaconContract.functions.getBeaconPeriodSeconds(), this.drawBeaconContract.functions.getBeaconPeriodStartedAt(), this.drawBeaconContract.functions.getNextDrawId()]);

                case 2:
                  _yield$Promise$all = _context3.sent;
                  periodSecondsResult = _yield$Promise$all[0];
                  periodStartedAtResult = _yield$Promise$all[1];
                  nextDrawIdResult = _yield$Promise$all[2];
                  startedAtSeconds = periodStartedAtResult[0];
                  periodSeconds = periodSecondsResult[0];
                  endsAtSeconds = startedAtSeconds.add(periodSeconds);
                  drawId = nextDrawIdResult[0];
                  return _context3.abrupt("return", {
                    startedAtSeconds: startedAtSeconds,
                    periodSeconds: periodSeconds,
                    endsAtSeconds: endsAtSeconds,
                    drawId: drawId
                  });

                case 11:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function getDrawBeaconPeriod() {
          return _getDrawBeaconPeriod.apply(this, arguments);
        }

        return getDrawBeaconPeriod;
      }()
      /**
       * Fetch the range of available draw ids in the Draw Buffer for the beacon Prize Pool.
       * @returns an array of draw ids
       */
      ;

      _proto.getBeaconChainDrawIds =
      /*#__PURE__*/
      function () {
        var _getBeaconChainDrawIds = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {
          var _yield$Promise$allSet, oldestDrawResponse, newestDrawResponse, oldestId, newestId, drawIds, i;

          return runtime_1.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return Promise.allSettled([this.drawBufferContract.functions.getOldestDraw(), this.drawBufferContract.functions.getNewestDraw()]);

                case 2:
                  _yield$Promise$allSet = _context4.sent;
                  oldestDrawResponse = _yield$Promise$allSet[0];
                  newestDrawResponse = _yield$Promise$allSet[1];

                  if (!(newestDrawResponse.status === 'rejected' || oldestDrawResponse.status === 'rejected')) {
                    _context4.next = 7;
                    break;
                  }

                  return _context4.abrupt("return", []);

                case 7:
                  oldestId = oldestDrawResponse.value[0].drawId;
                  newestId = newestDrawResponse.value[0].drawId;
                  drawIds = [];

                  for (i = oldestId; i <= newestId; i++) {
                    drawIds.push(i);
                  }

                  return _context4.abrupt("return", drawIds);

                case 12:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function getBeaconChainDrawIds() {
          return _getBeaconChainDrawIds.apply(this, arguments);
        }

        return getBeaconChainDrawIds;
      }()
      /**
       * Fetch all of the available Draws in the Draw Buffer for the beacon Prize Pool.
       * @returns an object of draws keyed by their draw id
       */
      ;

      _proto.getBeaconChainDraws =
      /*#__PURE__*/
      function () {
        var _getBeaconChainDraws = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5() {
          var drawIds, draws, result;
          return runtime_1.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return this.getBeaconChainDrawIds();

                case 2:
                  drawIds = _context5.sent;
                  draws = {};
                  _context5.next = 6;
                  return this.drawBufferContract.functions.getDraws(drawIds);

                case 6:
                  result = _context5.sent;
                  result[0].forEach(function (draw) {
                    draws[draw.drawId] = {
                      drawId: draw.drawId,
                      timestamp: draw.timestamp,
                      winningRandomNumber: draw.winningRandomNumber,
                      beaconPeriodStartedAt: draw.beaconPeriodStartedAt,
                      beaconPeriodSeconds: draw.beaconPeriodSeconds
                    };
                  });
                  return _context5.abrupt("return", draws);

                case 9:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function getBeaconChainDraws() {
          return _getBeaconChainDraws.apply(this, arguments);
        }

        return getBeaconChainDraws;
      }()
      /**
       * Returns a PrizePool from the list of Prize Pools that was created on initialization by their primary key. The primary key of a Prize Pool is the chain id it is on and the address of the YieldSourcePrizePool contract.
       * @param chainId the chain id the requested prize pool is on
       * @param address the address of the YieldSourcePrizePool contract
       * @returns
       */
      ;

      _proto.getPrizePool = function getPrizePool(chainId, address) {
        return this.prizePools.find(function (prizePool) {
          return prizePool.chainId === chainId && prizePool.address === address;
        });
      }
      /**
       * Returns a PrizeDistributor from the list of Prize Distributors that was created on initialization by their primary key. The primary key of a Prize Disctributor is the chain id it is on and the address of the PrizeDistributor contract.
       * @param chainId the chain id the requested prize distributor is on
       * @param address the address of the PrizeDistributor contract
       * @returns
       */
      ;

      _proto.getPrizeDistributor = function getPrizeDistributor(chainId, address) {
        return this.prizeDistributors.find(function (prizeDistributor) {
          return prizeDistributor.chainId === chainId && prizeDistributor.address === address;
        });
      };

      return PrizePoolNetwork;
    }();

    class PoolTogether {
        static prizePoolNetwork() {
            if (!PoolTogether._prizePoolNetwork)
                PoolTogether._prizePoolNetwork = new PrizePoolNetwork(PoolTogether.providers, mainnet);
            return PoolTogether._prizePoolNetwork;
        }
        // static async totalDeposited(address: string) {
        //   const chainIdMap: Record<number, Chain> = {
        //     1: 'eth',
        //     10: 'op',
        //     137: 'poly',
        //     43114: 'avax'
        //   };
        //   let balance = BigNumber.from(0);
        //   for(const deployment of mainnet.contracts) {
        //     if(deployment.type === "Ticket") {
        //       const chain = chainIdMap[deployment.chainId];
        //       const chainBalance: BigNumber = await query(chain, deployment.address as Address, deployment.abi as any, "balanceOf", [address]);
        //       balance = balance.add(chainBalance);
        //     }
        //   }
        //   return balance;
        // }
        static async totalDeposited(address) {
            const res = await PoolTogether.prizePoolNetwork().getUsersPrizePoolBalances(address);
            let balance = BigNumber.from(0);
            for (const chain of res) {
                balance = balance.add(chain.balances.token);
            }
            return balance;
        }
        static async deposit(chain, amount, signer) {
            // const user = new User();
        }
    }
    PoolTogether.providers = {
        1: functions.providers.eth[0],
        10: functions.providers.op[0],
        137: functions.providers.poly[0],
        43114: functions.providers.avax[0]
    };
    PoolTogether._prizePoolNetwork = null;

    class Poolygotchi$1 {
        /* Constructor */
        constructor(address) {
            this.dataCache = null;
            this.address = address;
        }
        /* Functions */
        async data({ useCache = true } = {}) {
            if (!this.dataCache || !useCache)
                this.dataCache = await Poolygotchi$1.contract().poolygotchiOf(this.address);
            return this.dataCache;
        }
        async healthFactor() {
            const secondsInWeek = 60 * 60 * 24 * 7;
            const { goalAmountWeekly, startBalance } = await this.data();
            const totalDeposited = await PoolTogether.totalDeposited(this.address);
            const balanceChange = totalDeposited.sub(startBalance);
            const secondsOff = balanceChange.mul(secondsInWeek).div(BigNumber.from(goalAmountWeekly));
            return secondsOff.toNumber() / secondsInWeek;
        }
        /* Static Functions */
        static contract() {
            return new Contract(Poolygotchi$1.address, Poolygotchi$1.abi, new JsonRpcProvider$1(networks.poolygotchi.rpcUrls[0], networks.poolygotchi));
        }
    }
    /* Static vars */
    Poolygotchi$1.address = hatcheryAddress;
    Poolygotchi$1.abi = hatcheryInfo.abi;

    const fetchJSON = async (uri) => {
        // HTTP Data URIs:
        if (uri.startsWith('http')) {
            return await (await fetch(uri)).json();
        }
        // Decoding Base64 Data:
        let base64match = uri.match(/^(?:rawData|data)\:application\/json;base64(?:\s|,)/);
        if (base64match) {
            return JSON.parse(window.atob(uri.slice(base64match[0].length)));
        }
        // IPFS Data URIs:
        const ipfsMatch = matchIpfsUri(uri);
        if (ipfsMatch) {
            return await fetch(`/ipfs/${ipfsMatch[2]}`).then(res => res.json());
        }
        throw new Error("Could not recognize URI format...");
    };
    const normalizeImageURI = async (uri) => {
        const ipfsMatch = matchIpfsUri(uri);
        if (ipfsMatch) {
            return `/ipfs/${ipfsMatch[2]}`;
        }
        else {
            return uri;
        }
    };
    const matchIpfsUri = (uri) => {
        return uri.match(/^(\/ipfs\/|ipfs\:\/\/)(.+)/);
    };

    class BaseAccount {
        constructor(_address) {
            this._address = _address;
        }
        get address() {
            return this._address;
        }
        get avatar() {
            var _a;
            return (_a = this.storedAvatar) !== null && _a !== void 0 ? _a : this.defaultAvatar;
        }
        set avatar(url) {
            localStorage.setItem(`avatar:${this.address.toLowerCase()}`, url);
        }
        get defaultAvatar() {
            return createIcon({ seed: this.address.toLowerCase(), scale: 8 }).toDataURL();
        }
        get storedAvatar() {
            const storageID = `avatar:${this.address.toLowerCase()}`;
            return localStorage.getItem(storageID);
        }
        ensName() {
            return BaseAccount.ensName(this.address);
        }
        async ensAvatar() {
            const name = await this.ensName();
            if (name) {
                const provider = functions.providers.eth[0];
                const resolver = await provider.getResolver(name);
                const avatar = await (resolver === null || resolver === void 0 ? void 0 : resolver.getAvatar());
                if (avatar) {
                    return avatar.url;
                }
            }
            return null;
        }
        async poolyAvatars() {
            const nftContracts = {
                supporter: {
                    contract: "0x90B3832e2F2aDe2FE382a911805B6933C056D6ed",
                    unique: true
                },
                lawyer: {
                    contract: "0x3545192b340F50d77403DC0A64cf2b32F03d00A9",
                },
                judge: {
                    contract: "0x5663e3E096f1743e77B8F71b5DE0CF9Dfd058523",
                },
                pfer: {
                    contract: "0xBCC664B1E6848caba2Eb2f3dE6e21F81b9276dD8",
                    unique: true,
                }
            };
            const avatars = [];
            const promises = [];
            for (const key in nftContracts) {
                promises.push((async () => {
                    const contract = new Contract(nftContracts[key].contract, erc721.abi, functions.providers.eth[0]);
                    const addToken = async (tokenId) => {
                        const tokenURI = await contract.tokenURI(tokenId);
                        console.log(`Loading token: ${key} - ${tokenId}`);
                        const metadata = await fetchJSON(tokenURI);
                        console.log("Metadata: ", metadata);
                        avatars.push(await normalizeImageURI(metadata.image));
                        console.log("Resolved: ", metadata.image);
                    };
                    const balance = await contract.balanceOf(this.address);
                    if (balance > 0) {
                        if (nftContracts[key].unique) {
                            const tokenInFilter = contract.filters.Transfer(null, this.address);
                            const tokenInEvents = await contract.queryFilter(tokenInFilter);
                            const tokenIdsIn = new Set();
                            for (const event of tokenInEvents) {
                                if (event.args && event.args["tokenId"]) {
                                    tokenIdsIn.add(BigNumber.from(event.args["tokenId"]).toHexString());
                                }
                            }
                            for (const tokenId of tokenIdsIn) {
                                await addToken(BigNumber.from(tokenId));
                            }
                        }
                        else {
                            await addToken(0);
                        }
                    }
                    console.log(`Done resolving: ${key}`);
                })());
            }
            console.log("Waiting for promises to settle...");
            await Promise.allSettled(promises).catch(console.error);
            console.log("Promises settled!");
            return avatars;
        }
        allAvatars() {
            if (!this._resolvedAvatars) {
                this._resolvedAvatars = new Promise(async (resolve, reject) => {
                    // Create list of avatars:
                    let avatars = [
                        { url: this.defaultAvatar, weight: 0 }
                    ];
                    // Async fetch all on-chain avatars:
                    const promises = [
                        this.poolyAvatars().then(res => avatars.push(...res.map(x => ({ url: x, weight: 1 })))).catch(console.error),
                        this.ensAvatar().then(res => res && avatars.push({ url: res, weight: 2 })).catch(console.error)
                    ];
                    await Promise.allSettled(promises);
                    // Return avatars:
                    resolve(avatars.sort((a, b) => b.weight - a.weight));
                });
            }
            return this._resolvedAvatars;
        }
        async poolygotchi() {
            if (await Poolygotchi$1.contract().hasPoolygotchi(this.address)) {
                return new Poolygotchi$1(this.address);
            }
            else {
                return null;
            }
        }
        /* Static functions */
        static async ensName(address, { useCache = false } = {}) {
            const cacheKey = `ens-name-${address.toLowerCase()}`;
            const promise = WeaverFi.eth.lookupENS(address).then(name => {
                if (name) {
                    localStorage.setItem(cacheKey, name);
                }
                return name;
            });
            if (useCache) {
                const name = localStorage.getItem(cacheKey);
                if (name)
                    return name;
            }
            return await promise;
        }
    }
    function transactionHasChainId(tx) {
        return tx.chainId !== undefined;
    }

    /* src\components\Address.svelte generated by Svelte v3.55.0 */

    const { Error: Error_1$4, console: console_1$6 } = globals;
    const file$l = "src\\components\\Address.svelte";

    function create_fragment$o(ctx) {
    	let button;
    	let t_value = (/*name*/ ctx[0] ?? shortAddress(/*address*/ ctx[1])) + "";
    	let t;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			t = text(t_value);
    			attr_dev(button, "class", "address monospace svelte-1bceb14");
    			attr_dev(button, "title", "copy");
    			toggle_class(button, "alert-copy", /*showCopyAlert*/ ctx[2]);
    			add_location(button, file$l, 39, 0, 1169);
    		},
    		l: function claim(nodes) {
    			throw new Error_1$4("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*copyAddress*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*name, address*/ 3 && t_value !== (t_value = (/*name*/ ctx[0] ?? shortAddress(/*address*/ ctx[1])) + "")) set_data_dev(t, t_value);

    			if (dirty & /*showCopyAlert*/ 4) {
    				toggle_class(button, "alert-copy", /*showCopyAlert*/ ctx[2]);
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const shortAddress = address => {
    	if (!utils$5.isAddress(address)) throw new Error(`Not a valid address: ${address}`);
    	return address.slice(0, 6) + "..." + address.slice(address.length - 4);
    };

    function instance$o($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Address', slots, []);
    	let { address } = $$props;
    	let { name = null } = $$props;

    	// Variables:
    	let showCopyAlert = false;

    	let copyAlertTimeout;

    	// Function to copy the address to clipboard:
    	const copyAddress = () => {
    		navigator.clipboard.writeText(address);
    		$$invalidate(2, showCopyAlert = true);
    		if (copyAlertTimeout) clearTimeout(copyAlertTimeout);

    		copyAlertTimeout = setTimeout(
    			() => {
    				$$invalidate(2, showCopyAlert = false);
    			},
    			2000
    		);
    	};

    	// On Mount:
    	onMount(() => {
    		if (!name) BaseAccount.ensName(address, { useCache: true }).then(ensName => {
    			$$invalidate(0, name = ensName);
    		}).catch(console.error);
    	});

    	$$self.$$.on_mount.push(function () {
    		if (address === undefined && !('address' in $$props || $$self.$$.bound[$$self.$$.props['address']])) {
    			console_1$6.warn("<Address> was created without expected prop 'address'");
    		}
    	});

    	const writable_props = ['address', 'name'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$6.warn(`<Address> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('address' in $$props) $$invalidate(1, address = $$props.address);
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    	};

    	$$self.$capture_state = () => ({
    		isAddress: utils$5.isAddress,
    		onMount,
    		BaseAccount,
    		shortAddress,
    		address,
    		name,
    		showCopyAlert,
    		copyAlertTimeout,
    		copyAddress
    	});

    	$$self.$inject_state = $$props => {
    		if ('address' in $$props) $$invalidate(1, address = $$props.address);
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    		if ('showCopyAlert' in $$props) $$invalidate(2, showCopyAlert = $$props.showCopyAlert);
    		if ('copyAlertTimeout' in $$props) copyAlertTimeout = $$props.copyAlertTimeout;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [name, address, showCopyAlert, copyAddress];
    }

    class Address extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$o, create_fragment$o, safe_not_equal, { address: 1, name: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Address",
    			options,
    			id: create_fragment$o.name
    		});
    	}

    	get address() {
    		throw new Error_1$4("<Address>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set address(value) {
    		throw new Error_1$4("<Address>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get name() {
    		throw new Error_1$4("<Address>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error_1$4("<Address>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\Overlay.svelte generated by Svelte v3.55.0 */

    const file$k = "src\\components\\Overlay.svelte";

    function create_fragment$n(ctx) {
    	let div1;
    	let div0;
    	let style_width = `${/*width*/ ctx[0]}px`;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[4].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div0, "id", "overlay");
    			attr_dev(div0, "class", "svelte-1crpyei");
    			set_style(div0, "width", style_width);
    			add_location(div0, file$k, 8, 2, 226);
    			attr_dev(div1, "id", "overlay-bg");
    			attr_dev(div1, "class", "svelte-1crpyei");
    			set_style(div1, "z-index", /*zIndex*/ ctx[1]);
    			add_location(div1, file$k, 7, 0, 161);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);

    			if (default_slot) {
    				default_slot.m(div0, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", stop_propagation(/*click_handler*/ ctx[5]), false, false, true),
    					listen_dev(
    						div1,
    						"click",
    						function () {
    							if (is_function(/*close*/ ctx[2])) /*close*/ ctx[2].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[3],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
    						null
    					);
    				}
    			}

    			if (dirty & /*width*/ 1 && style_width !== (style_width = `${/*width*/ ctx[0]}px`)) {
    				set_style(div0, "width", style_width);
    			}

    			if (dirty & /*zIndex*/ 2) {
    				set_style(div1, "z-index", /*zIndex*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$n($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Overlay', slots, ['default']);
    	let { width = 720 } = $$props;
    	let { zIndex = 100 } = $$props;
    	let { close } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (close === undefined && !('close' in $$props || $$self.$$.bound[$$self.$$.props['close']])) {
    			console.warn("<Overlay> was created without expected prop 'close'");
    		}
    	});

    	const writable_props = ['width', 'zIndex', 'close'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Overlay> was created with unknown prop '${key}'`);
    	});

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('width' in $$props) $$invalidate(0, width = $$props.width);
    		if ('zIndex' in $$props) $$invalidate(1, zIndex = $$props.zIndex);
    		if ('close' in $$props) $$invalidate(2, close = $$props.close);
    		if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ width, zIndex, close });

    	$$self.$inject_state = $$props => {
    		if ('width' in $$props) $$invalidate(0, width = $$props.width);
    		if ('zIndex' in $$props) $$invalidate(1, zIndex = $$props.zIndex);
    		if ('close' in $$props) $$invalidate(2, close = $$props.close);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [width, zIndex, close, $$scope, slots, click_handler];
    }

    class Overlay extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$n, create_fragment$n, safe_not_equal, { width: 0, zIndex: 1, close: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Overlay",
    			options,
    			id: create_fragment$n.name
    		});
    	}

    	get width() {
    		throw new Error("<Overlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<Overlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get zIndex() {
    		throw new Error("<Overlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set zIndex(value) {
    		throw new Error("<Overlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get close() {
    		throw new Error("<Overlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set close(value) {
    		throw new Error("<Overlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\Time.svelte generated by Svelte v3.55.0 */

    function create_fragment$m(ctx) {
    	const block = {
    		c: noop$2,
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: noop$2,
    		p: noop$2,
    		i: noop$2,
    		o: noop$2,
    		d: noop$2
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const time$2 = readable(Date.now(), set => {
    	setInterval(
    		() => {
    			set(Date.now());
    		},
    		1000
    	);
    });

    function instance$m($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Time', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Time> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ readable, time: time$2 });
    	return [];
    }

    class Time extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$m, create_fragment$m, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Time",
    			options,
    			id: create_fragment$m.name
    		});
    	}
    }

    function cubicOut(t) {
        const f = t - 1.0;
        return f * f * f + 1.0;
    }

    function fade(node, { delay = 0, duration = 400, easing = identity$3 } = {}) {
        const o = +getComputedStyle(node).opacity;
        return {
            delay,
            duration,
            easing,
            css: t => `opacity: ${t * o}`
        };
    }
    function fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 } = {}) {
        const style = getComputedStyle(node);
        const target_opacity = +style.opacity;
        const transform = style.transform === 'none' ? '' : style.transform;
        const od = target_opacity * (1 - opacity);
        return {
            delay,
            duration,
            easing,
            css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);
			opacity: ${target_opacity - (od * u)}`
        };
    }

    /* src\components\Notifications.svelte generated by Svelte v3.55.0 */
    const file$j = "src\\components\\Notifications.svelte";

    // (19:0) {#if $notification && $time - $notification.timestamp < notificationDuration}
    function create_if_block_5(ctx) {
    	let div;
    	let raw_value = /*$notification*/ ctx[1].message + "";
    	let div_class_value;
    	let div_intro;
    	let div_outro;
    	let current;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "id", "notification");
    			attr_dev(div, "class", div_class_value = "" + (null_to_empty(/*$notification*/ ctx[1].type) + " svelte-mnen9n"));
    			add_location(div, file$j, 20, 2, 701);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			div.innerHTML = raw_value;
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*click_handler*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*$notification*/ 2) && raw_value !== (raw_value = /*$notification*/ ctx[1].message + "")) div.innerHTML = raw_value;
    			if (!current || dirty & /*$notification*/ 2 && div_class_value !== (div_class_value = "" + (null_to_empty(/*$notification*/ ctx[1].type) + " svelte-mnen9n"))) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (div_outro) div_outro.end(1);
    				div_intro = create_in_transition(div, fly, { y: 250 });
    				div_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (div_intro) div_intro.invalidate();
    			div_outro = create_out_transition(div, fade, { duration: 1000 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching && div_outro) div_outro.end();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(19:0) {#if $notification && $time - $notification.timestamp < notificationDuration}",
    		ctx
    	});

    	return block;
    }

    // (33:0) {#if selectedNotification}
    function create_if_block$5(ctx) {
    	let overlay;
    	let current;

    	overlay = new Overlay({
    			props: {
    				close: /*func*/ ctx[4],
    				$$slots: { default: [create_default_slot$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(overlay.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(overlay, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const overlay_changes = {};
    			if (dirty & /*selectedNotification*/ 1) overlay_changes.close = /*func*/ ctx[4];

    			if (dirty & /*$$scope, selectedNotification*/ 33) {
    				overlay_changes.$$scope = { dirty, ctx };
    			}

    			overlay.$set(overlay_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(overlay.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(overlay.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(overlay, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(33:0) {#if selectedNotification}",
    		ctx
    	});

    	return block;
    }

    // (42:56) 
    function create_if_block_4(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Success");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(42:56) ",
    		ctx
    	});

    	return block;
    }

    // (40:57) 
    function create_if_block_3$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Notification");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(40:57) ",
    		ctx
    	});

    	return block;
    }

    // (38:56) 
    function create_if_block_2$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Warning");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$3.name,
    		type: "if",
    		source: "(38:56) ",
    		ctx
    	});

    	return block;
    }

    // (36:6) {#if selectedNotification.type === 'error'}
    function create_if_block_1$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Error");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(36:6) {#if selectedNotification.type === 'error'}",
    		ctx
    	});

    	return block;
    }

    // (34:2) <Overlay close={() => selectedNotification = null}>
    function create_default_slot$5(ctx) {
    	let h3;
    	let h3_class_value;
    	let t;
    	let p;
    	let raw_value = /*selectedNotification*/ ctx[0].message + "";

    	function select_block_type(ctx, dirty) {
    		if (/*selectedNotification*/ ctx[0].type === 'error') return create_if_block_1$3;
    		if (/*selectedNotification*/ ctx[0].type === 'warning') return create_if_block_2$3;
    		if (/*selectedNotification*/ ctx[0].type === 'standard') return create_if_block_3$1;
    		if (/*selectedNotification*/ ctx[0].type === 'success') return create_if_block_4;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type && current_block_type(ctx);

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			if (if_block) if_block.c();
    			t = space();
    			p = element("p");
    			attr_dev(h3, "class", h3_class_value = "" + (null_to_empty(/*selectedNotification*/ ctx[0].type) + " svelte-mnen9n"));
    			add_location(h3, file$j, 34, 4, 1059);
    			attr_dev(p, "class", "full-message svelte-mnen9n");
    			add_location(p, file$j, 45, 4, 1424);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    			if (if_block) if_block.m(h3, null);
    			insert_dev(target, t, anchor);
    			insert_dev(target, p, anchor);
    			p.innerHTML = raw_value;
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if (if_block) if_block.d(1);
    				if_block = current_block_type && current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(h3, null);
    				}
    			}

    			if (dirty & /*selectedNotification*/ 1 && h3_class_value !== (h3_class_value = "" + (null_to_empty(/*selectedNotification*/ ctx[0].type) + " svelte-mnen9n"))) {
    				attr_dev(h3, "class", h3_class_value);
    			}

    			if (dirty & /*selectedNotification*/ 1 && raw_value !== (raw_value = /*selectedNotification*/ ctx[0].message + "")) p.innerHTML = raw_value;		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);

    			if (if_block) {
    				if_block.d();
    			}

    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$5.name,
    		type: "slot",
    		source: "(34:2) <Overlay close={() => selectedNotification = null}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$l(ctx) {
    	let t;
    	let if_block1_anchor;
    	let current;
    	let if_block0 = /*$notification*/ ctx[1] && /*$time*/ ctx[2] - /*$notification*/ ctx[1].timestamp < notificationDuration && create_if_block_5(ctx);
    	let if_block1 = /*selectedNotification*/ ctx[0] && create_if_block$5(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$notification*/ ctx[1] && /*$time*/ ctx[2] - /*$notification*/ ctx[1].timestamp < notificationDuration) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*$notification, $time*/ 6) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_5(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t.parentNode, t);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*selectedNotification*/ ctx[0]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*selectedNotification*/ 1) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$5(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const notification = writable(null);

    function pushNotification(_notification) {
    	_notification.timestamp = Date.now();
    	notification.set(_notification);
    }

    const notificationDuration = 9000;

    function instance$l($$self, $$props, $$invalidate) {
    	let $notification,
    		$$unsubscribe_notification = noop$2;

    	let $time;
    	validate_store(notification, 'notification');
    	component_subscribe($$self, notification, $$value => $$invalidate(1, $notification = $$value));
    	validate_store(time$2, 'time');
    	component_subscribe($$self, time$2, $$value => $$invalidate(2, $time = $$value));
    	$$self.$$.on_destroy.push(() => $$unsubscribe_notification());
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Notifications', slots, []);
    	let selectedNotification = null;
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Notifications> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => $$invalidate(0, selectedNotification = $notification);
    	const func = () => $$invalidate(0, selectedNotification = null);

    	$$self.$capture_state = () => ({
    		writable,
    		notification,
    		pushNotification,
    		Overlay,
    		time: time$2,
    		fly,
    		fade,
    		notificationDuration,
    		selectedNotification,
    		$notification,
    		$time
    	});

    	$$self.$inject_state = $$props => {
    		if ('selectedNotification' in $$props) $$invalidate(0, selectedNotification = $$props.selectedNotification);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [selectedNotification, $notification, $time, click_handler, func];
    }

    class Notifications extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$l, create_fragment$l, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Notifications",
    			options,
    			id: create_fragment$l.name
    		});
    	}
    }

    function tryStringify (o) {
      try { return JSON.stringify(o) } catch(e) { return '"[Circular]"' }
    }

    var quickFormatUnescaped = format;

    function format(f, args, opts) {
      var ss = (opts && opts.stringify) || tryStringify;
      var offset = 1;
      if (typeof f === 'object' && f !== null) {
        var len = args.length + offset;
        if (len === 1) return f
        var objects = new Array(len);
        objects[0] = ss(f);
        for (var index = 1; index < len; index++) {
          objects[index] = ss(args[index]);
        }
        return objects.join(' ')
      }
      if (typeof f !== 'string') {
        return f
      }
      var argLen = args.length;
      if (argLen === 0) return f
      var str = '';
      var a = 1 - offset;
      var lastPos = -1;
      var flen = (f && f.length) || 0;
      for (var i = 0; i < flen;) {
        if (f.charCodeAt(i) === 37 && i + 1 < flen) {
          lastPos = lastPos > -1 ? lastPos : 0;
          switch (f.charCodeAt(i + 1)) {
            case 100: // 'd'
            case 102: // 'f'
              if (a >= argLen)
                break
              if (args[a] == null)  break
              if (lastPos < i)
                str += f.slice(lastPos, i);
              str += Number(args[a]);
              lastPos = i + 2;
              i++;
              break
            case 105: // 'i'
              if (a >= argLen)
                break
              if (args[a] == null)  break
              if (lastPos < i)
                str += f.slice(lastPos, i);
              str += Math.floor(Number(args[a]));
              lastPos = i + 2;
              i++;
              break
            case 79: // 'O'
            case 111: // 'o'
            case 106: // 'j'
              if (a >= argLen)
                break
              if (args[a] === undefined) break
              if (lastPos < i)
                str += f.slice(lastPos, i);
              var type = typeof args[a];
              if (type === 'string') {
                str += '\'' + args[a] + '\'';
                lastPos = i + 2;
                i++;
                break
              }
              if (type === 'function') {
                str += args[a].name || '<anonymous>';
                lastPos = i + 2;
                i++;
                break
              }
              str += ss(args[a]);
              lastPos = i + 2;
              i++;
              break
            case 115: // 's'
              if (a >= argLen)
                break
              if (lastPos < i)
                str += f.slice(lastPos, i);
              str += String(args[a]);
              lastPos = i + 2;
              i++;
              break
            case 37: // '%'
              if (lastPos < i)
                str += f.slice(lastPos, i);
              str += '%';
              lastPos = i + 2;
              i++;
              a--;
              break
          }
          ++a;
        }
        ++i;
      }
      if (lastPos === -1)
        return f
      else if (lastPos < flen) {
        str += f.slice(lastPos);
      }

      return str
    }

    var browser$3 = pino;

    const _console = pfGlobalThisOrFallback().console || {};
    const stdSerializers = {
      mapHttpRequest: mock,
      mapHttpResponse: mock,
      wrapRequestSerializer: passthrough,
      wrapResponseSerializer: passthrough,
      wrapErrorSerializer: passthrough,
      req: mock,
      res: mock,
      err: asErrValue
    };

    function shouldSerialize (serialize, serializers) {
      if (Array.isArray(serialize)) {
        const hasToFilter = serialize.filter(function (k) {
          return k !== '!stdSerializers.err'
        });
        return hasToFilter
      } else if (serialize === true) {
        return Object.keys(serializers)
      }

      return false
    }

    function pino (opts) {
      opts = opts || {};
      opts.browser = opts.browser || {};

      const transmit = opts.browser.transmit;
      if (transmit && typeof transmit.send !== 'function') { throw Error('pino: transmit option must have a send function') }

      const proto = opts.browser.write || _console;
      if (opts.browser.write) opts.browser.asObject = true;
      const serializers = opts.serializers || {};
      const serialize = shouldSerialize(opts.browser.serialize, serializers);
      let stdErrSerialize = opts.browser.serialize;

      if (
        Array.isArray(opts.browser.serialize) &&
        opts.browser.serialize.indexOf('!stdSerializers.err') > -1
      ) stdErrSerialize = false;

      const levels = ['error', 'fatal', 'warn', 'info', 'debug', 'trace'];

      if (typeof proto === 'function') {
        proto.error = proto.fatal = proto.warn =
        proto.info = proto.debug = proto.trace = proto;
      }
      if (opts.enabled === false) opts.level = 'silent';
      const level = opts.level || 'info';
      const logger = Object.create(proto);
      if (!logger.log) logger.log = noop$1;

      Object.defineProperty(logger, 'levelVal', {
        get: getLevelVal
      });
      Object.defineProperty(logger, 'level', {
        get: getLevel,
        set: setLevel
      });

      const setOpts = {
        transmit,
        serialize,
        asObject: opts.browser.asObject,
        levels,
        timestamp: getTimeFunction(opts)
      };
      logger.levels = pino.levels;
      logger.level = level;

      logger.setMaxListeners = logger.getMaxListeners =
      logger.emit = logger.addListener = logger.on =
      logger.prependListener = logger.once =
      logger.prependOnceListener = logger.removeListener =
      logger.removeAllListeners = logger.listeners =
      logger.listenerCount = logger.eventNames =
      logger.write = logger.flush = noop$1;
      logger.serializers = serializers;
      logger._serialize = serialize;
      logger._stdErrSerialize = stdErrSerialize;
      logger.child = child;

      if (transmit) logger._logEvent = createLogEventShape();

      function getLevelVal () {
        return this.level === 'silent'
          ? Infinity
          : this.levels.values[this.level]
      }

      function getLevel () {
        return this._level
      }
      function setLevel (level) {
        if (level !== 'silent' && !this.levels.values[level]) {
          throw Error('unknown level ' + level)
        }
        this._level = level;

        set(setOpts, logger, 'error', 'log'); // <-- must stay first
        set(setOpts, logger, 'fatal', 'error');
        set(setOpts, logger, 'warn', 'error');
        set(setOpts, logger, 'info', 'log');
        set(setOpts, logger, 'debug', 'log');
        set(setOpts, logger, 'trace', 'log');
      }

      function child (bindings, childOptions) {
        if (!bindings) {
          throw new Error('missing bindings for child Pino')
        }
        childOptions = childOptions || {};
        if (serialize && bindings.serializers) {
          childOptions.serializers = bindings.serializers;
        }
        const childOptionsSerializers = childOptions.serializers;
        if (serialize && childOptionsSerializers) {
          var childSerializers = Object.assign({}, serializers, childOptionsSerializers);
          var childSerialize = opts.browser.serialize === true
            ? Object.keys(childSerializers)
            : serialize;
          delete bindings.serializers;
          applySerializers([bindings], childSerialize, childSerializers, this._stdErrSerialize);
        }
        function Child (parent) {
          this._childLevel = (parent._childLevel | 0) + 1;
          this.error = bind(parent, bindings, 'error');
          this.fatal = bind(parent, bindings, 'fatal');
          this.warn = bind(parent, bindings, 'warn');
          this.info = bind(parent, bindings, 'info');
          this.debug = bind(parent, bindings, 'debug');
          this.trace = bind(parent, bindings, 'trace');
          if (childSerializers) {
            this.serializers = childSerializers;
            this._serialize = childSerialize;
          }
          if (transmit) {
            this._logEvent = createLogEventShape(
              [].concat(parent._logEvent.bindings, bindings)
            );
          }
        }
        Child.prototype = this;
        return new Child(this)
      }
      return logger
    }

    pino.levels = {
      values: {
        fatal: 60,
        error: 50,
        warn: 40,
        info: 30,
        debug: 20,
        trace: 10
      },
      labels: {
        10: 'trace',
        20: 'debug',
        30: 'info',
        40: 'warn',
        50: 'error',
        60: 'fatal'
      }
    };

    pino.stdSerializers = stdSerializers;
    pino.stdTimeFunctions = Object.assign({}, { nullTime, epochTime, unixTime, isoTime });

    function set (opts, logger, level, fallback) {
      const proto = Object.getPrototypeOf(logger);
      logger[level] = logger.levelVal > logger.levels.values[level]
        ? noop$1
        : (proto[level] ? proto[level] : (_console[level] || _console[fallback] || noop$1));

      wrap$1(opts, logger, level);
    }

    function wrap$1 (opts, logger, level) {
      if (!opts.transmit && logger[level] === noop$1) return

      logger[level] = (function (write) {
        return function LOG () {
          const ts = opts.timestamp();
          const args = new Array(arguments.length);
          const proto = (Object.getPrototypeOf && Object.getPrototypeOf(this) === _console) ? _console : this;
          for (var i = 0; i < args.length; i++) args[i] = arguments[i];

          if (opts.serialize && !opts.asObject) {
            applySerializers(args, this._serialize, this.serializers, this._stdErrSerialize);
          }
          if (opts.asObject) write.call(proto, asObject(this, level, args, ts));
          else write.apply(proto, args);

          if (opts.transmit) {
            const transmitLevel = opts.transmit.level || logger.level;
            const transmitValue = pino.levels.values[transmitLevel];
            const methodValue = pino.levels.values[level];
            if (methodValue < transmitValue) return
            transmit(this, {
              ts,
              methodLevel: level,
              methodValue,
              transmitLevel,
              transmitValue: pino.levels.values[opts.transmit.level || logger.level],
              send: opts.transmit.send,
              val: logger.levelVal
            }, args);
          }
        }
      })(logger[level]);
    }

    function asObject (logger, level, args, ts) {
      if (logger._serialize) applySerializers(args, logger._serialize, logger.serializers, logger._stdErrSerialize);
      const argsCloned = args.slice();
      let msg = argsCloned[0];
      const o = {};
      if (ts) {
        o.time = ts;
      }
      o.level = pino.levels.values[level];
      let lvl = (logger._childLevel | 0) + 1;
      if (lvl < 1) lvl = 1;
      // deliberate, catching objects, arrays
      if (msg !== null && typeof msg === 'object') {
        while (lvl-- && typeof argsCloned[0] === 'object') {
          Object.assign(o, argsCloned.shift());
        }
        msg = argsCloned.length ? quickFormatUnescaped(argsCloned.shift(), argsCloned) : undefined;
      } else if (typeof msg === 'string') msg = quickFormatUnescaped(argsCloned.shift(), argsCloned);
      if (msg !== undefined) o.msg = msg;
      return o
    }

    function applySerializers (args, serialize, serializers, stdErrSerialize) {
      for (const i in args) {
        if (stdErrSerialize && args[i] instanceof Error) {
          args[i] = pino.stdSerializers.err(args[i]);
        } else if (typeof args[i] === 'object' && !Array.isArray(args[i])) {
          for (const k in args[i]) {
            if (serialize && serialize.indexOf(k) > -1 && k in serializers) {
              args[i][k] = serializers[k](args[i][k]);
            }
          }
        }
      }
    }

    function bind (parent, bindings, level) {
      return function () {
        const args = new Array(1 + arguments.length);
        args[0] = bindings;
        for (var i = 1; i < args.length; i++) {
          args[i] = arguments[i - 1];
        }
        return parent[level].apply(this, args)
      }
    }

    function transmit (logger, opts, args) {
      const send = opts.send;
      const ts = opts.ts;
      const methodLevel = opts.methodLevel;
      const methodValue = opts.methodValue;
      const val = opts.val;
      const bindings = logger._logEvent.bindings;

      applySerializers(
        args,
        logger._serialize || Object.keys(logger.serializers),
        logger.serializers,
        logger._stdErrSerialize === undefined ? true : logger._stdErrSerialize
      );
      logger._logEvent.ts = ts;
      logger._logEvent.messages = args.filter(function (arg) {
        // bindings can only be objects, so reference equality check via indexOf is fine
        return bindings.indexOf(arg) === -1
      });

      logger._logEvent.level.label = methodLevel;
      logger._logEvent.level.value = methodValue;

      send(methodLevel, logger._logEvent, val);

      logger._logEvent = createLogEventShape(bindings);
    }

    function createLogEventShape (bindings) {
      return {
        ts: 0,
        messages: [],
        bindings: bindings || [],
        level: { label: '', value: 0 }
      }
    }

    function asErrValue (err) {
      const obj = {
        type: err.constructor.name,
        msg: err.message,
        stack: err.stack
      };
      for (const key in err) {
        if (obj[key] === undefined) {
          obj[key] = err[key];
        }
      }
      return obj
    }

    function getTimeFunction (opts) {
      if (typeof opts.timestamp === 'function') {
        return opts.timestamp
      }
      if (opts.timestamp === false) {
        return nullTime
      }
      return epochTime
    }

    function mock () { return {} }
    function passthrough (a) { return a }
    function noop$1 () {}

    function nullTime () { return false }
    function epochTime () { return Date.now() }
    function unixTime () { return Math.round(Date.now() / 1000.0) }
    function isoTime () { return new Date(Date.now()).toISOString() } // using Date.now() for testability

    /* eslint-disable */
    /* istanbul ignore next */
    function pfGlobalThisOrFallback () {
      function defd (o) { return typeof o !== 'undefined' && o }
      try {
        if (typeof globalThis !== 'undefined') return globalThis
        Object.defineProperty(Object.prototype, 'globalThis', {
          get: function () {
            delete Object.prototype.globalThis;
            return (this.globalThis = this)
          },
          configurable: true
        });
        return globalThis
      } catch (e) {
        return defd(self) || defd(window) || defd(this) || {}
      }
    }

    // Copyright Joyent, Inc. and other Node contributors.

    var R$2 = typeof Reflect === 'object' ? Reflect : null;
    var ReflectApply = R$2 && typeof R$2.apply === 'function'
      ? R$2.apply
      : function ReflectApply(target, receiver, args) {
        return Function.prototype.apply.call(target, receiver, args);
      };

    var ReflectOwnKeys;
    if (R$2 && typeof R$2.ownKeys === 'function') {
      ReflectOwnKeys = R$2.ownKeys;
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys(target) {
        return Object.getOwnPropertyNames(target)
          .concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys(target) {
        return Object.getOwnPropertyNames(target);
      };
    }

    function ProcessEmitWarning(warning) {
      if (console && console.warn) console.warn(warning);
    }

    var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
      return value !== value;
    };

    function EventEmitter() {
      EventEmitter.init.call(this);
    }
    var events = EventEmitter;
    var once_1 = once;

    // Backwards-compat with node 0.10.x
    EventEmitter.EventEmitter = EventEmitter;

    EventEmitter.prototype._events = undefined;
    EventEmitter.prototype._eventsCount = 0;
    EventEmitter.prototype._maxListeners = undefined;

    // By default EventEmitters will print a warning if more than 10 listeners are
    // added to it. This is a useful default which helps finding memory leaks.
    var defaultMaxListeners = 10;

    function checkListener(listener) {
      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
    }

    Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
      enumerable: true,
      get: function() {
        return defaultMaxListeners;
      },
      set: function(arg) {
        if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
        }
        defaultMaxListeners = arg;
      }
    });

    EventEmitter.init = function() {

      if (this._events === undefined ||
          this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
      }

      this._maxListeners = this._maxListeners || undefined;
    };

    // Obviously not all Emitters should be limited to 10. This function allows
    // that to be increased. Set to zero for unlimited.
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
      }
      this._maxListeners = n;
      return this;
    };

    function _getMaxListeners(that) {
      if (that._maxListeners === undefined)
        return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }

    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };

    EventEmitter.prototype.emit = function emit(type) {
      var args = [];
      for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
      var doError = (type === 'error');

      var events = this._events;
      if (events !== undefined)
        doError = (doError && events.error === undefined);
      else if (!doError)
        return false;

      // If there is no 'error' event listener then throw.
      if (doError) {
        var er;
        if (args.length > 0)
          er = args[0];
        if (er instanceof Error) {
          // Note: The comments on the `throw` lines are intentional, they show
          // up in Node's output if this results in an unhandled exception.
          throw er; // Unhandled 'error' event
        }
        // At least give some kind of context to the user
        var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
        err.context = er;
        throw err; // Unhandled 'error' event
      }

      var handler = events[type];

      if (handler === undefined)
        return false;

      if (typeof handler === 'function') {
        ReflectApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          ReflectApply(listeners[i], this, args);
      }

      return true;
    };

    function _addListener(target, type, listener, prepend) {
      var m;
      var events;
      var existing;

      checkListener(listener);

      events = target._events;
      if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
      } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
          target.emit('newListener', type,
                      listener.listener ? listener.listener : listener);

          // Re-assign `events` because a newListener handler could have caused the
          // this._events to be assigned to a new object
          events = target._events;
        }
        existing = events[type];
      }

      if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === 'function') {
          // Adding the second element, need to change to array.
          existing = events[type] =
            prepend ? [listener, existing] : [existing, listener];
          // If we've already got an array, just append.
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }

        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
          existing.warned = true;
          // No error code for this since it is a Warning
          // eslint-disable-next-line no-restricted-syntax
          var w = new Error('Possible EventEmitter memory leak detected. ' +
                              existing.length + ' ' + String(type) + ' listeners ' +
                              'added. Use emitter.setMaxListeners() to ' +
                              'increase limit');
          w.name = 'MaxListenersExceededWarning';
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          ProcessEmitWarning(w);
        }
      }

      return target;
    }

    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };

    EventEmitter.prototype.on = EventEmitter.prototype.addListener;

    EventEmitter.prototype.prependListener =
        function prependListener(type, listener) {
          return _addListener(this, type, listener, true);
        };

    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0)
          return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }

    function _onceWrap(target, type, listener) {
      var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
      var wrapped = onceWrapper.bind(state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }

    EventEmitter.prototype.once = function once(type, listener) {
      checkListener(listener);
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };

    EventEmitter.prototype.prependOnceListener =
        function prependOnceListener(type, listener) {
          checkListener(listener);
          this.prependListener(type, _onceWrap(this, type, listener));
          return this;
        };

    // Emits a 'removeListener' event if and only if the listener was removed.
    EventEmitter.prototype.removeListener =
        function removeListener(type, listener) {
          var list, events, position, i, originalListener;

          checkListener(listener);

          events = this._events;
          if (events === undefined)
            return this;

          list = events[type];
          if (list === undefined)
            return this;

          if (list === listener || list.listener === listener) {
            if (--this._eventsCount === 0)
              this._events = Object.create(null);
            else {
              delete events[type];
              if (events.removeListener)
                this.emit('removeListener', type, list.listener || listener);
            }
          } else if (typeof list !== 'function') {
            position = -1;

            for (i = list.length - 1; i >= 0; i--) {
              if (list[i] === listener || list[i].listener === listener) {
                originalListener = list[i].listener;
                position = i;
                break;
              }
            }

            if (position < 0)
              return this;

            if (position === 0)
              list.shift();
            else {
              spliceOne(list, position);
            }

            if (list.length === 1)
              events[type] = list[0];

            if (events.removeListener !== undefined)
              this.emit('removeListener', type, originalListener || listener);
          }

          return this;
        };

    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

    EventEmitter.prototype.removeAllListeners =
        function removeAllListeners(type) {
          var listeners, events, i;

          events = this._events;
          if (events === undefined)
            return this;

          // not listening for removeListener, no need to emit
          if (events.removeListener === undefined) {
            if (arguments.length === 0) {
              this._events = Object.create(null);
              this._eventsCount = 0;
            } else if (events[type] !== undefined) {
              if (--this._eventsCount === 0)
                this._events = Object.create(null);
              else
                delete events[type];
            }
            return this;
          }

          // emit removeListener for all listeners on all events
          if (arguments.length === 0) {
            var keys = Object.keys(events);
            var key;
            for (i = 0; i < keys.length; ++i) {
              key = keys[i];
              if (key === 'removeListener') continue;
              this.removeAllListeners(key);
            }
            this.removeAllListeners('removeListener');
            this._events = Object.create(null);
            this._eventsCount = 0;
            return this;
          }

          listeners = events[type];

          if (typeof listeners === 'function') {
            this.removeListener(type, listeners);
          } else if (listeners !== undefined) {
            // LIFO order
            for (i = listeners.length - 1; i >= 0; i--) {
              this.removeListener(type, listeners[i]);
            }
          }

          return this;
        };

    function _listeners(target, type, unwrap) {
      var events = target._events;

      if (events === undefined)
        return [];

      var evlistener = events[type];
      if (evlistener === undefined)
        return [];

      if (typeof evlistener === 'function')
        return unwrap ? [evlistener.listener || evlistener] : [evlistener];

      return unwrap ?
        unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }

    EventEmitter.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };

    EventEmitter.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };

    EventEmitter.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === 'function') {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };

    EventEmitter.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events = this._events;

      if (events !== undefined) {
        var evlistener = events[type];

        if (typeof evlistener === 'function') {
          return 1;
        } else if (evlistener !== undefined) {
          return evlistener.length;
        }
      }

      return 0;
    }

    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };

    function arrayClone(arr, n) {
      var copy = new Array(n);
      for (var i = 0; i < n; ++i)
        copy[i] = arr[i];
      return copy;
    }

    function spliceOne(list, index) {
      for (; index + 1 < list.length; index++)
        list[index] = list[index + 1];
      list.pop();
    }

    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
      return ret;
    }

    function once(emitter, name) {
      return new Promise(function (resolve, reject) {
        function errorListener(err) {
          emitter.removeListener(name, resolver);
          reject(err);
        }

        function resolver() {
          if (typeof emitter.removeListener === 'function') {
            emitter.removeListener('error', errorListener);
          }
          resolve([].slice.call(arguments));
        }
        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
        if (name !== 'error') {
          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
        }
      });
    }

    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
      if (typeof emitter.on === 'function') {
        eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
      }
    }

    function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
      if (typeof emitter.on === 'function') {
        if (flags.once) {
          emitter.once(name, listener);
        } else {
          emitter.on(name, listener);
        }
      } else if (typeof emitter.addEventListener === 'function') {
        // EventTarget does not have `error` event semantics like Node
        // EventEmitters, we do not listen for `error` events here.
        emitter.addEventListener(name, function wrapListener(arg) {
          // IE does not have builtin `{ once: true }` support so we
          // have to do it manually.
          if (flags.once) {
            emitter.removeEventListener(name, wrapListener);
          }
          listener(arg);
        });
      } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
      }
    }
    events.once = once_1;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$4 = function(d, b) {
        extendStatics$4 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics$4(d, b);
    };

    function __extends$4(d, b) {
        extendStatics$4(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign$4 = function() {
        __assign$4 = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign$4.apply(this, arguments);
    };

    function __rest$4(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate$4(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param$4(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata$4(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter$4(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator$4(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __createBinding$4(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }

    function __exportStar$4(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values$4(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read$4(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread$4() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read$4(arguments[i]));
        return ar;
    }

    function __spreadArrays$4() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __await$4(v) {
        return this instanceof __await$4 ? (this.v = v, this) : new __await$4(v);
    }

    function __asyncGenerator$4(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await$4 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator$4(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await$4(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues$4(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values$4 === "function" ? __values$4(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject$4(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    }
    function __importStar$4(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault$4(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet$4(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet$4(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var tslib_es6$4 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        __extends: __extends$4,
        get __assign () { return __assign$4; },
        __rest: __rest$4,
        __decorate: __decorate$4,
        __param: __param$4,
        __metadata: __metadata$4,
        __awaiter: __awaiter$4,
        __generator: __generator$4,
        __createBinding: __createBinding$4,
        __exportStar: __exportStar$4,
        __values: __values$4,
        __read: __read$4,
        __spread: __spread$4,
        __spreadArrays: __spreadArrays$4,
        __await: __await$4,
        __asyncGenerator: __asyncGenerator$4,
        __asyncDelegator: __asyncDelegator$4,
        __asyncValues: __asyncValues$4,
        __makeTemplateObject: __makeTemplateObject$4,
        __importStar: __importStar$4,
        __importDefault: __importDefault$4,
        __classPrivateFieldGet: __classPrivateFieldGet$4,
        __classPrivateFieldSet: __classPrivateFieldSet$4
    });

    function safeJsonParse$1(value) {
        if (typeof value !== 'string') {
            throw new Error(`Cannot safe json parse value of type ${typeof value}`);
        }
        try {
            return JSON.parse(value);
        }
        catch (_a) {
            return value;
        }
    }
    var safeJsonParse_1 = safeJsonParse$1;
    function safeJsonStringify$1(value) {
        return typeof value === 'string'
            ? value
            : JSON.stringify(value, (key, value) => typeof value === 'undefined' ? null : value);
    }
    var safeJsonStringify_1 = safeJsonStringify$1;


    var cjs$6 = /*#__PURE__*/Object.defineProperty({
    	safeJsonParse: safeJsonParse_1,
    	safeJsonStringify: safeJsonStringify_1
    }, '__esModule', {value: true});

    var localStorage$1 = createCommonjsModule$4(function (module) {
    (function () {
        let db;
        function LocalStorage() { }
        db = LocalStorage;
        db.prototype.getItem = function (key) {
            if (this.hasOwnProperty(key)) {
                return String(this[key]);
            }
            return null;
        };
        db.prototype.setItem = function (key, val) {
            this[key] = String(val);
        };
        db.prototype.removeItem = function (key) {
            delete this[key];
        };
        db.prototype.clear = function () {
            const self = this;
            Object.keys(self).forEach(function (key) {
                self[key] = undefined;
                delete self[key];
            });
        };
        db.prototype.key = function (i) {
            i = i || 0;
            return Object.keys(this)[i];
        };
        db.prototype.__defineGetter__("length", function () {
            return Object.keys(this).length;
        });
        if (typeof commonjsGlobal !== "undefined" && commonjsGlobal.localStorage) {
            module.exports = commonjsGlobal.localStorage;
        }
        else if (typeof window !== "undefined" && window.localStorage) {
            module.exports = window.localStorage;
        }
        else {
            module.exports = new LocalStorage();
        }
    })();

    });

    var types$2 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IKeyValueStorage = void 0;
    class IKeyValueStorage {
    }
    exports.IKeyValueStorage = IKeyValueStorage;

    });

    var utils$4 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseEntry = void 0;

    function parseEntry(entry) {
        var _a;
        return [entry[0], cjs$6.safeJsonParse((_a = entry[1]) !== null && _a !== void 0 ? _a : "")];
    }
    exports.parseEntry = parseEntry;

    });

    var tslib_1$4 = /*@__PURE__*/getAugmentedNamespace(tslib_es6$4);

    var shared = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    tslib_1$4.__exportStar(types$2, exports);
    tslib_1$4.__exportStar(utils$4, exports);

    });

    var browser$2 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.KeyValueStorage = void 0;


    const localStorage_1 = tslib_1$4.__importDefault(localStorage$1);

    class KeyValueStorage {
        constructor() {
            this.localStorage = localStorage_1.default;
        }
        getKeys() {
            return tslib_1$4.__awaiter(this, void 0, void 0, function* () {
                return Object.keys(this.localStorage);
            });
        }
        getEntries() {
            return tslib_1$4.__awaiter(this, void 0, void 0, function* () {
                return Object.entries(this.localStorage).map(shared.parseEntry);
            });
        }
        getItem(key) {
            return tslib_1$4.__awaiter(this, void 0, void 0, function* () {
                const item = this.localStorage.getItem(key);
                if (item === null) {
                    return undefined;
                }
                return cjs$6.safeJsonParse(item);
            });
        }
        setItem(key, value) {
            return tslib_1$4.__awaiter(this, void 0, void 0, function* () {
                this.localStorage.setItem(key, cjs$6.safeJsonStringify(value));
            });
        }
        removeItem(key) {
            return tslib_1$4.__awaiter(this, void 0, void 0, function* () {
                this.localStorage.removeItem(key);
            });
        }
    }
    exports.KeyValueStorage = KeyValueStorage;
    exports.default = KeyValueStorage;

    });

    var At$1 = /*@__PURE__*/getDefaultExportFromCjs(browser$2);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$3 = function(d, b) {
        extendStatics$3 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics$3(d, b);
    };

    function __extends$3(d, b) {
        extendStatics$3(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign$3 = function() {
        __assign$3 = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign$3.apply(this, arguments);
    };

    function __rest$3(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate$3(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param$3(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata$3(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter$3(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator$3(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __createBinding$3(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }

    function __exportStar$3(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values$3(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read$3(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread$3() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read$3(arguments[i]));
        return ar;
    }

    function __spreadArrays$3() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __await$3(v) {
        return this instanceof __await$3 ? (this.v = v, this) : new __await$3(v);
    }

    function __asyncGenerator$3(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await$3 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator$3(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await$3(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues$3(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values$3 === "function" ? __values$3(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject$3(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    }
    function __importStar$3(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault$3(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet$3(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet$3(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var tslib_es6$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        __extends: __extends$3,
        get __assign () { return __assign$3; },
        __rest: __rest$3,
        __decorate: __decorate$3,
        __param: __param$3,
        __metadata: __metadata$3,
        __awaiter: __awaiter$3,
        __generator: __generator$3,
        __createBinding: __createBinding$3,
        __exportStar: __exportStar$3,
        __values: __values$3,
        __read: __read$3,
        __spread: __spread$3,
        __spreadArrays: __spreadArrays$3,
        __await: __await$3,
        __asyncGenerator: __asyncGenerator$3,
        __asyncDelegator: __asyncDelegator$3,
        __asyncValues: __asyncValues$3,
        __makeTemplateObject: __makeTemplateObject$3,
        __importStar: __importStar$3,
        __importDefault: __importDefault$3,
        __classPrivateFieldGet: __classPrivateFieldGet$3,
        __classPrivateFieldSet: __classPrivateFieldSet$3
    });

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$2 = function(d, b) {
        extendStatics$2 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics$2(d, b);
    };

    function __extends$2(d, b) {
        extendStatics$2(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign$2 = function() {
        __assign$2 = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign$2.apply(this, arguments);
    };

    function __rest$2(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate$2(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param$2(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata$2(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter$2(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator$2(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __createBinding$2(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }

    function __exportStar$2(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values$2(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read$2(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread$2() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read$2(arguments[i]));
        return ar;
    }

    function __spreadArrays$2() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __await$2(v) {
        return this instanceof __await$2 ? (this.v = v, this) : new __await$2(v);
    }

    function __asyncGenerator$2(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await$2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator$2(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await$2(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues$2(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values$2 === "function" ? __values$2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject$2(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    }
    function __importStar$2(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault$2(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet$2(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet$2(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var tslib_es6$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        __extends: __extends$2,
        get __assign () { return __assign$2; },
        __rest: __rest$2,
        __decorate: __decorate$2,
        __param: __param$2,
        __metadata: __metadata$2,
        __awaiter: __awaiter$2,
        __generator: __generator$2,
        __createBinding: __createBinding$2,
        __exportStar: __exportStar$2,
        __values: __values$2,
        __read: __read$2,
        __spread: __spread$2,
        __spreadArrays: __spreadArrays$2,
        __await: __await$2,
        __asyncGenerator: __asyncGenerator$2,
        __asyncDelegator: __asyncDelegator$2,
        __asyncValues: __asyncValues$2,
        __makeTemplateObject: __makeTemplateObject$2,
        __importStar: __importStar$2,
        __importDefault: __importDefault$2,
        __classPrivateFieldGet: __classPrivateFieldGet$2,
        __classPrivateFieldSet: __classPrivateFieldSet$2
    });

    var delay_1 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.delay = void 0;
    function delay(timeout) {
        return new Promise(resolve => {
            setTimeout(() => {
                resolve(true);
            }, timeout);
        });
    }
    exports.delay = delay;

    });

    var misc = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ONE_THOUSAND = exports.ONE_HUNDRED = void 0;
    exports.ONE_HUNDRED = 100;
    exports.ONE_THOUSAND = 1000;

    });

    var time$1 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ONE_YEAR = exports.FOUR_WEEKS = exports.THREE_WEEKS = exports.TWO_WEEKS = exports.ONE_WEEK = exports.THIRTY_DAYS = exports.SEVEN_DAYS = exports.FIVE_DAYS = exports.THREE_DAYS = exports.ONE_DAY = exports.TWENTY_FOUR_HOURS = exports.TWELVE_HOURS = exports.SIX_HOURS = exports.THREE_HOURS = exports.ONE_HOUR = exports.SIXTY_MINUTES = exports.THIRTY_MINUTES = exports.TEN_MINUTES = exports.FIVE_MINUTES = exports.ONE_MINUTE = exports.SIXTY_SECONDS = exports.THIRTY_SECONDS = exports.TEN_SECONDS = exports.FIVE_SECONDS = exports.ONE_SECOND = void 0;
    exports.ONE_SECOND = 1;
    exports.FIVE_SECONDS = 5;
    exports.TEN_SECONDS = 10;
    exports.THIRTY_SECONDS = 30;
    exports.SIXTY_SECONDS = 60;
    exports.ONE_MINUTE = exports.SIXTY_SECONDS;
    exports.FIVE_MINUTES = exports.ONE_MINUTE * 5;
    exports.TEN_MINUTES = exports.ONE_MINUTE * 10;
    exports.THIRTY_MINUTES = exports.ONE_MINUTE * 30;
    exports.SIXTY_MINUTES = exports.ONE_MINUTE * 60;
    exports.ONE_HOUR = exports.SIXTY_MINUTES;
    exports.THREE_HOURS = exports.ONE_HOUR * 3;
    exports.SIX_HOURS = exports.ONE_HOUR * 6;
    exports.TWELVE_HOURS = exports.ONE_HOUR * 12;
    exports.TWENTY_FOUR_HOURS = exports.ONE_HOUR * 24;
    exports.ONE_DAY = exports.TWENTY_FOUR_HOURS;
    exports.THREE_DAYS = exports.ONE_DAY * 3;
    exports.FIVE_DAYS = exports.ONE_DAY * 5;
    exports.SEVEN_DAYS = exports.ONE_DAY * 7;
    exports.THIRTY_DAYS = exports.ONE_DAY * 30;
    exports.ONE_WEEK = exports.SEVEN_DAYS;
    exports.TWO_WEEKS = exports.ONE_WEEK * 2;
    exports.THREE_WEEKS = exports.ONE_WEEK * 3;
    exports.FOUR_WEEKS = exports.ONE_WEEK * 4;
    exports.ONE_YEAR = exports.ONE_DAY * 365;

    });

    var tslib_1$3 = /*@__PURE__*/getAugmentedNamespace(tslib_es6$2);

    var constants$2 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    tslib_1$3.__exportStar(misc, exports);
    tslib_1$3.__exportStar(time$1, exports);

    });

    var convert = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromMiliseconds = exports.toMiliseconds = void 0;

    function toMiliseconds(seconds) {
        return seconds * constants$2.ONE_THOUSAND;
    }
    exports.toMiliseconds = toMiliseconds;
    function fromMiliseconds(miliseconds) {
        return Math.floor(miliseconds / constants$2.ONE_THOUSAND);
    }
    exports.fromMiliseconds = fromMiliseconds;

    });

    var utils$3 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    tslib_1$3.__exportStar(delay_1, exports);
    tslib_1$3.__exportStar(convert, exports);

    });

    var watch$1 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Watch = void 0;
    class Watch {
        constructor() {
            this.timestamps = new Map();
        }
        start(label) {
            if (this.timestamps.has(label)) {
                throw new Error(`Watch already started for label: ${label}`);
            }
            this.timestamps.set(label, { started: Date.now() });
        }
        stop(label) {
            const timestamp = this.get(label);
            if (typeof timestamp.elapsed !== "undefined") {
                throw new Error(`Watch already stopped for label: ${label}`);
            }
            const elapsed = Date.now() - timestamp.started;
            this.timestamps.set(label, { started: timestamp.started, elapsed });
        }
        get(label) {
            const timestamp = this.timestamps.get(label);
            if (typeof timestamp === "undefined") {
                throw new Error(`No timestamp found for label: ${label}`);
            }
            return timestamp;
        }
        elapsed(label) {
            const timestamp = this.get(label);
            const elapsed = timestamp.elapsed || Date.now() - timestamp.started;
            return elapsed;
        }
    }
    exports.Watch = Watch;
    exports.default = Watch;

    });

    var watch = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IWatch = void 0;
    class IWatch {
    }
    exports.IWatch = IWatch;

    });

    var types$1 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    tslib_1$3.__exportStar(watch, exports);

    });

    var cjs$5 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    tslib_1$3.__exportStar(utils$3, exports);
    tslib_1$3.__exportStar(watch$1, exports);
    tslib_1$3.__exportStar(types$1, exports);
    tslib_1$3.__exportStar(constants$2, exports);

    });

    class IEvents$1 {
    }

    var esm = /*#__PURE__*/Object.freeze({
        __proto__: null,
        IEvents: IEvents$1
    });

    var events_1 = /*@__PURE__*/getAugmentedNamespace(esm);

    var heartbeat$2 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IHeartBeat = void 0;

    class IHeartBeat extends events_1.IEvents {
        constructor(opts) {
            super();
        }
    }
    exports.IHeartBeat = IHeartBeat;

    });

    var tslib_1$2 = /*@__PURE__*/getAugmentedNamespace(tslib_es6$3);

    var types = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    tslib_1$2.__exportStar(heartbeat$2, exports);

    });

    var heartbeat$1 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HEARTBEAT_EVENTS = exports.HEARTBEAT_INTERVAL = void 0;

    exports.HEARTBEAT_INTERVAL = cjs$5.FIVE_SECONDS;
    exports.HEARTBEAT_EVENTS = {
        pulse: "heartbeat_pulse",
    };

    });

    var constants$1 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    tslib_1$2.__exportStar(heartbeat$1, exports);

    });

    var heartbeat = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HeartBeat = void 0;





    class HeartBeat extends types.IHeartBeat {
        constructor(opts) {
            super(opts);
            this.events = new events.EventEmitter();
            this.interval = constants$1.HEARTBEAT_INTERVAL;
            this.interval = (opts === null || opts === void 0 ? void 0 : opts.interval) || constants$1.HEARTBEAT_INTERVAL;
        }
        static init(opts) {
            return tslib_1$2.__awaiter(this, void 0, void 0, function* () {
                const heartbeat = new HeartBeat(opts);
                yield heartbeat.init();
                return heartbeat;
            });
        }
        init() {
            return tslib_1$2.__awaiter(this, void 0, void 0, function* () {
                yield this.initialize();
            });
        }
        on(event, listener) {
            this.events.on(event, listener);
        }
        once(event, listener) {
            this.events.once(event, listener);
        }
        off(event, listener) {
            this.events.off(event, listener);
        }
        removeListener(event, listener) {
            this.events.removeListener(event, listener);
        }
        initialize() {
            return tslib_1$2.__awaiter(this, void 0, void 0, function* () {
                setInterval(() => this.pulse(), cjs$5.toMiliseconds(this.interval));
            });
        }
        pulse() {
            this.events.emit(constants$1.HEARTBEAT_EVENTS.pulse);
        }
    }
    exports.HeartBeat = HeartBeat;

    });

    var cjs$4 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    tslib_1$2.__exportStar(heartbeat, exports);
    tslib_1$2.__exportStar(types, exports);
    tslib_1$2.__exportStar(constants$1, exports);

    });

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$1 = function(d, b) {
        extendStatics$1 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics$1(d, b);
    };

    function __extends$1(d, b) {
        extendStatics$1(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign$1 = function() {
        __assign$1 = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign$1.apply(this, arguments);
    };

    function __rest$1(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate$1(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param$1(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata$1(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter$1(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator$1(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __createBinding$1(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }

    function __exportStar$1(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values$1(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read$1(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread$1() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read$1(arguments[i]));
        return ar;
    }

    function __spreadArrays$1() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __await$1(v) {
        return this instanceof __await$1 ? (this.v = v, this) : new __await$1(v);
    }

    function __asyncGenerator$1(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await$1 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator$1(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await$1(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues$1(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values$1 === "function" ? __values$1(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject$1(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    }
    function __importStar$1(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault$1(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet$1(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet$1(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var tslib_es6$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        __extends: __extends$1,
        get __assign () { return __assign$1; },
        __rest: __rest$1,
        __decorate: __decorate$1,
        __param: __param$1,
        __metadata: __metadata$1,
        __awaiter: __awaiter$1,
        __generator: __generator$1,
        __createBinding: __createBinding$1,
        __exportStar: __exportStar$1,
        __values: __values$1,
        __read: __read$1,
        __spread: __spread$1,
        __spreadArrays: __spreadArrays$1,
        __await: __await$1,
        __asyncGenerator: __asyncGenerator$1,
        __asyncDelegator: __asyncDelegator$1,
        __asyncValues: __asyncValues$1,
        __makeTemplateObject: __makeTemplateObject$1,
        __importStar: __importStar$1,
        __importDefault: __importDefault$1,
        __classPrivateFieldGet: __classPrivateFieldGet$1,
        __classPrivateFieldSet: __classPrivateFieldSet$1
    });

    var constants = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PINO_CUSTOM_CONTEXT_KEY = exports.PINO_LOGGER_DEFAULTS = void 0;
    exports.PINO_LOGGER_DEFAULTS = {
        level: "info",
    };
    exports.PINO_CUSTOM_CONTEXT_KEY = "custom_context";

    });

    var utils$2 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generateChildLogger = exports.formatChildLoggerContext = exports.getLoggerContext = exports.setBrowserLoggerContext = exports.getBrowserLoggerContext = exports.getDefaultLoggerOptions = void 0;

    function getDefaultLoggerOptions(opts) {
        return Object.assign(Object.assign({}, opts), { level: (opts === null || opts === void 0 ? void 0 : opts.level) || constants.PINO_LOGGER_DEFAULTS.level });
    }
    exports.getDefaultLoggerOptions = getDefaultLoggerOptions;
    function getBrowserLoggerContext(logger, customContextKey = constants.PINO_CUSTOM_CONTEXT_KEY) {
        return logger[customContextKey] || "";
    }
    exports.getBrowserLoggerContext = getBrowserLoggerContext;
    function setBrowserLoggerContext(logger, context, customContextKey = constants.PINO_CUSTOM_CONTEXT_KEY) {
        logger[customContextKey] = context;
        return logger;
    }
    exports.setBrowserLoggerContext = setBrowserLoggerContext;
    function getLoggerContext(logger, customContextKey = constants.PINO_CUSTOM_CONTEXT_KEY) {
        let context = "";
        if (typeof logger.bindings === "undefined") {
            context = getBrowserLoggerContext(logger, customContextKey);
        }
        else {
            context = logger.bindings().context || "";
        }
        return context;
    }
    exports.getLoggerContext = getLoggerContext;
    function formatChildLoggerContext(logger, childContext, customContextKey = constants.PINO_CUSTOM_CONTEXT_KEY) {
        const parentContext = getLoggerContext(logger, customContextKey);
        const context = parentContext.trim()
            ? `${parentContext}/${childContext}`
            : childContext;
        return context;
    }
    exports.formatChildLoggerContext = formatChildLoggerContext;
    function generateChildLogger(logger, childContext, customContextKey = constants.PINO_CUSTOM_CONTEXT_KEY) {
        const context = formatChildLoggerContext(logger, childContext, customContextKey);
        const child = logger.child({ context });
        return setBrowserLoggerContext(child, context, customContextKey);
    }
    exports.generateChildLogger = generateChildLogger;

    });

    var tslib_1$1 = /*@__PURE__*/getAugmentedNamespace(tslib_es6$1);

    var cjs$3 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pino = void 0;

    const pino_1 = tslib_1$1.__importDefault(browser$3);
    Object.defineProperty(exports, "pino", { enumerable: true, get: function () { return pino_1.default; } });
    tslib_1$1.__exportStar(constants, exports);
    tslib_1$1.__exportStar(utils$2, exports);

    });

    class n$6 extends IEvents$1{constructor(s){super(),this.opts=s,this.protocol="wc",this.version=2;}}class h$4 extends IEvents$1{constructor(s,t){super(),this.core=s,this.logger=t,this.records=new Map;}}class a$5{constructor(s,t){this.logger=s,this.core=t;}}class u$3 extends IEvents$1{constructor(s,t){super(),this.relayer=s,this.logger=t;}}class g$3 extends IEvents$1{constructor(s){super();}}class p$3{constructor(s,t,o,S){this.core=s,this.logger=t,this.name=o;}}class x$1 extends IEvents$1{constructor(s,t){super(),this.relayer=s,this.logger=t;}}class E$2 extends IEvents$1{constructor(s,t){super(),this.core=s,this.logger=t;}}class y$5{constructor(s){this.opts=s,this.protocol="wc",this.version=2;}}class C$5{constructor(s){this.client=s;}}

    function safeJsonParse(value) {
        if (typeof value !== "string") {
            throw new Error(`Cannot safe json parse value of type ${typeof value}`);
        }
        try {
            return JSON.parse(value);
        }
        catch (_a) {
            return value;
        }
    }
    function safeJsonStringify(value) {
        return typeof value === "string" ? value : JSON.stringify(value);
    }

    var browser$1 = createCommonjsModule$4(function (module, exports) {
    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BrowserRandomSource = void 0;
    const QUOTA = 65536;
    class BrowserRandomSource {
        constructor() {
            this.isAvailable = false;
            this.isInstantiated = false;
            const browserCrypto = typeof self !== 'undefined'
                ? (self.crypto || self.msCrypto) // IE11 has msCrypto
                : null;
            if (browserCrypto && browserCrypto.getRandomValues !== undefined) {
                this._crypto = browserCrypto;
                this.isAvailable = true;
                this.isInstantiated = true;
            }
        }
        randomBytes(length) {
            if (!this.isAvailable || !this._crypto) {
                throw new Error("Browser random byte generator is not available.");
            }
            const out = new Uint8Array(length);
            for (let i = 0; i < out.length; i += QUOTA) {
                this._crypto.getRandomValues(out.subarray(i, i + Math.min(out.length - i, QUOTA)));
            }
            return out;
        }
    }
    exports.BrowserRandomSource = BrowserRandomSource;

    });

    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.

    /**
     * Sets all values in the given array to zero and returns it.
     *
     * The fact that it sets bytes to zero can be relied on.
     *
     * There is no guarantee that this function makes data disappear from memory,
     * as runtime implementation can, for example, have copying garbage collector
     * that will make copies of sensitive data before we wipe it. Or that an
     * operating system will write our data to swap or sleep image. Another thing
     * is that an optimizing compiler can remove calls to this function or make it
     * no-op. There's nothing we can do with it, so we just do our best and hope
     * that everything will be okay and good will triumph over evil.
     */
    function wipe(array) {
        // Right now it's similar to array.fill(0). If it turns
        // out that runtimes optimize this call away, maybe
        // we can try something else.
        for (var i = 0; i < array.length; i++) {
            array[i] = 0;
        }
        return array;
    }
    var wipe_2 = wipe;


    var wipe_1 = /*#__PURE__*/Object.defineProperty({
    	wipe: wipe_2
    }, '__esModule', {value: true});

    var node = createCommonjsModule$4(function (module, exports) {
    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeRandomSource = void 0;

    class NodeRandomSource {
        constructor() {
            this.isAvailable = false;
            this.isInstantiated = false;
            if (typeof commonjsRequire$1 !== "undefined") {
                const nodeCrypto = require$$0$2;
                if (nodeCrypto && nodeCrypto.randomBytes) {
                    this._crypto = nodeCrypto;
                    this.isAvailable = true;
                    this.isInstantiated = true;
                }
            }
        }
        randomBytes(length) {
            if (!this.isAvailable || !this._crypto) {
                throw new Error("Node.js random byte generator is not available.");
            }
            // Get random bytes (result is Buffer).
            let buffer = this._crypto.randomBytes(length);
            // Make sure we got the length that we requested.
            if (buffer.length !== length) {
                throw new Error("NodeRandomSource: got fewer bytes than requested");
            }
            // Allocate output array.
            const out = new Uint8Array(length);
            // Copy bytes from buffer to output.
            for (let i = 0; i < out.length; i++) {
                out[i] = buffer[i];
            }
            // Cleanup.
            (0, wipe_1.wipe)(buffer);
            return out;
        }
    }
    exports.NodeRandomSource = NodeRandomSource;

    });

    var system = createCommonjsModule$4(function (module, exports) {
    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SystemRandomSource = void 0;


    class SystemRandomSource {
        constructor() {
            this.isAvailable = false;
            this.name = "";
            // Try browser.
            this._source = new browser$1.BrowserRandomSource();
            if (this._source.isAvailable) {
                this.isAvailable = true;
                this.name = "Browser";
                return;
            }
            // If no browser source, try Node.
            this._source = new node.NodeRandomSource();
            if (this._source.isAvailable) {
                this.isAvailable = true;
                this.name = "Node";
                return;
            }
            // No sources, we're out of options.
        }
        randomBytes(length) {
            if (!this.isAvailable) {
                throw new Error("System random byte generator is not available.");
            }
            return this._source.randomBytes(length);
        }
    }
    exports.SystemRandomSource = SystemRandomSource;

    });

    var int = createCommonjsModule$4(function (module, exports) {
    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Package int provides helper functions for integerss.
     */
    // Shim using 16-bit pieces.
    function imulShim(a, b) {
        var ah = (a >>> 16) & 0xffff, al = a & 0xffff;
        var bh = (b >>> 16) & 0xffff, bl = b & 0xffff;
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0);
    }
    /** 32-bit integer multiplication.  */
    // Use system Math.imul if available, otherwise use our shim.
    exports.mul = Math.imul || imulShim;
    /** 32-bit integer addition.  */
    function add(a, b) {
        return (a + b) | 0;
    }
    exports.add = add;
    /**  32-bit integer subtraction.  */
    function sub(a, b) {
        return (a - b) | 0;
    }
    exports.sub = sub;
    /** 32-bit integer left rotation */
    function rotl(x, n) {
        return x << n | x >>> (32 - n);
    }
    exports.rotl = rotl;
    /** 32-bit integer left rotation */
    function rotr(x, n) {
        return x << (32 - n) | x >>> n;
    }
    exports.rotr = rotr;
    function isIntegerShim(n) {
        return typeof n === "number" && isFinite(n) && Math.floor(n) === n;
    }
    /**
     * Returns true if the argument is an integer number.
     *
     * In ES2015, Number.isInteger.
     */
    exports.isInteger = Number.isInteger || isIntegerShim;
    /**
     *  Math.pow(2, 53) - 1
     *
     *  In ES2015 Number.MAX_SAFE_INTEGER.
     */
    exports.MAX_SAFE_INTEGER = 9007199254740991;
    /**
     * Returns true if the argument is a safe integer number
     * (-MIN_SAFE_INTEGER < number <= MAX_SAFE_INTEGER)
     *
     * In ES2015, Number.isSafeInteger.
     */
    exports.isSafeInteger = function (n) {
        return exports.isInteger(n) && (n >= -exports.MAX_SAFE_INTEGER && n <= exports.MAX_SAFE_INTEGER);
    };

    });

    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.

    /**
     * Package binary provides functions for encoding and decoding numbers in byte arrays.
     */

    // TODO(dchest): add asserts for correct value ranges and array offsets.
    /**
     * Reads 2 bytes from array starting at offset as big-endian
     * signed 16-bit integer and returns it.
     */
    function readInt16BE(array, offset) {
        if (offset === void 0) { offset = 0; }
        return (((array[offset + 0] << 8) | array[offset + 1]) << 16) >> 16;
    }
    var readInt16BE_1 = readInt16BE;
    /**
     * Reads 2 bytes from array starting at offset as big-endian
     * unsigned 16-bit integer and returns it.
     */
    function readUint16BE(array, offset) {
        if (offset === void 0) { offset = 0; }
        return ((array[offset + 0] << 8) | array[offset + 1]) >>> 0;
    }
    var readUint16BE_1 = readUint16BE;
    /**
     * Reads 2 bytes from array starting at offset as little-endian
     * signed 16-bit integer and returns it.
     */
    function readInt16LE(array, offset) {
        if (offset === void 0) { offset = 0; }
        return (((array[offset + 1] << 8) | array[offset]) << 16) >> 16;
    }
    var readInt16LE_1 = readInt16LE;
    /**
     * Reads 2 bytes from array starting at offset as little-endian
     * unsigned 16-bit integer and returns it.
     */
    function readUint16LE(array, offset) {
        if (offset === void 0) { offset = 0; }
        return ((array[offset + 1] << 8) | array[offset]) >>> 0;
    }
    var readUint16LE_1 = readUint16LE;
    /**
     * Writes 2-byte big-endian representation of 16-bit unsigned
     * value to byte array starting at offset.
     *
     * If byte array is not given, creates a new 2-byte one.
     *
     * Returns the output byte array.
     */
    function writeUint16BE(value, out, offset) {
        if (out === void 0) { out = new Uint8Array(2); }
        if (offset === void 0) { offset = 0; }
        out[offset + 0] = value >>> 8;
        out[offset + 1] = value >>> 0;
        return out;
    }
    var writeUint16BE_1 = writeUint16BE;
    var writeInt16BE = writeUint16BE;
    /**
     * Writes 2-byte little-endian representation of 16-bit unsigned
     * value to array starting at offset.
     *
     * If byte array is not given, creates a new 2-byte one.
     *
     * Returns the output byte array.
     */
    function writeUint16LE(value, out, offset) {
        if (out === void 0) { out = new Uint8Array(2); }
        if (offset === void 0) { offset = 0; }
        out[offset + 0] = value >>> 0;
        out[offset + 1] = value >>> 8;
        return out;
    }
    var writeUint16LE_1 = writeUint16LE;
    var writeInt16LE = writeUint16LE;
    /**
     * Reads 4 bytes from array starting at offset as big-endian
     * signed 32-bit integer and returns it.
     */
    function readInt32BE(array, offset) {
        if (offset === void 0) { offset = 0; }
        return (array[offset] << 24) |
            (array[offset + 1] << 16) |
            (array[offset + 2] << 8) |
            array[offset + 3];
    }
    var readInt32BE_1 = readInt32BE;
    /**
     * Reads 4 bytes from array starting at offset as big-endian
     * unsigned 32-bit integer and returns it.
     */
    function readUint32BE(array, offset) {
        if (offset === void 0) { offset = 0; }
        return ((array[offset] << 24) |
            (array[offset + 1] << 16) |
            (array[offset + 2] << 8) |
            array[offset + 3]) >>> 0;
    }
    var readUint32BE_1 = readUint32BE;
    /**
     * Reads 4 bytes from array starting at offset as little-endian
     * signed 32-bit integer and returns it.
     */
    function readInt32LE(array, offset) {
        if (offset === void 0) { offset = 0; }
        return (array[offset + 3] << 24) |
            (array[offset + 2] << 16) |
            (array[offset + 1] << 8) |
            array[offset];
    }
    var readInt32LE_1 = readInt32LE;
    /**
     * Reads 4 bytes from array starting at offset as little-endian
     * unsigned 32-bit integer and returns it.
     */
    function readUint32LE(array, offset) {
        if (offset === void 0) { offset = 0; }
        return ((array[offset + 3] << 24) |
            (array[offset + 2] << 16) |
            (array[offset + 1] << 8) |
            array[offset]) >>> 0;
    }
    var readUint32LE_1 = readUint32LE;
    /**
     * Writes 4-byte big-endian representation of 32-bit unsigned
     * value to byte array starting at offset.
     *
     * If byte array is not given, creates a new 4-byte one.
     *
     * Returns the output byte array.
     */
    function writeUint32BE(value, out, offset) {
        if (out === void 0) { out = new Uint8Array(4); }
        if (offset === void 0) { offset = 0; }
        out[offset + 0] = value >>> 24;
        out[offset + 1] = value >>> 16;
        out[offset + 2] = value >>> 8;
        out[offset + 3] = value >>> 0;
        return out;
    }
    var writeUint32BE_1 = writeUint32BE;
    var writeInt32BE = writeUint32BE;
    /**
     * Writes 4-byte little-endian representation of 32-bit unsigned
     * value to array starting at offset.
     *
     * If byte array is not given, creates a new 4-byte one.
     *
     * Returns the output byte array.
     */
    function writeUint32LE(value, out, offset) {
        if (out === void 0) { out = new Uint8Array(4); }
        if (offset === void 0) { offset = 0; }
        out[offset + 0] = value >>> 0;
        out[offset + 1] = value >>> 8;
        out[offset + 2] = value >>> 16;
        out[offset + 3] = value >>> 24;
        return out;
    }
    var writeUint32LE_1 = writeUint32LE;
    var writeInt32LE = writeUint32LE;
    /**
     * Reads 8 bytes from array starting at offset as big-endian
     * signed 64-bit integer and returns it.
     *
     * IMPORTANT: due to JavaScript limitation, supports exact
     * numbers in range -9007199254740991 to 9007199254740991.
     * If the number stored in the byte array is outside this range,
     * the result is not exact.
     */
    function readInt64BE(array, offset) {
        if (offset === void 0) { offset = 0; }
        var hi = readInt32BE(array, offset);
        var lo = readInt32BE(array, offset + 4);
        return hi * 0x100000000 + lo - ((lo >> 31) * 0x100000000);
    }
    var readInt64BE_1 = readInt64BE;
    /**
     * Reads 8 bytes from array starting at offset as big-endian
     * unsigned 64-bit integer and returns it.
     *
     * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.
     */
    function readUint64BE(array, offset) {
        if (offset === void 0) { offset = 0; }
        var hi = readUint32BE(array, offset);
        var lo = readUint32BE(array, offset + 4);
        return hi * 0x100000000 + lo;
    }
    var readUint64BE_1 = readUint64BE;
    /**
     * Reads 8 bytes from array starting at offset as little-endian
     * signed 64-bit integer and returns it.
     *
     * IMPORTANT: due to JavaScript limitation, supports exact
     * numbers in range -9007199254740991 to 9007199254740991.
     * If the number stored in the byte array is outside this range,
     * the result is not exact.
     */
    function readInt64LE(array, offset) {
        if (offset === void 0) { offset = 0; }
        var lo = readInt32LE(array, offset);
        var hi = readInt32LE(array, offset + 4);
        return hi * 0x100000000 + lo - ((lo >> 31) * 0x100000000);
    }
    var readInt64LE_1 = readInt64LE;
    /**
     * Reads 8 bytes from array starting at offset as little-endian
     * unsigned 64-bit integer and returns it.
     *
     * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.
     */
    function readUint64LE(array, offset) {
        if (offset === void 0) { offset = 0; }
        var lo = readUint32LE(array, offset);
        var hi = readUint32LE(array, offset + 4);
        return hi * 0x100000000 + lo;
    }
    var readUint64LE_1 = readUint64LE;
    /**
     * Writes 8-byte big-endian representation of 64-bit unsigned
     * value to byte array starting at offset.
     *
     * Due to JavaScript limitation, supports values up to 2^53-1.
     *
     * If byte array is not given, creates a new 8-byte one.
     *
     * Returns the output byte array.
     */
    function writeUint64BE(value, out, offset) {
        if (out === void 0) { out = new Uint8Array(8); }
        if (offset === void 0) { offset = 0; }
        writeUint32BE(value / 0x100000000 >>> 0, out, offset);
        writeUint32BE(value >>> 0, out, offset + 4);
        return out;
    }
    var writeUint64BE_1 = writeUint64BE;
    var writeInt64BE = writeUint64BE;
    /**
     * Writes 8-byte little-endian representation of 64-bit unsigned
     * value to byte array starting at offset.
     *
     * Due to JavaScript limitation, supports values up to 2^53-1.
     *
     * If byte array is not given, creates a new 8-byte one.
     *
     * Returns the output byte array.
     */
    function writeUint64LE(value, out, offset) {
        if (out === void 0) { out = new Uint8Array(8); }
        if (offset === void 0) { offset = 0; }
        writeUint32LE(value >>> 0, out, offset);
        writeUint32LE(value / 0x100000000 >>> 0, out, offset + 4);
        return out;
    }
    var writeUint64LE_1 = writeUint64LE;
    var writeInt64LE = writeUint64LE;
    /**
     * Reads bytes from array starting at offset as big-endian
     * unsigned bitLen-bit integer and returns it.
     *
     * Supports bit lengths divisible by 8, up to 48.
     */
    function readUintBE(bitLength, array, offset) {
        if (offset === void 0) { offset = 0; }
        // TODO(dchest): implement support for bitLengths non-divisible by 8
        if (bitLength % 8 !== 0) {
            throw new Error("readUintBE supports only bitLengths divisible by 8");
        }
        if (bitLength / 8 > array.length - offset) {
            throw new Error("readUintBE: array is too short for the given bitLength");
        }
        var result = 0;
        var mul = 1;
        for (var i = bitLength / 8 + offset - 1; i >= offset; i--) {
            result += array[i] * mul;
            mul *= 256;
        }
        return result;
    }
    var readUintBE_1 = readUintBE;
    /**
     * Reads bytes from array starting at offset as little-endian
     * unsigned bitLen-bit integer and returns it.
     *
     * Supports bit lengths divisible by 8, up to 48.
     */
    function readUintLE(bitLength, array, offset) {
        if (offset === void 0) { offset = 0; }
        // TODO(dchest): implement support for bitLengths non-divisible by 8
        if (bitLength % 8 !== 0) {
            throw new Error("readUintLE supports only bitLengths divisible by 8");
        }
        if (bitLength / 8 > array.length - offset) {
            throw new Error("readUintLE: array is too short for the given bitLength");
        }
        var result = 0;
        var mul = 1;
        for (var i = offset; i < offset + bitLength / 8; i++) {
            result += array[i] * mul;
            mul *= 256;
        }
        return result;
    }
    var readUintLE_1 = readUintLE;
    /**
     * Writes a big-endian representation of bitLen-bit unsigned
     * value to array starting at offset.
     *
     * Supports bit lengths divisible by 8, up to 48.
     *
     * If byte array is not given, creates a new one.
     *
     * Returns the output byte array.
     */
    function writeUintBE(bitLength, value, out, offset) {
        if (out === void 0) { out = new Uint8Array(bitLength / 8); }
        if (offset === void 0) { offset = 0; }
        // TODO(dchest): implement support for bitLengths non-divisible by 8
        if (bitLength % 8 !== 0) {
            throw new Error("writeUintBE supports only bitLengths divisible by 8");
        }
        if (!int.isSafeInteger(value)) {
            throw new Error("writeUintBE value must be an integer");
        }
        var div = 1;
        for (var i = bitLength / 8 + offset - 1; i >= offset; i--) {
            out[i] = (value / div) & 0xff;
            div *= 256;
        }
        return out;
    }
    var writeUintBE_1 = writeUintBE;
    /**
     * Writes a little-endian representation of bitLen-bit unsigned
     * value to array starting at offset.
     *
     * Supports bit lengths divisible by 8, up to 48.
     *
     * If byte array is not given, creates a new one.
     *
     * Returns the output byte array.
     */
    function writeUintLE(bitLength, value, out, offset) {
        if (out === void 0) { out = new Uint8Array(bitLength / 8); }
        if (offset === void 0) { offset = 0; }
        // TODO(dchest): implement support for bitLengths non-divisible by 8
        if (bitLength % 8 !== 0) {
            throw new Error("writeUintLE supports only bitLengths divisible by 8");
        }
        if (!int.isSafeInteger(value)) {
            throw new Error("writeUintLE value must be an integer");
        }
        var div = 1;
        for (var i = offset; i < offset + bitLength / 8; i++) {
            out[i] = (value / div) & 0xff;
            div *= 256;
        }
        return out;
    }
    var writeUintLE_1 = writeUintLE;
    /**
     * Reads 4 bytes from array starting at offset as big-endian
     * 32-bit floating-point number and returns it.
     */
    function readFloat32BE(array, offset) {
        if (offset === void 0) { offset = 0; }
        var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
        return view.getFloat32(offset);
    }
    var readFloat32BE_1 = readFloat32BE;
    /**
     * Reads 4 bytes from array starting at offset as little-endian
     * 32-bit floating-point number and returns it.
     */
    function readFloat32LE(array, offset) {
        if (offset === void 0) { offset = 0; }
        var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
        return view.getFloat32(offset, true);
    }
    var readFloat32LE_1 = readFloat32LE;
    /**
     * Reads 8 bytes from array starting at offset as big-endian
     * 64-bit floating-point number ("double") and returns it.
     */
    function readFloat64BE(array, offset) {
        if (offset === void 0) { offset = 0; }
        var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
        return view.getFloat64(offset);
    }
    var readFloat64BE_1 = readFloat64BE;
    /**
     * Reads 8 bytes from array starting at offset as little-endian
     * 64-bit floating-point number ("double") and returns it.
     */
    function readFloat64LE(array, offset) {
        if (offset === void 0) { offset = 0; }
        var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
        return view.getFloat64(offset, true);
    }
    var readFloat64LE_1 = readFloat64LE;
    /**
     * Writes 4-byte big-endian floating-point representation of value
     * to byte array starting at offset.
     *
     * If byte array is not given, creates a new 4-byte one.
     *
     * Returns the output byte array.
     */
    function writeFloat32BE(value, out, offset) {
        if (out === void 0) { out = new Uint8Array(4); }
        if (offset === void 0) { offset = 0; }
        var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
        view.setFloat32(offset, value);
        return out;
    }
    var writeFloat32BE_1 = writeFloat32BE;
    /**
     * Writes 4-byte little-endian floating-point representation of value
     * to byte array starting at offset.
     *
     * If byte array is not given, creates a new 4-byte one.
     *
     * Returns the output byte array.
     */
    function writeFloat32LE(value, out, offset) {
        if (out === void 0) { out = new Uint8Array(4); }
        if (offset === void 0) { offset = 0; }
        var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
        view.setFloat32(offset, value, true);
        return out;
    }
    var writeFloat32LE_1 = writeFloat32LE;
    /**
     * Writes 8-byte big-endian floating-point representation of value
     * to byte array starting at offset.
     *
     * If byte array is not given, creates a new 8-byte one.
     *
     * Returns the output byte array.
     */
    function writeFloat64BE(value, out, offset) {
        if (out === void 0) { out = new Uint8Array(8); }
        if (offset === void 0) { offset = 0; }
        var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
        view.setFloat64(offset, value);
        return out;
    }
    var writeFloat64BE_1 = writeFloat64BE;
    /**
     * Writes 8-byte little-endian floating-point representation of value
     * to byte array starting at offset.
     *
     * If byte array is not given, creates a new 8-byte one.
     *
     * Returns the output byte array.
     */
    function writeFloat64LE(value, out, offset) {
        if (out === void 0) { out = new Uint8Array(8); }
        if (offset === void 0) { offset = 0; }
        var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
        view.setFloat64(offset, value, true);
        return out;
    }
    var writeFloat64LE_1 = writeFloat64LE;


    var binary = /*#__PURE__*/Object.defineProperty({
    	readInt16BE: readInt16BE_1,
    	readUint16BE: readUint16BE_1,
    	readInt16LE: readInt16LE_1,
    	readUint16LE: readUint16LE_1,
    	writeUint16BE: writeUint16BE_1,
    	writeInt16BE: writeInt16BE,
    	writeUint16LE: writeUint16LE_1,
    	writeInt16LE: writeInt16LE,
    	readInt32BE: readInt32BE_1,
    	readUint32BE: readUint32BE_1,
    	readInt32LE: readInt32LE_1,
    	readUint32LE: readUint32LE_1,
    	writeUint32BE: writeUint32BE_1,
    	writeInt32BE: writeInt32BE,
    	writeUint32LE: writeUint32LE_1,
    	writeInt32LE: writeInt32LE,
    	readInt64BE: readInt64BE_1,
    	readUint64BE: readUint64BE_1,
    	readInt64LE: readInt64LE_1,
    	readUint64LE: readUint64LE_1,
    	writeUint64BE: writeUint64BE_1,
    	writeInt64BE: writeInt64BE,
    	writeUint64LE: writeUint64LE_1,
    	writeInt64LE: writeInt64LE,
    	readUintBE: readUintBE_1,
    	readUintLE: readUintLE_1,
    	writeUintBE: writeUintBE_1,
    	writeUintLE: writeUintLE_1,
    	readFloat32BE: readFloat32BE_1,
    	readFloat32LE: readFloat32LE_1,
    	readFloat64BE: readFloat64BE_1,
    	readFloat64LE: readFloat64LE_1,
    	writeFloat32BE: writeFloat32BE_1,
    	writeFloat32LE: writeFloat32LE_1,
    	writeFloat64BE: writeFloat64BE_1,
    	writeFloat64LE: writeFloat64LE_1
    }, '__esModule', {value: true});

    var random = createCommonjsModule$4(function (module, exports) {
    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.randomStringForEntropy = exports.randomString = exports.randomUint32 = exports.randomBytes = exports.defaultRandomSource = void 0;



    exports.defaultRandomSource = new system.SystemRandomSource();
    function randomBytes(length, prng = exports.defaultRandomSource) {
        return prng.randomBytes(length);
    }
    exports.randomBytes = randomBytes;
    /**
     * Returns a uniformly random unsigned 32-bit integer.
     */
    function randomUint32(prng = exports.defaultRandomSource) {
        // Generate 4-byte random buffer.
        const buf = randomBytes(4, prng);
        // Convert bytes from buffer into a 32-bit integer.
        // It's not important which byte order to use, since
        // the result is random.
        const result = (0, binary.readUint32LE)(buf);
        // Clean the buffer.
        (0, wipe_1.wipe)(buf);
        return result;
    }
    exports.randomUint32 = randomUint32;
    /** 62 alphanumeric characters for default charset of randomString() */
    const ALPHANUMERIC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    /**
     * Returns a uniform random string of the given length
     * with characters from the given charset.
     *
     * Charset must not have more than 256 characters.
     *
     * Default charset generates case-sensitive alphanumeric
     * strings (0-9, A-Z, a-z).
     */
    function randomString(length, charset = ALPHANUMERIC, prng = exports.defaultRandomSource) {
        if (charset.length < 2) {
            throw new Error("randomString charset is too short");
        }
        if (charset.length > 256) {
            throw new Error("randomString charset is too long");
        }
        let out = '';
        const charsLen = charset.length;
        const maxByte = 256 - (256 % charsLen);
        while (length > 0) {
            const buf = randomBytes(Math.ceil(length * 256 / maxByte), prng);
            for (let i = 0; i < buf.length && length > 0; i++) {
                const randomByte = buf[i];
                if (randomByte < maxByte) {
                    out += charset.charAt(randomByte % charsLen);
                    length--;
                }
            }
            (0, wipe_1.wipe)(buf);
        }
        return out;
    }
    exports.randomString = randomString;
    /**
     * Returns uniform random string containing at least the given
     * number of bits of entropy.
     *
     * For example, randomStringForEntropy(128) will return a 22-character
     * alphanumeric string, while randomStringForEntropy(128, "0123456789")
     * will return a 39-character numeric string, both will contain at
     * least 128 bits of entropy.
     *
     * Default charset generates case-sensitive alphanumeric
     * strings (0-9, A-Z, a-z).
     */
    function randomStringForEntropy(bits, charset = ALPHANUMERIC, prng = exports.defaultRandomSource) {
        const length = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));
        return randomString(length, charset, prng);
    }
    exports.randomStringForEntropy = randomStringForEntropy;

    });

    var sha512$1 = createCommonjsModule$4(function (module, exports) {
    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.
    Object.defineProperty(exports, "__esModule", { value: true });


    exports.DIGEST_LENGTH = 64;
    exports.BLOCK_SIZE = 128;
    /**
     * SHA-2-512 cryptographic hash algorithm.
     */
    var SHA512 = /** @class */ (function () {
        function SHA512() {
            /** Length of hash output */
            this.digestLength = exports.DIGEST_LENGTH;
            /** Block size */
            this.blockSize = exports.BLOCK_SIZE;
            // Note: Int32Array is used instead of Uint32Array for performance reasons.
            this._stateHi = new Int32Array(8); // hash state, high bytes
            this._stateLo = new Int32Array(8); // hash state, low bytes
            this._tempHi = new Int32Array(16); // temporary state, high bytes
            this._tempLo = new Int32Array(16); // temporary state, low bytes
            this._buffer = new Uint8Array(256); // buffer for data to hash
            this._bufferLength = 0; // number of bytes in buffer
            this._bytesHashed = 0; // number of total bytes hashed
            this._finished = false; // indicates whether the hash was finalized
            this.reset();
        }
        SHA512.prototype._initState = function () {
            this._stateHi[0] = 0x6a09e667;
            this._stateHi[1] = 0xbb67ae85;
            this._stateHi[2] = 0x3c6ef372;
            this._stateHi[3] = 0xa54ff53a;
            this._stateHi[4] = 0x510e527f;
            this._stateHi[5] = 0x9b05688c;
            this._stateHi[6] = 0x1f83d9ab;
            this._stateHi[7] = 0x5be0cd19;
            this._stateLo[0] = 0xf3bcc908;
            this._stateLo[1] = 0x84caa73b;
            this._stateLo[2] = 0xfe94f82b;
            this._stateLo[3] = 0x5f1d36f1;
            this._stateLo[4] = 0xade682d1;
            this._stateLo[5] = 0x2b3e6c1f;
            this._stateLo[6] = 0xfb41bd6b;
            this._stateLo[7] = 0x137e2179;
        };
        /**
         * Resets hash state making it possible
         * to re-use this instance to hash other data.
         */
        SHA512.prototype.reset = function () {
            this._initState();
            this._bufferLength = 0;
            this._bytesHashed = 0;
            this._finished = false;
            return this;
        };
        /**
         * Cleans internal buffers and resets hash state.
         */
        SHA512.prototype.clean = function () {
            wipe_1.wipe(this._buffer);
            wipe_1.wipe(this._tempHi);
            wipe_1.wipe(this._tempLo);
            this.reset();
        };
        /**
         * Updates hash state with the given data.
         *
         * Throws error when trying to update already finalized hash:
         * instance must be reset to update it again.
         */
        SHA512.prototype.update = function (data, dataLength) {
            if (dataLength === void 0) { dataLength = data.length; }
            if (this._finished) {
                throw new Error("SHA512: can't update because hash was finished.");
            }
            var dataPos = 0;
            this._bytesHashed += dataLength;
            if (this._bufferLength > 0) {
                while (this._bufferLength < exports.BLOCK_SIZE && dataLength > 0) {
                    this._buffer[this._bufferLength++] = data[dataPos++];
                    dataLength--;
                }
                if (this._bufferLength === this.blockSize) {
                    hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, this.blockSize);
                    this._bufferLength = 0;
                }
            }
            if (dataLength >= this.blockSize) {
                dataPos = hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, data, dataPos, dataLength);
                dataLength %= this.blockSize;
            }
            while (dataLength > 0) {
                this._buffer[this._bufferLength++] = data[dataPos++];
                dataLength--;
            }
            return this;
        };
        /**
         * Finalizes hash state and puts hash into out.
         * If hash was already finalized, puts the same value.
         */
        SHA512.prototype.finish = function (out) {
            if (!this._finished) {
                var bytesHashed = this._bytesHashed;
                var left = this._bufferLength;
                var bitLenHi = (bytesHashed / 0x20000000) | 0;
                var bitLenLo = bytesHashed << 3;
                var padLength = (bytesHashed % 128 < 112) ? 128 : 256;
                this._buffer[left] = 0x80;
                for (var i = left + 1; i < padLength - 8; i++) {
                    this._buffer[i] = 0;
                }
                binary.writeUint32BE(bitLenHi, this._buffer, padLength - 8);
                binary.writeUint32BE(bitLenLo, this._buffer, padLength - 4);
                hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, padLength);
                this._finished = true;
            }
            for (var i = 0; i < this.digestLength / 8; i++) {
                binary.writeUint32BE(this._stateHi[i], out, i * 8);
                binary.writeUint32BE(this._stateLo[i], out, i * 8 + 4);
            }
            return this;
        };
        /**
         * Returns the final hash digest.
         */
        SHA512.prototype.digest = function () {
            var out = new Uint8Array(this.digestLength);
            this.finish(out);
            return out;
        };
        /**
         * Function useful for HMAC/PBKDF2 optimization. Returns hash state to be
         * used with restoreState(). Only chain value is saved, not buffers or
         * other state variables.
         */
        SHA512.prototype.saveState = function () {
            if (this._finished) {
                throw new Error("SHA256: cannot save finished state");
            }
            return {
                stateHi: new Int32Array(this._stateHi),
                stateLo: new Int32Array(this._stateLo),
                buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : undefined,
                bufferLength: this._bufferLength,
                bytesHashed: this._bytesHashed
            };
        };
        /**
         * Function useful for HMAC/PBKDF2 optimization. Restores state saved by
         * saveState() and sets bytesHashed to the given value.
         */
        SHA512.prototype.restoreState = function (savedState) {
            this._stateHi.set(savedState.stateHi);
            this._stateLo.set(savedState.stateLo);
            this._bufferLength = savedState.bufferLength;
            if (savedState.buffer) {
                this._buffer.set(savedState.buffer);
            }
            this._bytesHashed = savedState.bytesHashed;
            this._finished = false;
            return this;
        };
        /**
         * Cleans state returned by saveState().
         */
        SHA512.prototype.cleanSavedState = function (savedState) {
            wipe_1.wipe(savedState.stateHi);
            wipe_1.wipe(savedState.stateLo);
            if (savedState.buffer) {
                wipe_1.wipe(savedState.buffer);
            }
            savedState.bufferLength = 0;
            savedState.bytesHashed = 0;
        };
        return SHA512;
    }());
    exports.SHA512 = SHA512;
    // Constants
    var K = new Int32Array([
        0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
        0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
        0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
        0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
        0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
        0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
        0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
        0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
        0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
        0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
        0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
        0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
        0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
        0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
        0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
        0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
        0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
        0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
        0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
        0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
        0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
        0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
        0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
        0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
        0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
        0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
        0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
        0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
        0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
        0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
        0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
        0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
        0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
        0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
        0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
        0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
        0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
        0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
        0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
        0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
    ]);
    function hashBlocks(wh, wl, hh, hl, m, pos, len) {
        var ah0 = hh[0], ah1 = hh[1], ah2 = hh[2], ah3 = hh[3], ah4 = hh[4], ah5 = hh[5], ah6 = hh[6], ah7 = hh[7], al0 = hl[0], al1 = hl[1], al2 = hl[2], al3 = hl[3], al4 = hl[4], al5 = hl[5], al6 = hl[6], al7 = hl[7];
        var h, l;
        var th, tl;
        var a, b, c, d;
        while (len >= 128) {
            for (var i = 0; i < 16; i++) {
                var j = 8 * i + pos;
                wh[i] = binary.readUint32BE(m, j);
                wl[i] = binary.readUint32BE(m, j + 4);
            }
            for (var i = 0; i < 80; i++) {
                var bh0 = ah0;
                var bh1 = ah1;
                var bh2 = ah2;
                var bh3 = ah3;
                var bh4 = ah4;
                var bh5 = ah5;
                var bh6 = ah6;
                var bh7 = ah7;
                var bl0 = al0;
                var bl1 = al1;
                var bl2 = al2;
                var bl3 = al3;
                var bl4 = al4;
                var bl5 = al5;
                var bl6 = al6;
                var bl7 = al7;
                // add
                h = ah7;
                l = al7;
                a = l & 0xffff;
                b = l >>> 16;
                c = h & 0xffff;
                d = h >>> 16;
                // Sigma1
                h = ((ah4 >>> 14) | (al4 << (32 - 14))) ^ ((ah4 >>> 18) |
                    (al4 << (32 - 18))) ^ ((al4 >>> (41 - 32)) | (ah4 << (32 - (41 - 32))));
                l = ((al4 >>> 14) | (ah4 << (32 - 14))) ^ ((al4 >>> 18) |
                    (ah4 << (32 - 18))) ^ ((ah4 >>> (41 - 32)) | (al4 << (32 - (41 - 32))));
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                // Ch
                h = (ah4 & ah5) ^ (~ah4 & ah6);
                l = (al4 & al5) ^ (~al4 & al6);
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                // K
                h = K[i * 2];
                l = K[i * 2 + 1];
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                // w
                h = wh[i % 16];
                l = wl[i % 16];
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                th = c & 0xffff | d << 16;
                tl = a & 0xffff | b << 16;
                // add
                h = th;
                l = tl;
                a = l & 0xffff;
                b = l >>> 16;
                c = h & 0xffff;
                d = h >>> 16;
                // Sigma0
                h = ((ah0 >>> 28) | (al0 << (32 - 28))) ^ ((al0 >>> (34 - 32)) |
                    (ah0 << (32 - (34 - 32)))) ^ ((al0 >>> (39 - 32)) | (ah0 << (32 - (39 - 32))));
                l = ((al0 >>> 28) | (ah0 << (32 - 28))) ^ ((ah0 >>> (34 - 32)) |
                    (al0 << (32 - (34 - 32)))) ^ ((ah0 >>> (39 - 32)) | (al0 << (32 - (39 - 32))));
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                // Maj
                h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
                l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                bh7 = (c & 0xffff) | (d << 16);
                bl7 = (a & 0xffff) | (b << 16);
                // add
                h = bh3;
                l = bl3;
                a = l & 0xffff;
                b = l >>> 16;
                c = h & 0xffff;
                d = h >>> 16;
                h = th;
                l = tl;
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                bh3 = (c & 0xffff) | (d << 16);
                bl3 = (a & 0xffff) | (b << 16);
                ah1 = bh0;
                ah2 = bh1;
                ah3 = bh2;
                ah4 = bh3;
                ah5 = bh4;
                ah6 = bh5;
                ah7 = bh6;
                ah0 = bh7;
                al1 = bl0;
                al2 = bl1;
                al3 = bl2;
                al4 = bl3;
                al5 = bl4;
                al6 = bl5;
                al7 = bl6;
                al0 = bl7;
                if (i % 16 === 15) {
                    for (var j = 0; j < 16; j++) {
                        // add
                        h = wh[j];
                        l = wl[j];
                        a = l & 0xffff;
                        b = l >>> 16;
                        c = h & 0xffff;
                        d = h >>> 16;
                        h = wh[(j + 9) % 16];
                        l = wl[(j + 9) % 16];
                        a += l & 0xffff;
                        b += l >>> 16;
                        c += h & 0xffff;
                        d += h >>> 16;
                        // sigma0
                        th = wh[(j + 1) % 16];
                        tl = wl[(j + 1) % 16];
                        h = ((th >>> 1) | (tl << (32 - 1))) ^ ((th >>> 8) |
                            (tl << (32 - 8))) ^ (th >>> 7);
                        l = ((tl >>> 1) | (th << (32 - 1))) ^ ((tl >>> 8) |
                            (th << (32 - 8))) ^ ((tl >>> 7) | (th << (32 - 7)));
                        a += l & 0xffff;
                        b += l >>> 16;
                        c += h & 0xffff;
                        d += h >>> 16;
                        // sigma1
                        th = wh[(j + 14) % 16];
                        tl = wl[(j + 14) % 16];
                        h = ((th >>> 19) | (tl << (32 - 19))) ^ ((tl >>> (61 - 32)) |
                            (th << (32 - (61 - 32)))) ^ (th >>> 6);
                        l = ((tl >>> 19) | (th << (32 - 19))) ^ ((th >>> (61 - 32)) |
                            (tl << (32 - (61 - 32)))) ^ ((tl >>> 6) | (th << (32 - 6)));
                        a += l & 0xffff;
                        b += l >>> 16;
                        c += h & 0xffff;
                        d += h >>> 16;
                        b += a >>> 16;
                        c += b >>> 16;
                        d += c >>> 16;
                        wh[j] = (c & 0xffff) | (d << 16);
                        wl[j] = (a & 0xffff) | (b << 16);
                    }
                }
            }
            // add
            h = ah0;
            l = al0;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[0];
            l = hl[0];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[0] = ah0 = (c & 0xffff) | (d << 16);
            hl[0] = al0 = (a & 0xffff) | (b << 16);
            h = ah1;
            l = al1;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[1];
            l = hl[1];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[1] = ah1 = (c & 0xffff) | (d << 16);
            hl[1] = al1 = (a & 0xffff) | (b << 16);
            h = ah2;
            l = al2;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[2];
            l = hl[2];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[2] = ah2 = (c & 0xffff) | (d << 16);
            hl[2] = al2 = (a & 0xffff) | (b << 16);
            h = ah3;
            l = al3;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[3];
            l = hl[3];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[3] = ah3 = (c & 0xffff) | (d << 16);
            hl[3] = al3 = (a & 0xffff) | (b << 16);
            h = ah4;
            l = al4;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[4];
            l = hl[4];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[4] = ah4 = (c & 0xffff) | (d << 16);
            hl[4] = al4 = (a & 0xffff) | (b << 16);
            h = ah5;
            l = al5;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[5];
            l = hl[5];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[5] = ah5 = (c & 0xffff) | (d << 16);
            hl[5] = al5 = (a & 0xffff) | (b << 16);
            h = ah6;
            l = al6;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[6];
            l = hl[6];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[6] = ah6 = (c & 0xffff) | (d << 16);
            hl[6] = al6 = (a & 0xffff) | (b << 16);
            h = ah7;
            l = al7;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[7];
            l = hl[7];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[7] = ah7 = (c & 0xffff) | (d << 16);
            hl[7] = al7 = (a & 0xffff) | (b << 16);
            pos += 128;
            len -= 128;
        }
        return pos;
    }
    function hash(data) {
        var h = new SHA512();
        h.update(data);
        var digest = h.digest();
        h.clean();
        return digest;
    }
    exports.hash = hash;

    });

    var ed25519 = createCommonjsModule$4(function (module, exports) {
    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertSecretKeyToX25519 = exports.convertPublicKeyToX25519 = exports.verify = exports.sign = exports.extractPublicKeyFromSecretKey = exports.generateKeyPair = exports.generateKeyPairFromSeed = exports.SEED_LENGTH = exports.SECRET_KEY_LENGTH = exports.PUBLIC_KEY_LENGTH = exports.SIGNATURE_LENGTH = void 0;
    /**
     * Package ed25519 implements Ed25519 public-key signature algorithm.
     */



    exports.SIGNATURE_LENGTH = 64;
    exports.PUBLIC_KEY_LENGTH = 32;
    exports.SECRET_KEY_LENGTH = 64;
    exports.SEED_LENGTH = 32;
    // Returns new zero-filled 16-element GF (Float64Array).
    // If passed an array of numbers, prefills the returned
    // array with them.
    //
    // We use Float64Array, because we need 48-bit numbers
    // for this implementation.
    function gf(init) {
        const r = new Float64Array(16);
        if (init) {
            for (let i = 0; i < init.length; i++) {
                r[i] = init[i];
            }
        }
        return r;
    }
    // Base point.
    const _9 = new Uint8Array(32);
    _9[0] = 9;
    const gf0 = gf();
    const gf1 = gf([1]);
    const D = gf([
        0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070,
        0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203
    ]);
    const D2 = gf([
        0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0,
        0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406
    ]);
    const X = gf([
        0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c,
        0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169
    ]);
    const Y = gf([
        0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666,
        0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666
    ]);
    const I = gf([
        0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43,
        0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83
    ]);
    function set25519(r, a) {
        for (let i = 0; i < 16; i++) {
            r[i] = a[i] | 0;
        }
    }
    function car25519(o) {
        let c = 1;
        for (let i = 0; i < 16; i++) {
            let v = o[i] + c + 65535;
            c = Math.floor(v / 65536);
            o[i] = v - c * 65536;
        }
        o[0] += c - 1 + 37 * (c - 1);
    }
    function sel25519(p, q, b) {
        const c = ~(b - 1);
        for (let i = 0; i < 16; i++) {
            const t = c & (p[i] ^ q[i]);
            p[i] ^= t;
            q[i] ^= t;
        }
    }
    function pack25519(o, n) {
        const m = gf();
        const t = gf();
        for (let i = 0; i < 16; i++) {
            t[i] = n[i];
        }
        car25519(t);
        car25519(t);
        car25519(t);
        for (let j = 0; j < 2; j++) {
            m[0] = t[0] - 0xffed;
            for (let i = 1; i < 15; i++) {
                m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1);
                m[i - 1] &= 0xffff;
            }
            m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1);
            const b = (m[15] >> 16) & 1;
            m[14] &= 0xffff;
            sel25519(t, m, 1 - b);
        }
        for (let i = 0; i < 16; i++) {
            o[2 * i] = t[i] & 0xff;
            o[2 * i + 1] = t[i] >> 8;
        }
    }
    function verify32(x, y) {
        let d = 0;
        for (let i = 0; i < 32; i++) {
            d |= x[i] ^ y[i];
        }
        return (1 & ((d - 1) >>> 8)) - 1;
    }
    function neq25519(a, b) {
        const c = new Uint8Array(32);
        const d = new Uint8Array(32);
        pack25519(c, a);
        pack25519(d, b);
        return verify32(c, d);
    }
    function par25519(a) {
        const d = new Uint8Array(32);
        pack25519(d, a);
        return d[0] & 1;
    }
    function unpack25519(o, n) {
        for (let i = 0; i < 16; i++) {
            o[i] = n[2 * i] + (n[2 * i + 1] << 8);
        }
        o[15] &= 0x7fff;
    }
    function add(o, a, b) {
        for (let i = 0; i < 16; i++) {
            o[i] = a[i] + b[i];
        }
    }
    function sub(o, a, b) {
        for (let i = 0; i < 16; i++) {
            o[i] = a[i] - b[i];
        }
    }
    function mul(o, a, b) {
        let v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
        v = a[0];
        t0 += v * b0;
        t1 += v * b1;
        t2 += v * b2;
        t3 += v * b3;
        t4 += v * b4;
        t5 += v * b5;
        t6 += v * b6;
        t7 += v * b7;
        t8 += v * b8;
        t9 += v * b9;
        t10 += v * b10;
        t11 += v * b11;
        t12 += v * b12;
        t13 += v * b13;
        t14 += v * b14;
        t15 += v * b15;
        v = a[1];
        t1 += v * b0;
        t2 += v * b1;
        t3 += v * b2;
        t4 += v * b3;
        t5 += v * b4;
        t6 += v * b5;
        t7 += v * b6;
        t8 += v * b7;
        t9 += v * b8;
        t10 += v * b9;
        t11 += v * b10;
        t12 += v * b11;
        t13 += v * b12;
        t14 += v * b13;
        t15 += v * b14;
        t16 += v * b15;
        v = a[2];
        t2 += v * b0;
        t3 += v * b1;
        t4 += v * b2;
        t5 += v * b3;
        t6 += v * b4;
        t7 += v * b5;
        t8 += v * b6;
        t9 += v * b7;
        t10 += v * b8;
        t11 += v * b9;
        t12 += v * b10;
        t13 += v * b11;
        t14 += v * b12;
        t15 += v * b13;
        t16 += v * b14;
        t17 += v * b15;
        v = a[3];
        t3 += v * b0;
        t4 += v * b1;
        t5 += v * b2;
        t6 += v * b3;
        t7 += v * b4;
        t8 += v * b5;
        t9 += v * b6;
        t10 += v * b7;
        t11 += v * b8;
        t12 += v * b9;
        t13 += v * b10;
        t14 += v * b11;
        t15 += v * b12;
        t16 += v * b13;
        t17 += v * b14;
        t18 += v * b15;
        v = a[4];
        t4 += v * b0;
        t5 += v * b1;
        t6 += v * b2;
        t7 += v * b3;
        t8 += v * b4;
        t9 += v * b5;
        t10 += v * b6;
        t11 += v * b7;
        t12 += v * b8;
        t13 += v * b9;
        t14 += v * b10;
        t15 += v * b11;
        t16 += v * b12;
        t17 += v * b13;
        t18 += v * b14;
        t19 += v * b15;
        v = a[5];
        t5 += v * b0;
        t6 += v * b1;
        t7 += v * b2;
        t8 += v * b3;
        t9 += v * b4;
        t10 += v * b5;
        t11 += v * b6;
        t12 += v * b7;
        t13 += v * b8;
        t14 += v * b9;
        t15 += v * b10;
        t16 += v * b11;
        t17 += v * b12;
        t18 += v * b13;
        t19 += v * b14;
        t20 += v * b15;
        v = a[6];
        t6 += v * b0;
        t7 += v * b1;
        t8 += v * b2;
        t9 += v * b3;
        t10 += v * b4;
        t11 += v * b5;
        t12 += v * b6;
        t13 += v * b7;
        t14 += v * b8;
        t15 += v * b9;
        t16 += v * b10;
        t17 += v * b11;
        t18 += v * b12;
        t19 += v * b13;
        t20 += v * b14;
        t21 += v * b15;
        v = a[7];
        t7 += v * b0;
        t8 += v * b1;
        t9 += v * b2;
        t10 += v * b3;
        t11 += v * b4;
        t12 += v * b5;
        t13 += v * b6;
        t14 += v * b7;
        t15 += v * b8;
        t16 += v * b9;
        t17 += v * b10;
        t18 += v * b11;
        t19 += v * b12;
        t20 += v * b13;
        t21 += v * b14;
        t22 += v * b15;
        v = a[8];
        t8 += v * b0;
        t9 += v * b1;
        t10 += v * b2;
        t11 += v * b3;
        t12 += v * b4;
        t13 += v * b5;
        t14 += v * b6;
        t15 += v * b7;
        t16 += v * b8;
        t17 += v * b9;
        t18 += v * b10;
        t19 += v * b11;
        t20 += v * b12;
        t21 += v * b13;
        t22 += v * b14;
        t23 += v * b15;
        v = a[9];
        t9 += v * b0;
        t10 += v * b1;
        t11 += v * b2;
        t12 += v * b3;
        t13 += v * b4;
        t14 += v * b5;
        t15 += v * b6;
        t16 += v * b7;
        t17 += v * b8;
        t18 += v * b9;
        t19 += v * b10;
        t20 += v * b11;
        t21 += v * b12;
        t22 += v * b13;
        t23 += v * b14;
        t24 += v * b15;
        v = a[10];
        t10 += v * b0;
        t11 += v * b1;
        t12 += v * b2;
        t13 += v * b3;
        t14 += v * b4;
        t15 += v * b5;
        t16 += v * b6;
        t17 += v * b7;
        t18 += v * b8;
        t19 += v * b9;
        t20 += v * b10;
        t21 += v * b11;
        t22 += v * b12;
        t23 += v * b13;
        t24 += v * b14;
        t25 += v * b15;
        v = a[11];
        t11 += v * b0;
        t12 += v * b1;
        t13 += v * b2;
        t14 += v * b3;
        t15 += v * b4;
        t16 += v * b5;
        t17 += v * b6;
        t18 += v * b7;
        t19 += v * b8;
        t20 += v * b9;
        t21 += v * b10;
        t22 += v * b11;
        t23 += v * b12;
        t24 += v * b13;
        t25 += v * b14;
        t26 += v * b15;
        v = a[12];
        t12 += v * b0;
        t13 += v * b1;
        t14 += v * b2;
        t15 += v * b3;
        t16 += v * b4;
        t17 += v * b5;
        t18 += v * b6;
        t19 += v * b7;
        t20 += v * b8;
        t21 += v * b9;
        t22 += v * b10;
        t23 += v * b11;
        t24 += v * b12;
        t25 += v * b13;
        t26 += v * b14;
        t27 += v * b15;
        v = a[13];
        t13 += v * b0;
        t14 += v * b1;
        t15 += v * b2;
        t16 += v * b3;
        t17 += v * b4;
        t18 += v * b5;
        t19 += v * b6;
        t20 += v * b7;
        t21 += v * b8;
        t22 += v * b9;
        t23 += v * b10;
        t24 += v * b11;
        t25 += v * b12;
        t26 += v * b13;
        t27 += v * b14;
        t28 += v * b15;
        v = a[14];
        t14 += v * b0;
        t15 += v * b1;
        t16 += v * b2;
        t17 += v * b3;
        t18 += v * b4;
        t19 += v * b5;
        t20 += v * b6;
        t21 += v * b7;
        t22 += v * b8;
        t23 += v * b9;
        t24 += v * b10;
        t25 += v * b11;
        t26 += v * b12;
        t27 += v * b13;
        t28 += v * b14;
        t29 += v * b15;
        v = a[15];
        t15 += v * b0;
        t16 += v * b1;
        t17 += v * b2;
        t18 += v * b3;
        t19 += v * b4;
        t20 += v * b5;
        t21 += v * b6;
        t22 += v * b7;
        t23 += v * b8;
        t24 += v * b9;
        t25 += v * b10;
        t26 += v * b11;
        t27 += v * b12;
        t28 += v * b13;
        t29 += v * b14;
        t30 += v * b15;
        t0 += 38 * t16;
        t1 += 38 * t17;
        t2 += 38 * t18;
        t3 += 38 * t19;
        t4 += 38 * t20;
        t5 += 38 * t21;
        t6 += 38 * t22;
        t7 += 38 * t23;
        t8 += 38 * t24;
        t9 += 38 * t25;
        t10 += 38 * t26;
        t11 += 38 * t27;
        t12 += 38 * t28;
        t13 += 38 * t29;
        t14 += 38 * t30;
        // t15 left as is
        // first car
        c = 1;
        v = t0 + c + 65535;
        c = Math.floor(v / 65536);
        t0 = v - c * 65536;
        v = t1 + c + 65535;
        c = Math.floor(v / 65536);
        t1 = v - c * 65536;
        v = t2 + c + 65535;
        c = Math.floor(v / 65536);
        t2 = v - c * 65536;
        v = t3 + c + 65535;
        c = Math.floor(v / 65536);
        t3 = v - c * 65536;
        v = t4 + c + 65535;
        c = Math.floor(v / 65536);
        t4 = v - c * 65536;
        v = t5 + c + 65535;
        c = Math.floor(v / 65536);
        t5 = v - c * 65536;
        v = t6 + c + 65535;
        c = Math.floor(v / 65536);
        t6 = v - c * 65536;
        v = t7 + c + 65535;
        c = Math.floor(v / 65536);
        t7 = v - c * 65536;
        v = t8 + c + 65535;
        c = Math.floor(v / 65536);
        t8 = v - c * 65536;
        v = t9 + c + 65535;
        c = Math.floor(v / 65536);
        t9 = v - c * 65536;
        v = t10 + c + 65535;
        c = Math.floor(v / 65536);
        t10 = v - c * 65536;
        v = t11 + c + 65535;
        c = Math.floor(v / 65536);
        t11 = v - c * 65536;
        v = t12 + c + 65535;
        c = Math.floor(v / 65536);
        t12 = v - c * 65536;
        v = t13 + c + 65535;
        c = Math.floor(v / 65536);
        t13 = v - c * 65536;
        v = t14 + c + 65535;
        c = Math.floor(v / 65536);
        t14 = v - c * 65536;
        v = t15 + c + 65535;
        c = Math.floor(v / 65536);
        t15 = v - c * 65536;
        t0 += c - 1 + 37 * (c - 1);
        // second car
        c = 1;
        v = t0 + c + 65535;
        c = Math.floor(v / 65536);
        t0 = v - c * 65536;
        v = t1 + c + 65535;
        c = Math.floor(v / 65536);
        t1 = v - c * 65536;
        v = t2 + c + 65535;
        c = Math.floor(v / 65536);
        t2 = v - c * 65536;
        v = t3 + c + 65535;
        c = Math.floor(v / 65536);
        t3 = v - c * 65536;
        v = t4 + c + 65535;
        c = Math.floor(v / 65536);
        t4 = v - c * 65536;
        v = t5 + c + 65535;
        c = Math.floor(v / 65536);
        t5 = v - c * 65536;
        v = t6 + c + 65535;
        c = Math.floor(v / 65536);
        t6 = v - c * 65536;
        v = t7 + c + 65535;
        c = Math.floor(v / 65536);
        t7 = v - c * 65536;
        v = t8 + c + 65535;
        c = Math.floor(v / 65536);
        t8 = v - c * 65536;
        v = t9 + c + 65535;
        c = Math.floor(v / 65536);
        t9 = v - c * 65536;
        v = t10 + c + 65535;
        c = Math.floor(v / 65536);
        t10 = v - c * 65536;
        v = t11 + c + 65535;
        c = Math.floor(v / 65536);
        t11 = v - c * 65536;
        v = t12 + c + 65535;
        c = Math.floor(v / 65536);
        t12 = v - c * 65536;
        v = t13 + c + 65535;
        c = Math.floor(v / 65536);
        t13 = v - c * 65536;
        v = t14 + c + 65535;
        c = Math.floor(v / 65536);
        t14 = v - c * 65536;
        v = t15 + c + 65535;
        c = Math.floor(v / 65536);
        t15 = v - c * 65536;
        t0 += c - 1 + 37 * (c - 1);
        o[0] = t0;
        o[1] = t1;
        o[2] = t2;
        o[3] = t3;
        o[4] = t4;
        o[5] = t5;
        o[6] = t6;
        o[7] = t7;
        o[8] = t8;
        o[9] = t9;
        o[10] = t10;
        o[11] = t11;
        o[12] = t12;
        o[13] = t13;
        o[14] = t14;
        o[15] = t15;
    }
    function square(o, a) {
        mul(o, a, a);
    }
    function inv25519(o, i) {
        const c = gf();
        let a;
        for (a = 0; a < 16; a++) {
            c[a] = i[a];
        }
        for (a = 253; a >= 0; a--) {
            square(c, c);
            if (a !== 2 && a !== 4) {
                mul(c, c, i);
            }
        }
        for (a = 0; a < 16; a++) {
            o[a] = c[a];
        }
    }
    function pow2523(o, i) {
        const c = gf();
        let a;
        for (a = 0; a < 16; a++) {
            c[a] = i[a];
        }
        for (a = 250; a >= 0; a--) {
            square(c, c);
            if (a !== 1) {
                mul(c, c, i);
            }
        }
        for (a = 0; a < 16; a++) {
            o[a] = c[a];
        }
    }
    function edadd(p, q) {
        const a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf(), g = gf(), h = gf(), t = gf();
        sub(a, p[1], p[0]);
        sub(t, q[1], q[0]);
        mul(a, a, t);
        add(b, p[0], p[1]);
        add(t, q[0], q[1]);
        mul(b, b, t);
        mul(c, p[3], q[3]);
        mul(c, c, D2);
        mul(d, p[2], q[2]);
        add(d, d, d);
        sub(e, b, a);
        sub(f, d, c);
        add(g, d, c);
        add(h, b, a);
        mul(p[0], e, f);
        mul(p[1], h, g);
        mul(p[2], g, f);
        mul(p[3], e, h);
    }
    function cswap(p, q, b) {
        for (let i = 0; i < 4; i++) {
            sel25519(p[i], q[i], b);
        }
    }
    function pack(r, p) {
        const tx = gf(), ty = gf(), zi = gf();
        inv25519(zi, p[2]);
        mul(tx, p[0], zi);
        mul(ty, p[1], zi);
        pack25519(r, ty);
        r[31] ^= par25519(tx) << 7;
    }
    function scalarmult(p, q, s) {
        set25519(p[0], gf0);
        set25519(p[1], gf1);
        set25519(p[2], gf1);
        set25519(p[3], gf0);
        for (let i = 255; i >= 0; --i) {
            const b = (s[(i / 8) | 0] >> (i & 7)) & 1;
            cswap(p, q, b);
            edadd(q, p);
            edadd(p, p);
            cswap(p, q, b);
        }
    }
    function scalarbase(p, s) {
        const q = [gf(), gf(), gf(), gf()];
        set25519(q[0], X);
        set25519(q[1], Y);
        set25519(q[2], gf1);
        mul(q[3], X, Y);
        scalarmult(p, q, s);
    }
    // Generates key pair from secret 32-byte seed.
    function generateKeyPairFromSeed(seed) {
        if (seed.length !== exports.SEED_LENGTH) {
            throw new Error(`ed25519: seed must be ${exports.SEED_LENGTH} bytes`);
        }
        const d = (0, sha512$1.hash)(seed);
        d[0] &= 248;
        d[31] &= 127;
        d[31] |= 64;
        const publicKey = new Uint8Array(32);
        const p = [gf(), gf(), gf(), gf()];
        scalarbase(p, d);
        pack(publicKey, p);
        const secretKey = new Uint8Array(64);
        secretKey.set(seed);
        secretKey.set(publicKey, 32);
        return {
            publicKey,
            secretKey
        };
    }
    exports.generateKeyPairFromSeed = generateKeyPairFromSeed;
    function generateKeyPair(prng) {
        const seed = (0, random.randomBytes)(32, prng);
        const result = generateKeyPairFromSeed(seed);
        (0, wipe_1.wipe)(seed);
        return result;
    }
    exports.generateKeyPair = generateKeyPair;
    function extractPublicKeyFromSecretKey(secretKey) {
        if (secretKey.length !== exports.SECRET_KEY_LENGTH) {
            throw new Error(`ed25519: secret key must be ${exports.SECRET_KEY_LENGTH} bytes`);
        }
        return new Uint8Array(secretKey.subarray(32));
    }
    exports.extractPublicKeyFromSecretKey = extractPublicKeyFromSecretKey;
    const L = new Float64Array([
        0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2,
        0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10
    ]);
    function modL(r, x) {
        let carry;
        let i;
        let j;
        let k;
        for (i = 63; i >= 32; --i) {
            carry = 0;
            for (j = i - 32, k = i - 12; j < k; ++j) {
                x[j] += carry - 16 * x[i] * L[j - (i - 32)];
                carry = Math.floor((x[j] + 128) / 256);
                x[j] -= carry * 256;
            }
            x[j] += carry;
            x[i] = 0;
        }
        carry = 0;
        for (j = 0; j < 32; j++) {
            x[j] += carry - (x[31] >> 4) * L[j];
            carry = x[j] >> 8;
            x[j] &= 255;
        }
        for (j = 0; j < 32; j++) {
            x[j] -= carry * L[j];
        }
        for (i = 0; i < 32; i++) {
            x[i + 1] += x[i] >> 8;
            r[i] = x[i] & 255;
        }
    }
    function reduce(r) {
        const x = new Float64Array(64);
        for (let i = 0; i < 64; i++) {
            x[i] = r[i];
        }
        for (let i = 0; i < 64; i++) {
            r[i] = 0;
        }
        modL(r, x);
    }
    // Returns 64-byte signature of the message under the 64-byte secret key.
    function sign(secretKey, message) {
        const x = new Float64Array(64);
        const p = [gf(), gf(), gf(), gf()];
        const d = (0, sha512$1.hash)(secretKey.subarray(0, 32));
        d[0] &= 248;
        d[31] &= 127;
        d[31] |= 64;
        const signature = new Uint8Array(64);
        signature.set(d.subarray(32), 32);
        const hs = new sha512$1.SHA512();
        hs.update(signature.subarray(32));
        hs.update(message);
        const r = hs.digest();
        hs.clean();
        reduce(r);
        scalarbase(p, r);
        pack(signature, p);
        hs.reset();
        hs.update(signature.subarray(0, 32));
        hs.update(secretKey.subarray(32));
        hs.update(message);
        const h = hs.digest();
        reduce(h);
        for (let i = 0; i < 32; i++) {
            x[i] = r[i];
        }
        for (let i = 0; i < 32; i++) {
            for (let j = 0; j < 32; j++) {
                x[i + j] += h[i] * d[j];
            }
        }
        modL(signature.subarray(32), x);
        return signature;
    }
    exports.sign = sign;
    function unpackneg(r, p) {
        const t = gf(), chk = gf(), num = gf(), den = gf(), den2 = gf(), den4 = gf(), den6 = gf();
        set25519(r[2], gf1);
        unpack25519(r[1], p);
        square(num, r[1]);
        mul(den, num, D);
        sub(num, num, r[2]);
        add(den, r[2], den);
        square(den2, den);
        square(den4, den2);
        mul(den6, den4, den2);
        mul(t, den6, num);
        mul(t, t, den);
        pow2523(t, t);
        mul(t, t, num);
        mul(t, t, den);
        mul(t, t, den);
        mul(r[0], t, den);
        square(chk, r[0]);
        mul(chk, chk, den);
        if (neq25519(chk, num)) {
            mul(r[0], r[0], I);
        }
        square(chk, r[0]);
        mul(chk, chk, den);
        if (neq25519(chk, num)) {
            return -1;
        }
        if (par25519(r[0]) === (p[31] >> 7)) {
            sub(r[0], gf0, r[0]);
        }
        mul(r[3], r[0], r[1]);
        return 0;
    }
    function verify(publicKey, message, signature) {
        const t = new Uint8Array(32);
        const p = [gf(), gf(), gf(), gf()];
        const q = [gf(), gf(), gf(), gf()];
        if (signature.length !== exports.SIGNATURE_LENGTH) {
            throw new Error(`ed25519: signature must be ${exports.SIGNATURE_LENGTH} bytes`);
        }
        if (unpackneg(q, publicKey)) {
            return false;
        }
        const hs = new sha512$1.SHA512();
        hs.update(signature.subarray(0, 32));
        hs.update(publicKey);
        hs.update(message);
        const h = hs.digest();
        reduce(h);
        scalarmult(p, q, h);
        scalarbase(q, signature.subarray(32));
        edadd(p, q);
        pack(t, p);
        if (verify32(signature, t)) {
            return false;
        }
        return true;
    }
    exports.verify = verify;
    /**
     * Convert Ed25519 public key to X25519 public key.
     *
     * Throws if given an invalid public key.
     */
    function convertPublicKeyToX25519(publicKey) {
        let q = [gf(), gf(), gf(), gf()];
        if (unpackneg(q, publicKey)) {
            throw new Error("Ed25519: invalid public key");
        }
        // Formula: montgomeryX = (edwardsY + 1)*inverse(1 - edwardsY) mod p
        let a = gf();
        let b = gf();
        let y = q[1];
        add(a, gf1, y);
        sub(b, gf1, y);
        inv25519(b, b);
        mul(a, a, b);
        let z = new Uint8Array(32);
        pack25519(z, a);
        return z;
    }
    exports.convertPublicKeyToX25519 = convertPublicKeyToX25519;
    /**
     *  Convert Ed25519 secret (private) key to X25519 secret key.
     */
    function convertSecretKeyToX25519(secretKey) {
        const d = (0, sha512$1.hash)(secretKey.subarray(0, 32));
        d[0] &= 248;
        d[31] &= 127;
        d[31] |= 64;
        const o = new Uint8Array(d.subarray(0, 32));
        (0, wipe_1.wipe)(d);
        return o;
    }
    exports.convertSecretKeyToX25519 = convertSecretKeyToX25519;

    });

    const JWT_IRIDIUM_ALG = "EdDSA";
    const JWT_IRIDIUM_TYP = "JWT";
    const JWT_DELIMITER = ".";
    const JWT_ENCODING = "base64url";
    const JSON_ENCODING = "utf8";
    const DATA_ENCODING = "utf8";
    const DID_DELIMITER = ":";
    const DID_PREFIX = "did";
    const DID_METHOD = "key";
    const MULTICODEC_ED25519_ENCODING = "base58btc";
    const MULTICODEC_ED25519_BASE = "z";
    const MULTICODEC_ED25519_HEADER = "K36";
    const KEY_PAIR_SEED_LENGTH = 32;

    function allocUnsafe(size = 0) {
      if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {
        return globalThis.Buffer.allocUnsafe(size);
      }
      return new Uint8Array(size);
    }

    function concat(arrays, length) {
      if (!length) {
        length = arrays.reduce((acc, curr) => acc + curr.length, 0);
      }
      const output = allocUnsafe(length);
      let offset = 0;
      for (const arr of arrays) {
        output.set(arr, offset);
        offset += arr.length;
      }
      return output;
    }

    function base(ALPHABET, name) {
      if (ALPHABET.length >= 255) {
        throw new TypeError('Alphabet too long');
      }
      var BASE_MAP = new Uint8Array(256);
      for (var j = 0; j < BASE_MAP.length; j++) {
        BASE_MAP[j] = 255;
      }
      for (var i = 0; i < ALPHABET.length; i++) {
        var x = ALPHABET.charAt(i);
        var xc = x.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) {
          throw new TypeError(x + ' is ambiguous');
        }
        BASE_MAP[xc] = i;
      }
      var BASE = ALPHABET.length;
      var LEADER = ALPHABET.charAt(0);
      var FACTOR = Math.log(BASE) / Math.log(256);
      var iFACTOR = Math.log(256) / Math.log(BASE);
      function encode(source) {
        if (source instanceof Uint8Array);
        else if (ArrayBuffer.isView(source)) {
          source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
        } else if (Array.isArray(source)) {
          source = Uint8Array.from(source);
        }
        if (!(source instanceof Uint8Array)) {
          throw new TypeError('Expected Uint8Array');
        }
        if (source.length === 0) {
          return '';
        }
        var zeroes = 0;
        var length = 0;
        var pbegin = 0;
        var pend = source.length;
        while (pbegin !== pend && source[pbegin] === 0) {
          pbegin++;
          zeroes++;
        }
        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
        var b58 = new Uint8Array(size);
        while (pbegin !== pend) {
          var carry = source[pbegin];
          var i = 0;
          for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {
            carry += 256 * b58[it1] >>> 0;
            b58[it1] = carry % BASE >>> 0;
            carry = carry / BASE >>> 0;
          }
          if (carry !== 0) {
            throw new Error('Non-zero carry');
          }
          length = i;
          pbegin++;
        }
        var it2 = size - length;
        while (it2 !== size && b58[it2] === 0) {
          it2++;
        }
        var str = LEADER.repeat(zeroes);
        for (; it2 < size; ++it2) {
          str += ALPHABET.charAt(b58[it2]);
        }
        return str;
      }
      function decodeUnsafe(source) {
        if (typeof source !== 'string') {
          throw new TypeError('Expected String');
        }
        if (source.length === 0) {
          return new Uint8Array();
        }
        var psz = 0;
        if (source[psz] === ' ') {
          return;
        }
        var zeroes = 0;
        var length = 0;
        while (source[psz] === LEADER) {
          zeroes++;
          psz++;
        }
        var size = (source.length - psz) * FACTOR + 1 >>> 0;
        var b256 = new Uint8Array(size);
        while (source[psz]) {
          var carry = BASE_MAP[source.charCodeAt(psz)];
          if (carry === 255) {
            return;
          }
          var i = 0;
          for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {
            carry += BASE * b256[it3] >>> 0;
            b256[it3] = carry % 256 >>> 0;
            carry = carry / 256 >>> 0;
          }
          if (carry !== 0) {
            throw new Error('Non-zero carry');
          }
          length = i;
          psz++;
        }
        if (source[psz] === ' ') {
          return;
        }
        var it4 = size - length;
        while (it4 !== size && b256[it4] === 0) {
          it4++;
        }
        var vch = new Uint8Array(zeroes + (size - it4));
        var j = zeroes;
        while (it4 !== size) {
          vch[j++] = b256[it4++];
        }
        return vch;
      }
      function decode(string) {
        var buffer = decodeUnsafe(string);
        if (buffer) {
          return buffer;
        }
        throw new Error(`Non-${ name } character`);
      }
      return {
        encode: encode,
        decodeUnsafe: decodeUnsafe,
        decode: decode
      };
    }
    var src = base;
    var _brrp__multiformats_scope_baseX = src;

    const coerce = o => {
      if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')
        return o;
      if (o instanceof ArrayBuffer)
        return new Uint8Array(o);
      if (ArrayBuffer.isView(o)) {
        return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
      }
      throw new Error('Unknown type, must be binary type');
    };
    const fromString$1 = str => new TextEncoder().encode(str);
    const toString$2 = b => new TextDecoder().decode(b);

    class Encoder {
      constructor(name, prefix, baseEncode) {
        this.name = name;
        this.prefix = prefix;
        this.baseEncode = baseEncode;
      }
      encode(bytes) {
        if (bytes instanceof Uint8Array) {
          return `${ this.prefix }${ this.baseEncode(bytes) }`;
        } else {
          throw Error('Unknown type, must be binary type');
        }
      }
    }
    class Decoder {
      constructor(name, prefix, baseDecode) {
        this.name = name;
        this.prefix = prefix;
        if (prefix.codePointAt(0) === undefined) {
          throw new Error('Invalid prefix character');
        }
        this.prefixCodePoint = prefix.codePointAt(0);
        this.baseDecode = baseDecode;
      }
      decode(text) {
        if (typeof text === 'string') {
          if (text.codePointAt(0) !== this.prefixCodePoint) {
            throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);
          }
          return this.baseDecode(text.slice(this.prefix.length));
        } else {
          throw Error('Can only multibase decode strings');
        }
      }
      or(decoder) {
        return or$2(this, decoder);
      }
    }
    class ComposedDecoder {
      constructor(decoders) {
        this.decoders = decoders;
      }
      or(decoder) {
        return or$2(this, decoder);
      }
      decode(input) {
        const prefix = input[0];
        const decoder = this.decoders[prefix];
        if (decoder) {
          return decoder.decode(input);
        } else {
          throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);
        }
      }
    }
    const or$2 = (left, right) => new ComposedDecoder({
      ...left.decoders || { [left.prefix]: left },
      ...right.decoders || { [right.prefix]: right }
    });
    class Codec {
      constructor(name, prefix, baseEncode, baseDecode) {
        this.name = name;
        this.prefix = prefix;
        this.baseEncode = baseEncode;
        this.baseDecode = baseDecode;
        this.encoder = new Encoder(name, prefix, baseEncode);
        this.decoder = new Decoder(name, prefix, baseDecode);
      }
      encode(input) {
        return this.encoder.encode(input);
      }
      decode(input) {
        return this.decoder.decode(input);
      }
    }
    const from$1 = ({name, prefix, encode, decode}) => new Codec(name, prefix, encode, decode);
    const baseX = ({prefix, name, alphabet}) => {
      const {encode, decode} = _brrp__multiformats_scope_baseX(alphabet, name);
      return from$1({
        prefix,
        name,
        encode,
        decode: text => coerce(decode(text))
      });
    };
    const decode$3 = (string, alphabet, bitsPerChar, name) => {
      const codes = {};
      for (let i = 0; i < alphabet.length; ++i) {
        codes[alphabet[i]] = i;
      }
      let end = string.length;
      while (string[end - 1] === '=') {
        --end;
      }
      const out = new Uint8Array(end * bitsPerChar / 8 | 0);
      let bits = 0;
      let buffer = 0;
      let written = 0;
      for (let i = 0; i < end; ++i) {
        const value = codes[string[i]];
        if (value === undefined) {
          throw new SyntaxError(`Non-${ name } character`);
        }
        buffer = buffer << bitsPerChar | value;
        bits += bitsPerChar;
        if (bits >= 8) {
          bits -= 8;
          out[written++] = 255 & buffer >> bits;
        }
      }
      if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {
        throw new SyntaxError('Unexpected end of data');
      }
      return out;
    };
    const encode$3 = (data, alphabet, bitsPerChar) => {
      const pad = alphabet[alphabet.length - 1] === '=';
      const mask = (1 << bitsPerChar) - 1;
      let out = '';
      let bits = 0;
      let buffer = 0;
      for (let i = 0; i < data.length; ++i) {
        buffer = buffer << 8 | data[i];
        bits += 8;
        while (bits > bitsPerChar) {
          bits -= bitsPerChar;
          out += alphabet[mask & buffer >> bits];
        }
      }
      if (bits) {
        out += alphabet[mask & buffer << bitsPerChar - bits];
      }
      if (pad) {
        while (out.length * bitsPerChar & 7) {
          out += '=';
        }
      }
      return out;
    };
    const rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {
      return from$1({
        prefix,
        name,
        encode(input) {
          return encode$3(input, alphabet, bitsPerChar);
        },
        decode(input) {
          return decode$3(input, alphabet, bitsPerChar, name);
        }
      });
    };

    const identity$2 = from$1({
      prefix: '\0',
      name: 'identity',
      encode: buf => toString$2(buf),
      decode: str => fromString$1(str)
    });

    var identityBase = /*#__PURE__*/Object.freeze({
        __proto__: null,
        identity: identity$2
    });

    const base2 = rfc4648({
      prefix: '0',
      name: 'base2',
      alphabet: '01',
      bitsPerChar: 1
    });

    var base2$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        base2: base2
    });

    const base8 = rfc4648({
      prefix: '7',
      name: 'base8',
      alphabet: '01234567',
      bitsPerChar: 3
    });

    var base8$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        base8: base8
    });

    const base10 = baseX({
      prefix: '9',
      name: 'base10',
      alphabet: '0123456789'
    });

    var base10$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        base10: base10
    });

    const base16 = rfc4648({
      prefix: 'f',
      name: 'base16',
      alphabet: '0123456789abcdef',
      bitsPerChar: 4
    });
    const base16upper = rfc4648({
      prefix: 'F',
      name: 'base16upper',
      alphabet: '0123456789ABCDEF',
      bitsPerChar: 4
    });

    var base16$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        base16: base16,
        base16upper: base16upper
    });

    const base32 = rfc4648({
      prefix: 'b',
      name: 'base32',
      alphabet: 'abcdefghijklmnopqrstuvwxyz234567',
      bitsPerChar: 5
    });
    const base32upper = rfc4648({
      prefix: 'B',
      name: 'base32upper',
      alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',
      bitsPerChar: 5
    });
    const base32pad = rfc4648({
      prefix: 'c',
      name: 'base32pad',
      alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',
      bitsPerChar: 5
    });
    const base32padupper = rfc4648({
      prefix: 'C',
      name: 'base32padupper',
      alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',
      bitsPerChar: 5
    });
    const base32hex = rfc4648({
      prefix: 'v',
      name: 'base32hex',
      alphabet: '0123456789abcdefghijklmnopqrstuv',
      bitsPerChar: 5
    });
    const base32hexupper = rfc4648({
      prefix: 'V',
      name: 'base32hexupper',
      alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',
      bitsPerChar: 5
    });
    const base32hexpad = rfc4648({
      prefix: 't',
      name: 'base32hexpad',
      alphabet: '0123456789abcdefghijklmnopqrstuv=',
      bitsPerChar: 5
    });
    const base32hexpadupper = rfc4648({
      prefix: 'T',
      name: 'base32hexpadupper',
      alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',
      bitsPerChar: 5
    });
    const base32z = rfc4648({
      prefix: 'h',
      name: 'base32z',
      alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',
      bitsPerChar: 5
    });

    var base32$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        base32: base32,
        base32upper: base32upper,
        base32pad: base32pad,
        base32padupper: base32padupper,
        base32hex: base32hex,
        base32hexupper: base32hexupper,
        base32hexpad: base32hexpad,
        base32hexpadupper: base32hexpadupper,
        base32z: base32z
    });

    const base36 = baseX({
      prefix: 'k',
      name: 'base36',
      alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'
    });
    const base36upper = baseX({
      prefix: 'K',
      name: 'base36upper',
      alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    });

    var base36$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        base36: base36,
        base36upper: base36upper
    });

    const base58btc = baseX({
      name: 'base58btc',
      prefix: 'z',
      alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
    });
    const base58flickr = baseX({
      name: 'base58flickr',
      prefix: 'Z',
      alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'
    });

    var base58 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        base58btc: base58btc,
        base58flickr: base58flickr
    });

    const base64 = rfc4648({
      prefix: 'm',
      name: 'base64',
      alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
      bitsPerChar: 6
    });
    const base64pad = rfc4648({
      prefix: 'M',
      name: 'base64pad',
      alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
      bitsPerChar: 6
    });
    const base64url = rfc4648({
      prefix: 'u',
      name: 'base64url',
      alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',
      bitsPerChar: 6
    });
    const base64urlpad = rfc4648({
      prefix: 'U',
      name: 'base64urlpad',
      alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',
      bitsPerChar: 6
    });

    var base64$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        base64: base64,
        base64pad: base64pad,
        base64url: base64url,
        base64urlpad: base64urlpad
    });

    const alphabet = Array.from('\uD83D\uDE80\uD83E\uDE90\u2604\uD83D\uDEF0\uD83C\uDF0C\uD83C\uDF11\uD83C\uDF12\uD83C\uDF13\uD83C\uDF14\uD83C\uDF15\uD83C\uDF16\uD83C\uDF17\uD83C\uDF18\uD83C\uDF0D\uD83C\uDF0F\uD83C\uDF0E\uD83D\uDC09\u2600\uD83D\uDCBB\uD83D\uDDA5\uD83D\uDCBE\uD83D\uDCBF\uD83D\uDE02\u2764\uD83D\uDE0D\uD83E\uDD23\uD83D\uDE0A\uD83D\uDE4F\uD83D\uDC95\uD83D\uDE2D\uD83D\uDE18\uD83D\uDC4D\uD83D\uDE05\uD83D\uDC4F\uD83D\uDE01\uD83D\uDD25\uD83E\uDD70\uD83D\uDC94\uD83D\uDC96\uD83D\uDC99\uD83D\uDE22\uD83E\uDD14\uD83D\uDE06\uD83D\uDE44\uD83D\uDCAA\uD83D\uDE09\u263A\uD83D\uDC4C\uD83E\uDD17\uD83D\uDC9C\uD83D\uDE14\uD83D\uDE0E\uD83D\uDE07\uD83C\uDF39\uD83E\uDD26\uD83C\uDF89\uD83D\uDC9E\u270C\u2728\uD83E\uDD37\uD83D\uDE31\uD83D\uDE0C\uD83C\uDF38\uD83D\uDE4C\uD83D\uDE0B\uD83D\uDC97\uD83D\uDC9A\uD83D\uDE0F\uD83D\uDC9B\uD83D\uDE42\uD83D\uDC93\uD83E\uDD29\uD83D\uDE04\uD83D\uDE00\uD83D\uDDA4\uD83D\uDE03\uD83D\uDCAF\uD83D\uDE48\uD83D\uDC47\uD83C\uDFB6\uD83D\uDE12\uD83E\uDD2D\u2763\uD83D\uDE1C\uD83D\uDC8B\uD83D\uDC40\uD83D\uDE2A\uD83D\uDE11\uD83D\uDCA5\uD83D\uDE4B\uD83D\uDE1E\uD83D\uDE29\uD83D\uDE21\uD83E\uDD2A\uD83D\uDC4A\uD83E\uDD73\uD83D\uDE25\uD83E\uDD24\uD83D\uDC49\uD83D\uDC83\uD83D\uDE33\u270B\uD83D\uDE1A\uD83D\uDE1D\uD83D\uDE34\uD83C\uDF1F\uD83D\uDE2C\uD83D\uDE43\uD83C\uDF40\uD83C\uDF37\uD83D\uDE3B\uD83D\uDE13\u2B50\u2705\uD83E\uDD7A\uD83C\uDF08\uD83D\uDE08\uD83E\uDD18\uD83D\uDCA6\u2714\uD83D\uDE23\uD83C\uDFC3\uD83D\uDC90\u2639\uD83C\uDF8A\uD83D\uDC98\uD83D\uDE20\u261D\uD83D\uDE15\uD83C\uDF3A\uD83C\uDF82\uD83C\uDF3B\uD83D\uDE10\uD83D\uDD95\uD83D\uDC9D\uD83D\uDE4A\uD83D\uDE39\uD83D\uDDE3\uD83D\uDCAB\uD83D\uDC80\uD83D\uDC51\uD83C\uDFB5\uD83E\uDD1E\uD83D\uDE1B\uD83D\uDD34\uD83D\uDE24\uD83C\uDF3C\uD83D\uDE2B\u26BD\uD83E\uDD19\u2615\uD83C\uDFC6\uD83E\uDD2B\uD83D\uDC48\uD83D\uDE2E\uD83D\uDE46\uD83C\uDF7B\uD83C\uDF43\uD83D\uDC36\uD83D\uDC81\uD83D\uDE32\uD83C\uDF3F\uD83E\uDDE1\uD83C\uDF81\u26A1\uD83C\uDF1E\uD83C\uDF88\u274C\u270A\uD83D\uDC4B\uD83D\uDE30\uD83E\uDD28\uD83D\uDE36\uD83E\uDD1D\uD83D\uDEB6\uD83D\uDCB0\uD83C\uDF53\uD83D\uDCA2\uD83E\uDD1F\uD83D\uDE41\uD83D\uDEA8\uD83D\uDCA8\uD83E\uDD2C\u2708\uD83C\uDF80\uD83C\uDF7A\uD83E\uDD13\uD83D\uDE19\uD83D\uDC9F\uD83C\uDF31\uD83D\uDE16\uD83D\uDC76\uD83E\uDD74\u25B6\u27A1\u2753\uD83D\uDC8E\uD83D\uDCB8\u2B07\uD83D\uDE28\uD83C\uDF1A\uD83E\uDD8B\uD83D\uDE37\uD83D\uDD7A\u26A0\uD83D\uDE45\uD83D\uDE1F\uD83D\uDE35\uD83D\uDC4E\uD83E\uDD32\uD83E\uDD20\uD83E\uDD27\uD83D\uDCCC\uD83D\uDD35\uD83D\uDC85\uD83E\uDDD0\uD83D\uDC3E\uD83C\uDF52\uD83D\uDE17\uD83E\uDD11\uD83C\uDF0A\uD83E\uDD2F\uD83D\uDC37\u260E\uD83D\uDCA7\uD83D\uDE2F\uD83D\uDC86\uD83D\uDC46\uD83C\uDFA4\uD83D\uDE47\uD83C\uDF51\u2744\uD83C\uDF34\uD83D\uDCA3\uD83D\uDC38\uD83D\uDC8C\uD83D\uDCCD\uD83E\uDD40\uD83E\uDD22\uD83D\uDC45\uD83D\uDCA1\uD83D\uDCA9\uD83D\uDC50\uD83D\uDCF8\uD83D\uDC7B\uD83E\uDD10\uD83E\uDD2E\uD83C\uDFBC\uD83E\uDD75\uD83D\uDEA9\uD83C\uDF4E\uD83C\uDF4A\uD83D\uDC7C\uD83D\uDC8D\uD83D\uDCE3\uD83E\uDD42');
    const alphabetBytesToChars = alphabet.reduce((p, c, i) => {
      p[i] = c;
      return p;
    }, []);
    const alphabetCharsToBytes = alphabet.reduce((p, c, i) => {
      p[c.codePointAt(0)] = i;
      return p;
    }, []);
    function encode$2(data) {
      return data.reduce((p, c) => {
        p += alphabetBytesToChars[c];
        return p;
      }, '');
    }
    function decode$2(str) {
      const byts = [];
      for (const char of str) {
        const byt = alphabetCharsToBytes[char.codePointAt(0)];
        if (byt === undefined) {
          throw new Error(`Non-base256emoji character: ${ char }`);
        }
        byts.push(byt);
      }
      return new Uint8Array(byts);
    }
    const base256emoji = from$1({
      prefix: '\uD83D\uDE80',
      name: 'base256emoji',
      encode: encode$2,
      decode: decode$2
    });

    var base256emoji$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        base256emoji: base256emoji
    });

    var encode_1 = encode$1;
    var MSB = 128, REST = 127, MSBALL = ~REST, INT = Math.pow(2, 31);
    function encode$1(num, out, offset) {
      out = out || [];
      offset = offset || 0;
      var oldOffset = offset;
      while (num >= INT) {
        out[offset++] = num & 255 | MSB;
        num /= 128;
      }
      while (num & MSBALL) {
        out[offset++] = num & 255 | MSB;
        num >>>= 7;
      }
      out[offset] = num | 0;
      encode$1.bytes = offset - oldOffset + 1;
      return out;
    }
    var decode$1 = read$1;
    var MSB$1 = 128, REST$1 = 127;
    function read$1(buf, offset) {
      var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;
      do {
        if (counter >= l) {
          read$1.bytes = 0;
          throw new RangeError('Could not decode varint');
        }
        b = buf[counter++];
        res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);
        shift += 7;
      } while (b >= MSB$1);
      read$1.bytes = counter - offset;
      return res;
    }
    var N1 = Math.pow(2, 7);
    var N2 = Math.pow(2, 14);
    var N3 = Math.pow(2, 21);
    var N4 = Math.pow(2, 28);
    var N5 = Math.pow(2, 35);
    var N6 = Math.pow(2, 42);
    var N7 = Math.pow(2, 49);
    var N8 = Math.pow(2, 56);
    var N9 = Math.pow(2, 63);
    var length = function (value) {
      return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
    };
    var varint = {
      encode: encode_1,
      decode: decode$1,
      encodingLength: length
    };
    var _brrp_varint = varint;

    const encodeTo = (int, target, offset = 0) => {
      _brrp_varint.encode(int, target, offset);
      return target;
    };
    const encodingLength = int => {
      return _brrp_varint.encodingLength(int);
    };

    const create$2 = (code, digest) => {
      const size = digest.byteLength;
      const sizeOffset = encodingLength(code);
      const digestOffset = sizeOffset + encodingLength(size);
      const bytes = new Uint8Array(digestOffset + size);
      encodeTo(code, bytes, 0);
      encodeTo(size, bytes, sizeOffset);
      bytes.set(digest, digestOffset);
      return new Digest(code, size, digest, bytes);
    };
    class Digest {
      constructor(code, size, digest, bytes) {
        this.code = code;
        this.size = size;
        this.digest = digest;
        this.bytes = bytes;
      }
    }

    const from = ({name, code, encode}) => new Hasher(name, code, encode);
    class Hasher {
      constructor(name, code, encode) {
        this.name = name;
        this.code = code;
        this.encode = encode;
      }
      digest(input) {
        if (input instanceof Uint8Array) {
          const result = this.encode(input);
          return result instanceof Uint8Array ? create$2(this.code, result) : result.then(digest => create$2(this.code, digest));
        } else {
          throw Error('Unknown type, must be binary type');
        }
      }
    }

    const sha = name => async data => new Uint8Array(await crypto.subtle.digest(name, data));
    const sha256$1 = from({
      name: 'sha2-256',
      code: 18,
      encode: sha('SHA-256')
    });
    const sha512 = from({
      name: 'sha2-512',
      code: 19,
      encode: sha('SHA-512')
    });

    var sha2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        sha256: sha256$1,
        sha512: sha512
    });

    const code$1 = 0;
    const name = 'identity';
    const encode = coerce;
    const digest = input => create$2(code$1, encode(input));
    const identity = {
      code: code$1,
      name,
      encode,
      digest
    };

    var identity$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        identity: identity
    });

    new TextEncoder();
    new TextDecoder();

    const bases = {
      ...identityBase,
      ...base2$1,
      ...base8$1,
      ...base10$1,
      ...base16$1,
      ...base32$1,
      ...base36$1,
      ...base58,
      ...base64$1,
      ...base256emoji$1
    };
    ({
      ...sha2,
      ...identity$1
    });

    function createCodec(name, prefix, encode, decode) {
      return {
        name,
        prefix,
        encoder: {
          name,
          prefix,
          encode
        },
        decoder: { decode }
      };
    }
    const string = createCodec('utf8', 'u', buf => {
      const decoder = new TextDecoder('utf8');
      return 'u' + decoder.decode(buf);
    }, str => {
      const encoder = new TextEncoder();
      return encoder.encode(str.substring(1));
    });
    const ascii = createCodec('ascii', 'a', buf => {
      let string = 'a';
      for (let i = 0; i < buf.length; i++) {
        string += String.fromCharCode(buf[i]);
      }
      return string;
    }, str => {
      str = str.substring(1);
      const buf = allocUnsafe(str.length);
      for (let i = 0; i < str.length; i++) {
        buf[i] = str.charCodeAt(i);
      }
      return buf;
    });
    const BASES = {
      utf8: string,
      'utf-8': string,
      hex: bases.base16,
      latin1: ascii,
      ascii: ascii,
      binary: ascii,
      ...bases
    };

    function toString$1(array, encoding = 'utf8') {
      const base = BASES[encoding];
      if (!base) {
        throw new Error(`Unsupported encoding "${ encoding }"`);
      }
      if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {
        return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString('utf8');
      }
      return base.encoder.encode(array).substring(1);
    }

    function fromString(string, encoding = 'utf8') {
      const base = BASES[encoding];
      if (!base) {
        throw new Error(`Unsupported encoding "${ encoding }"`);
      }
      if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {
        return globalThis.Buffer.from(string, 'utf8');
      }
      return base.decoder.decode(`${ base.prefix }${ string }`);
    }

    function encodeJSON(val) {
        return toString$1(fromString(safeJsonStringify(val), JSON_ENCODING), JWT_ENCODING);
    }
    function encodeIss(publicKey) {
        const header = fromString(MULTICODEC_ED25519_HEADER, MULTICODEC_ED25519_ENCODING);
        const multicodec = MULTICODEC_ED25519_BASE +
            toString$1(concat([header, publicKey]), MULTICODEC_ED25519_ENCODING);
        return [DID_PREFIX, DID_METHOD, multicodec].join(DID_DELIMITER);
    }
    function encodeSig(bytes) {
        return toString$1(bytes, JWT_ENCODING);
    }
    function encodeData(params) {
        return fromString([encodeJSON(params.header), encodeJSON(params.payload)].join(JWT_DELIMITER), DATA_ENCODING);
    }
    function encodeJWT(params) {
        return [
            encodeJSON(params.header),
            encodeJSON(params.payload),
            encodeSig(params.signature),
        ].join(JWT_DELIMITER);
    }

    function generateKeyPair(seed = random.randomBytes(KEY_PAIR_SEED_LENGTH)) {
        return ed25519.generateKeyPairFromSeed(seed);
    }
    async function signJWT(sub, aud, ttl, keyPair, iat = cjs$5.fromMiliseconds(Date.now())) {
        const header = { alg: JWT_IRIDIUM_ALG, typ: JWT_IRIDIUM_TYP };
        const iss = encodeIss(keyPair.publicKey);
        const exp = iat + ttl;
        const payload = { iss, sub, aud, iat, exp };
        const data = encodeData({ header, payload });
        const signature = ed25519.sign(keyPair.secretKey, data);
        return encodeJWT({ header, payload, signature });
    }

    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.

    /**
     * Package chacha implements ChaCha stream cipher.
     */


    // Number of ChaCha rounds (ChaCha20).
    var ROUNDS = 20;
    // Applies the ChaCha core function to 16-byte input,
    // 32-byte key key, and puts the result into 64-byte array out.
    function core(out, input, key) {
        var j0 = 0x61707865; // "expa"  -- ChaCha's "sigma" constant
        var j1 = 0x3320646E; // "nd 3"     for 32-byte keys
        var j2 = 0x79622D32; // "2-by"
        var j3 = 0x6B206574; // "te k"
        var j4 = (key[3] << 24) | (key[2] << 16) | (key[1] << 8) | key[0];
        var j5 = (key[7] << 24) | (key[6] << 16) | (key[5] << 8) | key[4];
        var j6 = (key[11] << 24) | (key[10] << 16) | (key[9] << 8) | key[8];
        var j7 = (key[15] << 24) | (key[14] << 16) | (key[13] << 8) | key[12];
        var j8 = (key[19] << 24) | (key[18] << 16) | (key[17] << 8) | key[16];
        var j9 = (key[23] << 24) | (key[22] << 16) | (key[21] << 8) | key[20];
        var j10 = (key[27] << 24) | (key[26] << 16) | (key[25] << 8) | key[24];
        var j11 = (key[31] << 24) | (key[30] << 16) | (key[29] << 8) | key[28];
        var j12 = (input[3] << 24) | (input[2] << 16) | (input[1] << 8) | input[0];
        var j13 = (input[7] << 24) | (input[6] << 16) | (input[5] << 8) | input[4];
        var j14 = (input[11] << 24) | (input[10] << 16) | (input[9] << 8) | input[8];
        var j15 = (input[15] << 24) | (input[14] << 16) | (input[13] << 8) | input[12];
        var x0 = j0;
        var x1 = j1;
        var x2 = j2;
        var x3 = j3;
        var x4 = j4;
        var x5 = j5;
        var x6 = j6;
        var x7 = j7;
        var x8 = j8;
        var x9 = j9;
        var x10 = j10;
        var x11 = j11;
        var x12 = j12;
        var x13 = j13;
        var x14 = j14;
        var x15 = j15;
        for (var i = 0; i < ROUNDS; i += 2) {
            x0 = x0 + x4 | 0;
            x12 ^= x0;
            x12 = x12 >>> (32 - 16) | x12 << 16;
            x8 = x8 + x12 | 0;
            x4 ^= x8;
            x4 = x4 >>> (32 - 12) | x4 << 12;
            x1 = x1 + x5 | 0;
            x13 ^= x1;
            x13 = x13 >>> (32 - 16) | x13 << 16;
            x9 = x9 + x13 | 0;
            x5 ^= x9;
            x5 = x5 >>> (32 - 12) | x5 << 12;
            x2 = x2 + x6 | 0;
            x14 ^= x2;
            x14 = x14 >>> (32 - 16) | x14 << 16;
            x10 = x10 + x14 | 0;
            x6 ^= x10;
            x6 = x6 >>> (32 - 12) | x6 << 12;
            x3 = x3 + x7 | 0;
            x15 ^= x3;
            x15 = x15 >>> (32 - 16) | x15 << 16;
            x11 = x11 + x15 | 0;
            x7 ^= x11;
            x7 = x7 >>> (32 - 12) | x7 << 12;
            x2 = x2 + x6 | 0;
            x14 ^= x2;
            x14 = x14 >>> (32 - 8) | x14 << 8;
            x10 = x10 + x14 | 0;
            x6 ^= x10;
            x6 = x6 >>> (32 - 7) | x6 << 7;
            x3 = x3 + x7 | 0;
            x15 ^= x3;
            x15 = x15 >>> (32 - 8) | x15 << 8;
            x11 = x11 + x15 | 0;
            x7 ^= x11;
            x7 = x7 >>> (32 - 7) | x7 << 7;
            x1 = x1 + x5 | 0;
            x13 ^= x1;
            x13 = x13 >>> (32 - 8) | x13 << 8;
            x9 = x9 + x13 | 0;
            x5 ^= x9;
            x5 = x5 >>> (32 - 7) | x5 << 7;
            x0 = x0 + x4 | 0;
            x12 ^= x0;
            x12 = x12 >>> (32 - 8) | x12 << 8;
            x8 = x8 + x12 | 0;
            x4 ^= x8;
            x4 = x4 >>> (32 - 7) | x4 << 7;
            x0 = x0 + x5 | 0;
            x15 ^= x0;
            x15 = x15 >>> (32 - 16) | x15 << 16;
            x10 = x10 + x15 | 0;
            x5 ^= x10;
            x5 = x5 >>> (32 - 12) | x5 << 12;
            x1 = x1 + x6 | 0;
            x12 ^= x1;
            x12 = x12 >>> (32 - 16) | x12 << 16;
            x11 = x11 + x12 | 0;
            x6 ^= x11;
            x6 = x6 >>> (32 - 12) | x6 << 12;
            x2 = x2 + x7 | 0;
            x13 ^= x2;
            x13 = x13 >>> (32 - 16) | x13 << 16;
            x8 = x8 + x13 | 0;
            x7 ^= x8;
            x7 = x7 >>> (32 - 12) | x7 << 12;
            x3 = x3 + x4 | 0;
            x14 ^= x3;
            x14 = x14 >>> (32 - 16) | x14 << 16;
            x9 = x9 + x14 | 0;
            x4 ^= x9;
            x4 = x4 >>> (32 - 12) | x4 << 12;
            x2 = x2 + x7 | 0;
            x13 ^= x2;
            x13 = x13 >>> (32 - 8) | x13 << 8;
            x8 = x8 + x13 | 0;
            x7 ^= x8;
            x7 = x7 >>> (32 - 7) | x7 << 7;
            x3 = x3 + x4 | 0;
            x14 ^= x3;
            x14 = x14 >>> (32 - 8) | x14 << 8;
            x9 = x9 + x14 | 0;
            x4 ^= x9;
            x4 = x4 >>> (32 - 7) | x4 << 7;
            x1 = x1 + x6 | 0;
            x12 ^= x1;
            x12 = x12 >>> (32 - 8) | x12 << 8;
            x11 = x11 + x12 | 0;
            x6 ^= x11;
            x6 = x6 >>> (32 - 7) | x6 << 7;
            x0 = x0 + x5 | 0;
            x15 ^= x0;
            x15 = x15 >>> (32 - 8) | x15 << 8;
            x10 = x10 + x15 | 0;
            x5 ^= x10;
            x5 = x5 >>> (32 - 7) | x5 << 7;
        }
        binary.writeUint32LE(x0 + j0 | 0, out, 0);
        binary.writeUint32LE(x1 + j1 | 0, out, 4);
        binary.writeUint32LE(x2 + j2 | 0, out, 8);
        binary.writeUint32LE(x3 + j3 | 0, out, 12);
        binary.writeUint32LE(x4 + j4 | 0, out, 16);
        binary.writeUint32LE(x5 + j5 | 0, out, 20);
        binary.writeUint32LE(x6 + j6 | 0, out, 24);
        binary.writeUint32LE(x7 + j7 | 0, out, 28);
        binary.writeUint32LE(x8 + j8 | 0, out, 32);
        binary.writeUint32LE(x9 + j9 | 0, out, 36);
        binary.writeUint32LE(x10 + j10 | 0, out, 40);
        binary.writeUint32LE(x11 + j11 | 0, out, 44);
        binary.writeUint32LE(x12 + j12 | 0, out, 48);
        binary.writeUint32LE(x13 + j13 | 0, out, 52);
        binary.writeUint32LE(x14 + j14 | 0, out, 56);
        binary.writeUint32LE(x15 + j15 | 0, out, 60);
    }
    /**
     * Encrypt src with ChaCha20 stream generated for the given 32-byte key and
     * 8-byte (as in original implementation) or 12-byte (as in RFC7539) nonce and
     * write the result into dst and return it.
     *
     * dst and src may be the same, but otherwise must not overlap.
     *
     * If nonce is 12 bytes, users should not encrypt more than 256 GiB with the
     * same key and nonce, otherwise the stream will repeat. The function will
     * throw error if counter overflows to prevent this.
     *
     * If nonce is 8 bytes, the output is practically unlimited (2^70 bytes, which
     * is more than a million petabytes). However, it is not recommended to
     * generate 8-byte nonces randomly, as the chance of collision is high.
     *
     * Never use the same key and nonce to encrypt more than one message.
     *
     * If nonceInplaceCounterLength is not 0, the nonce is assumed to be a 16-byte
     * array with stream counter in first nonceInplaceCounterLength bytes and nonce
     * in the last remaining bytes. The counter will be incremented inplace for
     * each ChaCha block. This is useful if you need to encrypt one stream of data
     * in chunks.
     */
    function streamXOR(key, nonce, src, dst, nonceInplaceCounterLength) {
        if (nonceInplaceCounterLength === void 0) { nonceInplaceCounterLength = 0; }
        // We only support 256-bit keys.
        if (key.length !== 32) {
            throw new Error("ChaCha: key size must be 32 bytes");
        }
        if (dst.length < src.length) {
            throw new Error("ChaCha: destination is shorter than source");
        }
        var nc;
        var counterLength;
        if (nonceInplaceCounterLength === 0) {
            if (nonce.length !== 8 && nonce.length !== 12) {
                throw new Error("ChaCha nonce must be 8 or 12 bytes");
            }
            nc = new Uint8Array(16);
            // First counterLength bytes of nc are counter, starting with zero.
            counterLength = nc.length - nonce.length;
            // Last bytes of nc after counterLength are nonce, set them.
            nc.set(nonce, counterLength);
        }
        else {
            if (nonce.length !== 16) {
                throw new Error("ChaCha nonce with counter must be 16 bytes");
            }
            // This will update passed nonce with counter inplace.
            nc = nonce;
            counterLength = nonceInplaceCounterLength;
        }
        // Allocate temporary space for ChaCha block.
        var block = new Uint8Array(64);
        for (var i = 0; i < src.length; i += 64) {
            // Generate a block.
            core(block, nc, key);
            // XOR block bytes with src into dst.
            for (var j = i; j < i + 64 && j < src.length; j++) {
                dst[j] = src[j] ^ block[j - i];
            }
            // Increment counter.
            incrementCounter(nc, 0, counterLength);
        }
        // Cleanup temporary space.
        wipe_1.wipe(block);
        if (nonceInplaceCounterLength === 0) {
            // Cleanup counter.
            wipe_1.wipe(nc);
        }
        return dst;
    }
    var streamXOR_1 = streamXOR;
    /**
     * Generate ChaCha20 stream for the given 32-byte key and 8-byte or 12-byte
     * nonce and write it into dst and return it.
     *
     * Never use the same key and nonce to generate more than one stream.
     *
     * If nonceInplaceCounterLength is not 0, it behaves the same with respect to
     * the nonce as described in the streamXOR documentation.
     *
     * stream is like streamXOR with all-zero src.
     */
    function stream(key, nonce, dst, nonceInplaceCounterLength) {
        if (nonceInplaceCounterLength === void 0) { nonceInplaceCounterLength = 0; }
        wipe_1.wipe(dst);
        return streamXOR(key, nonce, dst, dst, nonceInplaceCounterLength);
    }
    var stream_1 = stream;
    function incrementCounter(counter, pos, len) {
        var carry = 1;
        while (len--) {
            carry = carry + (counter[pos] & 0xff) | 0;
            counter[pos] = carry & 0xff;
            carry >>>= 8;
            pos++;
        }
        if (carry > 0) {
            throw new Error("ChaCha: counter overflow");
        }
    }


    var chacha = /*#__PURE__*/Object.defineProperty({
    	streamXOR: streamXOR_1,
    	stream: stream_1
    }, '__esModule', {value: true});

    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.

    /**
     * Package constant-time provides functions for performing algorithmically constant-time operations.
     */
    /**
     * NOTE! Due to the inability to guarantee real constant time evaluation of
     * anything in JavaScript VM, this is module is the best effort.
     */
    /**
     * Returns resultIfOne if subject is 1, or resultIfZero if subject is 0.
     *
     * Supports only 32-bit integers, so resultIfOne or resultIfZero are not
     * integers, they'll be converted to them with bitwise operations.
     */
    function select(subject, resultIfOne, resultIfZero) {
        return (~(subject - 1) & resultIfOne) | ((subject - 1) & resultIfZero);
    }
    var select_1 = select;
    /**
     * Returns 1 if a <= b, or 0 if not.
     * Arguments must be positive 32-bit integers less than or equal to 2^31 - 1.
     */
    function lessOrEqual(a, b) {
        return (((a | 0) - (b | 0) - 1) >>> 31) & 1;
    }
    var lessOrEqual_1 = lessOrEqual;
    /**
     * Returns 1 if a and b are of equal length and their contents
     * are equal, or 0 otherwise.
     *
     * Note that unlike in equal(), zero-length inputs are considered
     * the same, so this function will return 1.
     */
    function compare(a, b) {
        if (a.length !== b.length) {
            return 0;
        }
        var result = 0;
        for (var i = 0; i < a.length; i++) {
            result |= a[i] ^ b[i];
        }
        return (1 & ((result - 1) >>> 8));
    }
    var compare_1 = compare;
    /**
     * Returns true if a and b are of equal non-zero length,
     * and their contents are equal, or false otherwise.
     *
     * Note that unlike in compare() zero-length inputs are considered
     * _not_ equal, so this function will return false.
     */
    function equal$1(a, b) {
        if (a.length === 0 || b.length === 0) {
            return false;
        }
        return compare(a, b) !== 0;
    }
    var equal_1 = equal$1;


    var constantTime = /*#__PURE__*/Object.defineProperty({
    	select: select_1,
    	lessOrEqual: lessOrEqual_1,
    	compare: compare_1,
    	equal: equal_1
    }, '__esModule', {value: true});

    var poly1305 = createCommonjsModule$4(function (module, exports) {
    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Package poly1305 implements Poly1305 one-time message authentication algorithm.
     */


    exports.DIGEST_LENGTH = 16;
    // Port of Andrew Moon's Poly1305-donna-16. Public domain.
    // https://github.com/floodyberry/poly1305-donna
    /**
     * Poly1305 computes 16-byte authenticator of message using
     * a one-time 32-byte key.
     *
     * Important: key should be used for only one message,
     * it should never repeat.
     */
    var Poly1305 = /** @class */ (function () {
        function Poly1305(key) {
            this.digestLength = exports.DIGEST_LENGTH;
            this._buffer = new Uint8Array(16);
            this._r = new Uint16Array(10);
            this._h = new Uint16Array(10);
            this._pad = new Uint16Array(8);
            this._leftover = 0;
            this._fin = 0;
            this._finished = false;
            var t0 = key[0] | key[1] << 8;
            this._r[0] = (t0) & 0x1fff;
            var t1 = key[2] | key[3] << 8;
            this._r[1] = ((t0 >>> 13) | (t1 << 3)) & 0x1fff;
            var t2 = key[4] | key[5] << 8;
            this._r[2] = ((t1 >>> 10) | (t2 << 6)) & 0x1f03;
            var t3 = key[6] | key[7] << 8;
            this._r[3] = ((t2 >>> 7) | (t3 << 9)) & 0x1fff;
            var t4 = key[8] | key[9] << 8;
            this._r[4] = ((t3 >>> 4) | (t4 << 12)) & 0x00ff;
            this._r[5] = ((t4 >>> 1)) & 0x1ffe;
            var t5 = key[10] | key[11] << 8;
            this._r[6] = ((t4 >>> 14) | (t5 << 2)) & 0x1fff;
            var t6 = key[12] | key[13] << 8;
            this._r[7] = ((t5 >>> 11) | (t6 << 5)) & 0x1f81;
            var t7 = key[14] | key[15] << 8;
            this._r[8] = ((t6 >>> 8) | (t7 << 8)) & 0x1fff;
            this._r[9] = ((t7 >>> 5)) & 0x007f;
            this._pad[0] = key[16] | key[17] << 8;
            this._pad[1] = key[18] | key[19] << 8;
            this._pad[2] = key[20] | key[21] << 8;
            this._pad[3] = key[22] | key[23] << 8;
            this._pad[4] = key[24] | key[25] << 8;
            this._pad[5] = key[26] | key[27] << 8;
            this._pad[6] = key[28] | key[29] << 8;
            this._pad[7] = key[30] | key[31] << 8;
        }
        Poly1305.prototype._blocks = function (m, mpos, bytes) {
            var hibit = this._fin ? 0 : 1 << 11;
            var h0 = this._h[0], h1 = this._h[1], h2 = this._h[2], h3 = this._h[3], h4 = this._h[4], h5 = this._h[5], h6 = this._h[6], h7 = this._h[7], h8 = this._h[8], h9 = this._h[9];
            var r0 = this._r[0], r1 = this._r[1], r2 = this._r[2], r3 = this._r[3], r4 = this._r[4], r5 = this._r[5], r6 = this._r[6], r7 = this._r[7], r8 = this._r[8], r9 = this._r[9];
            while (bytes >= 16) {
                var t0 = m[mpos + 0] | m[mpos + 1] << 8;
                h0 += (t0) & 0x1fff;
                var t1 = m[mpos + 2] | m[mpos + 3] << 8;
                h1 += ((t0 >>> 13) | (t1 << 3)) & 0x1fff;
                var t2 = m[mpos + 4] | m[mpos + 5] << 8;
                h2 += ((t1 >>> 10) | (t2 << 6)) & 0x1fff;
                var t3 = m[mpos + 6] | m[mpos + 7] << 8;
                h3 += ((t2 >>> 7) | (t3 << 9)) & 0x1fff;
                var t4 = m[mpos + 8] | m[mpos + 9] << 8;
                h4 += ((t3 >>> 4) | (t4 << 12)) & 0x1fff;
                h5 += ((t4 >>> 1)) & 0x1fff;
                var t5 = m[mpos + 10] | m[mpos + 11] << 8;
                h6 += ((t4 >>> 14) | (t5 << 2)) & 0x1fff;
                var t6 = m[mpos + 12] | m[mpos + 13] << 8;
                h7 += ((t5 >>> 11) | (t6 << 5)) & 0x1fff;
                var t7 = m[mpos + 14] | m[mpos + 15] << 8;
                h8 += ((t6 >>> 8) | (t7 << 8)) & 0x1fff;
                h9 += ((t7 >>> 5)) | hibit;
                var c = 0;
                var d0 = c;
                d0 += h0 * r0;
                d0 += h1 * (5 * r9);
                d0 += h2 * (5 * r8);
                d0 += h3 * (5 * r7);
                d0 += h4 * (5 * r6);
                c = (d0 >>> 13);
                d0 &= 0x1fff;
                d0 += h5 * (5 * r5);
                d0 += h6 * (5 * r4);
                d0 += h7 * (5 * r3);
                d0 += h8 * (5 * r2);
                d0 += h9 * (5 * r1);
                c += (d0 >>> 13);
                d0 &= 0x1fff;
                var d1 = c;
                d1 += h0 * r1;
                d1 += h1 * r0;
                d1 += h2 * (5 * r9);
                d1 += h3 * (5 * r8);
                d1 += h4 * (5 * r7);
                c = (d1 >>> 13);
                d1 &= 0x1fff;
                d1 += h5 * (5 * r6);
                d1 += h6 * (5 * r5);
                d1 += h7 * (5 * r4);
                d1 += h8 * (5 * r3);
                d1 += h9 * (5 * r2);
                c += (d1 >>> 13);
                d1 &= 0x1fff;
                var d2 = c;
                d2 += h0 * r2;
                d2 += h1 * r1;
                d2 += h2 * r0;
                d2 += h3 * (5 * r9);
                d2 += h4 * (5 * r8);
                c = (d2 >>> 13);
                d2 &= 0x1fff;
                d2 += h5 * (5 * r7);
                d2 += h6 * (5 * r6);
                d2 += h7 * (5 * r5);
                d2 += h8 * (5 * r4);
                d2 += h9 * (5 * r3);
                c += (d2 >>> 13);
                d2 &= 0x1fff;
                var d3 = c;
                d3 += h0 * r3;
                d3 += h1 * r2;
                d3 += h2 * r1;
                d3 += h3 * r0;
                d3 += h4 * (5 * r9);
                c = (d3 >>> 13);
                d3 &= 0x1fff;
                d3 += h5 * (5 * r8);
                d3 += h6 * (5 * r7);
                d3 += h7 * (5 * r6);
                d3 += h8 * (5 * r5);
                d3 += h9 * (5 * r4);
                c += (d3 >>> 13);
                d3 &= 0x1fff;
                var d4 = c;
                d4 += h0 * r4;
                d4 += h1 * r3;
                d4 += h2 * r2;
                d4 += h3 * r1;
                d4 += h4 * r0;
                c = (d4 >>> 13);
                d4 &= 0x1fff;
                d4 += h5 * (5 * r9);
                d4 += h6 * (5 * r8);
                d4 += h7 * (5 * r7);
                d4 += h8 * (5 * r6);
                d4 += h9 * (5 * r5);
                c += (d4 >>> 13);
                d4 &= 0x1fff;
                var d5 = c;
                d5 += h0 * r5;
                d5 += h1 * r4;
                d5 += h2 * r3;
                d5 += h3 * r2;
                d5 += h4 * r1;
                c = (d5 >>> 13);
                d5 &= 0x1fff;
                d5 += h5 * r0;
                d5 += h6 * (5 * r9);
                d5 += h7 * (5 * r8);
                d5 += h8 * (5 * r7);
                d5 += h9 * (5 * r6);
                c += (d5 >>> 13);
                d5 &= 0x1fff;
                var d6 = c;
                d6 += h0 * r6;
                d6 += h1 * r5;
                d6 += h2 * r4;
                d6 += h3 * r3;
                d6 += h4 * r2;
                c = (d6 >>> 13);
                d6 &= 0x1fff;
                d6 += h5 * r1;
                d6 += h6 * r0;
                d6 += h7 * (5 * r9);
                d6 += h8 * (5 * r8);
                d6 += h9 * (5 * r7);
                c += (d6 >>> 13);
                d6 &= 0x1fff;
                var d7 = c;
                d7 += h0 * r7;
                d7 += h1 * r6;
                d7 += h2 * r5;
                d7 += h3 * r4;
                d7 += h4 * r3;
                c = (d7 >>> 13);
                d7 &= 0x1fff;
                d7 += h5 * r2;
                d7 += h6 * r1;
                d7 += h7 * r0;
                d7 += h8 * (5 * r9);
                d7 += h9 * (5 * r8);
                c += (d7 >>> 13);
                d7 &= 0x1fff;
                var d8 = c;
                d8 += h0 * r8;
                d8 += h1 * r7;
                d8 += h2 * r6;
                d8 += h3 * r5;
                d8 += h4 * r4;
                c = (d8 >>> 13);
                d8 &= 0x1fff;
                d8 += h5 * r3;
                d8 += h6 * r2;
                d8 += h7 * r1;
                d8 += h8 * r0;
                d8 += h9 * (5 * r9);
                c += (d8 >>> 13);
                d8 &= 0x1fff;
                var d9 = c;
                d9 += h0 * r9;
                d9 += h1 * r8;
                d9 += h2 * r7;
                d9 += h3 * r6;
                d9 += h4 * r5;
                c = (d9 >>> 13);
                d9 &= 0x1fff;
                d9 += h5 * r4;
                d9 += h6 * r3;
                d9 += h7 * r2;
                d9 += h8 * r1;
                d9 += h9 * r0;
                c += (d9 >>> 13);
                d9 &= 0x1fff;
                c = (((c << 2) + c)) | 0;
                c = (c + d0) | 0;
                d0 = c & 0x1fff;
                c = (c >>> 13);
                d1 += c;
                h0 = d0;
                h1 = d1;
                h2 = d2;
                h3 = d3;
                h4 = d4;
                h5 = d5;
                h6 = d6;
                h7 = d7;
                h8 = d8;
                h9 = d9;
                mpos += 16;
                bytes -= 16;
            }
            this._h[0] = h0;
            this._h[1] = h1;
            this._h[2] = h2;
            this._h[3] = h3;
            this._h[4] = h4;
            this._h[5] = h5;
            this._h[6] = h6;
            this._h[7] = h7;
            this._h[8] = h8;
            this._h[9] = h9;
        };
        Poly1305.prototype.finish = function (mac, macpos) {
            if (macpos === void 0) { macpos = 0; }
            var g = new Uint16Array(10);
            var c;
            var mask;
            var f;
            var i;
            if (this._leftover) {
                i = this._leftover;
                this._buffer[i++] = 1;
                for (; i < 16; i++) {
                    this._buffer[i] = 0;
                }
                this._fin = 1;
                this._blocks(this._buffer, 0, 16);
            }
            c = this._h[1] >>> 13;
            this._h[1] &= 0x1fff;
            for (i = 2; i < 10; i++) {
                this._h[i] += c;
                c = this._h[i] >>> 13;
                this._h[i] &= 0x1fff;
            }
            this._h[0] += (c * 5);
            c = this._h[0] >>> 13;
            this._h[0] &= 0x1fff;
            this._h[1] += c;
            c = this._h[1] >>> 13;
            this._h[1] &= 0x1fff;
            this._h[2] += c;
            g[0] = this._h[0] + 5;
            c = g[0] >>> 13;
            g[0] &= 0x1fff;
            for (i = 1; i < 10; i++) {
                g[i] = this._h[i] + c;
                c = g[i] >>> 13;
                g[i] &= 0x1fff;
            }
            g[9] -= (1 << 13);
            mask = (c ^ 1) - 1;
            for (i = 0; i < 10; i++) {
                g[i] &= mask;
            }
            mask = ~mask;
            for (i = 0; i < 10; i++) {
                this._h[i] = (this._h[i] & mask) | g[i];
            }
            this._h[0] = ((this._h[0]) | (this._h[1] << 13)) & 0xffff;
            this._h[1] = ((this._h[1] >>> 3) | (this._h[2] << 10)) & 0xffff;
            this._h[2] = ((this._h[2] >>> 6) | (this._h[3] << 7)) & 0xffff;
            this._h[3] = ((this._h[3] >>> 9) | (this._h[4] << 4)) & 0xffff;
            this._h[4] = ((this._h[4] >>> 12) | (this._h[5] << 1) | (this._h[6] << 14)) & 0xffff;
            this._h[5] = ((this._h[6] >>> 2) | (this._h[7] << 11)) & 0xffff;
            this._h[6] = ((this._h[7] >>> 5) | (this._h[8] << 8)) & 0xffff;
            this._h[7] = ((this._h[8] >>> 8) | (this._h[9] << 5)) & 0xffff;
            f = this._h[0] + this._pad[0];
            this._h[0] = f & 0xffff;
            for (i = 1; i < 8; i++) {
                f = (((this._h[i] + this._pad[i]) | 0) + (f >>> 16)) | 0;
                this._h[i] = f & 0xffff;
            }
            mac[macpos + 0] = this._h[0] >>> 0;
            mac[macpos + 1] = this._h[0] >>> 8;
            mac[macpos + 2] = this._h[1] >>> 0;
            mac[macpos + 3] = this._h[1] >>> 8;
            mac[macpos + 4] = this._h[2] >>> 0;
            mac[macpos + 5] = this._h[2] >>> 8;
            mac[macpos + 6] = this._h[3] >>> 0;
            mac[macpos + 7] = this._h[3] >>> 8;
            mac[macpos + 8] = this._h[4] >>> 0;
            mac[macpos + 9] = this._h[4] >>> 8;
            mac[macpos + 10] = this._h[5] >>> 0;
            mac[macpos + 11] = this._h[5] >>> 8;
            mac[macpos + 12] = this._h[6] >>> 0;
            mac[macpos + 13] = this._h[6] >>> 8;
            mac[macpos + 14] = this._h[7] >>> 0;
            mac[macpos + 15] = this._h[7] >>> 8;
            this._finished = true;
            return this;
        };
        Poly1305.prototype.update = function (m) {
            var mpos = 0;
            var bytes = m.length;
            var want;
            if (this._leftover) {
                want = (16 - this._leftover);
                if (want > bytes) {
                    want = bytes;
                }
                for (var i = 0; i < want; i++) {
                    this._buffer[this._leftover + i] = m[mpos + i];
                }
                bytes -= want;
                mpos += want;
                this._leftover += want;
                if (this._leftover < 16) {
                    return this;
                }
                this._blocks(this._buffer, 0, 16);
                this._leftover = 0;
            }
            if (bytes >= 16) {
                want = bytes - (bytes % 16);
                this._blocks(m, mpos, want);
                mpos += want;
                bytes -= want;
            }
            if (bytes) {
                for (var i = 0; i < bytes; i++) {
                    this._buffer[this._leftover + i] = m[mpos + i];
                }
                this._leftover += bytes;
            }
            return this;
        };
        Poly1305.prototype.digest = function () {
            // TODO(dchest): it behaves differently than other hashes/HMAC,
            // because it throws when finished — others just return saved result.
            if (this._finished) {
                throw new Error("Poly1305 was finished");
            }
            var mac = new Uint8Array(16);
            this.finish(mac);
            return mac;
        };
        Poly1305.prototype.clean = function () {
            wipe_1.wipe(this._buffer);
            wipe_1.wipe(this._r);
            wipe_1.wipe(this._h);
            wipe_1.wipe(this._pad);
            this._leftover = 0;
            this._fin = 0;
            this._finished = true; // mark as finished even if not
            return this;
        };
        return Poly1305;
    }());
    exports.Poly1305 = Poly1305;
    /**
     * Returns 16-byte authenticator of data using a one-time 32-byte key.
     *
     * Important: key should be used for only one message, it should never repeat.
     */
    function oneTimeAuth(key, data) {
        var h = new Poly1305(key);
        h.update(data);
        var digest = h.digest();
        h.clean();
        return digest;
    }
    exports.oneTimeAuth = oneTimeAuth;
    /**
     * Returns true if two authenticators are 16-byte long and equal.
     * Uses contant-time comparison to avoid leaking timing information.
     */
    function equal(a, b) {
        if (a.length !== exports.DIGEST_LENGTH || b.length !== exports.DIGEST_LENGTH) {
            return false;
        }
        return constantTime.equal(a, b);
    }
    exports.equal = equal;

    });

    var chacha20poly1305 = createCommonjsModule$4(function (module, exports) {
    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.
    Object.defineProperty(exports, "__esModule", { value: true });





    exports.KEY_LENGTH = 32;
    exports.NONCE_LENGTH = 12;
    exports.TAG_LENGTH = 16;
    var ZEROS = new Uint8Array(16);
    /**
     * ChaCha20-Poly1305 Authenticated Encryption with Associated Data.
     *
     * Defined in RFC7539.
     */
    var ChaCha20Poly1305 = /** @class */ (function () {
        /**
         * Creates a new instance with the given 32-byte key.
         */
        function ChaCha20Poly1305(key) {
            this.nonceLength = exports.NONCE_LENGTH;
            this.tagLength = exports.TAG_LENGTH;
            if (key.length !== exports.KEY_LENGTH) {
                throw new Error("ChaCha20Poly1305 needs 32-byte key");
            }
            // Copy key.
            this._key = new Uint8Array(key);
        }
        /**
         * Encrypts and authenticates plaintext, authenticates associated data,
         * and returns sealed ciphertext, which includes authentication tag.
         *
         * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce
         * ("IV"), or full 16-byte counter (called "32-bit fixed-common part")
         * and nonce.
         *
         * If dst is given (it must be the size of plaintext + the size of tag
         * length) the result will be put into it. Dst and plaintext must not
         * overlap.
         */
        ChaCha20Poly1305.prototype.seal = function (nonce, plaintext, associatedData, dst) {
            if (nonce.length > 16) {
                throw new Error("ChaCha20Poly1305: incorrect nonce length");
            }
            // Allocate space for counter, and set nonce as last bytes of it.
            var counter = new Uint8Array(16);
            counter.set(nonce, counter.length - nonce.length);
            // Generate authentication key by taking first 32-bytes of stream.
            // We pass full counter, which has 12-byte nonce and 4-byte block counter,
            // and it will get incremented after generating the block, which is
            // exactly what we need: we only use the first 32 bytes of 64-byte
            // ChaCha block and discard the next 32 bytes.
            var authKey = new Uint8Array(32);
            chacha.stream(this._key, counter, authKey, 4);
            // Allocate space for sealed ciphertext.
            var resultLength = plaintext.length + this.tagLength;
            var result;
            if (dst) {
                if (dst.length !== resultLength) {
                    throw new Error("ChaCha20Poly1305: incorrect destination length");
                }
                result = dst;
            }
            else {
                result = new Uint8Array(resultLength);
            }
            // Encrypt plaintext.
            chacha.streamXOR(this._key, counter, plaintext, result, 4);
            // Authenticate.
            // XXX: can "simplify" here: pass full result (which is already padded
            // due to zeroes prepared for tag), and ciphertext length instead of
            // subarray of result.
            this._authenticate(result.subarray(result.length - this.tagLength, result.length), authKey, result.subarray(0, result.length - this.tagLength), associatedData);
            // Cleanup.
            wipe_1.wipe(counter);
            return result;
        };
        /**
         * Authenticates sealed ciphertext (which includes authentication tag) and
         * associated data, decrypts ciphertext and returns decrypted plaintext.
         *
         * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce
         * ("IV"), or full 16-byte counter (called "32-bit fixed-common part")
         * and nonce.
         *
         * If authentication fails, it returns null.
         *
         * If dst is given (it must be of ciphertext length minus tag length),
         * the result will be put into it. Dst and plaintext must not overlap.
         */
        ChaCha20Poly1305.prototype.open = function (nonce, sealed, associatedData, dst) {
            if (nonce.length > 16) {
                throw new Error("ChaCha20Poly1305: incorrect nonce length");
            }
            // Sealed ciphertext should at least contain tag.
            if (sealed.length < this.tagLength) {
                // TODO(dchest): should we throw here instead?
                return null;
            }
            // Allocate space for counter, and set nonce as last bytes of it.
            var counter = new Uint8Array(16);
            counter.set(nonce, counter.length - nonce.length);
            // Generate authentication key by taking first 32-bytes of stream.
            var authKey = new Uint8Array(32);
            chacha.stream(this._key, counter, authKey, 4);
            // Authenticate.
            // XXX: can simplify and avoid allocation: since authenticate()
            // already allocates tag (from Poly1305.digest(), it can return)
            // it instead of copying to calculatedTag. But then in seal()
            // we'll need to copy it.
            var calculatedTag = new Uint8Array(this.tagLength);
            this._authenticate(calculatedTag, authKey, sealed.subarray(0, sealed.length - this.tagLength), associatedData);
            // Constant-time compare tags and return null if they differ.
            if (!constantTime.equal(calculatedTag, sealed.subarray(sealed.length - this.tagLength, sealed.length))) {
                return null;
            }
            // Allocate space for decrypted plaintext.
            var resultLength = sealed.length - this.tagLength;
            var result;
            if (dst) {
                if (dst.length !== resultLength) {
                    throw new Error("ChaCha20Poly1305: incorrect destination length");
                }
                result = dst;
            }
            else {
                result = new Uint8Array(resultLength);
            }
            // Decrypt.
            chacha.streamXOR(this._key, counter, sealed.subarray(0, sealed.length - this.tagLength), result, 4);
            // Cleanup.
            wipe_1.wipe(counter);
            return result;
        };
        ChaCha20Poly1305.prototype.clean = function () {
            wipe_1.wipe(this._key);
            return this;
        };
        ChaCha20Poly1305.prototype._authenticate = function (tagOut, authKey, ciphertext, associatedData) {
            // Initialize Poly1305 with authKey.
            var h = new poly1305.Poly1305(authKey);
            // Authenticate padded associated data.
            if (associatedData) {
                h.update(associatedData);
                if (associatedData.length % 16 > 0) {
                    h.update(ZEROS.subarray(associatedData.length % 16));
                }
            }
            // Authenticate padded ciphertext.
            h.update(ciphertext);
            if (ciphertext.length % 16 > 0) {
                h.update(ZEROS.subarray(ciphertext.length % 16));
            }
            // Authenticate length of associated data.
            // XXX: can avoid allocation here?
            var length = new Uint8Array(8);
            if (associatedData) {
                binary.writeUint64LE(associatedData.length, length);
            }
            h.update(length);
            // Authenticate length of ciphertext.
            binary.writeUint64LE(ciphertext.length, length);
            h.update(length);
            // Get tag and copy it into tagOut.
            var tag = h.digest();
            for (var i = 0; i < tag.length; i++) {
                tagOut[i] = tag[i];
            }
            // Cleanup.
            h.clean();
            wipe_1.wipe(tag);
            wipe_1.wipe(length);
        };
        return ChaCha20Poly1305;
    }());
    exports.ChaCha20Poly1305 = ChaCha20Poly1305;

    });

    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.

    function isSerializableHash(h) {
        return (typeof h.saveState !== "undefined" &&
            typeof h.restoreState !== "undefined" &&
            typeof h.cleanSavedState !== "undefined");
    }
    var isSerializableHash_1 = isSerializableHash;
    // TODO(dchest): figure out the standardized interface for XOF such as
    // SHAKE and BLAKE2X.


    var hash = /*#__PURE__*/Object.defineProperty({
    	isSerializableHash: isSerializableHash_1
    }, '__esModule', {value: true});

    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.

    /**
     * Package hmac implements HMAC algorithm.
     */



    /**
     *  HMAC implements hash-based message authentication algorithm.
     */
    var HMAC = /** @class */ (function () {
        /**
         * Constructs a new HMAC with the given Hash and secret key.
         */
        function HMAC(hash$1, key) {
            this._finished = false; // true if HMAC was finalized
            // Initialize inner and outer hashes.
            this._inner = new hash$1();
            this._outer = new hash$1();
            // Set block and digest sizes for this HMAC
            // instance to values from the hash.
            this.blockSize = this._outer.blockSize;
            this.digestLength = this._outer.digestLength;
            // Pad temporary stores a key (or its hash) padded with zeroes.
            var pad = new Uint8Array(this.blockSize);
            if (key.length > this.blockSize) {
                // If key is bigger than hash block size, it must be
                // hashed and this hash is used as a key instead.
                this._inner.update(key).finish(pad).clean();
            }
            else {
                // Otherwise, copy the key into pad.
                pad.set(key);
            }
            // Now two different keys are derived from padded key
            // by xoring a different byte value to each.
            // To make inner hash key, xor byte 0x36 into pad.
            for (var i = 0; i < pad.length; i++) {
                pad[i] ^= 0x36;
            }
            // Update inner hash with the result.
            this._inner.update(pad);
            // To make outer hash key, xor byte 0x5c into pad.
            // But since we already xored 0x36 there, we must
            // first undo this by xoring it again.
            for (var i = 0; i < pad.length; i++) {
                pad[i] ^= 0x36 ^ 0x5c;
            }
            // Update outer hash with the result.
            this._outer.update(pad);
            // Save states of both hashes, so that we can quickly restore
            // them later in reset() without the need to remember the actual
            // key and perform this initialization again.
            if (hash.isSerializableHash(this._inner) && hash.isSerializableHash(this._outer)) {
                this._innerKeyedState = this._inner.saveState();
                this._outerKeyedState = this._outer.saveState();
            }
            // Clean pad.
            wipe_1.wipe(pad);
        }
        /**
         * Returns HMAC state to the state initialized with key
         * to make it possible to run HMAC over the other data with the same
         * key without creating a new instance.
         */
        HMAC.prototype.reset = function () {
            if (!hash.isSerializableHash(this._inner) || !hash.isSerializableHash(this._outer)) {
                throw new Error("hmac: can't reset() because hash doesn't implement restoreState()");
            }
            // Restore keyed states of inner and outer hashes.
            this._inner.restoreState(this._innerKeyedState);
            this._outer.restoreState(this._outerKeyedState);
            this._finished = false;
            return this;
        };
        /**
         * Cleans HMAC state.
         */
        HMAC.prototype.clean = function () {
            if (hash.isSerializableHash(this._inner)) {
                this._inner.cleanSavedState(this._innerKeyedState);
            }
            if (hash.isSerializableHash(this._outer)) {
                this._outer.cleanSavedState(this._outerKeyedState);
            }
            this._inner.clean();
            this._outer.clean();
        };
        /**
         * Updates state with provided data.
         */
        HMAC.prototype.update = function (data) {
            this._inner.update(data);
            return this;
        };
        /**
         * Finalizes HMAC and puts the result in out.
         */
        HMAC.prototype.finish = function (out) {
            if (this._finished) {
                // If HMAC was finalized, outer hash is also finalized,
                // so it produces the same digest it produced when it
                // was finalized.
                this._outer.finish(out);
                return this;
            }
            // Finalize inner hash and store the result temporarily.
            this._inner.finish(out);
            // Update outer hash with digest of inner hash and and finalize it.
            this._outer.update(out.subarray(0, this.digestLength)).finish(out);
            this._finished = true;
            return this;
        };
        /**
         * Returns the computed message authentication code.
         */
        HMAC.prototype.digest = function () {
            var out = new Uint8Array(this.digestLength);
            this.finish(out);
            return out;
        };
        /**
         * Saves HMAC state.
         * This function is needed for PBKDF2 optimization.
         */
        HMAC.prototype.saveState = function () {
            if (!hash.isSerializableHash(this._inner)) {
                throw new Error("hmac: can't saveState() because hash doesn't implement it");
            }
            return this._inner.saveState();
        };
        HMAC.prototype.restoreState = function (savedState) {
            if (!hash.isSerializableHash(this._inner) || !hash.isSerializableHash(this._outer)) {
                throw new Error("hmac: can't restoreState() because hash doesn't implement it");
            }
            this._inner.restoreState(savedState);
            this._outer.restoreState(this._outerKeyedState);
            this._finished = false;
            return this;
        };
        HMAC.prototype.cleanSavedState = function (savedState) {
            if (!hash.isSerializableHash(this._inner)) {
                throw new Error("hmac: can't cleanSavedState() because hash doesn't implement it");
            }
            this._inner.cleanSavedState(savedState);
        };
        return HMAC;
    }());
    var HMAC_1 = HMAC;
    /**
     * Returns HMAC using the given hash constructor for the key over data.
     */
    function hmac(hash, key, data) {
        var h = new HMAC(hash, key);
        h.update(data);
        var digest = h.digest();
        h.clean();
        return digest;
    }
    var hmac_2 = hmac;
    /**
     * Returns true if two HMAC digests are equal.
     * Uses constant-time comparison to avoid leaking timing information.
     *
     * Example:
     *
     *    const receivedDigest = ...
     *    const realDigest = hmac(SHA256, key, data);
     *    if (!equal(receivedDigest, realDigest)) {
     *        throw new Error("Authentication error");
     *    }
     */
    var equal = constantTime.equal;


    var hmac_1 = /*#__PURE__*/Object.defineProperty({
    	HMAC: HMAC_1,
    	hmac: hmac_2,
    	equal: equal
    }, '__esModule', {value: true});

    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.



    /**
     * HMAC-based Extract-and-Expand Key Derivation Function.
     *
     * Implements HKDF from RFC5869.
     *
     * Expands the given master key with salt and info into
     * a limited stream of key material.
     */
    var HKDF = /** @class */ (function () {
        /**
         * Create a new HKDF instance for the given hash function
         * with the master key, optional salt, and info.
         *
         * - Master key is a high-entropy secret key (not a password).
         * - Salt is a non-secret random value.
         * - Info is application- and/or context-specific information.
         */
        function HKDF(hash, key, salt, info) {
            if (salt === void 0) { salt = new Uint8Array(0); }
            this._counter = new Uint8Array(1); // starts with zero
            this._hash = hash;
            this._info = info;
            // HKDF-Extract uses salt as HMAC key, and key as data.
            var okm = hmac_1.hmac(this._hash, salt, key);
            // Initialize HMAC for expanding with extracted key.
            this._hmac = new hmac_1.HMAC(hash, okm);
            // Allocate buffer.
            this._buffer = new Uint8Array(this._hmac.digestLength);
            this._bufpos = this._buffer.length;
        }
        // Fill buffer with new block of HKDF-Extract output.
        HKDF.prototype._fillBuffer = function () {
            // Increment counter.
            this._counter[0]++;
            var ctr = this._counter[0];
            // Check if counter overflowed.
            if (ctr === 0) {
                throw new Error("hkdf: cannot expand more");
            }
            // Prepare HMAC instance for new data with old key.
            this._hmac.reset();
            // Hash in previous output if it was generated
            // (i.e. counter is greater than 1).
            if (ctr > 1) {
                this._hmac.update(this._buffer);
            }
            // Hash in info if it exists.
            if (this._info) {
                this._hmac.update(this._info);
            }
            // Hash in the counter.
            this._hmac.update(this._counter);
            // Output result to buffer and clean HMAC instance.
            this._hmac.finish(this._buffer);
            // Reset buffer position.
            this._bufpos = 0;
        };
        /**
         * Expand returns next key material of the given length.
         *
         * It throws if expansion limit is reached (which is
         * 254 digests of the underlying HMAC function).
         */
        HKDF.prototype.expand = function (length) {
            var out = new Uint8Array(length);
            for (var i = 0; i < out.length; i++) {
                if (this._bufpos === this._buffer.length) {
                    this._fillBuffer();
                }
                out[i] = this._buffer[this._bufpos++];
            }
            return out;
        };
        HKDF.prototype.clean = function () {
            this._hmac.clean();
            wipe_1.wipe(this._buffer);
            wipe_1.wipe(this._counter);
            this._bufpos = 0;
        };
        return HKDF;
    }());
    var HKDF_1 = HKDF;

    var sha256 = createCommonjsModule$4(function (module, exports) {
    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.
    Object.defineProperty(exports, "__esModule", { value: true });


    exports.DIGEST_LENGTH = 32;
    exports.BLOCK_SIZE = 64;
    /**
     * SHA2-256 cryptographic hash algorithm.
     */
    var SHA256 = /** @class */ (function () {
        function SHA256() {
            /** Length of hash output */
            this.digestLength = exports.DIGEST_LENGTH;
            /** Block size */
            this.blockSize = exports.BLOCK_SIZE;
            // Note: Int32Array is used instead of Uint32Array for performance reasons.
            this._state = new Int32Array(8); // hash state
            this._temp = new Int32Array(64); // temporary state
            this._buffer = new Uint8Array(128); // buffer for data to hash
            this._bufferLength = 0; // number of bytes in buffer
            this._bytesHashed = 0; // number of total bytes hashed
            this._finished = false; // indicates whether the hash was finalized
            this.reset();
        }
        SHA256.prototype._initState = function () {
            this._state[0] = 0x6a09e667;
            this._state[1] = 0xbb67ae85;
            this._state[2] = 0x3c6ef372;
            this._state[3] = 0xa54ff53a;
            this._state[4] = 0x510e527f;
            this._state[5] = 0x9b05688c;
            this._state[6] = 0x1f83d9ab;
            this._state[7] = 0x5be0cd19;
        };
        /**
         * Resets hash state making it possible
         * to re-use this instance to hash other data.
         */
        SHA256.prototype.reset = function () {
            this._initState();
            this._bufferLength = 0;
            this._bytesHashed = 0;
            this._finished = false;
            return this;
        };
        /**
         * Cleans internal buffers and resets hash state.
         */
        SHA256.prototype.clean = function () {
            wipe_1.wipe(this._buffer);
            wipe_1.wipe(this._temp);
            this.reset();
        };
        /**
         * Updates hash state with the given data.
         *
         * Throws error when trying to update already finalized hash:
         * instance must be reset to update it again.
         */
        SHA256.prototype.update = function (data, dataLength) {
            if (dataLength === void 0) { dataLength = data.length; }
            if (this._finished) {
                throw new Error("SHA256: can't update because hash was finished.");
            }
            var dataPos = 0;
            this._bytesHashed += dataLength;
            if (this._bufferLength > 0) {
                while (this._bufferLength < this.blockSize && dataLength > 0) {
                    this._buffer[this._bufferLength++] = data[dataPos++];
                    dataLength--;
                }
                if (this._bufferLength === this.blockSize) {
                    hashBlocks(this._temp, this._state, this._buffer, 0, this.blockSize);
                    this._bufferLength = 0;
                }
            }
            if (dataLength >= this.blockSize) {
                dataPos = hashBlocks(this._temp, this._state, data, dataPos, dataLength);
                dataLength %= this.blockSize;
            }
            while (dataLength > 0) {
                this._buffer[this._bufferLength++] = data[dataPos++];
                dataLength--;
            }
            return this;
        };
        /**
         * Finalizes hash state and puts hash into out.
         * If hash was already finalized, puts the same value.
         */
        SHA256.prototype.finish = function (out) {
            if (!this._finished) {
                var bytesHashed = this._bytesHashed;
                var left = this._bufferLength;
                var bitLenHi = (bytesHashed / 0x20000000) | 0;
                var bitLenLo = bytesHashed << 3;
                var padLength = (bytesHashed % 64 < 56) ? 64 : 128;
                this._buffer[left] = 0x80;
                for (var i = left + 1; i < padLength - 8; i++) {
                    this._buffer[i] = 0;
                }
                binary.writeUint32BE(bitLenHi, this._buffer, padLength - 8);
                binary.writeUint32BE(bitLenLo, this._buffer, padLength - 4);
                hashBlocks(this._temp, this._state, this._buffer, 0, padLength);
                this._finished = true;
            }
            for (var i = 0; i < this.digestLength / 4; i++) {
                binary.writeUint32BE(this._state[i], out, i * 4);
            }
            return this;
        };
        /**
         * Returns the final hash digest.
         */
        SHA256.prototype.digest = function () {
            var out = new Uint8Array(this.digestLength);
            this.finish(out);
            return out;
        };
        /**
         * Function useful for HMAC/PBKDF2 optimization.
         * Returns hash state to be used with restoreState().
         * Only chain value is saved, not buffers or other
         * state variables.
         */
        SHA256.prototype.saveState = function () {
            if (this._finished) {
                throw new Error("SHA256: cannot save finished state");
            }
            return {
                state: new Int32Array(this._state),
                buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : undefined,
                bufferLength: this._bufferLength,
                bytesHashed: this._bytesHashed
            };
        };
        /**
         * Function useful for HMAC/PBKDF2 optimization.
         * Restores state saved by saveState() and sets bytesHashed
         * to the given value.
         */
        SHA256.prototype.restoreState = function (savedState) {
            this._state.set(savedState.state);
            this._bufferLength = savedState.bufferLength;
            if (savedState.buffer) {
                this._buffer.set(savedState.buffer);
            }
            this._bytesHashed = savedState.bytesHashed;
            this._finished = false;
            return this;
        };
        /**
         * Cleans state returned by saveState().
         */
        SHA256.prototype.cleanSavedState = function (savedState) {
            wipe_1.wipe(savedState.state);
            if (savedState.buffer) {
                wipe_1.wipe(savedState.buffer);
            }
            savedState.bufferLength = 0;
            savedState.bytesHashed = 0;
        };
        return SHA256;
    }());
    exports.SHA256 = SHA256;
    // Constants
    var K = new Int32Array([
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
        0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
        0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
        0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
        0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
        0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
        0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
        0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
        0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
        0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
        0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
        0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    ]);
    function hashBlocks(w, v, p, pos, len) {
        while (len >= 64) {
            var a = v[0];
            var b = v[1];
            var c = v[2];
            var d = v[3];
            var e = v[4];
            var f = v[5];
            var g = v[6];
            var h = v[7];
            for (var i = 0; i < 16; i++) {
                var j = pos + i * 4;
                w[i] = binary.readUint32BE(p, j);
            }
            for (var i = 16; i < 64; i++) {
                var u = w[i - 2];
                var t1 = (u >>> 17 | u << (32 - 17)) ^ (u >>> 19 | u << (32 - 19)) ^ (u >>> 10);
                u = w[i - 15];
                var t2 = (u >>> 7 | u << (32 - 7)) ^ (u >>> 18 | u << (32 - 18)) ^ (u >>> 3);
                w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);
            }
            for (var i = 0; i < 64; i++) {
                var t1 = (((((e >>> 6 | e << (32 - 6)) ^ (e >>> 11 | e << (32 - 11)) ^
                    (e >>> 25 | e << (32 - 25))) + ((e & f) ^ (~e & g))) | 0) +
                    ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;
                var t2 = (((a >>> 2 | a << (32 - 2)) ^ (a >>> 13 | a << (32 - 13)) ^
                    (a >>> 22 | a << (32 - 22))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;
                h = g;
                g = f;
                f = e;
                e = (d + t1) | 0;
                d = c;
                c = b;
                b = a;
                a = (t1 + t2) | 0;
            }
            v[0] += a;
            v[1] += b;
            v[2] += c;
            v[3] += d;
            v[4] += e;
            v[5] += f;
            v[6] += g;
            v[7] += h;
            pos += 64;
            len -= 64;
        }
        return pos;
    }
    function hash(data) {
        var h = new SHA256();
        h.update(data);
        var digest = h.digest();
        h.clean();
        return digest;
    }
    exports.hash = hash;

    });

    var x25519 = createCommonjsModule$4(function (module, exports) {
    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sharedKey = exports.generateKeyPair = exports.generateKeyPairFromSeed = exports.scalarMultBase = exports.scalarMult = exports.SHARED_KEY_LENGTH = exports.SECRET_KEY_LENGTH = exports.PUBLIC_KEY_LENGTH = void 0;
    /**
     * Package x25519 implements X25519 key agreement.
     */


    exports.PUBLIC_KEY_LENGTH = 32;
    exports.SECRET_KEY_LENGTH = 32;
    exports.SHARED_KEY_LENGTH = 32;
    // Returns new zero-filled 16-element GF (Float64Array).
    // If passed an array of numbers, prefills the returned
    // array with them.
    //
    // We use Float64Array, because we need 48-bit numbers
    // for this implementation.
    function gf(init) {
        const r = new Float64Array(16);
        if (init) {
            for (let i = 0; i < init.length; i++) {
                r[i] = init[i];
            }
        }
        return r;
    }
    // Base point.
    const _9 = new Uint8Array(32);
    _9[0] = 9;
    const _121665 = gf([0xdb41, 1]);
    function car25519(o) {
        let c = 1;
        for (let i = 0; i < 16; i++) {
            let v = o[i] + c + 65535;
            c = Math.floor(v / 65536);
            o[i] = v - c * 65536;
        }
        o[0] += c - 1 + 37 * (c - 1);
    }
    function sel25519(p, q, b) {
        const c = ~(b - 1);
        for (let i = 0; i < 16; i++) {
            const t = c & (p[i] ^ q[i]);
            p[i] ^= t;
            q[i] ^= t;
        }
    }
    function pack25519(o, n) {
        const m = gf();
        const t = gf();
        for (let i = 0; i < 16; i++) {
            t[i] = n[i];
        }
        car25519(t);
        car25519(t);
        car25519(t);
        for (let j = 0; j < 2; j++) {
            m[0] = t[0] - 0xffed;
            for (let i = 1; i < 15; i++) {
                m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1);
                m[i - 1] &= 0xffff;
            }
            m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1);
            const b = (m[15] >> 16) & 1;
            m[14] &= 0xffff;
            sel25519(t, m, 1 - b);
        }
        for (let i = 0; i < 16; i++) {
            o[2 * i] = t[i] & 0xff;
            o[2 * i + 1] = t[i] >> 8;
        }
    }
    function unpack25519(o, n) {
        for (let i = 0; i < 16; i++) {
            o[i] = n[2 * i] + (n[2 * i + 1] << 8);
        }
        o[15] &= 0x7fff;
    }
    function add(o, a, b) {
        for (let i = 0; i < 16; i++) {
            o[i] = a[i] + b[i];
        }
    }
    function sub(o, a, b) {
        for (let i = 0; i < 16; i++) {
            o[i] = a[i] - b[i];
        }
    }
    function mul(o, a, b) {
        let v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
        v = a[0];
        t0 += v * b0;
        t1 += v * b1;
        t2 += v * b2;
        t3 += v * b3;
        t4 += v * b4;
        t5 += v * b5;
        t6 += v * b6;
        t7 += v * b7;
        t8 += v * b8;
        t9 += v * b9;
        t10 += v * b10;
        t11 += v * b11;
        t12 += v * b12;
        t13 += v * b13;
        t14 += v * b14;
        t15 += v * b15;
        v = a[1];
        t1 += v * b0;
        t2 += v * b1;
        t3 += v * b2;
        t4 += v * b3;
        t5 += v * b4;
        t6 += v * b5;
        t7 += v * b6;
        t8 += v * b7;
        t9 += v * b8;
        t10 += v * b9;
        t11 += v * b10;
        t12 += v * b11;
        t13 += v * b12;
        t14 += v * b13;
        t15 += v * b14;
        t16 += v * b15;
        v = a[2];
        t2 += v * b0;
        t3 += v * b1;
        t4 += v * b2;
        t5 += v * b3;
        t6 += v * b4;
        t7 += v * b5;
        t8 += v * b6;
        t9 += v * b7;
        t10 += v * b8;
        t11 += v * b9;
        t12 += v * b10;
        t13 += v * b11;
        t14 += v * b12;
        t15 += v * b13;
        t16 += v * b14;
        t17 += v * b15;
        v = a[3];
        t3 += v * b0;
        t4 += v * b1;
        t5 += v * b2;
        t6 += v * b3;
        t7 += v * b4;
        t8 += v * b5;
        t9 += v * b6;
        t10 += v * b7;
        t11 += v * b8;
        t12 += v * b9;
        t13 += v * b10;
        t14 += v * b11;
        t15 += v * b12;
        t16 += v * b13;
        t17 += v * b14;
        t18 += v * b15;
        v = a[4];
        t4 += v * b0;
        t5 += v * b1;
        t6 += v * b2;
        t7 += v * b3;
        t8 += v * b4;
        t9 += v * b5;
        t10 += v * b6;
        t11 += v * b7;
        t12 += v * b8;
        t13 += v * b9;
        t14 += v * b10;
        t15 += v * b11;
        t16 += v * b12;
        t17 += v * b13;
        t18 += v * b14;
        t19 += v * b15;
        v = a[5];
        t5 += v * b0;
        t6 += v * b1;
        t7 += v * b2;
        t8 += v * b3;
        t9 += v * b4;
        t10 += v * b5;
        t11 += v * b6;
        t12 += v * b7;
        t13 += v * b8;
        t14 += v * b9;
        t15 += v * b10;
        t16 += v * b11;
        t17 += v * b12;
        t18 += v * b13;
        t19 += v * b14;
        t20 += v * b15;
        v = a[6];
        t6 += v * b0;
        t7 += v * b1;
        t8 += v * b2;
        t9 += v * b3;
        t10 += v * b4;
        t11 += v * b5;
        t12 += v * b6;
        t13 += v * b7;
        t14 += v * b8;
        t15 += v * b9;
        t16 += v * b10;
        t17 += v * b11;
        t18 += v * b12;
        t19 += v * b13;
        t20 += v * b14;
        t21 += v * b15;
        v = a[7];
        t7 += v * b0;
        t8 += v * b1;
        t9 += v * b2;
        t10 += v * b3;
        t11 += v * b4;
        t12 += v * b5;
        t13 += v * b6;
        t14 += v * b7;
        t15 += v * b8;
        t16 += v * b9;
        t17 += v * b10;
        t18 += v * b11;
        t19 += v * b12;
        t20 += v * b13;
        t21 += v * b14;
        t22 += v * b15;
        v = a[8];
        t8 += v * b0;
        t9 += v * b1;
        t10 += v * b2;
        t11 += v * b3;
        t12 += v * b4;
        t13 += v * b5;
        t14 += v * b6;
        t15 += v * b7;
        t16 += v * b8;
        t17 += v * b9;
        t18 += v * b10;
        t19 += v * b11;
        t20 += v * b12;
        t21 += v * b13;
        t22 += v * b14;
        t23 += v * b15;
        v = a[9];
        t9 += v * b0;
        t10 += v * b1;
        t11 += v * b2;
        t12 += v * b3;
        t13 += v * b4;
        t14 += v * b5;
        t15 += v * b6;
        t16 += v * b7;
        t17 += v * b8;
        t18 += v * b9;
        t19 += v * b10;
        t20 += v * b11;
        t21 += v * b12;
        t22 += v * b13;
        t23 += v * b14;
        t24 += v * b15;
        v = a[10];
        t10 += v * b0;
        t11 += v * b1;
        t12 += v * b2;
        t13 += v * b3;
        t14 += v * b4;
        t15 += v * b5;
        t16 += v * b6;
        t17 += v * b7;
        t18 += v * b8;
        t19 += v * b9;
        t20 += v * b10;
        t21 += v * b11;
        t22 += v * b12;
        t23 += v * b13;
        t24 += v * b14;
        t25 += v * b15;
        v = a[11];
        t11 += v * b0;
        t12 += v * b1;
        t13 += v * b2;
        t14 += v * b3;
        t15 += v * b4;
        t16 += v * b5;
        t17 += v * b6;
        t18 += v * b7;
        t19 += v * b8;
        t20 += v * b9;
        t21 += v * b10;
        t22 += v * b11;
        t23 += v * b12;
        t24 += v * b13;
        t25 += v * b14;
        t26 += v * b15;
        v = a[12];
        t12 += v * b0;
        t13 += v * b1;
        t14 += v * b2;
        t15 += v * b3;
        t16 += v * b4;
        t17 += v * b5;
        t18 += v * b6;
        t19 += v * b7;
        t20 += v * b8;
        t21 += v * b9;
        t22 += v * b10;
        t23 += v * b11;
        t24 += v * b12;
        t25 += v * b13;
        t26 += v * b14;
        t27 += v * b15;
        v = a[13];
        t13 += v * b0;
        t14 += v * b1;
        t15 += v * b2;
        t16 += v * b3;
        t17 += v * b4;
        t18 += v * b5;
        t19 += v * b6;
        t20 += v * b7;
        t21 += v * b8;
        t22 += v * b9;
        t23 += v * b10;
        t24 += v * b11;
        t25 += v * b12;
        t26 += v * b13;
        t27 += v * b14;
        t28 += v * b15;
        v = a[14];
        t14 += v * b0;
        t15 += v * b1;
        t16 += v * b2;
        t17 += v * b3;
        t18 += v * b4;
        t19 += v * b5;
        t20 += v * b6;
        t21 += v * b7;
        t22 += v * b8;
        t23 += v * b9;
        t24 += v * b10;
        t25 += v * b11;
        t26 += v * b12;
        t27 += v * b13;
        t28 += v * b14;
        t29 += v * b15;
        v = a[15];
        t15 += v * b0;
        t16 += v * b1;
        t17 += v * b2;
        t18 += v * b3;
        t19 += v * b4;
        t20 += v * b5;
        t21 += v * b6;
        t22 += v * b7;
        t23 += v * b8;
        t24 += v * b9;
        t25 += v * b10;
        t26 += v * b11;
        t27 += v * b12;
        t28 += v * b13;
        t29 += v * b14;
        t30 += v * b15;
        t0 += 38 * t16;
        t1 += 38 * t17;
        t2 += 38 * t18;
        t3 += 38 * t19;
        t4 += 38 * t20;
        t5 += 38 * t21;
        t6 += 38 * t22;
        t7 += 38 * t23;
        t8 += 38 * t24;
        t9 += 38 * t25;
        t10 += 38 * t26;
        t11 += 38 * t27;
        t12 += 38 * t28;
        t13 += 38 * t29;
        t14 += 38 * t30;
        // t15 left as is
        // first car
        c = 1;
        v = t0 + c + 65535;
        c = Math.floor(v / 65536);
        t0 = v - c * 65536;
        v = t1 + c + 65535;
        c = Math.floor(v / 65536);
        t1 = v - c * 65536;
        v = t2 + c + 65535;
        c = Math.floor(v / 65536);
        t2 = v - c * 65536;
        v = t3 + c + 65535;
        c = Math.floor(v / 65536);
        t3 = v - c * 65536;
        v = t4 + c + 65535;
        c = Math.floor(v / 65536);
        t4 = v - c * 65536;
        v = t5 + c + 65535;
        c = Math.floor(v / 65536);
        t5 = v - c * 65536;
        v = t6 + c + 65535;
        c = Math.floor(v / 65536);
        t6 = v - c * 65536;
        v = t7 + c + 65535;
        c = Math.floor(v / 65536);
        t7 = v - c * 65536;
        v = t8 + c + 65535;
        c = Math.floor(v / 65536);
        t8 = v - c * 65536;
        v = t9 + c + 65535;
        c = Math.floor(v / 65536);
        t9 = v - c * 65536;
        v = t10 + c + 65535;
        c = Math.floor(v / 65536);
        t10 = v - c * 65536;
        v = t11 + c + 65535;
        c = Math.floor(v / 65536);
        t11 = v - c * 65536;
        v = t12 + c + 65535;
        c = Math.floor(v / 65536);
        t12 = v - c * 65536;
        v = t13 + c + 65535;
        c = Math.floor(v / 65536);
        t13 = v - c * 65536;
        v = t14 + c + 65535;
        c = Math.floor(v / 65536);
        t14 = v - c * 65536;
        v = t15 + c + 65535;
        c = Math.floor(v / 65536);
        t15 = v - c * 65536;
        t0 += c - 1 + 37 * (c - 1);
        // second car
        c = 1;
        v = t0 + c + 65535;
        c = Math.floor(v / 65536);
        t0 = v - c * 65536;
        v = t1 + c + 65535;
        c = Math.floor(v / 65536);
        t1 = v - c * 65536;
        v = t2 + c + 65535;
        c = Math.floor(v / 65536);
        t2 = v - c * 65536;
        v = t3 + c + 65535;
        c = Math.floor(v / 65536);
        t3 = v - c * 65536;
        v = t4 + c + 65535;
        c = Math.floor(v / 65536);
        t4 = v - c * 65536;
        v = t5 + c + 65535;
        c = Math.floor(v / 65536);
        t5 = v - c * 65536;
        v = t6 + c + 65535;
        c = Math.floor(v / 65536);
        t6 = v - c * 65536;
        v = t7 + c + 65535;
        c = Math.floor(v / 65536);
        t7 = v - c * 65536;
        v = t8 + c + 65535;
        c = Math.floor(v / 65536);
        t8 = v - c * 65536;
        v = t9 + c + 65535;
        c = Math.floor(v / 65536);
        t9 = v - c * 65536;
        v = t10 + c + 65535;
        c = Math.floor(v / 65536);
        t10 = v - c * 65536;
        v = t11 + c + 65535;
        c = Math.floor(v / 65536);
        t11 = v - c * 65536;
        v = t12 + c + 65535;
        c = Math.floor(v / 65536);
        t12 = v - c * 65536;
        v = t13 + c + 65535;
        c = Math.floor(v / 65536);
        t13 = v - c * 65536;
        v = t14 + c + 65535;
        c = Math.floor(v / 65536);
        t14 = v - c * 65536;
        v = t15 + c + 65535;
        c = Math.floor(v / 65536);
        t15 = v - c * 65536;
        t0 += c - 1 + 37 * (c - 1);
        o[0] = t0;
        o[1] = t1;
        o[2] = t2;
        o[3] = t3;
        o[4] = t4;
        o[5] = t5;
        o[6] = t6;
        o[7] = t7;
        o[8] = t8;
        o[9] = t9;
        o[10] = t10;
        o[11] = t11;
        o[12] = t12;
        o[13] = t13;
        o[14] = t14;
        o[15] = t15;
    }
    function square(o, a) {
        mul(o, a, a);
    }
    function inv25519(o, inp) {
        const c = gf();
        for (let i = 0; i < 16; i++) {
            c[i] = inp[i];
        }
        for (let i = 253; i >= 0; i--) {
            square(c, c);
            if (i !== 2 && i !== 4) {
                mul(c, c, inp);
            }
        }
        for (let i = 0; i < 16; i++) {
            o[i] = c[i];
        }
    }
    function scalarMult(n, p) {
        const z = new Uint8Array(32);
        const x = new Float64Array(80);
        const a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf();
        for (let i = 0; i < 31; i++) {
            z[i] = n[i];
        }
        z[31] = (n[31] & 127) | 64;
        z[0] &= 248;
        unpack25519(x, p);
        for (let i = 0; i < 16; i++) {
            b[i] = x[i];
        }
        a[0] = d[0] = 1;
        for (let i = 254; i >= 0; --i) {
            const r = (z[i >>> 3] >>> (i & 7)) & 1;
            sel25519(a, b, r);
            sel25519(c, d, r);
            add(e, a, c);
            sub(a, a, c);
            add(c, b, d);
            sub(b, b, d);
            square(d, e);
            square(f, a);
            mul(a, c, a);
            mul(c, b, e);
            add(e, a, c);
            sub(a, a, c);
            square(b, a);
            sub(c, d, f);
            mul(a, c, _121665);
            add(a, a, d);
            mul(c, c, a);
            mul(a, d, f);
            mul(d, b, x);
            square(b, e);
            sel25519(a, b, r);
            sel25519(c, d, r);
        }
        for (let i = 0; i < 16; i++) {
            x[i + 16] = a[i];
            x[i + 32] = c[i];
            x[i + 48] = b[i];
            x[i + 64] = d[i];
        }
        const x32 = x.subarray(32);
        const x16 = x.subarray(16);
        inv25519(x32, x32);
        mul(x16, x16, x32);
        const q = new Uint8Array(32);
        pack25519(q, x16);
        return q;
    }
    exports.scalarMult = scalarMult;
    function scalarMultBase(n) {
        return scalarMult(n, _9);
    }
    exports.scalarMultBase = scalarMultBase;
    function generateKeyPairFromSeed(seed) {
        if (seed.length !== exports.SECRET_KEY_LENGTH) {
            throw new Error(`x25519: seed must be ${exports.SECRET_KEY_LENGTH} bytes`);
        }
        const secretKey = new Uint8Array(seed);
        const publicKey = scalarMultBase(secretKey);
        return {
            publicKey,
            secretKey
        };
    }
    exports.generateKeyPairFromSeed = generateKeyPairFromSeed;
    function generateKeyPair(prng) {
        const seed = (0, random.randomBytes)(32, prng);
        const result = generateKeyPairFromSeed(seed);
        (0, wipe_1.wipe)(seed);
        return result;
    }
    exports.generateKeyPair = generateKeyPair;
    /**
     * Returns a shared key between our secret key and a peer's public key.
     *
     * Throws an error if the given keys are of wrong length.
     *
     * If rejectZero is true throws if the calculated shared key is all-zero.
     * From RFC 7748:
     *
     * > Protocol designers using Diffie-Hellman over the curves defined in
     * > this document must not assume "contributory behavior".  Specially,
     * > contributory behavior means that both parties' private keys
     * > contribute to the resulting shared key.  Since curve25519 and
     * > curve448 have cofactors of 8 and 4 (respectively), an input point of
     * > small order will eliminate any contribution from the other party's
     * > private key.  This situation can be detected by checking for the all-
     * > zero output, which implementations MAY do, as specified in Section 6.
     * > However, a large number of existing implementations do not do this.
     *
     * IMPORTANT: the returned key is a raw result of scalar multiplication.
     * To use it as a key material, hash it with a cryptographic hash function.
     */
    function sharedKey(mySecretKey, theirPublicKey, rejectZero = false) {
        if (mySecretKey.length !== exports.PUBLIC_KEY_LENGTH) {
            throw new Error("X25519: incorrect secret key length");
        }
        if (theirPublicKey.length !== exports.PUBLIC_KEY_LENGTH) {
            throw new Error("X25519: incorrect public key length");
        }
        const result = scalarMult(mySecretKey, theirPublicKey);
        if (rejectZero) {
            let zeros = 0;
            for (let i = 0; i < result.length; i++) {
                zeros |= result[i];
            }
            if (zeros === 0) {
                throw new Error("X25519: invalid shared key");
            }
        }
        return result;
    }
    exports.sharedKey = sharedKey;

    });

    var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    };
    var BrowserInfo = /** @class */ (function () {
        function BrowserInfo(name, version, os) {
            this.name = name;
            this.version = version;
            this.os = os;
            this.type = 'browser';
        }
        return BrowserInfo;
    }());
    var NodeInfo = /** @class */ (function () {
        function NodeInfo(version) {
            this.version = version;
            this.type = 'node';
            this.name = 'node';
            this.os = process.platform;
        }
        return NodeInfo;
    }());
    var SearchBotDeviceInfo = /** @class */ (function () {
        function SearchBotDeviceInfo(name, version, os, bot) {
            this.name = name;
            this.version = version;
            this.os = os;
            this.bot = bot;
            this.type = 'bot-device';
        }
        return SearchBotDeviceInfo;
    }());
    var BotInfo = /** @class */ (function () {
        function BotInfo() {
            this.type = 'bot';
            this.bot = true; // NOTE: deprecated test name instead
            this.name = 'bot';
            this.version = null;
            this.os = null;
        }
        return BotInfo;
    }());
    var ReactNativeInfo = /** @class */ (function () {
        function ReactNativeInfo() {
            this.type = 'react-native';
            this.name = 'react-native';
            this.version = null;
            this.os = null;
        }
        return ReactNativeInfo;
    }());
    // tslint:disable-next-line:max-line-length
    var SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
    var SEARCHBOT_OS_REGEX = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
    var REQUIRED_VERSION_PARTS = 3;
    var userAgentRules = [
        ['aol', /AOLShield\/([0-9\._]+)/],
        ['edge', /Edge\/([0-9\._]+)/],
        ['edge-ios', /EdgiOS\/([0-9\._]+)/],
        ['yandexbrowser', /YaBrowser\/([0-9\._]+)/],
        ['kakaotalk', /KAKAOTALK\s([0-9\.]+)/],
        ['samsung', /SamsungBrowser\/([0-9\.]+)/],
        ['silk', /\bSilk\/([0-9._-]+)\b/],
        ['miui', /MiuiBrowser\/([0-9\.]+)$/],
        ['beaker', /BeakerBrowser\/([0-9\.]+)/],
        ['edge-chromium', /EdgA?\/([0-9\.]+)/],
        [
            'chromium-webview',
            /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/,
        ],
        ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],
        ['phantomjs', /PhantomJS\/([0-9\.]+)(:?\s|$)/],
        ['crios', /CriOS\/([0-9\.]+)(:?\s|$)/],
        ['firefox', /Firefox\/([0-9\.]+)(?:\s|$)/],
        ['fxios', /FxiOS\/([0-9\.]+)/],
        ['opera-mini', /Opera Mini.*Version\/([0-9\.]+)/],
        ['opera', /Opera\/([0-9\.]+)(?:\s|$)/],
        ['opera', /OPR\/([0-9\.]+)(:?\s|$)/],
        ['pie', /^Microsoft Pocket Internet Explorer\/(\d+\.\d+)$/],
        ['pie', /^Mozilla\/\d\.\d+\s\(compatible;\s(?:MSP?IE|MSInternet Explorer) (\d+\.\d+);.*Windows CE.*\)$/],
        ['netfront', /^Mozilla\/\d\.\d+.*NetFront\/(\d.\d)/],
        ['ie', /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],
        ['ie', /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],
        ['ie', /MSIE\s(7\.0)/],
        ['bb10', /BB10;\sTouch.*Version\/([0-9\.]+)/],
        ['android', /Android\s([0-9\.]+)/],
        ['ios', /Version\/([0-9\._]+).*Mobile.*Safari.*/],
        ['safari', /Version\/([0-9\._]+).*Safari/],
        ['facebook', /FB[AS]V\/([0-9\.]+)/],
        ['instagram', /Instagram\s([0-9\.]+)/],
        ['ios-webview', /AppleWebKit\/([0-9\.]+).*Mobile/],
        ['ios-webview', /AppleWebKit\/([0-9\.]+).*Gecko\)$/],
        ['curl', /^curl\/([0-9\.]+)$/],
        ['searchbot', SEARCHBOX_UA_REGEX],
    ];
    var operatingSystemRules = [
        ['iOS', /iP(hone|od|ad)/],
        ['Android OS', /Android/],
        ['BlackBerry OS', /BlackBerry|BB10/],
        ['Windows Mobile', /IEMobile/],
        ['Amazon OS', /Kindle/],
        ['Windows 3.11', /Win16/],
        ['Windows 95', /(Windows 95)|(Win95)|(Windows_95)/],
        ['Windows 98', /(Windows 98)|(Win98)/],
        ['Windows 2000', /(Windows NT 5.0)|(Windows 2000)/],
        ['Windows XP', /(Windows NT 5.1)|(Windows XP)/],
        ['Windows Server 2003', /(Windows NT 5.2)/],
        ['Windows Vista', /(Windows NT 6.0)/],
        ['Windows 7', /(Windows NT 6.1)/],
        ['Windows 8', /(Windows NT 6.2)/],
        ['Windows 8.1', /(Windows NT 6.3)/],
        ['Windows 10', /(Windows NT 10.0)/],
        ['Windows ME', /Windows ME/],
        ['Windows CE', /Windows CE|WinCE|Microsoft Pocket Internet Explorer/],
        ['Open BSD', /OpenBSD/],
        ['Sun OS', /SunOS/],
        ['Chrome OS', /CrOS/],
        ['Linux', /(Linux)|(X11)/],
        ['Mac OS', /(Mac_PowerPC)|(Macintosh)/],
        ['QNX', /QNX/],
        ['BeOS', /BeOS/],
        ['OS/2', /OS\/2/],
    ];
    function detect(userAgent) {
        if (!!userAgent) {
            return parseUserAgent(userAgent);
        }
        if (typeof document === 'undefined' &&
            typeof navigator !== 'undefined' &&
            navigator.product === 'ReactNative') {
            return new ReactNativeInfo();
        }
        if (typeof navigator !== 'undefined') {
            return parseUserAgent(navigator.userAgent);
        }
        return getNodeVersion();
    }
    function matchUserAgent(ua) {
        // opted for using reduce here rather than Array#first with a regex.test call
        // this is primarily because using the reduce we only perform the regex
        // execution once rather than once for the test and for the exec again below
        // probably something that needs to be benchmarked though
        return (ua !== '' &&
            userAgentRules.reduce(function (matched, _a) {
                var browser = _a[0], regex = _a[1];
                if (matched) {
                    return matched;
                }
                var uaMatch = regex.exec(ua);
                return !!uaMatch && [browser, uaMatch];
            }, false));
    }
    function parseUserAgent(ua) {
        var matchedRule = matchUserAgent(ua);
        if (!matchedRule) {
            return null;
        }
        var name = matchedRule[0], match = matchedRule[1];
        if (name === 'searchbot') {
            return new BotInfo();
        }
        // Do not use RegExp for split operation as some browser do not support it (See: http://blog.stevenlevithan.com/archives/cross-browser-split)
        var versionParts = match[1] && match[1].split('.').join('_').split('_').slice(0, 3);
        if (versionParts) {
            if (versionParts.length < REQUIRED_VERSION_PARTS) {
                versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length), true);
            }
        }
        else {
            versionParts = [];
        }
        var version = versionParts.join('.');
        var os = detectOS(ua);
        var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);
        if (searchBotMatch && searchBotMatch[1]) {
            return new SearchBotDeviceInfo(name, version, os, searchBotMatch[1]);
        }
        return new BrowserInfo(name, version, os);
    }
    function detectOS(ua) {
        for (var ii = 0, count = operatingSystemRules.length; ii < count; ii++) {
            var _a = operatingSystemRules[ii], os = _a[0], regex = _a[1];
            var match = regex.exec(ua);
            if (match) {
                return os;
            }
        }
        return null;
    }
    function getNodeVersion() {
        var isNode = typeof process !== 'undefined' && process.version;
        return isNode ? new NodeInfo(process.version.slice(1)) : null;
    }
    function createVersionParts(count) {
        var output = [];
        for (var ii = 0; ii < count; ii++) {
            output.push('0');
        }
        return output;
    }

    var cjs$2 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLocalStorage = exports.getLocalStorageOrThrow = exports.getCrypto = exports.getCryptoOrThrow = exports.getLocation = exports.getLocationOrThrow = exports.getNavigator = exports.getNavigatorOrThrow = exports.getDocument = exports.getDocumentOrThrow = exports.getFromWindowOrThrow = exports.getFromWindow = void 0;
    function getFromWindow(name) {
        let res = undefined;
        if (typeof window !== "undefined" && typeof window[name] !== "undefined") {
            res = window[name];
        }
        return res;
    }
    exports.getFromWindow = getFromWindow;
    function getFromWindowOrThrow(name) {
        const res = getFromWindow(name);
        if (!res) {
            throw new Error(`${name} is not defined in Window`);
        }
        return res;
    }
    exports.getFromWindowOrThrow = getFromWindowOrThrow;
    function getDocumentOrThrow() {
        return getFromWindowOrThrow("document");
    }
    exports.getDocumentOrThrow = getDocumentOrThrow;
    function getDocument() {
        return getFromWindow("document");
    }
    exports.getDocument = getDocument;
    function getNavigatorOrThrow() {
        return getFromWindowOrThrow("navigator");
    }
    exports.getNavigatorOrThrow = getNavigatorOrThrow;
    function getNavigator() {
        return getFromWindow("navigator");
    }
    exports.getNavigator = getNavigator;
    function getLocationOrThrow() {
        return getFromWindowOrThrow("location");
    }
    exports.getLocationOrThrow = getLocationOrThrow;
    function getLocation() {
        return getFromWindow("location");
    }
    exports.getLocation = getLocation;
    function getCryptoOrThrow() {
        return getFromWindowOrThrow("crypto");
    }
    exports.getCryptoOrThrow = getCryptoOrThrow;
    function getCrypto() {
        return getFromWindow("crypto");
    }
    exports.getCrypto = getCrypto;
    function getLocalStorageOrThrow() {
        return getFromWindowOrThrow("localStorage");
    }
    exports.getLocalStorageOrThrow = getLocalStorageOrThrow;
    function getLocalStorage() {
        return getFromWindow("localStorage");
    }
    exports.getLocalStorage = getLocalStorage;

    });

    var cjs$1 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getWindowMetadata = void 0;

    function getWindowMetadata() {
        let doc;
        let loc;
        try {
            doc = cjs$2.getDocumentOrThrow();
            loc = cjs$2.getLocationOrThrow();
        }
        catch (e) {
            return null;
        }
        function getIcons() {
            const links = doc.getElementsByTagName("link");
            const icons = [];
            for (let i = 0; i < links.length; i++) {
                const link = links[i];
                const rel = link.getAttribute("rel");
                if (rel) {
                    if (rel.toLowerCase().indexOf("icon") > -1) {
                        const href = link.getAttribute("href");
                        if (href) {
                            if (href.toLowerCase().indexOf("https:") === -1 &&
                                href.toLowerCase().indexOf("http:") === -1 &&
                                href.indexOf("//") !== 0) {
                                let absoluteHref = loc.protocol + "//" + loc.host;
                                if (href.indexOf("/") === 0) {
                                    absoluteHref += href;
                                }
                                else {
                                    const path = loc.pathname.split("/");
                                    path.pop();
                                    const finalPath = path.join("/");
                                    absoluteHref += finalPath + "/" + href;
                                }
                                icons.push(absoluteHref);
                            }
                            else if (href.indexOf("//") === 0) {
                                const absoluteUrl = loc.protocol + href;
                                icons.push(absoluteUrl);
                            }
                            else {
                                icons.push(href);
                            }
                        }
                    }
                }
            }
            return icons;
        }
        function getWindowMetadataOfAny(...args) {
            const metaTags = doc.getElementsByTagName("meta");
            for (let i = 0; i < metaTags.length; i++) {
                const tag = metaTags[i];
                const attributes = ["itemprop", "property", "name"]
                    .map((target) => tag.getAttribute(target))
                    .filter((attr) => {
                    if (attr) {
                        return args.includes(attr);
                    }
                    return false;
                });
                if (attributes.length && attributes) {
                    const content = tag.getAttribute("content");
                    if (content) {
                        return content;
                    }
                }
            }
            return "";
        }
        function getName() {
            let name = getWindowMetadataOfAny("name", "og:site_name", "og:title", "twitter:title");
            if (!name) {
                name = doc.title;
            }
            return name;
        }
        function getDescription() {
            const description = getWindowMetadataOfAny("description", "og:description", "twitter:description", "keywords");
            return description;
        }
        const name = getName();
        const description = getDescription();
        const url = loc.origin;
        const icons = getIcons();
        const meta = {
            description,
            url,
            icons,
            name,
        };
        return meta;
    }
    exports.getWindowMetadata = getWindowMetadata;

    });

    var strictUriEncode = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);

    var token = '%[a-f0-9]{2}';
    var singleMatcher = new RegExp('(' + token + ')|([^%]+?)', 'gi');
    var multiMatcher = new RegExp('(' + token + ')+', 'gi');

    function decodeComponents(components, split) {
    	try {
    		// Try to decode the entire string first
    		return [decodeURIComponent(components.join(''))];
    	} catch (err) {
    		// Do nothing
    	}

    	if (components.length === 1) {
    		return components;
    	}

    	split = split || 1;

    	// Split the array in 2 parts
    	var left = components.slice(0, split);
    	var right = components.slice(split);

    	return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
    }

    function decode(input) {
    	try {
    		return decodeURIComponent(input);
    	} catch (err) {
    		var tokens = input.match(singleMatcher) || [];

    		for (var i = 1; i < tokens.length; i++) {
    			input = decodeComponents(tokens, i).join('');

    			tokens = input.match(singleMatcher) || [];
    		}

    		return input;
    	}
    }

    function customDecodeURIComponent(input) {
    	// Keep track of all the replacements and prefill the map with the `BOM`
    	var replaceMap = {
    		'%FE%FF': '\uFFFD\uFFFD',
    		'%FF%FE': '\uFFFD\uFFFD'
    	};

    	var match = multiMatcher.exec(input);
    	while (match) {
    		try {
    			// Decode as big chunks as possible
    			replaceMap[match[0]] = decodeURIComponent(match[0]);
    		} catch (err) {
    			var result = decode(match[0]);

    			if (result !== match[0]) {
    				replaceMap[match[0]] = result;
    			}
    		}

    		match = multiMatcher.exec(input);
    	}

    	// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else
    	replaceMap['%C2'] = '\uFFFD';

    	var entries = Object.keys(replaceMap);

    	for (var i = 0; i < entries.length; i++) {
    		// Replace all decoded components
    		var key = entries[i];
    		input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
    	}

    	return input;
    }

    var decodeUriComponent = function (encodedURI) {
    	if (typeof encodedURI !== 'string') {
    		throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');
    	}

    	try {
    		encodedURI = encodedURI.replace(/\+/g, ' ');

    		// Try the built in decoder first
    		return decodeURIComponent(encodedURI);
    	} catch (err) {
    		// Fallback to a more advanced decoder
    		return customDecodeURIComponent(encodedURI);
    	}
    };

    var splitOnFirst = (string, separator) => {
    	if (!(typeof string === 'string' && typeof separator === 'string')) {
    		throw new TypeError('Expected the arguments to be of type `string`');
    	}

    	if (separator === '') {
    		return [string];
    	}

    	const separatorIndex = string.indexOf(separator);

    	if (separatorIndex === -1) {
    		return [string];
    	}

    	return [
    		string.slice(0, separatorIndex),
    		string.slice(separatorIndex + separator.length)
    	];
    };

    var filterObj = function (obj, predicate) {
    	var ret = {};
    	var keys = Object.keys(obj);
    	var isArr = Array.isArray(predicate);

    	for (var i = 0; i < keys.length; i++) {
    		var key = keys[i];
    		var val = obj[key];

    		if (isArr ? predicate.indexOf(key) !== -1 : predicate(key, val, obj)) {
    			ret[key] = val;
    		}
    	}

    	return ret;
    };

    var queryString = createCommonjsModule$4(function (module, exports) {





    const isNullOrUndefined = value => value === null || value === undefined;

    const encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');

    function encoderForArrayFormat(options) {
    	switch (options.arrayFormat) {
    		case 'index':
    			return key => (result, value) => {
    				const index = result.length;

    				if (
    					value === undefined ||
    					(options.skipNull && value === null) ||
    					(options.skipEmptyString && value === '')
    				) {
    					return result;
    				}

    				if (value === null) {
    					return [...result, [encode(key, options), '[', index, ']'].join('')];
    				}

    				return [
    					...result,
    					[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')
    				];
    			};

    		case 'bracket':
    			return key => (result, value) => {
    				if (
    					value === undefined ||
    					(options.skipNull && value === null) ||
    					(options.skipEmptyString && value === '')
    				) {
    					return result;
    				}

    				if (value === null) {
    					return [...result, [encode(key, options), '[]'].join('')];
    				}

    				return [...result, [encode(key, options), '[]=', encode(value, options)].join('')];
    			};

    		case 'colon-list-separator':
    			return key => (result, value) => {
    				if (
    					value === undefined ||
    					(options.skipNull && value === null) ||
    					(options.skipEmptyString && value === '')
    				) {
    					return result;
    				}

    				if (value === null) {
    					return [...result, [encode(key, options), ':list='].join('')];
    				}

    				return [...result, [encode(key, options), ':list=', encode(value, options)].join('')];
    			};

    		case 'comma':
    		case 'separator':
    		case 'bracket-separator': {
    			const keyValueSep = options.arrayFormat === 'bracket-separator' ?
    				'[]=' :
    				'=';

    			return key => (result, value) => {
    				if (
    					value === undefined ||
    					(options.skipNull && value === null) ||
    					(options.skipEmptyString && value === '')
    				) {
    					return result;
    				}

    				// Translate null to an empty string so that it doesn't serialize as 'null'
    				value = value === null ? '' : value;

    				if (result.length === 0) {
    					return [[encode(key, options), keyValueSep, encode(value, options)].join('')];
    				}

    				return [[result, encode(value, options)].join(options.arrayFormatSeparator)];
    			};
    		}

    		default:
    			return key => (result, value) => {
    				if (
    					value === undefined ||
    					(options.skipNull && value === null) ||
    					(options.skipEmptyString && value === '')
    				) {
    					return result;
    				}

    				if (value === null) {
    					return [...result, encode(key, options)];
    				}

    				return [...result, [encode(key, options), '=', encode(value, options)].join('')];
    			};
    	}
    }

    function parserForArrayFormat(options) {
    	let result;

    	switch (options.arrayFormat) {
    		case 'index':
    			return (key, value, accumulator) => {
    				result = /\[(\d*)\]$/.exec(key);

    				key = key.replace(/\[\d*\]$/, '');

    				if (!result) {
    					accumulator[key] = value;
    					return;
    				}

    				if (accumulator[key] === undefined) {
    					accumulator[key] = {};
    				}

    				accumulator[key][result[1]] = value;
    			};

    		case 'bracket':
    			return (key, value, accumulator) => {
    				result = /(\[\])$/.exec(key);
    				key = key.replace(/\[\]$/, '');

    				if (!result) {
    					accumulator[key] = value;
    					return;
    				}

    				if (accumulator[key] === undefined) {
    					accumulator[key] = [value];
    					return;
    				}

    				accumulator[key] = [].concat(accumulator[key], value);
    			};

    		case 'colon-list-separator':
    			return (key, value, accumulator) => {
    				result = /(:list)$/.exec(key);
    				key = key.replace(/:list$/, '');

    				if (!result) {
    					accumulator[key] = value;
    					return;
    				}

    				if (accumulator[key] === undefined) {
    					accumulator[key] = [value];
    					return;
    				}

    				accumulator[key] = [].concat(accumulator[key], value);
    			};

    		case 'comma':
    		case 'separator':
    			return (key, value, accumulator) => {
    				const isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);
    				const isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));
    				value = isEncodedArray ? decode(value, options) : value;
    				const newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);
    				accumulator[key] = newValue;
    			};

    		case 'bracket-separator':
    			return (key, value, accumulator) => {
    				const isArray = /(\[\])$/.test(key);
    				key = key.replace(/\[\]$/, '');

    				if (!isArray) {
    					accumulator[key] = value ? decode(value, options) : value;
    					return;
    				}

    				const arrayValue = value === null ?
    					[] :
    					value.split(options.arrayFormatSeparator).map(item => decode(item, options));

    				if (accumulator[key] === undefined) {
    					accumulator[key] = arrayValue;
    					return;
    				}

    				accumulator[key] = [].concat(accumulator[key], arrayValue);
    			};

    		default:
    			return (key, value, accumulator) => {
    				if (accumulator[key] === undefined) {
    					accumulator[key] = value;
    					return;
    				}

    				accumulator[key] = [].concat(accumulator[key], value);
    			};
    	}
    }

    function validateArrayFormatSeparator(value) {
    	if (typeof value !== 'string' || value.length !== 1) {
    		throw new TypeError('arrayFormatSeparator must be single character string');
    	}
    }

    function encode(value, options) {
    	if (options.encode) {
    		return options.strict ? strictUriEncode(value) : encodeURIComponent(value);
    	}

    	return value;
    }

    function decode(value, options) {
    	if (options.decode) {
    		return decodeUriComponent(value);
    	}

    	return value;
    }

    function keysSorter(input) {
    	if (Array.isArray(input)) {
    		return input.sort();
    	}

    	if (typeof input === 'object') {
    		return keysSorter(Object.keys(input))
    			.sort((a, b) => Number(a) - Number(b))
    			.map(key => input[key]);
    	}

    	return input;
    }

    function removeHash(input) {
    	const hashStart = input.indexOf('#');
    	if (hashStart !== -1) {
    		input = input.slice(0, hashStart);
    	}

    	return input;
    }

    function getHash(url) {
    	let hash = '';
    	const hashStart = url.indexOf('#');
    	if (hashStart !== -1) {
    		hash = url.slice(hashStart);
    	}

    	return hash;
    }

    function extract(input) {
    	input = removeHash(input);
    	const queryStart = input.indexOf('?');
    	if (queryStart === -1) {
    		return '';
    	}

    	return input.slice(queryStart + 1);
    }

    function parseValue(value, options) {
    	if (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {
    		value = Number(value);
    	} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {
    		value = value.toLowerCase() === 'true';
    	}

    	return value;
    }

    function parse(query, options) {
    	options = Object.assign({
    		decode: true,
    		sort: true,
    		arrayFormat: 'none',
    		arrayFormatSeparator: ',',
    		parseNumbers: false,
    		parseBooleans: false
    	}, options);

    	validateArrayFormatSeparator(options.arrayFormatSeparator);

    	const formatter = parserForArrayFormat(options);

    	// Create an object with no prototype
    	const ret = Object.create(null);

    	if (typeof query !== 'string') {
    		return ret;
    	}

    	query = query.trim().replace(/^[?#&]/, '');

    	if (!query) {
    		return ret;
    	}

    	for (const param of query.split('&')) {
    		if (param === '') {
    			continue;
    		}

    		let [key, value] = splitOnFirst(options.decode ? param.replace(/\+/g, ' ') : param, '=');

    		// Missing `=` should be `null`:
    		// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
    		value = value === undefined ? null : ['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options);
    		formatter(decode(key, options), value, ret);
    	}

    	for (const key of Object.keys(ret)) {
    		const value = ret[key];
    		if (typeof value === 'object' && value !== null) {
    			for (const k of Object.keys(value)) {
    				value[k] = parseValue(value[k], options);
    			}
    		} else {
    			ret[key] = parseValue(value, options);
    		}
    	}

    	if (options.sort === false) {
    		return ret;
    	}

    	return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {
    		const value = ret[key];
    		if (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {
    			// Sort object keys, not values
    			result[key] = keysSorter(value);
    		} else {
    			result[key] = value;
    		}

    		return result;
    	}, Object.create(null));
    }

    exports.extract = extract;
    exports.parse = parse;

    exports.stringify = (object, options) => {
    	if (!object) {
    		return '';
    	}

    	options = Object.assign({
    		encode: true,
    		strict: true,
    		arrayFormat: 'none',
    		arrayFormatSeparator: ','
    	}, options);

    	validateArrayFormatSeparator(options.arrayFormatSeparator);

    	const shouldFilter = key => (
    		(options.skipNull && isNullOrUndefined(object[key])) ||
    		(options.skipEmptyString && object[key] === '')
    	);

    	const formatter = encoderForArrayFormat(options);

    	const objectCopy = {};

    	for (const key of Object.keys(object)) {
    		if (!shouldFilter(key)) {
    			objectCopy[key] = object[key];
    		}
    	}

    	const keys = Object.keys(objectCopy);

    	if (options.sort !== false) {
    		keys.sort(options.sort);
    	}

    	return keys.map(key => {
    		const value = object[key];

    		if (value === undefined) {
    			return '';
    		}

    		if (value === null) {
    			return encode(key, options);
    		}

    		if (Array.isArray(value)) {
    			if (value.length === 0 && options.arrayFormat === 'bracket-separator') {
    				return encode(key, options) + '[]';
    			}

    			return value
    				.reduce(formatter(key), [])
    				.join('&');
    		}

    		return encode(key, options) + '=' + encode(value, options);
    	}).filter(x => x.length > 0).join('&');
    };

    exports.parseUrl = (url, options) => {
    	options = Object.assign({
    		decode: true
    	}, options);

    	const [url_, hash] = splitOnFirst(url, '#');

    	return Object.assign(
    		{
    			url: url_.split('?')[0] || '',
    			query: parse(extract(url), options)
    		},
    		options && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}
    	);
    };

    exports.stringifyUrl = (object, options) => {
    	options = Object.assign({
    		encode: true,
    		strict: true,
    		[encodeFragmentIdentifier]: true
    	}, options);

    	const url = removeHash(object.url).split('?')[0] || '';
    	const queryFromUrl = exports.extract(object.url);
    	const parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});

    	const query = Object.assign(parsedQueryFromUrl, object.query);
    	let queryString = exports.stringify(query, options);
    	if (queryString) {
    		queryString = `?${queryString}`;
    	}

    	let hash = getHash(object.url);
    	if (object.fragmentIdentifier) {
    		hash = `#${options[encodeFragmentIdentifier] ? encode(object.fragmentIdentifier, options) : object.fragmentIdentifier}`;
    	}

    	return `${url}${queryString}${hash}`;
    };

    exports.pick = (input, filter, options) => {
    	options = Object.assign({
    		parseFragmentIdentifier: true,
    		[encodeFragmentIdentifier]: false
    	}, options);

    	const {url, query, fragmentIdentifier} = exports.parseUrl(input, options);
    	return exports.stringifyUrl({
    		url,
    		query: filterObj(query, filter),
    		fragmentIdentifier
    	}, options);
    };

    exports.exclude = (input, filter, options) => {
    	const exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);

    	return exports.pick(input, exclusionFilter, options);
    };
    });

    const RELAY_JSONRPC = {
        waku: {
            publish: "waku_publish",
            subscribe: "waku_subscribe",
            subscription: "waku_subscription",
            unsubscribe: "waku_unsubscribe",
        },
        irn: {
            publish: "irn_publish",
            subscribe: "irn_subscribe",
            subscription: "irn_subscription",
            unsubscribe: "irn_unsubscribe",
        },
        iridium: {
            publish: "iridium_publish",
            subscribe: "iridium_subscribe",
            subscription: "iridium_subscription",
            unsubscribe: "iridium_unsubscribe",
        },
    };

    const k$2="base10",a$4="base16",R$1="base64pad",C$4="utf8",L$2=0,b$3=1,dn=0,ye$1=1,F$3=12,H$2=32;function ln(){const e=x25519.generateKeyPair();return {privateKey:toString$1(e.secretKey,a$4),publicKey:toString$1(e.publicKey,a$4)}}function fn(){const e=random.randomBytes(H$2);return toString$1(e,a$4)}function pn(e,n){const t=x25519.sharedKey(fromString(e,a$4),fromString(n,a$4)),r=new HKDF_1(sha256.SHA256,t).expand(H$2);return toString$1(r,a$4)}function mn(e){const n=sha256.hash(fromString(e,a$4));return toString$1(n,a$4)}function En(e){const n=sha256.hash(fromString(e,C$4));return toString$1(n,a$4)}function he$2(e){return fromString(`${e}`,k$2)}function T$2(e){return Number(toString$1(e,k$2))}function yn(e){const n=he$2(typeof e.type<"u"?e.type:L$2);if(T$2(n)===b$3&&typeof e.senderPublicKey>"u")throw new Error("Missing sender public key for type 1 envelope");const t=typeof e.senderPublicKey<"u"?fromString(e.senderPublicKey,a$4):void 0,r=typeof e.iv<"u"?fromString(e.iv,a$4):random.randomBytes(F$3),o=new chacha20poly1305.ChaCha20Poly1305(fromString(e.symKey,a$4)).seal(r,fromString(e.message,C$4));return Ne$1({type:n,sealed:o,iv:r,senderPublicKey:t})}function hn(e){const n=new chacha20poly1305.ChaCha20Poly1305(fromString(e.symKey,a$4)),{sealed:t,iv:r}=q$1(e.encoded),o=n.open(r,t);if(o===null)throw new Error("Failed to decrypt");return toString$1(o,C$4)}function Ne$1(e){if(T$2(e.type)===b$3){if(typeof e.senderPublicKey>"u")throw new Error("Missing sender public key for type 1 envelope");return toString$1(concat([e.type,e.senderPublicKey,e.iv,e.sealed]),R$1)}return toString$1(concat([e.type,e.iv,e.sealed]),R$1)}function q$1(e){const n=fromString(e,R$1),t=n.slice(dn,ye$1),r=ye$1;if(T$2(t)===b$3){const c=r+H$2,l=c+F$3,h=n.slice(r,c),g=n.slice(c,l),P=n.slice(l);return {type:t,sealed:P,iv:g,senderPublicKey:h}}const o=r+F$3,i=n.slice(r,o),s=n.slice(o);return {type:t,sealed:s,iv:i}}function Nn(e,n){const t=q$1(e);return ge$1({type:T$2(t.type),senderPublicKey:typeof t.senderPublicKey<"u"?toString$1(t.senderPublicKey,a$4):void 0,receiverPublicKey:n?.receiverPublicKey})}function ge$1(e){const n=e?.type||L$2;if(n===b$3){if(typeof e?.senderPublicKey>"u")throw new Error("missing sender public key");if(typeof e?.receiverPublicKey>"u")throw new Error("missing receiver public key")}return {type:n,senderPublicKey:e?.senderPublicKey,receiverPublicKey:e?.receiverPublicKey}}function gn(e){return e.type===b$3&&typeof e.senderPublicKey=="string"&&typeof e.receiverPublicKey=="string"}var vn=Object.defineProperty,ve$1=Object.getOwnPropertySymbols,On=Object.prototype.hasOwnProperty,bn=Object.prototype.propertyIsEnumerable,Oe$2=(e,n,t)=>n in e?vn(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,be$1=(e,n)=>{for(var t in n||(n={}))On.call(n,t)&&Oe$2(e,t,n[t]);if(ve$1)for(var t of ve$1(n))bn.call(n,t)&&Oe$2(e,t,n[t]);return e};const Se$2="ReactNative",S$2={reactNative:"react-native",node:"node",browser:"browser",unknown:"unknown"},Pe$2="js";function B$2(){return typeof process<"u"&&typeof process.versions<"u"&&typeof process.versions.node<"u"}function Te$2(){return !cjs$2.getDocument()&&!!cjs$2.getNavigator()&&navigator.product===Se$2}function _e$2(){return !B$2()&&!!cjs$2.getNavigator()}function z$3(){return Te$2()?S$2.reactNative:B$2()?S$2.node:_e$2()?S$2.browser:S$2.unknown}function Ue$2(e,n){let t=queryString.parse(e);return t=be$1(be$1({},t),n),e=queryString.stringify(t),e}function Pn(){return cjs$1.getWindowMetadata()||{name:"",description:"",url:"",icons:[""]}}function Ae$2(){const e=detect();if(e===null)return "unknown";const n=e.os?e.os.replace(" ","").toLowerCase():"unknown";return e.type==="browser"?[n,e.name,e.version].join("-"):[n,e.version].join("-")}function Re$2(){var e;const n=z$3();return n===S$2.browser?[n,((e=cjs$2.getLocation())==null?void 0:e.host)||"unknown"].join(":"):n}function Ce$2(e,n,t){const r=Ae$2(),o=Re$2();return [[e,n].join("-"),[Pe$2,t].join("-"),r,o].join("/")}function _n({protocol:e,version:n,relayUrl:t,sdkVersion:r,auth:o,projectId:i}){const s=t.split("?"),c=Ce$2(e,n,r),l={auth:o,ua:c,projectId:i},h=Ue$2(s[1]||"",l);return s[0]+"?"+h}function u$2(e,n){return e.filter(t=>n.includes(t)).length===e.length}function Cn(e){return Object.fromEntries(e.entries())}function wn(e){return new Map(Object.entries(e))}function xn(e,n){return cjs$5.fromMiliseconds((n||Date.now())+cjs$5.toMiliseconds(e))}function Vn(e){return cjs$5.fromMiliseconds(Date.now())>=cjs$5.toMiliseconds(e)}function Mn(){const e=cjs$5.toMiliseconds(cjs$5.FIVE_MINUTES);let n,t,r;return {resolve:o=>{r&&n&&(clearTimeout(r),n(o));},reject:o=>{r&&t&&(clearTimeout(r),t(o));},done:()=>new Promise((o,i)=>{r=setTimeout(i,e),n=o,t=i;})}}function Kn(e,n){return new Promise(async(t,r)=>{const o=setTimeout(()=>r(),n),i=await e;clearTimeout(o),t(i);})}function Y$1(e,n){if(typeof n=="string"&&n.startsWith(`${e}:`))return n;if(e.toLowerCase()==="topic"){if(typeof n!="string")throw new Error('Value must be "string" for expirer target type: topic');return `topic:${n}`}else if(e.toLowerCase()==="id"){if(typeof n!="number")throw new Error('Value must be "number" for expirer target type: id');return `id:${n}`}throw new Error(`Unknown expirer target type: ${e}`)}function kn(e){return Y$1("topic",e)}function Ln(e){return Y$1("id",e)}function Fn(e){const[n,t]=e.split(":"),r={id:void 0,topic:void 0};if(n==="topic"&&typeof t=="string")r.topic=t;else if(n==="id"&&Number.isInteger(Number(t)))r.id=Number(t);else throw new Error(`Invalid target, expected id:number or topic:string, got ${n}:${t}`);return r}function Hn(e,n){return `${e}${n?`:${n}`:""}`}const je$3="irn";function qn(e){return e?.relay||{protocol:je$3}}function Gn(e){const n=RELAY_JSONRPC[e];if(typeof n>"u")throw new Error(`Relay Protocol not supported: ${e}`);return n}var Bn=Object.defineProperty,xe$1=Object.getOwnPropertySymbols,zn=Object.prototype.hasOwnProperty,Yn=Object.prototype.propertyIsEnumerable,Ve$2=(e,n,t)=>n in e?Bn(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,Wn=(e,n)=>{for(var t in n||(n={}))zn.call(n,t)&&Ve$2(e,t,n[t]);if(xe$1)for(var t of xe$1(n))Yn.call(n,t)&&Ve$2(e,t,n[t]);return e};function Me$2(e,n="-"){const t={},r="relay"+n;return Object.keys(e).forEach(o=>{if(o.startsWith(r)){const i=o.replace(r,""),s=e[o];t[i]=s;}}),t}function Jn(e){const n=e.indexOf(":"),t=e.indexOf("?")!==-1?e.indexOf("?"):void 0,r=e.substring(0,n),o=e.substring(n+1,t).split("@"),i=typeof t<"u"?e.substring(t):"",s=queryString.parse(i);return {protocol:r,topic:o[0],version:parseInt(o[1],10),symKey:s.symKey,relay:Me$2(s)}}function Ke$2(e,n="-"){const t="relay",r={};return Object.keys(e).forEach(o=>{const i=t+n+o;e[o]&&(r[i]=e[o]);}),r}function Qn(e){return `${e.protocol}:${e.topic}@${e.version}?`+queryString.stringify(Wn({symKey:e.symKey},Ke$2(e.relay)))}function m$2(e){const n=[];return e.forEach(t=>{const[r,o]=t.split(":");n.push(`${r}:${o}`);}),n}function ke$3(e){const n=[];return Object.values(e).forEach(t=>{n.push(...m$2(t.accounts)),t.extension&&t.extension.forEach(r=>{n.push(...m$2(r.accounts));});}),n}function Le$2(e,n){const t=[];return Object.values(e).forEach(r=>{m$2(r.accounts).includes(n)&&t.push(...r.methods),r.extension&&r.extension.forEach(o=>{m$2(o.accounts).includes(n)&&t.push(...o.methods);});}),t}function Fe$3(e,n){const t=[];return Object.values(e).forEach(r=>{m$2(r.accounts).includes(n)&&t.push(...r.events),r.extension&&r.extension.forEach(o=>{m$2(o.accounts).includes(n)&&t.push(...o.events);});}),t}function Zn(e,n){const t=Be$2(e,n);if(t)throw new Error(t.message);const r={};for(const[o,i]of Object.entries(e))r[o]={methods:i.methods,events:i.events,chains:i.accounts.map(s=>`${s.split(":")[0]}:${s.split(":")[1]}`)};return r}const Xn={INVALID_METHOD:{message:"Invalid method.",code:1001},INVALID_EVENT:{message:"Invalid event.",code:1002},INVALID_UPDATE_REQUEST:{message:"Invalid update request.",code:1003},INVALID_EXTEND_REQUEST:{message:"Invalid extend request.",code:1004},INVALID_SESSION_SETTLE_REQUEST:{message:"Invalid session settle request.",code:1005},UNAUTHORIZED_METHOD:{message:"Unauthorized method.",code:3001},UNAUTHORIZED_EVENT:{message:"Unauthorized event.",code:3002},UNAUTHORIZED_UPDATE_REQUEST:{message:"Unauthorized update request.",code:3003},UNAUTHORIZED_EXTEND_REQUEST:{message:"Unauthorized extend request.",code:3004},USER_REJECTED:{message:"User rejected.",code:5e3},USER_REJECTED_CHAINS:{message:"User rejected chains.",code:5001},USER_REJECTED_METHODS:{message:"User rejected methods.",code:5002},USER_REJECTED_EVENTS:{message:"User rejected events.",code:5003},UNSUPPORTED_CHAINS:{message:"Unsupported chains.",code:5100},UNSUPPORTED_METHODS:{message:"Unsupported methods.",code:5101},UNSUPPORTED_EVENTS:{message:"Unsupported events.",code:5102},UNSUPPORTED_ACCOUNTS:{message:"Unsupported accounts.",code:5103},UNSUPPORTED_NAMESPACE_KEY:{message:"Unsupported namespace key.",code:5104},USER_DISCONNECTED:{message:"User disconnected.",code:6e3},SESSION_SETTLEMENT_FAILED:{message:"Session settlement failed.",code:7e3},WC_METHOD_UNSUPPORTED:{message:"Unsupported wc_ method.",code:10001}},et$2={NOT_INITIALIZED:{message:"Not initialized.",code:1},NO_MATCHING_KEY:{message:"No matching key.",code:2},RESTORE_WILL_OVERRIDE:{message:"Restore will override.",code:3},RESUBSCRIBED:{message:"Resubscribed.",code:4},MISSING_OR_INVALID:{message:"Missing or invalid.",code:5},EXPIRED:{message:"Expired.",code:6},UNKNOWN_TYPE:{message:"Unknown type.",code:7},MISMATCHED_TOPIC:{message:"Mismatched topic.",code:8},NON_CONFORMING_NAMESPACES:{message:"Non conforming namespaces.",code:9}};function E$1(e,n){const{message:t,code:r}=et$2[e];return {message:n?`${t} ${n}`:t,code:r}}function N$2(e,n){const{message:t,code:r}=Xn[e];return {message:n?`${t} ${n}`:t,code:r}}function I$3(e,n){return Array.isArray(e)?typeof n<"u"&&e.length?e.every(n):!0:!1}function W$2(e){return Object.getPrototypeOf(e)===Object.prototype&&Object.keys(e).length}function y$4(e){return typeof e>"u"}function d$3(e,n){return n&&y$4(e)?!0:typeof e=="string"&&Boolean(e.trim().length)}function J$1(e,n){return n&&y$4(e)?!0:typeof e=="number"&&!isNaN(e)}function nt$2(e,n){const{requiredNamespaces:t}=n,r=Object.keys(e.namespaces),o=Object.keys(t);let i=!0;return u$2(o,r)?(r.forEach(s=>{const{accounts:c,methods:l,events:h,extension:g}=e.namespaces[s],P=m$2(c),v=t[s];(!u$2(v.chains,P)||!u$2(v.methods,l)||!u$2(v.events,h))&&(i=!1),i&&g&&g.forEach(_=>{var O;const{accounts:j,methods:Ye,events:We}=_,Je=m$2(j);(O=v.extension)!=null&&O.find(x=>u$2(x.chains,Je)&&u$2(x.methods,Ye)&&u$2(x.events,We))||(i=!1);});}),i):!1}function D(e){return d$3(e,!1)&&e.includes(":")?e.split(":").length===2:!1}function He$3(e){if(d$3(e,!1)&&e.includes(":")){const n=e.split(":");if(n.length===3){const t=n[0]+":"+n[1];return !!n[2]&&D(t)}}return !1}function tt$2(e){if(d$3(e,!1))try{return typeof new URL(e)<"u"}catch{return !1}return !1}function rt$2(e){var n;return (n=e?.proposer)==null?void 0:n.publicKey}function ot$2(e){return e?.topic}function st$2(e,n){let t=null;return d$3(e?.publicKey,!1)||(t=E$1("MISSING_OR_INVALID",`${n} controller public key should be a string`)),t}function $$1(e,n){let t=null;return y$4(e?.extension)||(!I$3(e.extension)||!e.extension.length)&&(t=E$1("MISSING_OR_INVALID",`${n} extension should be an array of namespaces, or omitted`)),t}function Q$2(e){let n=!0;return I$3(e)?e.length&&(n=e.every(t=>d$3(t,!1))):n=!1,n}function Z$3(e,n,t){let r=null;return I$3(n)?n.forEach(o=>{r||(!D(o)||!o.includes(e))&&(r=N$2("UNSUPPORTED_CHAINS",`${t}, chain ${o} should be a string and conform to "namespace:chainId" format`));}):r=N$2("UNSUPPORTED_CHAINS",`${t}, chains ${n} should be an array of strings conforming to "namespace:chainId" format`),r}function qe$2(e,n){let t=null;return Object.entries(e).forEach(([r,o])=>{if(t)return;const i=Z$3(r,o?.chains,`${n} requiredNamespace`),s=$$1(o,n);i?t=i:s?t=s:o.extension&&o.extension.forEach(c=>{if(t)return;const l=Z$3(r,c.chains,`${n} extension`);l&&(t=l);});}),t}function X$1(e,n){let t=null;return I$3(e)?e.forEach(r=>{t||He$3(r)||(t=N$2("UNSUPPORTED_ACCOUNTS",`${n}, account ${r} should be a string and conform to "namespace:chainId:address" format`));}):t=N$2("UNSUPPORTED_ACCOUNTS",`${n}, accounts should be an array of strings conforming to "namespace:chainId:address" format`),t}function Ge$2(e,n){let t=null;return Object.values(e).forEach(r=>{if(t)return;const o=X$1(r?.accounts,`${n} namespace`),i=$$1(r,n);o?t=o:i?t=i:r.extension&&r.extension.forEach(s=>{if(t)return;const c=X$1(s.accounts,`${n} extension`);c&&(t=c);});}),t}function ee$1(e,n){let t=null;return Q$2(e?.methods)?Q$2(e?.events)||(t=N$2("UNSUPPORTED_EVENTS",`${n}, events should be an array of strings or empty array for no events`)):t=N$2("UNSUPPORTED_METHODS",`${n}, methods should be an array of strings or empty array for no methods`),t}function ne$2(e,n){let t=null;return Object.values(e).forEach(r=>{if(t)return;const o=ee$1(r,`${n}, namespace`),i=$$1(r,n);o?t=o:i?t=i:r.extension&&r.extension.forEach(s=>{if(t)return;const c=ee$1(s,`${n}, extension`);c&&(t=c);});}),t}function it$2(e,n){let t=null;if(e&&W$2(e)){const r=ne$2(e,n);r&&(t=r);const o=qe$2(e,n);o&&(t=o);}else t=E$1("MISSING_OR_INVALID",`${n}, requiredNamespaces should be an object with data`);return t}function Be$2(e,n){let t=null;if(e&&W$2(e)){const r=ne$2(e,n);r&&(t=r);const o=Ge$2(e,n);o&&(t=o);}else t=E$1("MISSING_OR_INVALID",`${n}, namespaces should be an object with data`);return t}function ze$3(e){return d$3(e.protocol,!0)}function ct$2(e,n){let t=!1;return n&&!e?t=!0:e&&I$3(e)&&e.length&&e.forEach(r=>{t=ze$3(r);}),t}function at$2(e){return typeof e=="number"}function ut$2(e){return typeof e<"u"&&typeof e!==null}function dt$2(e){return !(!e||typeof e!="object"||!e.code||!J$1(e.code,!1)||!e.message||!d$3(e.message,!1))}function lt$2(e){return !(y$4(e)||!d$3(e.method,!1))}function ft$2(e){return !(y$4(e)||y$4(e.result)&&y$4(e.error)||!J$1(e.id,!1)||!d$3(e.jsonrpc,!1))}function pt$2(e){return !(y$4(e)||!d$3(e.name,!1))}function mt$2(e,n){return !(!D(n)||!ke$3(e).includes(n))}function Et$2(e,n,t){return d$3(t,!1)?Le$2(e,n).includes(t):!1}function yt$2(e,n,t){return d$3(t,!1)?Fe$3(e,n).includes(t):!1}function ht$2(e,n,t){let r=null;const o=Object.keys(e),i=Object.keys(n);return u$2(o,i)?o.forEach(s=>{var c;if(r)return;const l=e[s].chains,h=m$2(n[s].accounts);u$2(l,h)?u$2(e[s].methods,n[s].methods)?u$2(e[s].events,n[s].events)?e[s].extension&&!n[s].extension?r=E$1("NON_CONFORMING_NAMESPACES",`${t} namespaces extension doesn't satisfy requiredNamespaces extension for ${s}`):e[s].extension&&n[s].extension&&((c=e[s].extension)==null||c.forEach(({methods:g,events:P,chains:v})=>{var _;r||(_=n[s].extension)!=null&&_.find(O=>{const j=m$2(O.accounts);return u$2(v,j)&&u$2(P,O.events)&&u$2(g,O.methods)})||(r=E$1("NON_CONFORMING_NAMESPACES",`${t} namespaces extension doesn't satisfy requiredNamespaces extension for ${s}`));})):r=E$1("NON_CONFORMING_NAMESPACES",`${t} namespaces events don't satisfy requiredNamespaces events for ${s}`):r=E$1("NON_CONFORMING_NAMESPACES",`${t} namespaces methods don't satisfy requiredNamespaces methods for ${s}`):r=E$1("NON_CONFORMING_NAMESPACES",`${t} namespaces accounts don't satisfy requiredNamespaces chains for ${s}`);}):r=E$1("NON_CONFORMING_NAMESPACES",`${t} namespaces keys don't satisfy requiredNamespaces`),r}

    const PARSE_ERROR = "PARSE_ERROR";
    const INVALID_REQUEST = "INVALID_REQUEST";
    const METHOD_NOT_FOUND = "METHOD_NOT_FOUND";
    const INVALID_PARAMS = "INVALID_PARAMS";
    const INTERNAL_ERROR = "INTERNAL_ERROR";
    const SERVER_ERROR = "SERVER_ERROR";
    const RESERVED_ERROR_CODES = [-32700, -32600, -32601, -32602, -32603];
    const STANDARD_ERROR_MAP = {
        [PARSE_ERROR]: { code: -32700, message: "Parse error" },
        [INVALID_REQUEST]: { code: -32600, message: "Invalid Request" },
        [METHOD_NOT_FOUND]: { code: -32601, message: "Method not found" },
        [INVALID_PARAMS]: { code: -32602, message: "Invalid params" },
        [INTERNAL_ERROR]: { code: -32603, message: "Internal error" },
        [SERVER_ERROR]: { code: -32000, message: "Server error" },
    };
    const DEFAULT_ERROR = SERVER_ERROR;

    function isReservedErrorCode(code) {
        return RESERVED_ERROR_CODES.includes(code);
    }
    function getError(type) {
        if (!Object.keys(STANDARD_ERROR_MAP).includes(type)) {
            return STANDARD_ERROR_MAP[DEFAULT_ERROR];
        }
        return STANDARD_ERROR_MAP[type];
    }
    function getErrorByCode(code) {
        const match = Object.values(STANDARD_ERROR_MAP).find(e => e.code === code);
        if (!match) {
            return STANDARD_ERROR_MAP[DEFAULT_ERROR];
        }
        return match;
    }
    function parseConnectionError(e, url, type) {
        return e.message.includes("getaddrinfo ENOTFOUND") || e.message.includes("connect ECONNREFUSED")
            ? new Error(`Unavailable ${type} RPC url at ${url}`)
            : e;
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __createBinding(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }

    function __exportStar(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    }
    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var tslib_es6 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        __extends: __extends,
        get __assign () { return __assign; },
        __rest: __rest,
        __decorate: __decorate,
        __param: __param,
        __metadata: __metadata,
        __awaiter: __awaiter,
        __generator: __generator,
        __createBinding: __createBinding,
        __exportStar: __exportStar,
        __values: __values,
        __read: __read,
        __spread: __spread,
        __spreadArrays: __spreadArrays,
        __await: __await,
        __asyncGenerator: __asyncGenerator,
        __asyncDelegator: __asyncDelegator,
        __asyncValues: __asyncValues,
        __makeTemplateObject: __makeTemplateObject,
        __importStar: __importStar,
        __importDefault: __importDefault,
        __classPrivateFieldGet: __classPrivateFieldGet,
        __classPrivateFieldSet: __classPrivateFieldSet
    });

    var crypto$1 = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isBrowserCryptoAvailable = exports.getSubtleCrypto = exports.getBrowerCrypto = void 0;
    function getBrowerCrypto() {
        return (commonjsGlobal === null || commonjsGlobal === void 0 ? void 0 : commonjsGlobal.crypto) || (commonjsGlobal === null || commonjsGlobal === void 0 ? void 0 : commonjsGlobal.msCrypto) || {};
    }
    exports.getBrowerCrypto = getBrowerCrypto;
    function getSubtleCrypto() {
        const browserCrypto = getBrowerCrypto();
        return browserCrypto.subtle || browserCrypto.webkitSubtle;
    }
    exports.getSubtleCrypto = getSubtleCrypto;
    function isBrowserCryptoAvailable() {
        return !!getBrowerCrypto() && !!getSubtleCrypto();
    }
    exports.isBrowserCryptoAvailable = isBrowserCryptoAvailable;

    });

    var env = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isBrowser = exports.isNode = exports.isReactNative = void 0;
    function isReactNative() {
        return (typeof document === "undefined" &&
            typeof navigator !== "undefined" &&
            navigator.product === "ReactNative");
    }
    exports.isReactNative = isReactNative;
    function isNode() {
        return (typeof process !== "undefined" &&
            typeof process.versions !== "undefined" &&
            typeof process.versions.node !== "undefined");
    }
    exports.isNode = isNode;
    function isBrowser() {
        return !isReactNative() && !isNode();
    }
    exports.isBrowser = isBrowser;

    });

    var tslib_1 = /*@__PURE__*/getAugmentedNamespace(tslib_es6);

    var cjs = createCommonjsModule$4(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    tslib_1.__exportStar(crypto$1, exports);
    tslib_1.__exportStar(env, exports);

    });

    function payloadId() {
        const date = Date.now() * Math.pow(10, 3);
        const extra = Math.floor(Math.random() * Math.pow(10, 3));
        return date + extra;
    }
    function formatJsonRpcRequest(method, params, id) {
        return {
            id: id || payloadId(),
            jsonrpc: "2.0",
            method,
            params,
        };
    }
    function formatJsonRpcResult(id, result) {
        return {
            id,
            jsonrpc: "2.0",
            result,
        };
    }
    function formatJsonRpcError(id, error, data) {
        return {
            id,
            jsonrpc: "2.0",
            error: formatErrorMessage(error, data),
        };
    }
    function formatErrorMessage(error, data) {
        if (typeof error === "undefined") {
            return getError(INTERNAL_ERROR);
        }
        if (typeof error === "string") {
            error = Object.assign(Object.assign({}, getError(SERVER_ERROR)), { message: error });
        }
        if (typeof data !== "undefined") {
            error.data = data;
        }
        if (isReservedErrorCode(error.code)) {
            error = getErrorByCode(error.code);
        }
        return error;
    }

    class IEvents {
    }

    class IBaseJsonRpcProvider extends IEvents {
        constructor() {
            super();
        }
    }
    class IJsonRpcProvider extends IBaseJsonRpcProvider {
        constructor(connection) {
            super();
        }
    }

    const WS_REGEX = "^wss?:";
    function getUrlProtocol(url) {
        const matches = url.match(new RegExp(/^\w+:/, "gi"));
        if (!matches || !matches.length)
            return;
        return matches[0];
    }
    function matchRegexProtocol(url, regex) {
        const protocol = getUrlProtocol(url);
        if (typeof protocol === "undefined")
            return false;
        return new RegExp(regex).test(protocol);
    }
    function isWsUrl(url) {
        return matchRegexProtocol(url, WS_REGEX);
    }
    function isLocalhostUrl(url) {
        return new RegExp("wss?://localhost(:d{2,5})?").test(url);
    }

    function isJsonRpcPayload(payload) {
        return (typeof payload === "object" &&
            "id" in payload &&
            "jsonrpc" in payload &&
            payload.jsonrpc === "2.0");
    }
    function isJsonRpcRequest(payload) {
        return isJsonRpcPayload(payload) && "method" in payload;
    }
    function isJsonRpcResponse(payload) {
        return isJsonRpcPayload(payload) && (isJsonRpcResult(payload) || isJsonRpcError(payload));
    }
    function isJsonRpcResult(payload) {
        return "result" in payload;
    }
    function isJsonRpcError(payload) {
        return "error" in payload;
    }

    class JsonRpcProvider extends IJsonRpcProvider {
        constructor(connection) {
            super(connection);
            this.events = new events.EventEmitter();
            this.hasRegisteredEventListeners = false;
            this.connection = this.setConnection(connection);
            if (this.connection.connected) {
                this.registerEventListeners();
            }
        }
        async connect(connection = this.connection) {
            await this.open(connection);
        }
        async disconnect() {
            await this.close();
        }
        on(event, listener) {
            this.events.on(event, listener);
        }
        once(event, listener) {
            this.events.once(event, listener);
        }
        off(event, listener) {
            this.events.off(event, listener);
        }
        removeListener(event, listener) {
            this.events.removeListener(event, listener);
        }
        async request(request, context) {
            return this.requestStrict(formatJsonRpcRequest(request.method, request.params || []), context);
        }
        async requestStrict(request, context) {
            return new Promise(async (resolve, reject) => {
                if (!this.connection.connected) {
                    try {
                        await this.open();
                    }
                    catch (e) {
                        reject(e);
                    }
                }
                this.events.on(`${request.id}`, response => {
                    if (isJsonRpcError(response)) {
                        reject(response.error);
                    }
                    else {
                        resolve(response.result);
                    }
                });
                try {
                    await this.connection.send(request, context);
                }
                catch (e) {
                    reject(e);
                }
            });
        }
        setConnection(connection = this.connection) {
            return connection;
        }
        onPayload(payload) {
            this.events.emit("payload", payload);
            if (isJsonRpcResponse(payload)) {
                this.events.emit(`${payload.id}`, payload);
            }
            else {
                this.events.emit("message", {
                    type: payload.method,
                    data: payload.params,
                });
            }
        }
        async open(connection = this.connection) {
            if (this.connection === connection && this.connection.connected)
                return;
            if (this.connection.connected)
                this.close();
            if (typeof connection === "string") {
                await this.connection.open(connection);
                connection = this.connection;
            }
            this.connection = this.setConnection(connection);
            await this.connection.open();
            this.registerEventListeners();
            this.events.emit("connect");
        }
        async close() {
            await this.connection.close();
        }
        registerEventListeners() {
            if (this.hasRegisteredEventListeners)
                return;
            this.connection.on("payload", (payload) => this.onPayload(payload));
            this.connection.on("close", () => this.events.emit("disconnect"));
            this.connection.on("error", (error) => this.events.emit("error", error));
            this.hasRegisteredEventListeners = true;
        }
    }

    const EVENT_EMITTER_MAX_LISTENERS_DEFAULT = 10;
    const resolveWebSocketImplementation = () => {
        if (typeof global !== "undefined" && typeof global.WebSocket !== "undefined") {
            return global.WebSocket;
        }
        if (typeof window !== "undefined" && typeof window.WebSocket !== "undefined") {
            return window.WebSocket;
        }
        return require("ws");
    };
    const isBrowser = () => typeof window !== "undefined";
    const WS = resolveWebSocketImplementation();
    class WsConnection {
        constructor(url) {
            this.url = url;
            this.events = new events.EventEmitter();
            this.registering = false;
            if (!isWsUrl(url)) {
                throw new Error(`Provided URL is not compatible with WebSocket connection: ${url}`);
            }
            this.url = url;
        }
        get connected() {
            return typeof this.socket !== "undefined";
        }
        get connecting() {
            return this.registering;
        }
        on(event, listener) {
            this.events.on(event, listener);
        }
        once(event, listener) {
            this.events.once(event, listener);
        }
        off(event, listener) {
            this.events.off(event, listener);
        }
        removeListener(event, listener) {
            this.events.removeListener(event, listener);
        }
        async open(url = this.url) {
            await this.register(url);
        }
        async close() {
            if (typeof this.socket === "undefined") {
                throw new Error("Connection already closed");
            }
            this.socket.close();
            this.onClose();
        }
        async send(payload, context) {
            if (typeof this.socket === "undefined") {
                this.socket = await this.register();
            }
            try {
                this.socket.send(safeJsonStringify(payload));
            }
            catch (e) {
                this.onError(payload.id, e);
            }
        }
        register(url = this.url) {
            if (!isWsUrl(url)) {
                throw new Error(`Provided URL is not compatible with WebSocket connection: ${url}`);
            }
            if (this.registering) {
                const currentMaxListeners = this.events.getMaxListeners();
                if (this.events.listenerCount("register_error") >= currentMaxListeners ||
                    this.events.listenerCount("open") >= currentMaxListeners) {
                    this.events.setMaxListeners(currentMaxListeners + 1);
                }
                return new Promise((resolve, reject) => {
                    this.events.once("register_error", error => {
                        this.resetMaxListeners();
                        reject(error);
                    });
                    this.events.once("open", () => {
                        this.resetMaxListeners();
                        if (typeof this.socket === "undefined") {
                            return reject(new Error("WebSocket connection is missing or invalid"));
                        }
                        resolve(this.socket);
                    });
                });
            }
            this.url = url;
            this.registering = true;
            return new Promise((resolve, reject) => {
                const opts = !cjs.isReactNative() ? { rejectUnauthorized: !isLocalhostUrl(url) } : undefined;
                const socket = new WS(url, [], opts);
                if (isBrowser()) {
                    socket.onerror = (event) => {
                        const errorEvent = event;
                        reject(this.emitError(errorEvent.error));
                    };
                }
                else {
                    socket.on("error", (errorEvent) => {
                        reject(this.emitError(errorEvent));
                    });
                }
                socket.onopen = () => {
                    this.onOpen(socket);
                    resolve(socket);
                };
            });
        }
        onOpen(socket) {
            socket.onmessage = (event) => this.onPayload(event);
            socket.onclose = () => this.onClose();
            this.socket = socket;
            this.registering = false;
            this.events.emit("open");
        }
        onClose() {
            this.socket = undefined;
            this.registering = false;
            this.events.emit("close");
        }
        onPayload(e) {
            if (typeof e.data === "undefined")
                return;
            const payload = typeof e.data === "string" ? safeJsonParse(e.data) : e.data;
            this.events.emit("payload", payload);
        }
        onError(id, e) {
            const error = this.parseError(e);
            const message = error.message || error.toString();
            const payload = formatJsonRpcError(id, message);
            this.events.emit("payload", payload);
        }
        parseError(e, url = this.url) {
            return parseConnectionError(e, url, "WS");
        }
        resetMaxListeners() {
            if (this.events.getMaxListeners() > EVENT_EMITTER_MAX_LISTENERS_DEFAULT) {
                this.events.setMaxListeners(EVENT_EMITTER_MAX_LISTENERS_DEFAULT);
            }
        }
        emitError(errorEvent) {
            const error = this.parseError(new Error((errorEvent === null || errorEvent === void 0 ? void 0 : errorEvent.message) || `WebSocket connection failed for URL: ${this.url}`));
            this.events.emit("register_error", error);
            return error;
        }
    }

    /**
     * Lodash (Custom Build) <https://lodash.com/>
     * Build: `lodash modularize exports="npm" -o ./`
     * Copyright JS Foundation and other contributors <https://js.foundation/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */

    var lodash_isequal = createCommonjsModule$4(function (module, exports) {
    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE = 200;

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED = '__lodash_hash_undefined__';

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER = 9007199254740991;

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        asyncTag = '[object AsyncFunction]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        nullTag = '[object Null]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        proxyTag = '[object Proxy]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]',
        undefinedTag = '[object Undefined]',
        weakMapTag = '[object WeakMap]';

    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

    /** Used to detect host constructors (Safari). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;

    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;

    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
    typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
    typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
    typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
    typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
    typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
    typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
    typedArrayTags[errorTag] = typedArrayTags[funcTag] =
    typedArrayTags[mapTag] = typedArrayTags[numberTag] =
    typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
    typedArrayTags[setTag] = typedArrayTags[stringTag] =
    typedArrayTags[weakMapTag] = false;

    /** Detect free variable `global` from Node.js. */
    var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root = freeGlobal || freeSelf || Function('return this')();

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Detect free variable `process` from Node.js. */
    var freeProcess = moduleExports && freeGlobal.process;

    /** Used to access faster Node.js helpers. */
    var nodeUtil = (function() {
      try {
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }());

    /* Node.js helper references. */
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

    /**
     * A specialized version of `_.filter` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.some` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    /**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */
    function baseTimes(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }

    /**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }

    /**
     * Checks if a `cache` value for `key` exists.
     *
     * @private
     * @param {Object} cache The cache to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function cacheHas(cache, key) {
      return cache.has(key);
    }

    /**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function getValue(object, key) {
      return object == null ? undefined : object[key];
    }

    /**
     * Converts `map` to its key-value pairs.
     *
     * @private
     * @param {Object} map The map to convert.
     * @returns {Array} Returns the key-value pairs.
     */
    function mapToArray(map) {
      var index = -1,
          result = Array(map.size);

      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }

    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }

    /**
     * Converts `set` to an array of its values.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the values.
     */
    function setToArray(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = root['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? root.Buffer : undefined,
        Symbol = root.Symbol,
        Uint8Array = root.Uint8Array,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeKeys = overArg(Object.keys, Object);

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(root, 'DataView'),
        Map = getNative(root, 'Map'),
        Promise = getNative(root, 'Promise'),
        Set = getNative(root, 'Set'),
        WeakMap = getNative(root, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length &&
        (typeof value == 'number' || reIsUint.test(value)) &&
        (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    module.exports = isEqual;
    });

    function wi(r,e){if(r.length>=255)throw new TypeError("Alphabet too long");for(var t=new Uint8Array(256),i=0;i<t.length;i++)t[i]=255;for(var s=0;s<r.length;s++){var n=r.charAt(s),a=n.charCodeAt(0);if(t[a]!==255)throw new TypeError(n+" is ambiguous");t[a]=s;}var o=r.length,h=r.charAt(0),l=Math.log(o)/Math.log(256),d=Math.log(256)/Math.log(o);function g(u){if(u instanceof Uint8Array||(ArrayBuffer.isView(u)?u=new Uint8Array(u.buffer,u.byteOffset,u.byteLength):Array.isArray(u)&&(u=Uint8Array.from(u))),!(u instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(u.length===0)return "";for(var D=0,O=0,E=0,_=u.length;E!==_&&u[E]===0;)E++,D++;for(var R=(_-E)*d+1>>>0,b=new Uint8Array(R);E!==_;){for(var S=u[E],x=0,f=R-1;(S!==0||x<O)&&f!==-1;f--,x++)S+=256*b[f]>>>0,b[f]=S%o>>>0,S=S/o>>>0;if(S!==0)throw new Error("Non-zero carry");O=x,E++;}for(var T=R-O;T!==R&&b[T]===0;)T++;for(var K=h.repeat(D);T<R;++T)K+=r.charAt(b[T]);return K}function U(u){if(typeof u!="string")throw new TypeError("Expected String");if(u.length===0)return new Uint8Array;var D=0;if(u[D]!==" "){for(var O=0,E=0;u[D]===h;)O++,D++;for(var _=(u.length-D)*l+1>>>0,R=new Uint8Array(_);u[D];){var b=t[u.charCodeAt(D)];if(b===255)return;for(var S=0,x=_-1;(b!==0||S<E)&&x!==-1;x--,S++)b+=o*R[x]>>>0,R[x]=b%256>>>0,b=b/256>>>0;if(b!==0)throw new Error("Non-zero carry");E=S,D++;}if(u[D]!==" "){for(var f=_-E;f!==_&&R[f]===0;)f++;for(var T=new Uint8Array(O+(_-f)),K=O;f!==_;)T[K++]=R[f++];return T}}}function q(u){var D=U(u);if(D)return D;throw new Error(`Non-${e} character`)}return {encode:g,decodeUnsafe:U,decode:q}}var vi=wi,Ii=vi;const Ie$1=r=>{if(r instanceof Uint8Array&&r.constructor.name==="Uint8Array")return r;if(r instanceof ArrayBuffer)return new Uint8Array(r);if(ArrayBuffer.isView(r))return new Uint8Array(r.buffer,r.byteOffset,r.byteLength);throw new Error("Unknown type, must be binary type")},Ci=r=>new TextEncoder().encode(r),_i=r=>new TextDecoder().decode(r);class Ri{constructor(e,t,i){this.name=e,this.prefix=t,this.baseEncode=i;}encode(e){if(e instanceof Uint8Array)return `${this.prefix}${this.baseEncode(e)}`;throw Error("Unknown type, must be binary type")}}class Si{constructor(e,t,i){if(this.name=e,this.prefix=t,t.codePointAt(0)===void 0)throw new Error("Invalid prefix character");this.prefixCodePoint=t.codePointAt(0),this.baseDecode=i;}decode(e){if(typeof e=="string"){if(e.codePointAt(0)!==this.prefixCodePoint)throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);return this.baseDecode(e.slice(this.prefix.length))}else throw Error("Can only multibase decode strings")}or(e){return Ce$1(this,e)}}class Ti{constructor(e){this.decoders=e;}or(e){return Ce$1(this,e)}decode(e){const t=e[0],i=this.decoders[t];if(i)return i.decode(e);throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)}}const Ce$1=(r,e)=>new Ti({...r.decoders||{[r.prefix]:r},...e.decoders||{[e.prefix]:e}});class Pi{constructor(e,t,i,s){this.name=e,this.prefix=t,this.baseEncode=i,this.baseDecode=s,this.encoder=new Ri(e,t,i),this.decoder=new Si(e,t,s);}encode(e){return this.encoder.encode(e)}decode(e){return this.decoder.decode(e)}}const k$1=({name:r,prefix:e,encode:t,decode:i})=>new Pi(r,e,t,i),F$2=({prefix:r,name:e,alphabet:t})=>{const{encode:i,decode:s}=Ii(t,e);return k$1({prefix:r,name:e,encode:i,decode:n=>Ie$1(s(n))})},xi=(r,e,t,i)=>{const s={};for(let d=0;d<e.length;++d)s[e[d]]=d;let n=r.length;for(;r[n-1]==="=";)--n;const a=new Uint8Array(n*t/8|0);let o=0,h=0,l=0;for(let d=0;d<n;++d){const g=s[r[d]];if(g===void 0)throw new SyntaxError(`Non-${i} character`);h=h<<t|g,o+=t,o>=8&&(o-=8,a[l++]=255&h>>o);}if(o>=t||255&h<<8-o)throw new SyntaxError("Unexpected end of data");return a},Oi=(r,e,t)=>{const i=e[e.length-1]==="=",s=(1<<t)-1;let n="",a=0,o=0;for(let h=0;h<r.length;++h)for(o=o<<8|r[h],a+=8;a>t;)a-=t,n+=e[s&o>>a];if(a&&(n+=e[s&o<<t-a]),i)for(;n.length*t&7;)n+="=";return n},p$2=({name:r,prefix:e,bitsPerChar:t,alphabet:i})=>k$1({prefix:e,name:r,encode(s){return Oi(s,i,t)},decode(s){return xi(s,i,t,r)}}),Ai=k$1({prefix:"\0",name:"identity",encode:r=>_i(r),decode:r=>Ci(r)});var zi=Object.freeze({__proto__:null,identity:Ai});const Ni=p$2({prefix:"0",name:"base2",alphabet:"01",bitsPerChar:1});var Ui=Object.freeze({__proto__:null,base2:Ni});const Li=p$2({prefix:"7",name:"base8",alphabet:"01234567",bitsPerChar:3});var Fi=Object.freeze({__proto__:null,base8:Li});const Mi=F$2({prefix:"9",name:"base10",alphabet:"0123456789"});var Ki=Object.freeze({__proto__:null,base10:Mi});const $i=p$2({prefix:"f",name:"base16",alphabet:"0123456789abcdef",bitsPerChar:4}),ki=p$2({prefix:"F",name:"base16upper",alphabet:"0123456789ABCDEF",bitsPerChar:4});var Bi=Object.freeze({__proto__:null,base16:$i,base16upper:ki});const ji=p$2({prefix:"b",name:"base32",alphabet:"abcdefghijklmnopqrstuvwxyz234567",bitsPerChar:5}),Vi=p$2({prefix:"B",name:"base32upper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",bitsPerChar:5}),qi=p$2({prefix:"c",name:"base32pad",alphabet:"abcdefghijklmnopqrstuvwxyz234567=",bitsPerChar:5}),Gi=p$2({prefix:"C",name:"base32padupper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",bitsPerChar:5}),Yi=p$2({prefix:"v",name:"base32hex",alphabet:"0123456789abcdefghijklmnopqrstuv",bitsPerChar:5}),Ji=p$2({prefix:"V",name:"base32hexupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV",bitsPerChar:5}),Hi=p$2({prefix:"t",name:"base32hexpad",alphabet:"0123456789abcdefghijklmnopqrstuv=",bitsPerChar:5}),Xi=p$2({prefix:"T",name:"base32hexpadupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV=",bitsPerChar:5}),Wi=p$2({prefix:"h",name:"base32z",alphabet:"ybndrfg8ejkmcpqxot1uwisza345h769",bitsPerChar:5});var Zi=Object.freeze({__proto__:null,base32:ji,base32upper:Vi,base32pad:qi,base32padupper:Gi,base32hex:Yi,base32hexupper:Ji,base32hexpad:Hi,base32hexpadupper:Xi,base32z:Wi});const Qi=F$2({prefix:"k",name:"base36",alphabet:"0123456789abcdefghijklmnopqrstuvwxyz"}),es=F$2({prefix:"K",name:"base36upper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"});var ts=Object.freeze({__proto__:null,base36:Qi,base36upper:es});const is=F$2({name:"base58btc",prefix:"z",alphabet:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"}),ss=F$2({name:"base58flickr",prefix:"Z",alphabet:"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"});var rs=Object.freeze({__proto__:null,base58btc:is,base58flickr:ss});const ns=p$2({prefix:"m",name:"base64",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",bitsPerChar:6}),as=p$2({prefix:"M",name:"base64pad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",bitsPerChar:6}),os=p$2({prefix:"u",name:"base64url",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",bitsPerChar:6}),hs=p$2({prefix:"U",name:"base64urlpad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",bitsPerChar:6});var cs=Object.freeze({__proto__:null,base64:ns,base64pad:as,base64url:os,base64urlpad:hs});const _e$1=Array.from("\u{1F680}\u{1FA90}\u2604\u{1F6F0}\u{1F30C}\u{1F311}\u{1F312}\u{1F313}\u{1F314}\u{1F315}\u{1F316}\u{1F317}\u{1F318}\u{1F30D}\u{1F30F}\u{1F30E}\u{1F409}\u2600\u{1F4BB}\u{1F5A5}\u{1F4BE}\u{1F4BF}\u{1F602}\u2764\u{1F60D}\u{1F923}\u{1F60A}\u{1F64F}\u{1F495}\u{1F62D}\u{1F618}\u{1F44D}\u{1F605}\u{1F44F}\u{1F601}\u{1F525}\u{1F970}\u{1F494}\u{1F496}\u{1F499}\u{1F622}\u{1F914}\u{1F606}\u{1F644}\u{1F4AA}\u{1F609}\u263A\u{1F44C}\u{1F917}\u{1F49C}\u{1F614}\u{1F60E}\u{1F607}\u{1F339}\u{1F926}\u{1F389}\u{1F49E}\u270C\u2728\u{1F937}\u{1F631}\u{1F60C}\u{1F338}\u{1F64C}\u{1F60B}\u{1F497}\u{1F49A}\u{1F60F}\u{1F49B}\u{1F642}\u{1F493}\u{1F929}\u{1F604}\u{1F600}\u{1F5A4}\u{1F603}\u{1F4AF}\u{1F648}\u{1F447}\u{1F3B6}\u{1F612}\u{1F92D}\u2763\u{1F61C}\u{1F48B}\u{1F440}\u{1F62A}\u{1F611}\u{1F4A5}\u{1F64B}\u{1F61E}\u{1F629}\u{1F621}\u{1F92A}\u{1F44A}\u{1F973}\u{1F625}\u{1F924}\u{1F449}\u{1F483}\u{1F633}\u270B\u{1F61A}\u{1F61D}\u{1F634}\u{1F31F}\u{1F62C}\u{1F643}\u{1F340}\u{1F337}\u{1F63B}\u{1F613}\u2B50\u2705\u{1F97A}\u{1F308}\u{1F608}\u{1F918}\u{1F4A6}\u2714\u{1F623}\u{1F3C3}\u{1F490}\u2639\u{1F38A}\u{1F498}\u{1F620}\u261D\u{1F615}\u{1F33A}\u{1F382}\u{1F33B}\u{1F610}\u{1F595}\u{1F49D}\u{1F64A}\u{1F639}\u{1F5E3}\u{1F4AB}\u{1F480}\u{1F451}\u{1F3B5}\u{1F91E}\u{1F61B}\u{1F534}\u{1F624}\u{1F33C}\u{1F62B}\u26BD\u{1F919}\u2615\u{1F3C6}\u{1F92B}\u{1F448}\u{1F62E}\u{1F646}\u{1F37B}\u{1F343}\u{1F436}\u{1F481}\u{1F632}\u{1F33F}\u{1F9E1}\u{1F381}\u26A1\u{1F31E}\u{1F388}\u274C\u270A\u{1F44B}\u{1F630}\u{1F928}\u{1F636}\u{1F91D}\u{1F6B6}\u{1F4B0}\u{1F353}\u{1F4A2}\u{1F91F}\u{1F641}\u{1F6A8}\u{1F4A8}\u{1F92C}\u2708\u{1F380}\u{1F37A}\u{1F913}\u{1F619}\u{1F49F}\u{1F331}\u{1F616}\u{1F476}\u{1F974}\u25B6\u27A1\u2753\u{1F48E}\u{1F4B8}\u2B07\u{1F628}\u{1F31A}\u{1F98B}\u{1F637}\u{1F57A}\u26A0\u{1F645}\u{1F61F}\u{1F635}\u{1F44E}\u{1F932}\u{1F920}\u{1F927}\u{1F4CC}\u{1F535}\u{1F485}\u{1F9D0}\u{1F43E}\u{1F352}\u{1F617}\u{1F911}\u{1F30A}\u{1F92F}\u{1F437}\u260E\u{1F4A7}\u{1F62F}\u{1F486}\u{1F446}\u{1F3A4}\u{1F647}\u{1F351}\u2744\u{1F334}\u{1F4A3}\u{1F438}\u{1F48C}\u{1F4CD}\u{1F940}\u{1F922}\u{1F445}\u{1F4A1}\u{1F4A9}\u{1F450}\u{1F4F8}\u{1F47B}\u{1F910}\u{1F92E}\u{1F3BC}\u{1F975}\u{1F6A9}\u{1F34E}\u{1F34A}\u{1F47C}\u{1F48D}\u{1F4E3}\u{1F942}"),us=_e$1.reduce((r,e,t)=>(r[t]=e,r),[]),ls=_e$1.reduce((r,e,t)=>(r[e.codePointAt(0)]=t,r),[]);function ds(r){return r.reduce((e,t)=>(e+=us[t],e),"")}function gs(r){const e=[];for(const t of r){const i=ls[t.codePointAt(0)];if(i===void 0)throw new Error(`Non-base256emoji character: ${t}`);e.push(i);}return new Uint8Array(e)}const ps=k$1({prefix:"\u{1F680}",name:"base256emoji",encode:ds,decode:gs});var Ds=Object.freeze({__proto__:null,base256emoji:ps}),ys=Se$1,Re$1=128,bs=127,ms=~bs,Es=Math.pow(2,31);function Se$1(r,e,t){e=e||[],t=t||0;for(var i=t;r>=Es;)e[t++]=r&255|Re$1,r/=128;for(;r&ms;)e[t++]=r&255|Re$1,r>>>=7;return e[t]=r|0,Se$1.bytes=t-i+1,e}var fs=ie$1,ws=128,Te$1=127;function ie$1(r,i){var t=0,i=i||0,s=0,n=i,a,o=r.length;do{if(n>=o)throw ie$1.bytes=0,new RangeError("Could not decode varint");a=r[n++],t+=s<28?(a&Te$1)<<s:(a&Te$1)*Math.pow(2,s),s+=7;}while(a>=ws);return ie$1.bytes=n-i,t}var vs=Math.pow(2,7),Is=Math.pow(2,14),Cs=Math.pow(2,21),_s=Math.pow(2,28),Rs=Math.pow(2,35),Ss=Math.pow(2,42),Ts=Math.pow(2,49),Ps=Math.pow(2,56),xs=Math.pow(2,63),Os=function(r){return r<vs?1:r<Is?2:r<Cs?3:r<_s?4:r<Rs?5:r<Ss?6:r<Ts?7:r<Ps?8:r<xs?9:10},As={encode:ys,decode:fs,encodingLength:Os},Pe$1=As;const xe=(r,e,t=0)=>(Pe$1.encode(r,e,t),e),Oe$1=r=>Pe$1.encodingLength(r),se$1=(r,e)=>{const t=e.byteLength,i=Oe$1(r),s=i+Oe$1(t),n=new Uint8Array(s+t);return xe(r,n,0),xe(t,n,i),n.set(e,s),new zs(r,t,e,n)};class zs{constructor(e,t,i,s){this.code=e,this.size=t,this.digest=i,this.bytes=s;}}const Ae$1=({name:r,code:e,encode:t})=>new Ns(r,e,t);class Ns{constructor(e,t,i){this.name=e,this.code=t,this.encode=i;}digest(e){if(e instanceof Uint8Array){const t=this.encode(e);return t instanceof Uint8Array?se$1(this.code,t):t.then(i=>se$1(this.code,i))}else throw Error("Unknown type, must be binary type")}}const ze$2=r=>async e=>new Uint8Array(await crypto.subtle.digest(r,e)),Us=Ae$1({name:"sha2-256",code:18,encode:ze$2("SHA-256")}),Ls=Ae$1({name:"sha2-512",code:19,encode:ze$2("SHA-512")});var Fs=Object.freeze({__proto__:null,sha256:Us,sha512:Ls});const Ne=0,Ms="identity",Ue$1=Ie$1,Ks=r=>se$1(Ne,Ue$1(r)),$s={code:Ne,name:Ms,encode:Ue$1,digest:Ks};var ks=Object.freeze({__proto__:null,identity:$s});new TextEncoder,new TextDecoder;const Le$1={...zi,...Ui,...Fi,...Ki,...Bi,...Zi,...ts,...rs,...cs,...Ds};({...Fs,...ks});function Bs(r=0){return globalThis.Buffer!=null&&globalThis.Buffer.allocUnsafe!=null?globalThis.Buffer.allocUnsafe(r):new Uint8Array(r)}function Fe$2(r,e,t,i){return {name:r,prefix:e,encoder:{name:r,prefix:e,encode:t},decoder:{decode:i}}}const Me$1=Fe$2("utf8","u",r=>"u"+new TextDecoder("utf8").decode(r),r=>new TextEncoder().encode(r.substring(1))),re$1=Fe$2("ascii","a",r=>{let e="a";for(let t=0;t<r.length;t++)e+=String.fromCharCode(r[t]);return e},r=>{r=r.substring(1);const e=Bs(r.length);for(let t=0;t<r.length;t++)e[t]=r.charCodeAt(t);return e}),js={utf8:Me$1,"utf-8":Me$1,hex:Le$1.base16,latin1:re$1,ascii:re$1,binary:re$1,...Le$1};function Vs(r,e="utf8"){const t=js[e];if(!t)throw new Error(`Unsupported encoding "${e}"`);return (e==="utf8"||e==="utf-8")&&globalThis.Buffer!=null&&globalThis.Buffer.from!=null?globalThis.Buffer.from(r,"utf8"):t.decoder.decode(`${t.prefix}${r}`)}const ne$1="wc",Ke$1=2,B$1="core",P$3=`${ne$1}@${2}:${B$1}:`,$e$1={name:B$1,logger:"error"},ke$2={database:":memory:"},Be$1="crypto",ae$1="client_ed25519_seed",je$2=cjs$5.ONE_DAY,Ve$1="keychain",qe$1="0.3",Ge$1="messages",Ye$2="0.3",Je$2=cjs$5.SIX_HOURS,He$2="publisher",Xe$2="irn",We$1="error",Ze$1="wss://relay.walletconnect.com",Qe$2="relayer",y$3={message:"relayer_message",connect:"relayer_connect",disconnect:"relayer_disconnect",error:"relayer_error",connection_stalled:"relayer_connection_stalled",transport_closed:"relayer_transport_closed"},et$1="_subscription",M$2={payload:"payload",connect:"connect",disconnect:"disconnect",error:"error"},oe$1=cjs$5.ONE_SECOND,tt$1="2.2.0",it$1="0.3",I$2={created:"subscription_created",deleted:"subscription_deleted",expired:"subscription_expired",disabled:"subscription_disabled",sync:"subscription_sync",resubscribed:"subscription_resubscribed"},st$1="subscription",rt$1="0.3",nt$1=cjs$5.FIVE_SECONDS*1e3,at$1="pairing",ot$1="0.3",N$1={wc_pairingDelete:{req:{ttl:cjs$5.ONE_DAY,prompt:!1,tag:1e3},res:{ttl:cjs$5.ONE_DAY,prompt:!1,tag:1001}},wc_pairingPing:{req:{ttl:cjs$5.THIRTY_SECONDS,prompt:!1,tag:1002},res:{ttl:cjs$5.THIRTY_SECONDS,prompt:!1,tag:1003}},unregistered_method:{req:{ttl:cjs$5.ONE_DAY,prompt:!1,tag:0},res:{ttl:cjs$5.ONE_DAY,prompt:!1,tag:0}}},C$3={created:"history_created",updated:"history_updated",deleted:"history_deleted",sync:"history_sync"},ht$1="history",ct$1="0.3",ut$1="expirer",m$1={created:"expirer_created",deleted:"expirer_deleted",expired:"expirer_expired",sync:"expirer_sync"},lt$1="0.3";class dt$1{constructor(e,t){this.core=e,this.logger=t,this.keychain=new Map,this.name=Ve$1,this.version=qe$1,this.initialized=!1,this.storagePrefix=P$3,this.init=async()=>{if(!this.initialized){const i=await this.getKeyChain();typeof i<"u"&&(this.keychain=i),this.initialized=!0;}},this.has=i=>(this.isInitialized(),this.keychain.has(i)),this.set=async(i,s)=>{this.isInitialized(),this.keychain.set(i,s),await this.persist();},this.get=i=>{this.isInitialized();const s=this.keychain.get(i);if(typeof s>"u"){const{message:n}=E$1("NO_MATCHING_KEY",`${this.name}: ${i}`);throw new Error(n)}return s},this.del=async i=>{this.isInitialized(),this.keychain.delete(i),await this.persist();},this.core=e,this.logger=cjs$3.generateChildLogger(t,this.name);}get context(){return cjs$3.getLoggerContext(this.logger)}get storageKey(){return this.storagePrefix+this.version+"//"+this.name}async setKeyChain(e){await this.core.storage.setItem(this.storageKey,Cn(e));}async getKeyChain(){const e=await this.core.storage.getItem(this.storageKey);return typeof e<"u"?wn(e):void 0}async persist(){await this.setKeyChain(this.keychain);}isInitialized(){if(!this.initialized){const{message:e}=E$1("NOT_INITIALIZED",this.name);throw new Error(e)}}}class gt$1{constructor(e,t,i){this.core=e,this.logger=t,this.name=Be$1,this.initialized=!1,this.init=async()=>{this.initialized||(await this.keychain.init(),this.initialized=!0);},this.hasKeys=s=>(this.isInitialized(),this.keychain.has(s)),this.getClientId=async()=>{this.isInitialized();const s=await this.getClientSeed(),n=generateKeyPair(s);return encodeIss(n.publicKey)},this.generateKeyPair=()=>{this.isInitialized();const s=ln();return this.setPrivateKey(s.publicKey,s.privateKey)},this.signJWT=async s=>{this.isInitialized();const n=await this.getClientSeed(),a=generateKeyPair(n),o=fn(),h=je$2;return await signJWT(o,s,h,a)},this.generateSharedKey=(s,n,a)=>{this.isInitialized();const o=this.getPrivateKey(s),h=pn(o,n);return this.setSymKey(h,a)},this.setSymKey=async(s,n)=>{this.isInitialized();const a=n||mn(s);return await this.keychain.set(a,s),a},this.deleteKeyPair=async s=>{this.isInitialized(),await this.keychain.del(s);},this.deleteSymKey=async s=>{this.isInitialized(),await this.keychain.del(s);},this.encode=async(s,n,a)=>{this.isInitialized();const o=ge$1(a),h=safeJsonStringify(n);if(gn(o)){const U=o.senderPublicKey,q=o.receiverPublicKey;s=await this.generateSharedKey(U,q);}const l=this.getSymKey(s),{type:d,senderPublicKey:g}=o;return yn({type:d,symKey:l,message:h,senderPublicKey:g})},this.decode=async(s,n,a)=>{this.isInitialized();const o=Nn(n,a);if(gn(o)){const d=o.receiverPublicKey,g=o.senderPublicKey;s=await this.generateSharedKey(d,g);}const h=this.getSymKey(s),l=hn({symKey:h,encoded:n});return safeJsonParse(l)},this.core=e,this.logger=cjs$3.generateChildLogger(t,this.name),this.keychain=i||new dt$1(this.core,this.logger);}get context(){return cjs$3.getLoggerContext(this.logger)}getPayloadType(e){const t=q$1(e);return T$2(t.type)}async setPrivateKey(e,t){return await this.keychain.set(e,t),e}getPrivateKey(e){return this.keychain.get(e)}async getClientSeed(){let e="";try{e=this.keychain.get(ae$1);}catch{e=fn(),await this.keychain.set(ae$1,e);}return Vs(e,"base16")}getSymKey(e){return this.keychain.get(e)}isInitialized(){if(!this.initialized){const{message:e}=E$1("NOT_INITIALIZED",this.name);throw new Error(e)}}}class pt$1 extends a$5{constructor(e,t){super(e,t),this.logger=e,this.core=t,this.messages=new Map,this.name=Ge$1,this.version=Ye$2,this.initialized=!1,this.storagePrefix=P$3,this.init=async()=>{if(!this.initialized){this.logger.trace("Initialized");try{const i=await this.getRelayerMessages();typeof i<"u"&&(this.messages=i),this.logger.debug(`Successfully Restored records for ${this.name}`),this.logger.trace({type:"method",method:"restore",size:this.messages.size});}catch(i){this.logger.debug(`Failed to Restore records for ${this.name}`),this.logger.error(i);}finally{this.initialized=!0;}}},this.set=async(i,s)=>{this.isInitialized();const n=En(s);let a=this.messages.get(i);return typeof a>"u"&&(a={}),typeof a[n]<"u"||(a[n]=s,this.messages.set(i,a),await this.persist()),n},this.get=i=>{this.isInitialized();let s=this.messages.get(i);return typeof s>"u"&&(s={}),s},this.has=(i,s)=>{this.isInitialized();const n=this.get(i),a=En(s);return typeof n[a]<"u"},this.del=async i=>{this.isInitialized(),this.messages.delete(i),await this.persist();},this.logger=cjs$3.generateChildLogger(e,this.name),this.core=t;}get context(){return cjs$3.getLoggerContext(this.logger)}get storageKey(){return this.storagePrefix+this.version+"//"+this.name}async setRelayerMessages(e){await this.core.storage.setItem(this.storageKey,Cn(e));}async getRelayerMessages(){const e=await this.core.storage.getItem(this.storageKey);return typeof e<"u"?wn(e):void 0}async persist(){await this.setRelayerMessages(this.messages);}isInitialized(){if(!this.initialized){const{message:e}=E$1("NOT_INITIALIZED",this.name);throw new Error(e)}}}class Hs extends u$3{constructor(e,t){super(e,t),this.relayer=e,this.logger=t,this.events=new events.EventEmitter,this.name=He$2,this.queue=new Map,this.publishTimeout=1e4,this.publish=async(i,s,n)=>{this.logger.debug("Publishing Payload"),this.logger.trace({type:"method",method:"publish",params:{topic:i,message:s,opts:n}});try{const a=n?.ttl||Je$2,o=qn(n),h=n?.prompt||!1,l=n?.tag||0,d={topic:i,message:s,opts:{ttl:a,relay:o,prompt:h,tag:l}},g=En(s);this.queue.set(g,d);try{await await Kn(this.rpcPublish(i,s,a,o,h,l),this.publishTimeout);}catch{this.logger.debug("Publishing Payload stalled"),this.relayer.events.emit(y$3.connection_stalled);return}this.onPublish(g,d),this.logger.debug("Successfully Published Payload"),this.logger.trace({type:"method",method:"publish",params:{topic:i,message:s,opts:n}});}catch(a){throw this.logger.debug("Failed to Publish Payload"),this.logger.error(a),a}},this.on=(i,s)=>{this.events.on(i,s);},this.once=(i,s)=>{this.events.once(i,s);},this.off=(i,s)=>{this.events.off(i,s);},this.removeListener=(i,s)=>{this.events.removeListener(i,s);},this.relayer=e,this.logger=cjs$3.generateChildLogger(t,this.name),this.registerEventListeners();}get context(){return cjs$3.getLoggerContext(this.logger)}rpcPublish(e,t,i,s,n,a){var o,h,l,d;const g={method:Gn(s.protocol).publish,params:{topic:e,message:t,ttl:i,prompt:n,tag:a}};return y$4((o=g.params)==null?void 0:o.prompt)&&((h=g.params)==null||delete h.prompt),y$4((l=g.params)==null?void 0:l.tag)&&((d=g.params)==null||delete d.tag),this.logger.debug("Outgoing Relay Payload"),this.logger.trace({type:"message",direction:"outgoing",request:g}),this.relayer.provider.request(g)}onPublish(e,t){this.queue.delete(e);}checkQueue(){this.queue.forEach(async e=>{const{topic:t,message:i,opts:s}=e;await this.publish(t,i,s);});}registerEventListeners(){this.relayer.core.heartbeat.on(cjs$4.HEARTBEAT_EVENTS.pulse,()=>{this.checkQueue();});}}class Xs{constructor(){this.map=new Map,this.set=(e,t)=>{const i=this.get(e);this.exists(e,t)||this.map.set(e,[...i,t]);},this.get=e=>this.map.get(e)||[],this.exists=(e,t)=>this.get(e).includes(t),this.delete=(e,t)=>{if(typeof t>"u"){this.map.delete(e);return}if(!this.map.has(e))return;const i=this.get(e);if(!this.exists(e,t))return;const s=i.filter(n=>n!==t);if(!s.length){this.map.delete(e);return}this.map.set(e,s);},this.clear=()=>{this.map.clear();};}get topics(){return Array.from(this.map.keys())}}var Ws=Object.defineProperty,Zs=Object.defineProperties,Qs=Object.getOwnPropertyDescriptors,Dt$1=Object.getOwnPropertySymbols,er$1=Object.prototype.hasOwnProperty,tr$1=Object.prototype.propertyIsEnumerable,yt$1=(r,e,t)=>e in r?Ws(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,j=(r,e)=>{for(var t in e||(e={}))er$1.call(e,t)&&yt$1(r,t,e[t]);if(Dt$1)for(var t of Dt$1(e))tr$1.call(e,t)&&yt$1(r,t,e[t]);return r},he$1=(r,e)=>Zs(r,Qs(e));class bt$1 extends x$1{constructor(e,t){super(e,t),this.relayer=e,this.logger=t,this.subscriptions=new Map,this.topicMap=new Xs,this.events=new events.EventEmitter,this.name=st$1,this.version=rt$1,this.pending=new Map,this.cached=[],this.initialized=!1,this.pendingSubscriptionWatchLabel="pending_sub_watch_label",this.pendingSubInterval=20,this.storagePrefix=P$3,this.subscribeTimeout=1e4,this.init=async()=>{this.initialized||(this.logger.trace("Initialized"),await this.restart(),this.registerEventListeners(),this.onEnable());},this.subscribe=async(i,s)=>{this.isInitialized(),this.logger.debug("Subscribing Topic"),this.logger.trace({type:"method",method:"subscribe",params:{topic:i,opts:s}});try{const n=qn(s),a={topic:i,relay:n};this.pending.set(i,a);const o=await this.rpcSubscribe(i,n);return this.onSubscribe(o,a),this.logger.debug("Successfully Subscribed Topic"),this.logger.trace({type:"method",method:"subscribe",params:{topic:i,opts:s}}),o}catch(n){throw this.logger.debug("Failed to Subscribe Topic"),this.logger.error(n),n}},this.unsubscribe=async(i,s)=>{this.isInitialized(),typeof s?.id<"u"?await this.unsubscribeById(i,s.id,s):await this.unsubscribeByTopic(i,s);},this.isSubscribed=async i=>this.topics.includes(i)?!0:await new Promise((s,n)=>{const a=new cjs$5.Watch;a.start(this.pendingSubscriptionWatchLabel);const o=setInterval(()=>{!this.pending.has(i)&&this.topics.includes(i)&&(clearInterval(o),a.stop(this.pendingSubscriptionWatchLabel),s(!0)),a.elapsed(this.pendingSubscriptionWatchLabel)>=nt$1&&(clearInterval(o),a.stop(this.pendingSubscriptionWatchLabel),n(!1));},this.pendingSubInterval);}),this.on=(i,s)=>{this.events.on(i,s);},this.once=(i,s)=>{this.events.once(i,s);},this.off=(i,s)=>{this.events.off(i,s);},this.removeListener=(i,s)=>{this.events.removeListener(i,s);},this.restart=async()=>{await this.restore(),await this.reset();},this.relayer=e,this.logger=cjs$3.generateChildLogger(t,this.name);}get context(){return cjs$3.getLoggerContext(this.logger)}get storageKey(){return this.storagePrefix+this.version+"//"+this.name}get length(){return this.subscriptions.size}get ids(){return Array.from(this.subscriptions.keys())}get values(){return Array.from(this.subscriptions.values())}get topics(){return this.topicMap.topics}hasSubscription(e,t){let i=!1;try{i=this.getSubscription(e).topic===t;}catch{}return i}onEnable(){this.cached=[],this.initialized=!0;}onDisable(){this.cached=this.values,this.subscriptions.clear(),this.topicMap.clear(),this.initialized=!1;}async unsubscribeByTopic(e,t){const i=this.topicMap.get(e);await Promise.all(i.map(async s=>await this.unsubscribeById(e,s,t)));}async unsubscribeById(e,t,i){this.logger.debug("Unsubscribing Topic"),this.logger.trace({type:"method",method:"unsubscribe",params:{topic:e,id:t,opts:i}});try{const s=qn(i);await this.rpcUnsubscribe(e,t,s);const n=N$2("USER_DISCONNECTED",`${this.name}, ${e}`);await this.onUnsubscribe(e,t,n),this.logger.debug("Successfully Unsubscribed Topic"),this.logger.trace({type:"method",method:"unsubscribe",params:{topic:e,id:t,opts:i}});}catch(s){throw this.logger.debug("Failed to Unsubscribe Topic"),this.logger.error(s),s}}async rpcSubscribe(e,t){const i={method:Gn(t.protocol).subscribe,params:{topic:e}};this.logger.debug("Outgoing Relay Payload"),this.logger.trace({type:"payload",direction:"outgoing",request:i});let s;try{s=await await Kn(this.relayer.provider.request(i),this.subscribeTimeout);}catch{this.logger.debug("Outgoing Relay Payload stalled"),this.relayer.events.emit(y$3.connection_stalled);}return s}rpcUnsubscribe(e,t,i){const s={method:Gn(i.protocol).unsubscribe,params:{topic:e,id:t}};return this.logger.debug("Outgoing Relay Payload"),this.logger.trace({type:"payload",direction:"outgoing",request:s}),this.relayer.provider.request(s)}onSubscribe(e,t){this.setSubscription(e,he$1(j({},t),{id:e})),this.pending.delete(t.topic);}onResubscribe(e,t){this.addSubscription(e,he$1(j({},t),{id:e})),this.pending.delete(t.topic);}async onUnsubscribe(e,t,i){this.events.removeAllListeners(t),this.hasSubscription(t,e)&&this.deleteSubscription(t,i),await this.relayer.messages.del(e);}async setRelayerSubscriptions(e){await this.relayer.core.storage.setItem(this.storageKey,e);}async getRelayerSubscriptions(){return await this.relayer.core.storage.getItem(this.storageKey)}setSubscription(e,t){this.subscriptions.has(e)||(this.logger.debug("Setting subscription"),this.logger.trace({type:"method",method:"setSubscription",id:e,subscription:t}),this.addSubscription(e,t));}addSubscription(e,t){this.subscriptions.set(e,j({},t)),this.topicMap.set(t.topic,e),this.events.emit(I$2.created,t);}getSubscription(e){this.logger.debug("Getting subscription"),this.logger.trace({type:"method",method:"getSubscription",id:e});const t=this.subscriptions.get(e);if(!t){const{message:i}=E$1("NO_MATCHING_KEY",`${this.name}: ${e}`);throw new Error(i)}return t}deleteSubscription(e,t){this.logger.debug("Deleting subscription"),this.logger.trace({type:"method",method:"deleteSubscription",id:e,reason:t});const i=this.getSubscription(e);this.subscriptions.delete(e),this.topicMap.delete(i.topic,e),this.events.emit(I$2.deleted,he$1(j({},i),{reason:t}));}async persist(){await this.setRelayerSubscriptions(this.values),this.events.emit(I$2.sync);}async reset(){this.cached.length&&await Promise.all(this.cached.map(async e=>await this.resubscribe(e))),this.events.emit(I$2.resubscribed);}async restore(){try{const e=await this.getRelayerSubscriptions();if(typeof e>"u"||!e.length)return;if(this.subscriptions.size){const{message:t}=E$1("RESTORE_WILL_OVERRIDE",this.name);throw this.logger.error(t),new Error(t)}this.cached=e,this.logger.debug(`Successfully Restored subscriptions for ${this.name}`),this.logger.trace({type:"method",method:"restore",subscriptions:this.values});}catch(e){this.logger.debug(`Failed to Restore subscriptions for ${this.name}`),this.logger.error(e);}}async resubscribe(e){if(!this.ids.includes(e.id)){const{topic:t,relay:i}=e,s={topic:t,relay:i};this.pending.set(s.topic,s);const n=await this.rpcSubscribe(s.topic,s.relay);this.onResubscribe(n,s);}}async onConnect(){await this.restart(),this.onEnable();}onDisconnect(){this.onDisable();}checkPending(){this.relayer.transportExplicitlyClosed||this.pending.forEach(async e=>{const t=await this.rpcSubscribe(e.topic,e.relay);this.onSubscribe(t,e);});}registerEventListeners(){this.relayer.core.heartbeat.on(cjs$4.HEARTBEAT_EVENTS.pulse,()=>{this.checkPending();}),this.relayer.on(y$3.connect,async()=>{await this.onConnect();}),this.relayer.on(y$3.disconnect,()=>{this.onDisconnect();}),this.events.on(I$2.created,async e=>{const t=I$2.created;this.logger.info(`Emitting ${t}`),this.logger.debug({type:"event",event:t,data:e}),await this.persist();}),this.events.on(I$2.deleted,async e=>{const t=I$2.deleted;this.logger.info(`Emitting ${t}`),this.logger.debug({type:"event",event:t,data:e}),await this.persist();});}isInitialized(){if(!this.initialized){const{message:e}=E$1("NOT_INITIALIZED",this.name);throw new Error(e)}}}var ir$1=Object.defineProperty,mt$1=Object.getOwnPropertySymbols,sr$1=Object.prototype.hasOwnProperty,rr$1=Object.prototype.propertyIsEnumerable,Et$1=(r,e,t)=>e in r?ir$1(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,nr$1=(r,e)=>{for(var t in e||(e={}))sr$1.call(e,t)&&Et$1(r,t,e[t]);if(mt$1)for(var t of mt$1(e))rr$1.call(e,t)&&Et$1(r,t,e[t]);return r};class ft$1 extends g$3{constructor(e){super(e),this.protocol="wc",this.version=2,this.events=new events.EventEmitter,this.name=Qe$2,this.transportExplicitlyClosed=!1,this.initialized=!1,this.core=e.core,this.logger=typeof e.logger<"u"&&typeof e.logger!="string"?cjs$3.generateChildLogger(e.logger,this.name):browser$3(cjs$3.getDefaultLoggerOptions({level:e.logger||We$1})),this.messages=new pt$1(this.logger,e.core),this.subscriber=new bt$1(this,this.logger),this.publisher=new Hs(this,this.logger),this.relayUrl=e?.relayUrl||Ze$1,this.projectId=e.projectId,this.provider={};}async init(){this.logger.trace("Initialized"),this.provider=await this.createProvider(),await Promise.all([this.messages.init(),this.transportOpen(),this.subscriber.init()]),this.registerEventListeners(),this.initialized=!0;}get context(){return cjs$3.getLoggerContext(this.logger)}get connected(){return this.provider.connection.connected}get connecting(){return this.provider.connection.connecting}async publish(e,t,i){this.isInitialized(),await this.publisher.publish(e,t,i),await this.recordMessageEvent({topic:e,message:t});}async subscribe(e,t){this.isInitialized();let i="";return await Promise.all([new Promise(s=>{this.subscriber.once(I$2.created,n=>{n.topic===e&&s();});}),new Promise(async s=>{i=await this.subscriber.subscribe(e,t),s();})]),i}async unsubscribe(e,t){this.isInitialized(),await this.subscriber.unsubscribe(e,t);}on(e,t){this.events.on(e,t);}once(e,t){this.events.once(e,t);}off(e,t){this.events.off(e,t);}removeListener(e,t){this.events.removeListener(e,t);}async transportClose(){this.transportExplicitlyClosed=!0,this.connected&&await this.provider.disconnect(),this.events.emit(y$3.transport_closed);}async transportOpen(e){this.relayUrl=e||this.relayUrl,this.transportExplicitlyClosed=!1;try{await Promise.all([new Promise(t=>{this.initialized||t(),this.subscriber.once(I$2.resubscribed,()=>{t();});}),await Promise.race([this.provider.connect(),new Promise((t,i)=>this.once(y$3.transport_closed,()=>{i();}))])]);}catch(t){const i=t;if(!/socket hang up/i.test(i.message))throw new Error(i.message);this.logger.error(i),this.events.emit(y$3.transport_closed);}}async restartTransport(e){await this.transportClose(),await new Promise(t=>setTimeout(t,oe$1)),await this.transportOpen(e);}async createProvider(){const e=await this.core.crypto.signJWT(this.relayUrl);return new JsonRpcProvider(new WsConnection(_n({sdkVersion:tt$1,protocol:this.protocol,version:this.version,relayUrl:this.relayUrl,projectId:this.projectId,auth:e})))}async recordMessageEvent(e){const{topic:t,message:i}=e;await this.messages.set(t,i);}async shouldIgnoreMessageEvent(e){const{topic:t,message:i}=e;return await this.subscriber.isSubscribed(t)?this.messages.has(t,i):!0}async onProviderPayload(e){if(this.logger.debug("Incoming Relay Payload"),this.logger.trace({type:"payload",direction:"incoming",payload:e}),isJsonRpcRequest(e)){if(!e.method.endsWith(et$1))return;const t=e.params,{topic:i,message:s}=t.data,n={topic:i,message:s};this.logger.debug("Emitting Relayer Payload"),this.logger.trace(nr$1({type:"event",event:t.id},n)),this.events.emit(t.id,n),await this.acknowledgePayload(e),await this.onMessageEvent(n);}}async onMessageEvent(e){await this.shouldIgnoreMessageEvent(e)||(this.events.emit(y$3.message,e),await this.recordMessageEvent(e));}async acknowledgePayload(e){const t=formatJsonRpcResult(e.id,!0);await this.provider.connection.send(t);}registerEventListeners(){this.provider.on(M$2.payload,e=>this.onProviderPayload(e)),this.provider.on(M$2.connect,()=>{this.events.emit(y$3.connect);}),this.provider.on(M$2.disconnect,()=>{this.events.emit(y$3.disconnect),this.attemptToReconnect();}),this.provider.on(M$2.error,e=>this.events.emit(y$3.error,e)),this.events.on(y$3.connection_stalled,async()=>{await this.restartTransport();});}attemptToReconnect(){this.transportExplicitlyClosed||setTimeout(async()=>{await this.transportOpen();},cjs$5.toMiliseconds(oe$1));}isInitialized(){if(!this.initialized){const{message:e}=E$1("NOT_INITIALIZED",this.name);throw new Error(e)}}}var ar$1=Object.defineProperty,wt$1=Object.getOwnPropertySymbols,or$1=Object.prototype.hasOwnProperty,hr$1=Object.prototype.propertyIsEnumerable,vt$1=(r,e,t)=>e in r?ar$1(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,It=(r,e)=>{for(var t in e||(e={}))or$1.call(e,t)&&vt$1(r,t,e[t]);if(wt$1)for(var t of wt$1(e))hr$1.call(e,t)&&vt$1(r,t,e[t]);return r};class Ct$1 extends p$3{constructor(e,t,i,s=P$3,n=void 0){super(e,t,i,s),this.core=e,this.logger=t,this.name=i,this.map=new Map,this.version=it$1,this.cached=[],this.initialized=!1,this.storagePrefix=P$3,this.init=async()=>{this.initialized||(this.logger.trace("Initialized"),await this.restore(),this.cached.forEach(a=>{rt$2(a)?this.map.set(a.id,a):ot$2(a)?this.map.set(a.topic,a):this.getKey&&a!==null&&!y$4(a)&&this.map.set(this.getKey(a),a);}),this.cached=[],this.initialized=!0);},this.set=async(a,o)=>{this.isInitialized(),this.map.has(a)?await this.update(a,o):(this.logger.debug("Setting value"),this.logger.trace({type:"method",method:"set",key:a,value:o}),this.map.set(a,o),await this.persist());},this.get=a=>(this.isInitialized(),this.logger.debug("Getting value"),this.logger.trace({type:"method",method:"get",key:a}),this.getData(a)),this.getAll=a=>(this.isInitialized(),a?this.values.filter(o=>Object.keys(a).every(h=>lodash_isequal(o[h],a[h]))):this.values),this.update=async(a,o)=>{this.isInitialized(),this.logger.debug("Updating value"),this.logger.trace({type:"method",method:"update",key:a,update:o});const h=It(It({},this.getData(a)),o);this.map.set(a,h),await this.persist();},this.delete=async(a,o)=>{this.isInitialized(),this.map.has(a)&&(this.logger.debug("Deleting value"),this.logger.trace({type:"method",method:"delete",key:a,reason:o}),this.map.delete(a),await this.persist());},this.logger=cjs$3.generateChildLogger(t,this.name),this.storagePrefix=s,this.getKey=n;}get context(){return cjs$3.getLoggerContext(this.logger)}get storageKey(){return this.storagePrefix+this.version+"//"+this.name}get length(){return this.map.size}get keys(){return Array.from(this.map.keys())}get values(){return Array.from(this.map.values())}async setDataStore(e){await this.core.storage.setItem(this.storageKey,e);}async getDataStore(){return await this.core.storage.getItem(this.storageKey)}getData(e){const t=this.map.get(e);if(!t){const{message:i}=E$1("NO_MATCHING_KEY",`${this.name}: ${e}`);throw this.logger.error(i),new Error(i)}return t}async persist(){await this.setDataStore(this.values);}async restore(){try{const e=await this.getDataStore();if(typeof e>"u"||!e.length)return;if(this.map.size){const{message:t}=E$1("RESTORE_WILL_OVERRIDE",this.name);throw this.logger.error(t),new Error(t)}this.cached=e,this.logger.debug(`Successfully Restored value for ${this.name}`),this.logger.trace({type:"method",method:"restore",value:this.values});}catch(e){this.logger.debug(`Failed to Restore value for ${this.name}`),this.logger.error(e);}}isInitialized(){if(!this.initialized){const{message:e}=E$1("NOT_INITIALIZED",this.name);throw new Error(e)}}}class _t$1{constructor(e,t){this.core=e,this.logger=t,this.name=at$1,this.version=ot$1,this.events=new events,this.initialized=!1,this.storagePrefix=P$3,this.ignoredPayloadTypes=[b$3],this.registeredMethods=[],this.init=async()=>{this.initialized||(await this.pairings.init(),await this.cleanup(),this.registerRelayerEvents(),this.registerExpirerEvents(),this.initialized=!0,this.logger.trace("Initialized"));},this.register=({methods:i})=>{this.isInitialized(),this.registeredMethods=[...new Set([...this.registeredMethods,...i])];},this.create=async()=>{this.isInitialized();const i=fn(),s=await this.core.crypto.setSymKey(i),n=xn(cjs$5.FIVE_MINUTES),a={protocol:Xe$2},o={topic:s,expiry:n,relay:a,active:!1},h=Qn({protocol:this.core.protocol,version:this.core.version,topic:s,symKey:i,relay:a});return await this.pairings.set(s,o),await this.core.relayer.subscribe(s),this.core.expirer.set(s,n),{topic:s,uri:h}},this.pair=async i=>{this.isInitialized(),this.isValidPair(i);const{topic:s,symKey:n,relay:a}=Jn(i.uri),o=xn(cjs$5.FIVE_MINUTES),h={topic:s,relay:a,expiry:o,active:!1};return await this.pairings.set(s,h),await this.core.crypto.setSymKey(n,s),await this.core.relayer.subscribe(s,{relay:a}),this.core.expirer.set(s,o),i.activatePairing&&await this.activate({topic:s}),h},this.activate=async({topic:i})=>{this.isInitialized();const s=xn(cjs$5.THIRTY_DAYS);await this.pairings.update(i,{active:!0,expiry:s}),this.core.expirer.set(i,s);},this.ping=async i=>{this.isInitialized(),await this.isValidPing(i);const{topic:s}=i;if(this.pairings.keys.includes(s)){const n=await this.sendRequest(s,"wc_pairingPing",{}),{done:a,resolve:o,reject:h}=Mn();this.events.once(Hn("pairing_ping",n),({error:l})=>{l?h(l):o();}),await a();}},this.updateExpiry=async({topic:i,expiry:s})=>{this.isInitialized(),await this.pairings.update(i,{expiry:s});},this.updateMetadata=async({topic:i,metadata:s})=>{this.isInitialized(),await this.pairings.update(i,{peerMetadata:s});},this.getPairings=()=>(this.isInitialized(),this.pairings.values),this.disconnect=async i=>{this.isInitialized(),await this.isValidDisconnect(i);const{topic:s}=i;this.pairings.keys.includes(s)&&(await this.sendRequest(s,"wc_pairingDelete",N$2("USER_DISCONNECTED")),await this.deletePairing(s));},this.sendRequest=async(i,s,n)=>{const a=formatJsonRpcRequest(s,n),o=await this.core.crypto.encode(i,a),h=N$1[s].req;return this.core.history.set(i,a),await this.core.relayer.publish(i,o,h),a.id},this.sendResult=async(i,s,n)=>{const a=formatJsonRpcResult(i,n),o=await this.core.crypto.encode(s,a),h=await this.core.history.get(s,i),l=N$1[h.request.method].res;await this.core.relayer.publish(s,o,l),await this.core.history.resolve(a);},this.sendError=async(i,s,n)=>{const a=formatJsonRpcError(i,n),o=await this.core.crypto.encode(s,a),h=await this.core.history.get(s,i),l=N$1[h.request.method]?N$1[h.request.method].res:N$1.unregistered_method.res;await this.core.relayer.publish(s,o,l),await this.core.history.resolve(a);},this.deletePairing=async(i,s)=>{await this.core.relayer.unsubscribe(i),await Promise.all([this.pairings.delete(i,N$2("USER_DISCONNECTED")),this.core.crypto.deleteSymKey(i),s?Promise.resolve():this.core.expirer.del(i)]);},this.cleanup=async()=>{const i=this.pairings.getAll().filter(s=>Vn(s.expiry));await Promise.all(i.map(s=>this.deletePairing(s.topic)));},this.onRelayEventRequest=i=>{const{topic:s,payload:n}=i;switch(n.method){case"wc_pairingPing":return this.onPairingPingRequest(s,n);case"wc_pairingDelete":return this.onPairingDeleteRequest(s,n);default:return this.onUnknownRpcMethodRequest(s,n)}},this.onRelayEventResponse=async i=>{const{topic:s,payload:n}=i,a=(await this.core.history.get(s,n.id)).request.method;switch(a){case"wc_pairingPing":return this.onPairingPingResponse(s,n);default:return this.onUnknownRpcMethodResponse(a)}},this.onPairingPingRequest=async(i,s)=>{const{id:n}=s;try{this.isValidPing({topic:i}),await this.sendResult(n,i,!0),this.events.emit("pairing_ping",{id:n,topic:i});}catch(a){await this.sendError(n,i,a),this.logger.error(a);}},this.onPairingPingResponse=(i,s)=>{const{id:n}=s;setTimeout(()=>{isJsonRpcResult(s)?this.events.emit(Hn("pairing_ping",n),{}):isJsonRpcError(s)&&this.events.emit(Hn("pairing_ping",n),{error:s.error});},500);},this.onPairingDeleteRequest=async(i,s)=>{const{id:n}=s;try{this.isValidDisconnect({topic:i}),await this.sendResult(n,i,!0),await this.deletePairing(i),this.events.emit("pairing_delete",{id:n,topic:i});}catch(a){await this.sendError(n,i,a),this.logger.error(a);}},this.onUnknownRpcMethodRequest=async(i,s)=>{const{id:n,method:a}=s;try{if(this.registeredMethods.includes(a))return;const o=N$2("WC_METHOD_UNSUPPORTED",a);await this.sendError(n,i,o),this.logger.error(o);}catch(o){await this.sendError(n,i,o),this.logger.error(o);}},this.onUnknownRpcMethodResponse=i=>{this.registeredMethods.includes(i)||this.logger.error(N$2("WC_METHOD_UNSUPPORTED",i));},this.isValidPair=i=>{if(!ut$2(i)){const{message:s}=E$1("MISSING_OR_INVALID",`pair() params: ${i}`);throw new Error(s)}if(!tt$2(i.uri)){const{message:s}=E$1("MISSING_OR_INVALID",`pair() uri: ${i.uri}`);throw new Error(s)}},this.isValidPing=async i=>{if(!ut$2(i)){const{message:n}=E$1("MISSING_OR_INVALID",`ping() params: ${i}`);throw new Error(n)}const{topic:s}=i;await this.isValidPairingTopic(s);},this.isValidDisconnect=async i=>{if(!ut$2(i)){const{message:n}=E$1("MISSING_OR_INVALID",`disconnect() params: ${i}`);throw new Error(n)}const{topic:s}=i;await this.isValidPairingTopic(s);},this.isValidPairingTopic=async i=>{if(!d$3(i,!1)){const{message:s}=E$1("MISSING_OR_INVALID",`pairing topic should be a string: ${i}`);throw new Error(s)}if(!this.pairings.keys.includes(i)){const{message:s}=E$1("NO_MATCHING_KEY",`pairing topic doesn't exist: ${i}`);throw new Error(s)}if(Vn(this.pairings.get(i).expiry)){await this.deletePairing(i);const{message:s}=E$1("EXPIRED",`pairing topic: ${i}`);throw new Error(s)}},this.core=e,this.logger=cjs$3.generateChildLogger(t,this.name),this.pairings=new Ct$1(this.core,this.logger,this.name,this.storagePrefix);}get context(){return cjs$3.getLoggerContext(this.logger)}isInitialized(){if(!this.initialized){const{message:e}=E$1("NOT_INITIALIZED",this.name);throw new Error(e)}}registerRelayerEvents(){this.core.relayer.on(y$3.message,async e=>{const{topic:t,message:i}=e;if(this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(i)))return;const s=await this.core.crypto.decode(t,i);isJsonRpcRequest(s)?(this.core.history.set(t,s),this.onRelayEventRequest({topic:t,payload:s})):isJsonRpcResponse(s)&&(await this.core.history.resolve(s),this.onRelayEventResponse({topic:t,payload:s}));});}registerExpirerEvents(){this.core.expirer.on(m$1.expired,async e=>{const{topic:t}=Fn(e.target);t&&this.pairings.keys.includes(t)&&(await this.deletePairing(t,!0),this.events.emit("pairing_expire",{topic:t}));});}}class Rt$1 extends h$4{constructor(e,t){super(e,t),this.core=e,this.logger=t,this.records=new Map,this.events=new events.EventEmitter,this.name=ht$1,this.version=ct$1,this.cached=[],this.initialized=!1,this.storagePrefix=P$3,this.init=async()=>{this.initialized||(this.logger.trace("Initialized"),await this.restore(),this.cached.forEach(i=>this.records.set(i.id,i)),this.cached=[],this.registerEventListeners(),this.initialized=!0);},this.set=(i,s,n)=>{if(this.isInitialized(),this.logger.debug("Setting JSON-RPC request history record"),this.logger.trace({type:"method",method:"set",topic:i,request:s,chainId:n}),this.records.has(s.id))return;const a={id:s.id,topic:i,request:{method:s.method,params:s.params||null},chainId:n};this.records.set(a.id,a),this.events.emit(C$3.created,a);},this.resolve=async i=>{if(this.isInitialized(),this.logger.debug("Updating JSON-RPC response history record"),this.logger.trace({type:"method",method:"update",response:i}),!this.records.has(i.id))return;const s=await this.getRecord(i.id);typeof s.response>"u"&&(s.response=isJsonRpcError(i)?{error:i.error}:{result:i.result},this.records.set(s.id,s),this.events.emit(C$3.updated,s));},this.get=async(i,s)=>(this.isInitialized(),this.logger.debug("Getting record"),this.logger.trace({type:"method",method:"get",topic:i,id:s}),await this.getRecord(s)),this.delete=(i,s)=>{this.isInitialized(),this.logger.debug("Deleting record"),this.logger.trace({type:"method",method:"delete",id:s}),this.values.forEach(n=>{if(n.topic===i){if(typeof s<"u"&&n.id!==s)return;this.records.delete(n.id),this.events.emit(C$3.deleted,n);}});},this.exists=async(i,s)=>(this.isInitialized(),this.records.has(s)?(await this.getRecord(s)).topic===i:!1),this.on=(i,s)=>{this.events.on(i,s);},this.once=(i,s)=>{this.events.once(i,s);},this.off=(i,s)=>{this.events.off(i,s);},this.removeListener=(i,s)=>{this.events.removeListener(i,s);},this.logger=cjs$3.generateChildLogger(t,this.name);}get context(){return cjs$3.getLoggerContext(this.logger)}get storageKey(){return this.storagePrefix+this.version+"//"+this.name}get size(){return this.records.size}get keys(){return Array.from(this.records.keys())}get values(){return Array.from(this.records.values())}get pending(){const e=[];return this.values.forEach(t=>{if(typeof t.response<"u")return;const i={topic:t.topic,request:formatJsonRpcRequest(t.request.method,t.request.params,t.id),chainId:t.chainId};return e.push(i)}),e}async setJsonRpcRecords(e){await this.core.storage.setItem(this.storageKey,e);}async getJsonRpcRecords(){return await this.core.storage.getItem(this.storageKey)}getRecord(e){this.isInitialized();const t=this.records.get(e);if(!t){const{message:i}=E$1("NO_MATCHING_KEY",`${this.name}: ${e}`);throw new Error(i)}return t}async persist(){await this.setJsonRpcRecords(this.values),this.events.emit(C$3.sync);}async restore(){try{const e=await this.getJsonRpcRecords();if(typeof e>"u"||!e.length)return;if(this.records.size){const{message:t}=E$1("RESTORE_WILL_OVERRIDE",this.name);throw this.logger.error(t),new Error(t)}this.cached=e,this.logger.debug(`Successfully Restored records for ${this.name}`),this.logger.trace({type:"method",method:"restore",records:this.values});}catch(e){this.logger.debug(`Failed to Restore records for ${this.name}`),this.logger.error(e);}}registerEventListeners(){this.events.on(C$3.created,e=>{const t=C$3.created;this.logger.info(`Emitting ${t}`),this.logger.debug({type:"event",event:t,record:e}),this.persist();}),this.events.on(C$3.updated,e=>{const t=C$3.updated;this.logger.info(`Emitting ${t}`),this.logger.debug({type:"event",event:t,record:e}),this.persist();}),this.events.on(C$3.deleted,e=>{const t=C$3.deleted;this.logger.info(`Emitting ${t}`),this.logger.debug({type:"event",event:t,record:e}),this.persist();});}isInitialized(){if(!this.initialized){const{message:e}=E$1("NOT_INITIALIZED",this.name);throw new Error(e)}}}class St$1 extends E$2{constructor(e,t){super(e,t),this.core=e,this.logger=t,this.expirations=new Map,this.events=new events.EventEmitter,this.name=ut$1,this.version=lt$1,this.cached=[],this.initialized=!1,this.storagePrefix=P$3,this.init=async()=>{this.initialized||(this.logger.trace("Initialized"),await this.restore(),this.cached.forEach(i=>this.expirations.set(i.target,i)),this.cached=[],this.registerEventListeners(),this.initialized=!0);},this.has=i=>{try{const s=this.formatTarget(i);return typeof this.getExpiration(s)<"u"}catch{return !1}},this.set=(i,s)=>{this.isInitialized();const n=this.formatTarget(i),a={target:n,expiry:s};this.expirations.set(n,a),this.checkExpiry(n,a),this.events.emit(m$1.created,{target:n,expiration:a});},this.get=i=>{this.isInitialized();const s=this.formatTarget(i);return this.getExpiration(s)},this.del=i=>{this.isInitialized();const s=this.formatTarget(i);if(this.has(s)){const n=this.getExpiration(s);this.expirations.delete(s),this.events.emit(m$1.deleted,{target:s,expiration:n});}},this.on=(i,s)=>{this.events.on(i,s);},this.once=(i,s)=>{this.events.once(i,s);},this.off=(i,s)=>{this.events.off(i,s);},this.removeListener=(i,s)=>{this.events.removeListener(i,s);},this.logger=cjs$3.generateChildLogger(t,this.name);}get context(){return cjs$3.getLoggerContext(this.logger)}get storageKey(){return this.storagePrefix+this.version+"//"+this.name}get length(){return this.expirations.size}get keys(){return Array.from(this.expirations.keys())}get values(){return Array.from(this.expirations.values())}formatTarget(e){if(typeof e=="string")return kn(e);if(typeof e=="number")return Ln(e);const{message:t}=E$1("UNKNOWN_TYPE",`Target type: ${typeof e}`);throw new Error(t)}async setExpirations(e){await this.core.storage.setItem(this.storageKey,e);}async getExpirations(){return await this.core.storage.getItem(this.storageKey)}async persist(){await this.setExpirations(this.values),this.events.emit(m$1.sync);}async restore(){try{const e=await this.getExpirations();if(typeof e>"u"||!e.length)return;if(this.expirations.size){const{message:t}=E$1("RESTORE_WILL_OVERRIDE",this.name);throw this.logger.error(t),new Error(t)}this.cached=e,this.logger.debug(`Successfully Restored expirations for ${this.name}`),this.logger.trace({type:"method",method:"restore",expirations:this.values});}catch(e){this.logger.debug(`Failed to Restore expirations for ${this.name}`),this.logger.error(e);}}getExpiration(e){const t=this.expirations.get(e);if(!t){const{message:i}=E$1("NO_MATCHING_KEY",`${this.name}: ${e}`);throw this.logger.error(i),new Error(i)}return t}checkExpiry(e,t){const{expiry:i}=t;cjs$5.toMiliseconds(i)-Date.now()<=0&&this.expire(e,t);}expire(e,t){this.expirations.delete(e),this.events.emit(m$1.expired,{target:e,expiration:t});}checkExpirations(){this.expirations.forEach((e,t)=>this.checkExpiry(t,e));}registerEventListeners(){this.core.heartbeat.on(cjs$4.HEARTBEAT_EVENTS.pulse,()=>this.checkExpirations()),this.events.on(m$1.created,e=>{const t=m$1.created;this.logger.info(`Emitting ${t}`),this.logger.debug({type:"event",event:t,data:e}),this.persist();}),this.events.on(m$1.expired,e=>{const t=m$1.expired;this.logger.info(`Emitting ${t}`),this.logger.debug({type:"event",event:t,data:e}),this.persist();}),this.events.on(m$1.deleted,e=>{const t=m$1.deleted;this.logger.info(`Emitting ${t}`),this.logger.debug({type:"event",event:t,data:e}),this.persist();});}isInitialized(){if(!this.initialized){const{message:e}=E$1("NOT_INITIALIZED",this.name);throw new Error(e)}}}var cr$1=Object.defineProperty,Tt$1=Object.getOwnPropertySymbols,ur$1=Object.prototype.hasOwnProperty,lr$1=Object.prototype.propertyIsEnumerable,Pt$1=(r,e,t)=>e in r?cr$1(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,xt$1=(r,e)=>{for(var t in e||(e={}))ur$1.call(e,t)&&Pt$1(r,t,e[t]);if(Tt$1)for(var t of Tt$1(e))lr$1.call(e,t)&&Pt$1(r,t,e[t]);return r};class V$1 extends n$6{constructor(e){super(e),this.protocol=ne$1,this.version=Ke$1,this.name=B$1,this.events=new events.EventEmitter,this.initialized=!1,this.on=(i,s)=>this.events.on(i,s),this.once=(i,s)=>this.events.once(i,s),this.off=(i,s)=>this.events.off(i,s),this.removeListener=(i,s)=>this.events.removeListener(i,s),this.projectId=e?.projectId;const t=typeof e?.logger<"u"&&typeof e?.logger!="string"?e.logger:browser$3(cjs$3.getDefaultLoggerOptions({level:e?.logger||$e$1.logger}));this.logger=cjs$3.generateChildLogger(t,this.name),this.heartbeat=new cjs$4.HeartBeat,this.crypto=new gt$1(this,this.logger,e?.keychain),this.history=new Rt$1(this,this.logger),this.expirer=new St$1(this,this.logger),this.storage=e!=null&&e.storage?e.storage:new At$1(xt$1(xt$1({},ke$2),e?.storageOptions)),this.relayer=new ft$1({core:this,logger:this.logger,relayUrl:e?.relayUrl,projectId:this.projectId}),this.pairing=new _t$1(this,this.logger);}static async init(e){const t=new V$1(e);return await t.initialize(),t}get context(){return cjs$3.getLoggerContext(this.logger)}async start(){this.initialized||await this.initialize();}async initialize(){this.logger.trace("Initialized");try{await this.crypto.init(),await this.history.init(),await this.expirer.init(),await this.relayer.init(),await this.heartbeat.init(),await this.pairing.init(),this.initialized=!0,this.logger.info("Core Initilization Success");}catch(e){throw this.logger.warn(`Core Initilization Failure at epoch ${Date.now()}`,e),this.logger.error(e.message),e}}}const dr$1=V$1;

    const M$1="wc",K$1=2,U$2="client",A$2=`${M$1}@${K$1}:${U$2}:`,C$2={name:U$2,logger:"error",controller:!1,relayUrl:"wss://relay.walletconnect.com"},F$1="proposal",Q$1="session",T$1=cjs$5.SEVEN_DAYS,Z$2="engine",P$2={wc_sessionPropose:{req:{ttl:cjs$5.FIVE_MINUTES,prompt:!0,tag:1100},res:{ttl:cjs$5.FIVE_MINUTES,prompt:!1,tag:1101}},wc_sessionSettle:{req:{ttl:cjs$5.FIVE_MINUTES,prompt:!1,tag:1102},res:{ttl:cjs$5.FIVE_MINUTES,prompt:!1,tag:1103}},wc_sessionUpdate:{req:{ttl:cjs$5.ONE_DAY,prompt:!1,tag:1104},res:{ttl:cjs$5.ONE_DAY,prompt:!1,tag:1105}},wc_sessionExtend:{req:{ttl:cjs$5.ONE_DAY,prompt:!1,tag:1106},res:{ttl:cjs$5.ONE_DAY,prompt:!1,tag:1107}},wc_sessionRequest:{req:{ttl:cjs$5.FIVE_MINUTES,prompt:!0,tag:1108},res:{ttl:cjs$5.FIVE_MINUTES,prompt:!1,tag:1109}},wc_sessionEvent:{req:{ttl:cjs$5.FIVE_MINUTES,prompt:!0,tag:1110},res:{ttl:cjs$5.FIVE_MINUTES,prompt:!1,tag:1111}},wc_sessionDelete:{req:{ttl:cjs$5.ONE_DAY,prompt:!1,tag:1112},res:{ttl:cjs$5.ONE_DAY,prompt:!1,tag:1113}},wc_sessionPing:{req:{ttl:cjs$5.THIRTY_SECONDS,prompt:!1,tag:1114},res:{ttl:cjs$5.THIRTY_SECONDS,prompt:!1,tag:1115}}},B="request";var ze$1=Object.defineProperty,je$1=Object.defineProperties,ke$1=Object.getOwnPropertyDescriptors,W$1=Object.getOwnPropertySymbols,Ye$1=Object.prototype.hasOwnProperty,Xe$1=Object.prototype.propertyIsEnumerable,ee=(d,n,e)=>n in d?ze$1(d,n,{enumerable:!0,configurable:!0,writable:!0,value:e}):d[n]=e,y$2=(d,n)=>{for(var e in n||(n={}))Ye$1.call(n,e)&&ee(d,e,n[e]);if(W$1)for(var e of W$1(n))Xe$1.call(n,e)&&ee(d,e,n[e]);return d},z$2=(d,n)=>je$1(d,ke$1(n));class Je$1 extends C$5{constructor(n){super(n),this.name=Z$2,this.events=new events,this.initialized=!1,this.ignoredPayloadTypes=[b$3],this.init=async()=>{this.initialized||(await this.cleanup(),this.registerRelayerEvents(),this.registerExpirerEvents(),this.client.core.pairing.register({methods:Object.keys(P$2)}),this.initialized=!0);},this.connect=async e=>{this.isInitialized(),await this.isValidConnect(e);const{pairingTopic:s,requiredNamespaces:t,relays:i}=e;let r=s,o,c=!1;if(r&&(c=this.client.core.pairing.pairings.get(r).active),!r||!c){const{topic:S,uri:g}=await this.client.core.pairing.create();r=S,o=g;}const l=await this.client.core.crypto.generateKeyPair(),h={requiredNamespaces:t,relays:i??[{protocol:Xe$2}],proposer:{publicKey:l,metadata:this.client.metadata}},{reject:E,resolve:u,done:V}=Mn();if(this.events.once(Hn("session_connect"),async({error:S,session:g})=>{if(S)E(S);else if(g){g.self.publicKey=l;const O=z$2(y$2({},g),{requiredNamespaces:g.requiredNamespaces});await this.client.session.set(g.topic,O),await this.setExpiry(g.topic,g.expiry),r&&await this.client.core.pairing.updateMetadata({topic:r,metadata:g.peer.metadata}),u(O);}}),!r){const{message:S}=E$1("NO_MATCHING_KEY",`connect() pairing topic: ${r}`);throw new Error(S)}const x=await this.sendRequest(r,"wc_sessionPropose",h),b=xn(cjs$5.FIVE_MINUTES);return await this.setProposal(x,y$2({id:x,expiry:b},h)),{uri:o,approval:V}},this.pair=async e=>(this.isInitialized(),await this.client.core.pairing.pair(e)),this.approve=async e=>{this.isInitialized(),await this.isValidApprove(e);const{id:s,relayProtocol:t,namespaces:i}=e,r=this.client.proposal.get(s);let{pairingTopic:o,proposer:c,requiredNamespaces:l}=r;W$2(l)||(l=Zn(i,"approve()"),this.client.proposal.set(s,z$2(y$2({},r),{requiredNamespaces:l})));const h=await this.client.core.crypto.generateKeyPair(),E=c.publicKey,u=await this.client.core.crypto.generateSharedKey(h,E),V={relay:{protocol:t??"irn"},namespaces:i,requiredNamespaces:l,controller:{publicKey:h,metadata:this.client.metadata},expiry:xn(T$1)};await this.client.core.relayer.subscribe(u);const x=await this.sendRequest(u,"wc_sessionSettle",V),{done:b,resolve:S,reject:g}=Mn();this.events.once(Hn("session_approve",x),({error:j})=>{j?g(j):S(this.client.session.get(u));});const O=z$2(y$2({},V),{topic:u,acknowledged:!1,self:V.controller,peer:{publicKey:c.publicKey,metadata:c.metadata},controller:h});return await this.client.session.set(u,O),await this.setExpiry(u,xn(T$1)),o&&await this.client.core.pairing.updateMetadata({topic:o,metadata:O.peer.metadata}),o&&s&&(await this.sendResult(s,o,{relay:{protocol:t??"irn"},responderPublicKey:h}),await this.client.proposal.delete(s,N$2("USER_DISCONNECTED")),await this.client.core.pairing.activate({topic:o})),{topic:u,acknowledged:b}},this.reject=async e=>{this.isInitialized(),await this.isValidReject(e);const{id:s,reason:t}=e,{pairingTopic:i}=this.client.proposal.get(s);i&&(await this.sendError(s,i,t),await this.client.proposal.delete(s,N$2("USER_DISCONNECTED")));},this.update=async e=>{this.isInitialized(),await this.isValidUpdate(e);const{topic:s,namespaces:t}=e,i=await this.sendRequest(s,"wc_sessionUpdate",{namespaces:t}),{done:r,resolve:o,reject:c}=Mn();return this.events.once(Hn("session_update",i),({error:l})=>{l?c(l):o();}),await this.client.session.update(s,{namespaces:t}),{acknowledged:r}},this.extend=async e=>{this.isInitialized(),await this.isValidExtend(e);const{topic:s}=e,t=await this.sendRequest(s,"wc_sessionExtend",{}),{done:i,resolve:r,reject:o}=Mn();return this.events.once(Hn("session_extend",t),({error:c})=>{c?o(c):r();}),await this.setExpiry(s,xn(T$1)),{acknowledged:i}},this.request=async e=>{this.isInitialized(),await this.isValidRequest(e);const{chainId:s,request:t,topic:i}=e,r=await this.sendRequest(i,"wc_sessionRequest",{request:t,chainId:s}),{done:o,resolve:c,reject:l}=Mn();return this.events.once(Hn("session_request",r),({error:h,result:E})=>{h?l(h):c(E);}),await o()},this.respond=async e=>{this.isInitialized(),await this.isValidRespond(e);const{topic:s,response:t}=e,{id:i}=t;isJsonRpcResult(t)?await this.sendResult(i,s,t.result):isJsonRpcError(t)&&await this.sendError(i,s,t.error),this.deletePendingSessionRequest(e.response.id,{message:"fulfilled",code:0});},this.ping=async e=>{this.isInitialized(),await this.isValidPing(e);const{topic:s}=e;if(this.client.session.keys.includes(s)){const t=await this.sendRequest(s,"wc_sessionPing",{}),{done:i,resolve:r,reject:o}=Mn();this.events.once(Hn("session_ping",t),({error:c})=>{c?o(c):r();}),await i();}else this.client.core.pairing.pairings.keys.includes(s)&&await this.client.core.pairing.ping({topic:s});},this.emit=async e=>{this.isInitialized(),await this.isValidEmit(e);const{topic:s,event:t,chainId:i}=e;await this.sendRequest(s,"wc_sessionEvent",{event:t,chainId:i});},this.disconnect=async e=>{this.isInitialized(),await this.isValidDisconnect(e);const{topic:s}=e;this.client.session.keys.includes(s)?(await this.sendRequest(s,"wc_sessionDelete",N$2("USER_DISCONNECTED")),await this.deleteSession(s)):await this.client.core.pairing.disconnect({topic:s});},this.find=e=>(this.isInitialized(),this.client.session.getAll().filter(s=>nt$2(s,e))),this.getPendingSessionRequests=()=>(this.isInitialized(),this.client.pendingRequest.getAll()),this.deleteSession=async(e,s)=>{const{self:t}=this.client.session.get(e);await this.client.core.relayer.unsubscribe(e),await Promise.all([this.client.session.delete(e,N$2("USER_DISCONNECTED")),this.client.core.crypto.deleteKeyPair(t.publicKey),this.client.core.crypto.deleteSymKey(e),s?Promise.resolve():this.client.core.expirer.del(e)]);},this.deleteProposal=async(e,s)=>{await Promise.all([this.client.proposal.delete(e,N$2("USER_DISCONNECTED")),s?Promise.resolve():this.client.core.expirer.del(e)]);},this.deletePendingSessionRequest=async(e,s,t=!1)=>{await Promise.all([this.client.pendingRequest.delete(e,s),t?Promise.resolve():this.client.core.expirer.del(e)]);},this.setExpiry=async(e,s)=>{this.client.session.keys.includes(e)&&await this.client.session.update(e,{expiry:s}),this.client.core.expirer.set(e,s);},this.setProposal=async(e,s)=>{await this.client.proposal.set(e,s),this.client.core.expirer.set(e,s.expiry);},this.setPendingSessionRequest=async e=>{const s=P$2.wc_sessionRequest.req.ttl,{id:t,topic:i,params:r}=e;await this.client.pendingRequest.set(t,{id:t,topic:i,params:r}),s&&this.client.core.expirer.set(t,s);},this.sendRequest=async(e,s,t)=>{const i=formatJsonRpcRequest(s,t),r=await this.client.core.crypto.encode(e,i),o=P$2[s].req;return this.client.core.history.set(e,i),this.client.core.relayer.publish(e,r,o),i.id},this.sendResult=async(e,s,t)=>{const i=formatJsonRpcResult(e,t),r=await this.client.core.crypto.encode(s,i),o=await this.client.core.history.get(s,e),c=P$2[o.request.method].res;this.client.core.relayer.publish(s,r,c),await this.client.core.history.resolve(i);},this.sendError=async(e,s,t)=>{const i=formatJsonRpcError(e,t),r=await this.client.core.crypto.encode(s,i),o=await this.client.core.history.get(s,e),c=P$2[o.request.method].res;this.client.core.relayer.publish(s,r,c),await this.client.core.history.resolve(i);},this.cleanup=async()=>{const e=[],s=[];this.client.session.getAll().forEach(t=>{Vn(t.expiry)&&e.push(t.topic);}),this.client.proposal.getAll().forEach(t=>{Vn(t.expiry)&&s.push(t.id);}),await Promise.all([...e.map(t=>this.deleteSession(t)),...s.map(t=>this.deleteProposal(t))]);},this.onRelayEventRequest=e=>{const{topic:s,payload:t}=e,i=t.method;switch(i){case"wc_sessionPropose":return this.onSessionProposeRequest(s,t);case"wc_sessionSettle":return this.onSessionSettleRequest(s,t);case"wc_sessionUpdate":return this.onSessionUpdateRequest(s,t);case"wc_sessionExtend":return this.onSessionExtendRequest(s,t);case"wc_sessionPing":return this.onSessionPingRequest(s,t);case"wc_sessionDelete":return this.onSessionDeleteRequest(s,t);case"wc_sessionRequest":return this.onSessionRequest(s,t);case"wc_sessionEvent":return this.onSessionEventRequest(s,t);default:return this.client.logger.info(`Unsupported request method ${i}`)}},this.onRelayEventResponse=async e=>{const{topic:s,payload:t}=e,i=(await this.client.core.history.get(s,t.id)).request.method;switch(i){case"wc_sessionPropose":return this.onSessionProposeResponse(s,t);case"wc_sessionSettle":return this.onSessionSettleResponse(s,t);case"wc_sessionUpdate":return this.onSessionUpdateResponse(s,t);case"wc_sessionExtend":return this.onSessionExtendResponse(s,t);case"wc_sessionPing":return this.onSessionPingResponse(s,t);case"wc_sessionRequest":return this.onSessionRequestResponse(s,t);default:return this.client.logger.info(`Unsupported response method ${i}`)}},this.onSessionProposeRequest=async(e,s)=>{const{params:t,id:i}=s;try{this.isValidConnect(y$2({},s.params));const r=xn(cjs$5.FIVE_MINUTES),o=y$2({id:i,pairingTopic:e,expiry:r},t);await this.setProposal(i,o),this.client.events.emit("session_proposal",{id:i,params:o});}catch(r){await this.sendError(i,e,r),this.client.logger.error(r);}},this.onSessionProposeResponse=async(e,s)=>{const{id:t}=s;if(isJsonRpcResult(s)){const{result:i}=s;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",result:i});const r=this.client.proposal.get(t);this.client.logger.trace({type:"method",method:"onSessionProposeResponse",proposal:r});const o=r.proposer.publicKey;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",selfPublicKey:o});const c=i.responderPublicKey;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",peerPublicKey:c});const l=await this.client.core.crypto.generateSharedKey(o,c);this.client.logger.trace({type:"method",method:"onSessionProposeResponse",sessionTopic:l});const h=await this.client.core.relayer.subscribe(l);this.client.logger.trace({type:"method",method:"onSessionProposeResponse",subscriptionId:h}),await this.client.core.pairing.activate({topic:e});}else isJsonRpcError(s)&&(await this.client.proposal.delete(t,N$2("USER_DISCONNECTED")),this.events.emit(Hn("session_connect"),{error:s.error}));},this.onSessionSettleRequest=async(e,s)=>{const{id:t,params:i}=s;try{this.isValidSessionSettleRequest(i);const{relay:r,controller:o,expiry:c,namespaces:l,requiredNamespaces:h}=s.params,E={topic:e,relay:r,expiry:c,namespaces:l,acknowledged:!0,requiredNamespaces:h,controller:o.publicKey,self:{publicKey:"",metadata:this.client.metadata},peer:{publicKey:o.publicKey,metadata:o.metadata}};await this.sendResult(s.id,e,!0),this.events.emit(Hn("session_connect"),{session:E});}catch(r){await this.sendError(t,e,r),this.client.logger.error(r);}},this.onSessionSettleResponse=async(e,s)=>{const{id:t}=s;isJsonRpcResult(s)?(await this.client.session.update(e,{acknowledged:!0}),this.events.emit(Hn("session_approve",t),{})):isJsonRpcError(s)&&(await this.client.session.delete(e,N$2("USER_DISCONNECTED")),this.events.emit(Hn("session_approve",t),{error:s.error}));},this.onSessionUpdateRequest=async(e,s)=>{const{params:t,id:i}=s;try{this.isValidUpdate(y$2({topic:e},t)),await this.client.session.update(e,{namespaces:t.namespaces}),await this.sendResult(i,e,!0),this.client.events.emit("session_update",{id:i,topic:e,params:t});}catch(r){await this.sendError(i,e,r),this.client.logger.error(r);}},this.onSessionUpdateResponse=(e,s)=>{const{id:t}=s;isJsonRpcResult(s)?this.events.emit(Hn("session_update",t),{}):isJsonRpcError(s)&&this.events.emit(Hn("session_update",t),{error:s.error});},this.onSessionExtendRequest=async(e,s)=>{const{id:t}=s;try{this.isValidExtend({topic:e}),await this.setExpiry(e,xn(T$1)),await this.sendResult(t,e,!0),this.client.events.emit("session_extend",{id:t,topic:e});}catch(i){await this.sendError(t,e,i),this.client.logger.error(i);}},this.onSessionExtendResponse=(e,s)=>{const{id:t}=s;isJsonRpcResult(s)?this.events.emit(Hn("session_extend",t),{}):isJsonRpcError(s)&&this.events.emit(Hn("session_extend",t),{error:s.error});},this.onSessionPingRequest=async(e,s)=>{const{id:t}=s;try{this.isValidPing({topic:e}),await this.sendResult(t,e,!0),this.client.events.emit("session_ping",{id:t,topic:e});}catch(i){await this.sendError(t,e,i),this.client.logger.error(i);}},this.onSessionPingResponse=(e,s)=>{const{id:t}=s;setTimeout(()=>{isJsonRpcResult(s)?this.events.emit(Hn("session_ping",t),{}):isJsonRpcError(s)&&this.events.emit(Hn("session_ping",t),{error:s.error});},500);},this.onSessionDeleteRequest=async(e,s)=>{const{id:t}=s;try{this.isValidDisconnect({topic:e,reason:s.params}),await this.sendResult(t,e,!0),await this.deleteSession(e),this.client.events.emit("session_delete",{id:t,topic:e});}catch(i){await this.sendError(t,e,i),this.client.logger.error(i);}},this.onSessionRequest=async(e,s)=>{const{id:t,params:i}=s;try{this.isValidRequest(y$2({topic:e},i)),await this.setPendingSessionRequest({id:t,topic:e,params:i}),this.client.events.emit("session_request",{id:t,topic:e,params:i});}catch(r){await this.sendError(t,e,r),this.client.logger.error(r);}},this.onSessionRequestResponse=(e,s)=>{const{id:t}=s;isJsonRpcResult(s)?this.events.emit(Hn("session_request",t),{result:s.result}):isJsonRpcError(s)&&this.events.emit(Hn("session_request",t),{error:s.error});},this.onSessionEventRequest=async(e,s)=>{const{id:t,params:i}=s;try{this.isValidEmit(y$2({topic:e},i)),this.client.events.emit("session_event",{id:t,topic:e,params:i});}catch(r){await this.sendError(t,e,r),this.client.logger.error(r);}},this.isValidConnect=async e=>{if(!ut$2(e)){const{message:o}=E$1("MISSING_OR_INVALID",`connect() params: ${JSON.stringify(e)}`);throw new Error(o)}const{pairingTopic:s,requiredNamespaces:t,relays:i}=e;if(y$4(s)||await this.isValidPairingTopic(s),!y$4(t)&&W$2(t)===0)return;const r=it$2(t,"connect()");if(r)throw new Error(r.message);if(!ct$2(i,!0)){const{message:o}=E$1("MISSING_OR_INVALID",`connect() relays: ${i}`);throw new Error(o)}},this.isValidApprove=async e=>{if(!ut$2(e))throw new Error(E$1("MISSING_OR_INVALID",`approve() params: ${e}`).message);const{id:s,namespaces:t,relayProtocol:i}=e;await this.isValidProposalId(s);const r=this.client.proposal.get(s),o=Be$2(t,"approve()");if(o)throw new Error(o.message);const c=ht$2(r.requiredNamespaces,t,"update()");if(c)throw new Error(c.message);if(!d$3(i,!0)){const{message:l}=E$1("MISSING_OR_INVALID",`approve() relayProtocol: ${i}`);throw new Error(l)}},this.isValidReject=async e=>{if(!ut$2(e)){const{message:i}=E$1("MISSING_OR_INVALID",`reject() params: ${e}`);throw new Error(i)}const{id:s,reason:t}=e;if(await this.isValidProposalId(s),!dt$2(t)){const{message:i}=E$1("MISSING_OR_INVALID",`reject() reason: ${JSON.stringify(t)}`);throw new Error(i)}},this.isValidSessionSettleRequest=e=>{if(!ut$2(e)){const{message:l}=E$1("MISSING_OR_INVALID",`onSessionSettleRequest() params: ${e}`);throw new Error(l)}const{relay:s,controller:t,namespaces:i,expiry:r}=e;if(!ze$3(s)){const{message:l}=E$1("MISSING_OR_INVALID","onSessionSettleRequest() relay protocol should be a string");throw new Error(l)}const o=st$2(t,"onSessionSettleRequest()");if(o)throw new Error(o.message);const c=Be$2(i,"onSessionSettleRequest()");if(c)throw new Error(c.message);if(Vn(r)){const{message:l}=E$1("EXPIRED","onSessionSettleRequest()");throw new Error(l)}},this.isValidUpdate=async e=>{if(!ut$2(e)){const{message:c}=E$1("MISSING_OR_INVALID",`update() params: ${e}`);throw new Error(c)}const{topic:s,namespaces:t}=e;await this.isValidSessionTopic(s);const i=this.client.session.get(s),r=Be$2(t,"update()");if(r)throw new Error(r.message);const o=ht$2(i.requiredNamespaces,t,"update()");if(o)throw new Error(o.message)},this.isValidExtend=async e=>{if(!ut$2(e)){const{message:t}=E$1("MISSING_OR_INVALID",`extend() params: ${e}`);throw new Error(t)}const{topic:s}=e;await this.isValidSessionTopic(s);},this.isValidRequest=async e=>{if(!ut$2(e)){const{message:o}=E$1("MISSING_OR_INVALID",`request() params: ${e}`);throw new Error(o)}const{topic:s,request:t,chainId:i}=e;await this.isValidSessionTopic(s);const{namespaces:r}=this.client.session.get(s);if(!mt$2(r,i)){const{message:o}=E$1("MISSING_OR_INVALID",`request() chainId: ${i}`);throw new Error(o)}if(!lt$2(t)){const{message:o}=E$1("MISSING_OR_INVALID",`request() ${JSON.stringify(t)}`);throw new Error(o)}if(!Et$2(r,i,t.method)){const{message:o}=E$1("MISSING_OR_INVALID",`request() method: ${t.method}`);throw new Error(o)}},this.isValidRespond=async e=>{if(!ut$2(e)){const{message:i}=E$1("MISSING_OR_INVALID",`respond() params: ${e}`);throw new Error(i)}const{topic:s,response:t}=e;if(await this.isValidSessionTopic(s),!ft$2(t)){const{message:i}=E$1("MISSING_OR_INVALID",`respond() response: ${JSON.stringify(t)}`);throw new Error(i)}},this.isValidPing=async e=>{if(!ut$2(e)){const{message:t}=E$1("MISSING_OR_INVALID",`ping() params: ${e}`);throw new Error(t)}const{topic:s}=e;await this.isValidSessionOrPairingTopic(s);},this.isValidEmit=async e=>{if(!ut$2(e)){const{message:o}=E$1("MISSING_OR_INVALID",`emit() params: ${e}`);throw new Error(o)}const{topic:s,event:t,chainId:i}=e;await this.isValidSessionTopic(s);const{namespaces:r}=this.client.session.get(s);if(!mt$2(r,i)){const{message:o}=E$1("MISSING_OR_INVALID",`emit() chainId: ${i}`);throw new Error(o)}if(!pt$2(t)){const{message:o}=E$1("MISSING_OR_INVALID",`emit() event: ${JSON.stringify(t)}`);throw new Error(o)}if(!yt$2(r,i,t.name)){const{message:o}=E$1("MISSING_OR_INVALID",`emit() event: ${JSON.stringify(t)}`);throw new Error(o)}},this.isValidDisconnect=async e=>{if(!ut$2(e)){const{message:t}=E$1("MISSING_OR_INVALID",`disconnect() params: ${e}`);throw new Error(t)}const{topic:s}=e;await this.isValidSessionOrPairingTopic(s);};}isInitialized(){if(!this.initialized){const{message:n}=E$1("NOT_INITIALIZED",this.name);throw new Error(n)}}registerRelayerEvents(){this.client.core.relayer.on(y$3.message,async n=>{const{topic:e,message:s}=n;if(this.ignoredPayloadTypes.includes(this.client.core.crypto.getPayloadType(s)))return;const t=await this.client.core.crypto.decode(e,s);isJsonRpcRequest(t)?(this.client.core.history.set(e,t),this.onRelayEventRequest({topic:e,payload:t})):isJsonRpcResponse(t)&&(await this.client.core.history.resolve(t),this.onRelayEventResponse({topic:e,payload:t}));});}registerExpirerEvents(){this.client.core.expirer.on(m$1.expired,async n=>{const{topic:e,id:s}=Fn(n.target);if(s&&this.getPendingSessionRequests()[s])return await this.deletePendingSessionRequest(s,E$1("EXPIRED"),!0);e?this.client.session.keys.includes(e)&&(await this.deleteSession(e,!0),this.client.events.emit("session_expire",{topic:e})):s&&await this.deleteProposal(s,!0);});}isValidPairingTopic(n){if(!d$3(n,!1)){const{message:e}=E$1("MISSING_OR_INVALID",`pairing topic should be a string: ${n}`);throw new Error(e)}if(!this.client.core.pairing.pairings.keys.includes(n)){const{message:e}=E$1("NO_MATCHING_KEY",`pairing topic doesn't exist: ${n}`);throw new Error(e)}if(Vn(this.client.core.pairing.pairings.get(n).expiry)){const{message:e}=E$1("EXPIRED",`pairing topic: ${n}`);throw new Error(e)}}async isValidSessionTopic(n){if(!d$3(n,!1)){const{message:e}=E$1("MISSING_OR_INVALID",`session topic should be a string: ${n}`);throw new Error(e)}if(!this.client.session.keys.includes(n)){const{message:e}=E$1("NO_MATCHING_KEY",`session topic doesn't exist: ${n}`);throw new Error(e)}if(Vn(this.client.session.get(n).expiry)){await this.deleteSession(n);const{message:e}=E$1("EXPIRED",`session topic: ${n}`);throw new Error(e)}}async isValidSessionOrPairingTopic(n){if(this.client.session.keys.includes(n))await this.isValidSessionTopic(n);else if(this.client.core.pairing.pairings.keys.includes(n))this.isValidPairingTopic(n);else if(d$3(n,!1)){const{message:e}=E$1("NO_MATCHING_KEY",`session or pairing topic doesn't exist: ${n}`);throw new Error(e)}else {const{message:e}=E$1("MISSING_OR_INVALID",`session or pairing topic should be a string: ${n}`);throw new Error(e)}}async isValidProposalId(n){if(!at$2(n)){const{message:e}=E$1("MISSING_OR_INVALID",`proposal id should be a number: ${n}`);throw new Error(e)}if(!this.client.proposal.keys.includes(n)){const{message:e}=E$1("NO_MATCHING_KEY",`proposal id doesn't exist: ${n}`);throw new Error(e)}if(Vn(this.client.proposal.get(n).expiry)){await this.deleteProposal(n);const{message:e}=E$1("EXPIRED",`proposal id: ${n}`);throw new Error(e)}}}class He$1 extends Ct$1{constructor(n,e){super(n,e,F$1,A$2),this.core=n,this.logger=e;}}class Fe$1 extends Ct$1{constructor(n,e){super(n,e,Q$1,A$2),this.core=n,this.logger=e;}}class Qe$1 extends Ct$1{constructor(n,e){super(n,e,B,A$2),this.core=n,this.logger=e;}}class L$1 extends y$5{constructor(n){super(n),this.protocol=M$1,this.version=K$1,this.name=C$2.name,this.events=new events.EventEmitter,this.on=(s,t)=>this.events.on(s,t),this.once=(s,t)=>this.events.once(s,t),this.off=(s,t)=>this.events.off(s,t),this.removeListener=(s,t)=>this.events.removeListener(s,t),this.removeAllListeners=s=>this.events.removeAllListeners(s),this.connect=async s=>{try{return await this.engine.connect(s)}catch(t){throw this.logger.error(t.message),t}},this.pair=async s=>{try{return await this.engine.pair(s)}catch(t){throw this.logger.error(t.message),t}},this.approve=async s=>{try{return await this.engine.approve(s)}catch(t){throw this.logger.error(t.message),t}},this.reject=async s=>{try{return await this.engine.reject(s)}catch(t){throw this.logger.error(t.message),t}},this.update=async s=>{try{return await this.engine.update(s)}catch(t){throw this.logger.error(t.message),t}},this.extend=async s=>{try{return await this.engine.extend(s)}catch(t){throw this.logger.error(t.message),t}},this.request=async s=>{try{return await this.engine.request(s)}catch(t){throw this.logger.error(t.message),t}},this.respond=async s=>{try{return await this.engine.respond(s)}catch(t){throw this.logger.error(t.message),t}},this.ping=async s=>{try{return await this.engine.ping(s)}catch(t){throw this.logger.error(t.message),t}},this.emit=async s=>{try{return await this.engine.emit(s)}catch(t){throw this.logger.error(t.message),t}},this.disconnect=async s=>{try{return await this.engine.disconnect(s)}catch(t){throw this.logger.error(t.message),t}},this.find=s=>{try{return this.engine.find(s)}catch(t){throw this.logger.error(t.message),t}},this.getPendingSessionRequests=()=>{try{return this.engine.getPendingSessionRequests()}catch(s){throw this.logger.error(s.message),s}},this.name=n?.name||C$2.name,this.metadata=n?.metadata||Pn();const e=typeof n?.logger<"u"&&typeof n?.logger!="string"?n.logger:browser$3(cjs$3.getDefaultLoggerOptions({level:n?.logger||C$2.logger}));this.core=n?.core||new dr$1(n),this.logger=cjs$3.generateChildLogger(e,this.name),this.session=new Fe$1(this.core,this.logger),this.proposal=new He$1(this.core,this.logger),this.pendingRequest=new Qe$1(this.core,this.logger),this.engine=new Je$1(this);}static async init(n){const e=new L$1(n);return await e.initialize(),e}get context(){return cjs$3.getLoggerContext(this.logger)}get pairing(){return this.core.pairing.pairings}async initialize(){this.logger.trace("Initialized");try{await this.core.start(),await this.session.init(),await this.proposal.init(),await this.pendingRequest.init(),await this.engine.init(),this.logger.info("SignClient Initilization Success");}catch(n){throw this.logger.info("SignClient Initilization Failure"),this.logger.error(n.message),n}}}

    /**
     * @license
     * Copyright 2019 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     */
    const t$3=window,e$5=t$3.ShadowRoot&&(void 0===t$3.ShadyCSS||t$3.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,s$5=Symbol(),n$5=new WeakMap;class o$5{constructor(t,e,n){if(this._$cssResult$=!0,n!==s$5)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e;}get styleSheet(){let t=this.o;const s=this.t;if(e$5&&void 0===t){const e=void 0!==s&&1===s.length;e&&(t=n$5.get(s)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),e&&n$5.set(s,t));}return t}toString(){return this.cssText}}const r$4=t=>new o$5("string"==typeof t?t:t+"",void 0,s$5),i$6=(t,...e)=>{const n=1===t.length?t[0]:e.reduce(((e,s,n)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(s)+t[n+1]),t[0]);return new o$5(n,t,s$5)},S$1=(s,n)=>{e$5?s.adoptedStyleSheets=n.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):n.forEach((e=>{const n=document.createElement("style"),o=t$3.litNonce;void 0!==o&&n.setAttribute("nonce",o),n.textContent=e.cssText,s.appendChild(n);}));},c$4=e$5?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const s of t.cssRules)e+=s.cssText;return r$4(e)})(t):t;

    /**
     * @license
     * Copyright 2017 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     */var s$4;const e$4=window,r$3=e$4.trustedTypes,h$3=r$3?r$3.emptyScript:"",o$4=e$4.reactiveElementPolyfillSupport,n$4={toAttribute(t,i){switch(i){case Boolean:t=t?h$3:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t);}return t},fromAttribute(t,i){let s=t;switch(i){case Boolean:s=null!==t;break;case Number:s=null===t?null:Number(t);break;case Object:case Array:try{s=JSON.parse(t);}catch(t){s=null;}}return s}},a$3=(t,i)=>i!==t&&(i==i||t==t),l$4={attribute:!0,type:String,converter:n$4,reflect:!1,hasChanged:a$3};class d$2 extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u();}static addInitializer(t){var i;this.finalize(),(null!==(i=this.h)&&void 0!==i?i:this.h=[]).push(t);}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((i,s)=>{const e=this._$Ep(s,i);void 0!==e&&(this._$Ev.set(e,s),t.push(e));})),t}static createProperty(t,i=l$4){if(i.state&&(i.attribute=!1),this.finalize(),this.elementProperties.set(t,i),!i.noAccessor&&!this.prototype.hasOwnProperty(t)){const s="symbol"==typeof t?Symbol():"__"+t,e=this.getPropertyDescriptor(t,s,i);void 0!==e&&Object.defineProperty(this.prototype,t,e);}}static getPropertyDescriptor(t,i,s){return {get(){return this[i]},set(e){const r=this[t];this[i]=e,this.requestUpdate(t,r,s);},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||l$4}static finalize(){if(this.hasOwnProperty("finalized"))return !1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),void 0!==t.h&&(this.h=[...t.h]),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,i=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const s of i)this.createProperty(s,t[s]);}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(i){const s=[];if(Array.isArray(i)){const e=new Set(i.flat(1/0).reverse());for(const i of e)s.unshift(c$4(i));}else void 0!==i&&s.push(c$4(i));return s}static _$Ep(t,i){const s=i.attribute;return !1===s?void 0:"string"==typeof s?s:"string"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)));}addController(t){var i,s;(null!==(i=this._$ES)&&void 0!==i?i:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(s=t.hostConnected)||void 0===s||s.call(t));}removeController(t){var i;null===(i=this._$ES)||void 0===i||i.splice(this._$ES.indexOf(t)>>>0,1);}_$Eg(){this.constructor.elementProperties.forEach(((t,i)=>{this.hasOwnProperty(i)&&(this._$Ei.set(i,this[i]),delete this[i]);}));}createRenderRoot(){var t;const s=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return S$1(s,this.constructor.elementStyles),s}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var i;return null===(i=t.hostConnected)||void 0===i?void 0:i.call(t)}));}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var i;return null===(i=t.hostDisconnected)||void 0===i?void 0:i.call(t)}));}attributeChangedCallback(t,i,s){this._$AK(t,s);}_$EO(t,i,s=l$4){var e;const r=this.constructor._$Ep(t,s);if(void 0!==r&&!0===s.reflect){const h=(void 0!==(null===(e=s.converter)||void 0===e?void 0:e.toAttribute)?s.converter:n$4).toAttribute(i,s.type);this._$El=t,null==h?this.removeAttribute(r):this.setAttribute(r,h),this._$El=null;}}_$AK(t,i){var s;const e=this.constructor,r=e._$Ev.get(t);if(void 0!==r&&this._$El!==r){const t=e.getPropertyOptions(r),h="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==(null===(s=t.converter)||void 0===s?void 0:s.fromAttribute)?t.converter:n$4;this._$El=r,this[r]=h.fromAttribute(i,t.type),this._$El=null;}}requestUpdate(t,i,s){let e=!0;void 0!==t&&(((s=s||this.constructor.getPropertyOptions(t)).hasChanged||a$3)(this[t],i)?(this._$AL.has(t)||this._$AL.set(t,i),!0===s.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,s))):e=!1),!this.isUpdatePending&&e&&(this._$E_=this._$Ej());}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_;}catch(t){Promise.reject(t);}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,i)=>this[i]=t)),this._$Ei=void 0);let i=!1;const s=this._$AL;try{i=this.shouldUpdate(s),i?(this.willUpdate(s),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var i;return null===(i=t.hostUpdate)||void 0===i?void 0:i.call(t)})),this.update(s)):this._$Ek();}catch(t){throw i=!1,this._$Ek(),t}i&&this._$AE(s);}willUpdate(t){}_$AE(t){var i;null===(i=this._$ES)||void 0===i||i.forEach((t=>{var i;return null===(i=t.hostUpdated)||void 0===i?void 0:i.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t);}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1;}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return !0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,i)=>this._$EO(i,this[i],t))),this._$EC=void 0),this._$Ek();}updated(t){}firstUpdated(t){}}d$2.finalized=!0,d$2.elementProperties=new Map,d$2.elementStyles=[],d$2.shadowRootOptions={mode:"open"},null==o$4||o$4({ReactiveElement:d$2}),(null!==(s$4=e$4.reactiveElementVersions)&&void 0!==s$4?s$4:e$4.reactiveElementVersions=[]).push("1.5.0");

    /**
     * @license
     * Copyright 2017 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     */
    var t$2;const i$5=window,s$3=i$5.trustedTypes,e$3=s$3?s$3.createPolicy("lit-html",{createHTML:t=>t}):void 0,o$3=`lit$${(Math.random()+"").slice(9)}$`,n$3="?"+o$3,l$3=`<${n$3}>`,h$2=document,r$2=(t="")=>h$2.createComment(t),d$1=t=>null===t||"object"!=typeof t&&"function"!=typeof t,u$1=Array.isArray,c$3=t=>u$1(t)||"function"==typeof(null==t?void 0:t[Symbol.iterator]),v$1=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,a$2=/-->/g,f$1=/>/g,_=RegExp(">|[ \t\n\f\r](?:([^\\s\"'>=/]+)([ \t\n\f\r]*=[ \t\n\f\r]*(?:[^ \t\n\f\r\"'`<>=]|(\"|')|))|$)","g"),m=/'/g,p$1=/"/g,$=/^(?:script|style|textarea|title)$/i,g$2=t=>(i,...s)=>({_$litType$:t,strings:i,values:s}),y$1=g$2(1),w$2=g$2(2),x=Symbol.for("lit-noChange"),b$2=Symbol.for("lit-nothing"),T=new WeakMap,A$1=h$2.createTreeWalker(h$2,129,null,!1),E=(t,i)=>{const s=t.length-1,n=[];let h,r=2===i?"<svg>":"",d=v$1;for(let i=0;i<s;i++){const s=t[i];let e,u,c=-1,g=0;for(;g<s.length&&(d.lastIndex=g,u=d.exec(s),null!==u);)g=d.lastIndex,d===v$1?"!--"===u[1]?d=a$2:void 0!==u[1]?d=f$1:void 0!==u[2]?($.test(u[2])&&(h=RegExp("</"+u[2],"g")),d=_):void 0!==u[3]&&(d=_):d===_?">"===u[0]?(d=null!=h?h:v$1,c=-1):void 0===u[1]?c=-2:(c=d.lastIndex-u[2].length,e=u[1],d=void 0===u[3]?_:'"'===u[3]?p$1:m):d===p$1||d===m?d=_:d===a$2||d===f$1?d=v$1:(d=_,h=void 0);const y=d===_&&t[i+1].startsWith("/>")?" ":"";r+=d===v$1?s+l$3:c>=0?(n.push(e),s.slice(0,c)+"$lit$"+s.slice(c)+o$3+y):s+o$3+(-2===c?(n.push(void 0),i):y);}const u=r+(t[s]||"<?>")+(2===i?"</svg>":"");if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return [void 0!==e$3?e$3.createHTML(u):u,n]};class C$1{constructor({strings:t,_$litType$:i},e){let l;this.parts=[];let h=0,d=0;const u=t.length-1,c=this.parts,[v,a]=E(t,i);if(this.el=C$1.createElement(v,e),A$1.currentNode=this.el.content,2===i){const t=this.el.content,i=t.firstChild;i.remove(),t.append(...i.childNodes);}for(;null!==(l=A$1.nextNode())&&c.length<u;){if(1===l.nodeType){if(l.hasAttributes()){const t=[];for(const i of l.getAttributeNames())if(i.endsWith("$lit$")||i.startsWith(o$3)){const s=a[d++];if(t.push(i),void 0!==s){const t=l.getAttribute(s.toLowerCase()+"$lit$").split(o$3),i=/([.?@])?(.*)/.exec(s);c.push({type:1,index:h,name:i[2],strings:t,ctor:"."===i[1]?M:"?"===i[1]?k:"@"===i[1]?H$1:S});}else c.push({type:6,index:h});}for(const i of t)l.removeAttribute(i);}if($.test(l.tagName)){const t=l.textContent.split(o$3),i=t.length-1;if(i>0){l.textContent=s$3?s$3.emptyScript:"";for(let s=0;s<i;s++)l.append(t[s],r$2()),A$1.nextNode(),c.push({type:2,index:++h});l.append(t[i],r$2());}}}else if(8===l.nodeType)if(l.data===n$3)c.push({type:2,index:h});else {let t=-1;for(;-1!==(t=l.data.indexOf(o$3,t+1));)c.push({type:7,index:h}),t+=o$3.length-1;}h++;}}static createElement(t,i){const s=h$2.createElement("template");return s.innerHTML=t,s}}function P$1(t,i,s=t,e){var o,n,l,h;if(i===x)return i;let r=void 0!==e?null===(o=s._$Co)||void 0===o?void 0:o[e]:s._$Cl;const u=d$1(i)?void 0:i._$litDirective$;return (null==r?void 0:r.constructor)!==u&&(null===(n=null==r?void 0:r._$AO)||void 0===n||n.call(r,!1),void 0===u?r=void 0:(r=new u(t),r._$AT(t,s,e)),void 0!==e?(null!==(l=(h=s)._$Co)&&void 0!==l?l:h._$Co=[])[e]=r:s._$Cl=r),void 0!==r&&(i=P$1(t,r._$AS(t,i.values),r,e)),i}class V{constructor(t,i){this.u=[],this._$AN=void 0,this._$AD=t,this._$AM=i;}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}v(t){var i;const{el:{content:s},parts:e}=this._$AD,o=(null!==(i=null==t?void 0:t.creationScope)&&void 0!==i?i:h$2).importNode(s,!0);A$1.currentNode=o;let n=A$1.nextNode(),l=0,r=0,d=e[0];for(;void 0!==d;){if(l===d.index){let i;2===d.type?i=new N(n,n.nextSibling,this,t):1===d.type?i=new d.ctor(n,d.name,d.strings,this,t):6===d.type&&(i=new I$1(n,this,t)),this.u.push(i),d=e[++r];}l!==(null==d?void 0:d.index)&&(n=A$1.nextNode(),l++);}return o}p(t){let i=0;for(const s of this.u)void 0!==s&&(void 0!==s.strings?(s._$AI(t,s,i),i+=s.strings.length-2):s._$AI(t[i])),i++;}}class N{constructor(t,i,s,e){var o;this.type=2,this._$AH=b$2,this._$AN=void 0,this._$AA=t,this._$AB=i,this._$AM=s,this.options=e,this._$Cm=null===(o=null==e?void 0:e.isConnected)||void 0===o||o;}get _$AU(){var t,i;return null!==(i=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==i?i:this._$Cm}get parentNode(){let t=this._$AA.parentNode;const i=this._$AM;return void 0!==i&&11===t.nodeType&&(t=i.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,i=this){t=P$1(this,t,i),d$1(t)?t===b$2||null==t||""===t?(this._$AH!==b$2&&this._$AR(),this._$AH=b$2):t!==this._$AH&&t!==x&&this.g(t):void 0!==t._$litType$?this.$(t):void 0!==t.nodeType?this.T(t):c$3(t)?this.k(t):this.g(t);}O(t,i=this._$AB){return this._$AA.parentNode.insertBefore(t,i)}T(t){this._$AH!==t&&(this._$AR(),this._$AH=this.O(t));}g(t){this._$AH!==b$2&&d$1(this._$AH)?this._$AA.nextSibling.data=t:this.T(h$2.createTextNode(t)),this._$AH=t;}$(t){var i;const{values:s,_$litType$:e}=t,o="number"==typeof e?this._$AC(t):(void 0===e.el&&(e.el=C$1.createElement(e.h,this.options)),e);if((null===(i=this._$AH)||void 0===i?void 0:i._$AD)===o)this._$AH.p(s);else {const t=new V(o,this),i=t.v(this.options);t.p(s),this.T(i),this._$AH=t;}}_$AC(t){let i=T.get(t.strings);return void 0===i&&T.set(t.strings,i=new C$1(t)),i}k(t){u$1(this._$AH)||(this._$AH=[],this._$AR());const i=this._$AH;let s,e=0;for(const o of t)e===i.length?i.push(s=new N(this.O(r$2()),this.O(r$2()),this,this.options)):s=i[e],s._$AI(o),e++;e<i.length&&(this._$AR(s&&s._$AB.nextSibling,e),i.length=e);}_$AR(t=this._$AA.nextSibling,i){var s;for(null===(s=this._$AP)||void 0===s||s.call(this,!1,!0,i);t&&t!==this._$AB;){const i=t.nextSibling;t.remove(),t=i;}}setConnected(t){var i;void 0===this._$AM&&(this._$Cm=t,null===(i=this._$AP)||void 0===i||i.call(this,t));}}class S{constructor(t,i,s,e,o){this.type=1,this._$AH=b$2,this._$AN=void 0,this.element=t,this.name=i,this._$AM=e,this.options=o,s.length>2||""!==s[0]||""!==s[1]?(this._$AH=Array(s.length-1).fill(new String),this.strings=s):this._$AH=b$2;}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,i=this,s,e){const o=this.strings;let n=!1;if(void 0===o)t=P$1(this,t,i,0),n=!d$1(t)||t!==this._$AH&&t!==x,n&&(this._$AH=t);else {const e=t;let l,h;for(t=o[0],l=0;l<o.length-1;l++)h=P$1(this,e[s+l],i,l),h===x&&(h=this._$AH[l]),n||(n=!d$1(h)||h!==this._$AH[l]),h===b$2?t=b$2:t!==b$2&&(t+=(null!=h?h:"")+o[l+1]),this._$AH[l]=h;}n&&!e&&this.j(t);}j(t){t===b$2?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"");}}class M extends S{constructor(){super(...arguments),this.type=3;}j(t){this.element[this.name]=t===b$2?void 0:t;}}const R=s$3?s$3.emptyScript:"";class k extends S{constructor(){super(...arguments),this.type=4;}j(t){t&&t!==b$2?this.element.setAttribute(this.name,R):this.element.removeAttribute(this.name);}}class H$1 extends S{constructor(t,i,s,e,o){super(t,i,s,e,o),this.type=5;}_$AI(t,i=this){var s;if((t=null!==(s=P$1(this,t,i,0))&&void 0!==s?s:b$2)===x)return;const e=this._$AH,o=t===b$2&&e!==b$2||t.capture!==e.capture||t.once!==e.once||t.passive!==e.passive,n=t!==b$2&&(e===b$2||o);o&&this.element.removeEventListener(this.name,this,e),n&&this.element.addEventListener(this.name,this,t),this._$AH=t;}handleEvent(t){var i,s;"function"==typeof this._$AH?this._$AH.call(null!==(s=null===(i=this.options)||void 0===i?void 0:i.host)&&void 0!==s?s:this.element,t):this._$AH.handleEvent(t);}}class I$1{constructor(t,i,s){this.element=t,this.type=6,this._$AN=void 0,this._$AM=i,this.options=s;}get _$AU(){return this._$AM._$AU}_$AI(t){P$1(this,t);}}const z$1=i$5.litHtmlPolyfillSupport;null==z$1||z$1(C$1,N),(null!==(t$2=i$5.litHtmlVersions)&&void 0!==t$2?t$2:i$5.litHtmlVersions=[]).push("2.5.0");const Z$1=(t,i,s)=>{var e,o;const n=null!==(e=null==s?void 0:s.renderBefore)&&void 0!==e?e:i;let l=n._$litPart$;if(void 0===l){const t=null!==(o=null==s?void 0:s.renderBefore)&&void 0!==o?o:null;n._$litPart$=l=new N(i.insertBefore(r$2(),t),t,void 0,null!=s?s:{});}return l._$AI(t),l};

    /**
     * @license
     * Copyright 2017 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     */var l$2,o$2;class s$2 extends d$2{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0;}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const i=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=Z$1(i,this.renderRoot,this.renderOptions);}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0);}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1);}render(){return x}}s$2.finalized=!0,s$2._$litElement$=!0,null===(l$2=globalThis.litElementHydrateSupport)||void 0===l$2||l$2.call(globalThis,{LitElement:s$2});const n$2=globalThis.litElementPolyfillSupport;null==n$2||n$2({LitElement:s$2});(null!==(o$2=globalThis.litElementVersions)&&void 0!==o$2?o$2:globalThis.litElementVersions=[]).push("3.2.2");

    /**
     * @license
     * Copyright 2017 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     */
    const e$2=e=>n=>"function"==typeof n?((e,n)=>(customElements.define(e,n),n))(e,n):((e,n)=>{const{kind:t,elements:s}=n;return {kind:t,elements:s,finisher(n){customElements.define(e,n);}}})(e,n);

    /**
     * @license
     * Copyright 2017 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     */
    const i$4=(i,e)=>"method"===e.kind&&e.descriptor&&!("value"in e.descriptor)?{...e,finisher(n){n.createProperty(e.key,i);}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:e.key,initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this));},finisher(n){n.createProperty(e.key,i);}};function e$1(e){return (n,t)=>void 0!==t?((i,e,n)=>{e.constructor.createProperty(n,i);})(e,n,t):i$4(e,n)}

    /**
     * @license
     * Copyright 2017 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     */function t$1(t){return e$1({...t,state:!0})}

    /**
     * @license
     * Copyright 2021 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     */var n$1;null!=(null===(n$1=window.HTMLSlotElement)||void 0===n$1?void 0:n$1.prototype.assignedElements)?(o,n)=>o.assignedElements(n):(o,n)=>o.assignedNodes(n).filter((o=>o.nodeType===Node.ELEMENT_NODE));

    const r$1=Symbol();const o$1=Object.getPrototypeOf,s$1=new WeakMap,c$2=e=>e&&(s$1.has(e)?s$1.get(e):o$1(e)===Object.prototype||o$1(e)===Array.prototype),g$1=e=>c$2(e)&&e[r$1]||null,b$1=(e,t=!0)=>{s$1.set(e,t);};

    const isObject = (x) => typeof x === "object" && x !== null;
    const PROXY_STATE = Symbol();
    const refSet = /* @__PURE__ */ new WeakSet();
    const buildProxyFunction = (objectIs = Object.is, newProxy = (target, handler) => new Proxy(target, handler), canProxy = (x) => isObject(x) && !refSet.has(x) && (Array.isArray(x) || !(Symbol.iterator in x)) && !(x instanceof WeakMap) && !(x instanceof WeakSet) && !(x instanceof Error) && !(x instanceof Number) && !(x instanceof Date) && !(x instanceof String) && !(x instanceof RegExp) && !(x instanceof ArrayBuffer), defaultHandlePromise = (promise) => {
      switch (promise.status) {
        case "fulfilled":
          return promise.value;
        case "rejected":
          throw promise.reason;
        default:
          throw promise;
      }
    }, snapCache = /* @__PURE__ */ new WeakMap(), createSnapshot = (target, receiver, version, handlePromise = defaultHandlePromise) => {
      const cache = snapCache.get(receiver);
      if ((cache == null ? void 0 : cache[0]) === version) {
        return cache[1];
      }
      const snap = Array.isArray(target) ? [] : Object.create(Object.getPrototypeOf(target));
      b$1(snap, true);
      snapCache.set(receiver, [version, snap]);
      Reflect.ownKeys(target).forEach((key) => {
        const value = Reflect.get(target, key, receiver);
        if (refSet.has(value)) {
          b$1(value, false);
          snap[key] = value;
        } else if (value instanceof Promise) {
          Object.defineProperty(snap, key, {
            get() {
              return handlePromise(value);
            }
          });
        } else if (value == null ? void 0 : value[PROXY_STATE]) {
          snap[key] = snapshot(value, handlePromise);
        } else {
          snap[key] = value;
        }
      });
      return Object.freeze(snap);
    }, proxyCache = /* @__PURE__ */ new WeakMap(), versionHolder = [1], proxyFunction2 = (initialObject) => {
      if (!isObject(initialObject)) {
        throw new Error("object required");
      }
      const found = proxyCache.get(initialObject);
      if (found) {
        return found;
      }
      let version = versionHolder[0];
      const listeners = /* @__PURE__ */ new Set();
      const notifyUpdate = (op, nextVersion = ++versionHolder[0]) => {
        if (version !== nextVersion) {
          version = nextVersion;
          listeners.forEach((listener) => listener(op, nextVersion));
        }
      };
      const propListeners = /* @__PURE__ */ new Map();
      const getPropListener = (prop) => {
        let propListener = propListeners.get(prop);
        if (!propListener) {
          propListener = (op, nextVersion) => {
            const newOp = [...op];
            newOp[1] = [prop, ...newOp[1]];
            notifyUpdate(newOp, nextVersion);
          };
          propListeners.set(prop, propListener);
        }
        return propListener;
      };
      const popPropListener = (prop) => {
        const propListener = propListeners.get(prop);
        propListeners.delete(prop);
        return propListener;
      };
      const baseObject = Array.isArray(initialObject) ? [] : Object.create(Object.getPrototypeOf(initialObject));
      const handler = {
        get(target, prop, receiver) {
          if (prop === PROXY_STATE) {
            const state = [
              target,
              receiver,
              version,
              createSnapshot,
              listeners
            ];
            return state;
          }
          return Reflect.get(target, prop, receiver);
        },
        deleteProperty(target, prop) {
          var _a;
          const prevValue = Reflect.get(target, prop);
          const childListeners = (_a = prevValue == null ? void 0 : prevValue[PROXY_STATE]) == null ? void 0 : _a[4];
          if (childListeners) {
            childListeners.delete(popPropListener(prop));
          }
          const deleted = Reflect.deleteProperty(target, prop);
          if (deleted) {
            notifyUpdate(["delete", [prop], prevValue]);
          }
          return deleted;
        },
        set(target, prop, value, receiver) {
          var _a, _b;
          const hasPrevValue = Reflect.has(target, prop);
          const prevValue = Reflect.get(target, prop, receiver);
          if (hasPrevValue && objectIs(prevValue, value)) {
            return true;
          }
          const childListeners = (_a = prevValue == null ? void 0 : prevValue[PROXY_STATE]) == null ? void 0 : _a[4];
          if (childListeners) {
            childListeners.delete(popPropListener(prop));
          }
          if (isObject(value)) {
            value = g$1(value) || value;
          }
          let nextValue = value;
          if ((_b = Object.getOwnPropertyDescriptor(target, prop)) == null ? void 0 : _b.set) ; else if (value instanceof Promise) {
            value.then((v) => {
              value.status = "fulfilled";
              value.value = v;
              notifyUpdate(["resolve", [prop], v]);
            }).catch((e) => {
              value.status = "rejected";
              value.reason = e;
              notifyUpdate(["reject", [prop], e]);
            });
          } else {
            if (!(value == null ? void 0 : value[PROXY_STATE]) && canProxy(value)) {
              nextValue = proxy(value);
            }
            if (nextValue == null ? void 0 : nextValue[PROXY_STATE]) {
              nextValue[PROXY_STATE][4].add(
                getPropListener(prop)
              );
            }
          }
          Reflect.set(target, prop, nextValue, receiver);
          notifyUpdate(["set", [prop], value, prevValue]);
          return true;
        }
      };
      const proxyObject = newProxy(baseObject, handler);
      proxyCache.set(initialObject, proxyObject);
      Reflect.ownKeys(initialObject).forEach((key) => {
        const desc = Object.getOwnPropertyDescriptor(
          initialObject,
          key
        );
        if (desc.get || desc.set) {
          Object.defineProperty(baseObject, key, desc);
        } else {
          proxyObject[key] = initialObject[key];
        }
      });
      return proxyObject;
    }) => [
      proxyFunction2,
      PROXY_STATE,
      refSet,
      objectIs,
      newProxy,
      canProxy,
      defaultHandlePromise,
      snapCache,
      createSnapshot,
      proxyCache,
      versionHolder
    ];
    const [proxyFunction] = buildProxyFunction();
    function proxy(initialObject = {}) {
      return proxyFunction(initialObject);
    }
    function subscribe(proxyObject, callback, notifyInSync) {
      if ((undefined && undefined.MODE) !== "production" && !(proxyObject == null ? void 0 : proxyObject[PROXY_STATE])) {
        console.warn("Please use proxy object");
      }
      let promise;
      const ops = [];
      const listeners = proxyObject[PROXY_STATE][4];
      const listener = (op) => {
        ops.push(op);
        if (notifyInSync) {
          callback(ops.splice(0));
          return;
        }
        if (!promise) {
          promise = Promise.resolve().then(() => {
            promise = void 0;
            if (listeners.has(listener)) {
              callback(ops.splice(0));
            }
          });
        }
      };
      listeners.add(listener);
      return () => listeners.delete(listener);
    }
    function snapshot(proxyObject, handlePromise) {
      if ((undefined && undefined.MODE) !== "production" && !(proxyObject == null ? void 0 : proxyObject[PROXY_STATE])) {
        console.warn("Please use proxy object");
      }
      const [target, receiver, version, createSnapshot] = proxyObject[PROXY_STATE];
      return createSnapshot(target, receiver, version, handlePromise);
    }

    var byteLength_1 = byteLength;
    var toByteArray_1 = toByteArray;
    var fromByteArray_1 = fromByteArray;

    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    for (var i$3 = 0, len = code.length; i$3 < len; ++i$3) {
      lookup[i$3] = code[i$3];
      revLookup[code.charCodeAt(i$3)] = i$3;
    }

    // Support decoding URL-safe base64 strings, as Node.js does.
    // See: https://en.wikipedia.org/wiki/Base64#URL_applications
    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;

    function getLens (b64) {
      var len = b64.length;

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }

      // Trim off extra bytes after placeholder bytes are found
      // See: https://github.com/beatgammit/base64-js/issues/42
      var validLen = b64.indexOf('=');
      if (validLen === -1) validLen = len;

      var placeHoldersLen = validLen === len
        ? 0
        : 4 - (validLen % 4);

      return [validLen, placeHoldersLen]
    }

    // base64 is 4/3 + up to two characters of the original data
    function byteLength (b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
    }

    function _byteLength (b64, validLen, placeHoldersLen) {
      return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
    }

    function toByteArray (b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];

      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

      var curByte = 0;

      // if there are placeholders, only get up to the last complete 4 chars
      var len = placeHoldersLen > 0
        ? validLen - 4
        : validLen;

      var i;
      for (i = 0; i < len; i += 4) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 18) |
          (revLookup[b64.charCodeAt(i + 1)] << 12) |
          (revLookup[b64.charCodeAt(i + 2)] << 6) |
          revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = (tmp >> 16) & 0xFF;
        arr[curByte++] = (tmp >> 8) & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }

      if (placeHoldersLen === 2) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 2) |
          (revLookup[b64.charCodeAt(i + 1)] >> 4);
        arr[curByte++] = tmp & 0xFF;
      }

      if (placeHoldersLen === 1) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 10) |
          (revLookup[b64.charCodeAt(i + 1)] << 4) |
          (revLookup[b64.charCodeAt(i + 2)] >> 2);
        arr[curByte++] = (tmp >> 8) & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }

      return arr
    }

    function tripletToBase64 (num) {
      return lookup[num >> 18 & 0x3F] +
        lookup[num >> 12 & 0x3F] +
        lookup[num >> 6 & 0x3F] +
        lookup[num & 0x3F]
    }

    function encodeChunk (uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp =
          ((uint8[i] << 16) & 0xFF0000) +
          ((uint8[i + 1] << 8) & 0xFF00) +
          (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
      }
      return output.join('')
    }

    function fromByteArray (uint8) {
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
      var parts = [];
      var maxChunkLength = 16383; // must be multiple of 3

      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
      }

      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(
          lookup[tmp >> 2] +
          lookup[(tmp << 4) & 0x3F] +
          '=='
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(
          lookup[tmp >> 10] +
          lookup[(tmp >> 4) & 0x3F] +
          lookup[(tmp << 2) & 0x3F] +
          '='
        );
      }

      return parts.join('')
    }

    var base64Js = {
    	byteLength: byteLength_1,
    	toByteArray: toByteArray_1,
    	fromByteArray: fromByteArray_1
    };

    /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
    var read = function (buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = (nBytes * 8) - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? (nBytes - 1) : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];

      i += d;

      e = s & ((1 << (-nBits)) - 1);
      s >>= (-nBits);
      nBits += eLen;
      for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

      m = e & ((1 << (-nBits)) - 1);
      e >>= (-nBits);
      nBits += mLen;
      for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : ((s ? -1 : 1) * Infinity)
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    };

    var write = function (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = (nBytes * 8) - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
      var i = isLE ? 0 : (nBytes - 1);
      var d = isLE ? 1 : -1;
      var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = ((value * c) - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

      e = (e << mLen) | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

      buffer[offset + i - d] |= s * 128;
    };

    var ieee754 = {
    	read: read,
    	write: write
    };

    /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <https://feross.org>
     * @license  MIT
     */

    var buffer = createCommonjsModule$4(function (module, exports) {



    const customInspectSymbol =
      (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation
        ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
        : null;

    exports.Buffer = Buffer;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;

    const K_MAX_LENGTH = 0x7fffffff;
    exports.kMaxLength = K_MAX_LENGTH;

    /**
     * If `Buffer.TYPED_ARRAY_SUPPORT`:
     *   === true    Use Uint8Array implementation (fastest)
     *   === false   Print warning and recommend using `buffer` v4.x which has an Object
     *               implementation (most compatible, even IE6)
     *
     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
     * Opera 11.6+, iOS 4.2+.
     *
     * We report that the browser does not support typed arrays if the are not subclassable
     * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
     * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
     * for __proto__ and has a buggy typed array implementation.
     */
    Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

    if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
        typeof console.error === 'function') {
      console.error(
        'This browser lacks typed array (Uint8Array) support which is required by ' +
        '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
      );
    }

    function typedArraySupport () {
      // Can typed array instances can be augmented?
      try {
        const arr = new Uint8Array(1);
        const proto = { foo: function () { return 42 } };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42
      } catch (e) {
        return false
      }
    }

    Object.defineProperty(Buffer.prototype, 'parent', {
      enumerable: true,
      get: function () {
        if (!Buffer.isBuffer(this)) return undefined
        return this.buffer
      }
    });

    Object.defineProperty(Buffer.prototype, 'offset', {
      enumerable: true,
      get: function () {
        if (!Buffer.isBuffer(this)) return undefined
        return this.byteOffset
      }
    });

    function createBuffer (length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"')
      }
      // Return an augmented `Uint8Array` instance
      const buf = new Uint8Array(length);
      Object.setPrototypeOf(buf, Buffer.prototype);
      return buf
    }

    /**
     * The Buffer constructor returns instances of `Uint8Array` that have their
     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
     * returns a single octet.
     *
     * The `Uint8Array` prototype remains unmodified.
     */

    function Buffer (arg, encodingOrOffset, length) {
      // Common case.
      if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
          throw new TypeError(
            'The "string" argument must be of type string. Received type number'
          )
        }
        return allocUnsafe(arg)
      }
      return from(arg, encodingOrOffset, length)
    }

    Buffer.poolSize = 8192; // not used by this implementation

    function from (value, encodingOrOffset, length) {
      if (typeof value === 'string') {
        return fromString(value, encodingOrOffset)
      }

      if (ArrayBuffer.isView(value)) {
        return fromArrayView(value)
      }

      if (value == null) {
        throw new TypeError(
          'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
          'or Array-like Object. Received type ' + (typeof value)
        )
      }

      if (isInstance(value, ArrayBuffer) ||
          (value && isInstance(value.buffer, ArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length)
      }

      if (typeof SharedArrayBuffer !== 'undefined' &&
          (isInstance(value, SharedArrayBuffer) ||
          (value && isInstance(value.buffer, SharedArrayBuffer)))) {
        return fromArrayBuffer(value, encodingOrOffset, length)
      }

      if (typeof value === 'number') {
        throw new TypeError(
          'The "value" argument must not be of type number. Received type number'
        )
      }

      const valueOf = value.valueOf && value.valueOf();
      if (valueOf != null && valueOf !== value) {
        return Buffer.from(valueOf, encodingOrOffset, length)
      }

      const b = fromObject(value);
      if (b) return b

      if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
          typeof value[Symbol.toPrimitive] === 'function') {
        return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)
      }

      throw new TypeError(
        'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
        'or Array-like Object. Received type ' + (typeof value)
      )
    }

    /**
     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
     * if value is a number.
     * Buffer.from(str[, encoding])
     * Buffer.from(array)
     * Buffer.from(buffer)
     * Buffer.from(arrayBuffer[, byteOffset[, length]])
     **/
    Buffer.from = function (value, encodingOrOffset, length) {
      return from(value, encodingOrOffset, length)
    };

    // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
    // https://github.com/feross/buffer/pull/148
    Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer, Uint8Array);

    function assertSize (size) {
      if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be of type number')
      } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"')
      }
    }

    function alloc (size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(size)
      }
      if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpreted as a start offset.
        return typeof encoding === 'string'
          ? createBuffer(size).fill(fill, encoding)
          : createBuffer(size).fill(fill)
      }
      return createBuffer(size)
    }

    /**
     * Creates a new filled Buffer instance.
     * alloc(size[, fill[, encoding]])
     **/
    Buffer.alloc = function (size, fill, encoding) {
      return alloc(size, fill, encoding)
    };

    function allocUnsafe (size) {
      assertSize(size);
      return createBuffer(size < 0 ? 0 : checked(size) | 0)
    }

    /**
     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
     * */
    Buffer.allocUnsafe = function (size) {
      return allocUnsafe(size)
    };
    /**
     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
     */
    Buffer.allocUnsafeSlow = function (size) {
      return allocUnsafe(size)
    };

    function fromString (string, encoding) {
      if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8';
      }

      if (!Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }

      const length = byteLength(string, encoding) | 0;
      let buf = createBuffer(length);

      const actual = buf.write(string, encoding);

      if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        buf = buf.slice(0, actual);
      }

      return buf
    }

    function fromArrayLike (array) {
      const length = array.length < 0 ? 0 : checked(array.length) | 0;
      const buf = createBuffer(length);
      for (let i = 0; i < length; i += 1) {
        buf[i] = array[i] & 255;
      }
      return buf
    }

    function fromArrayView (arrayView) {
      if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
      }
      return fromArrayLike(arrayView)
    }

    function fromArrayBuffer (array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds')
      }

      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds')
      }

      let buf;
      if (byteOffset === undefined && length === undefined) {
        buf = new Uint8Array(array);
      } else if (length === undefined) {
        buf = new Uint8Array(array, byteOffset);
      } else {
        buf = new Uint8Array(array, byteOffset, length);
      }

      // Return an augmented `Uint8Array` instance
      Object.setPrototypeOf(buf, Buffer.prototype);

      return buf
    }

    function fromObject (obj) {
      if (Buffer.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);

        if (buf.length === 0) {
          return buf
        }

        obj.copy(buf, 0, 0, len);
        return buf
      }

      if (obj.length !== undefined) {
        if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
          return createBuffer(0)
        }
        return fromArrayLike(obj)
      }

      if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data)
      }
    }

    function checked (length) {
      // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
      // length is NaN (which is otherwise coerced to zero.)
      if (length >= K_MAX_LENGTH) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                             'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
      }
      return length | 0
    }

    function SlowBuffer (length) {
      if (+length != length) { // eslint-disable-line eqeqeq
        length = 0;
      }
      return Buffer.alloc(+length)
    }

    Buffer.isBuffer = function isBuffer (b) {
      return b != null && b._isBuffer === true &&
        b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    };

    Buffer.compare = function compare (a, b) {
      if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
      if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
      if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
        throw new TypeError(
          'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
        )
      }

      if (a === b) return 0

      let x = a.length;
      let y = b.length;

      for (let i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    Buffer.isEncoding = function isEncoding (encoding) {
      switch (String(encoding).toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return true
        default:
          return false
      }
    };

    Buffer.concat = function concat (list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }

      if (list.length === 0) {
        return Buffer.alloc(0)
      }

      let i;
      if (length === undefined) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }

      const buffer = Buffer.allocUnsafe(length);
      let pos = 0;
      for (i = 0; i < list.length; ++i) {
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
          if (pos + buf.length > buffer.length) {
            if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
            buf.copy(buffer, pos);
          } else {
            Uint8Array.prototype.set.call(
              buffer,
              buf,
              pos
            );
          }
        } else if (!Buffer.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers')
        } else {
          buf.copy(buffer, pos);
        }
        pos += buf.length;
      }
      return buffer
    };

    function byteLength (string, encoding) {
      if (Buffer.isBuffer(string)) {
        return string.length
      }
      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
        return string.byteLength
      }
      if (typeof string !== 'string') {
        throw new TypeError(
          'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
          'Received type ' + typeof string
        )
      }

      const len = string.length;
      const mustMatch = (arguments.length > 2 && arguments[2] === true);
      if (!mustMatch && len === 0) return 0

      // Use a for loop to avoid recursion
      let loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'ascii':
          case 'latin1':
          case 'binary':
            return len
          case 'utf8':
          case 'utf-8':
            return utf8ToBytes(string).length
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return len * 2
          case 'hex':
            return len >>> 1
          case 'base64':
            return base64ToBytes(string).length
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            }
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer.byteLength = byteLength;

    function slowToString (encoding, start, end) {
      let loweredCase = false;

      // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
      // property of a typed array.

      // This behaves neither like String nor Uint8Array in that we set start/end
      // to their upper/lower bounds if the value passed is out of range.
      // undefined is handled specially as per ECMA-262 6th Edition,
      // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
      if (start === undefined || start < 0) {
        start = 0;
      }
      // Return early if start > this.length. Done here to prevent potential uint32
      // coercion fail below.
      if (start > this.length) {
        return ''
      }

      if (end === undefined || end > this.length) {
        end = this.length;
      }

      if (end <= 0) {
        return ''
      }

      // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
      end >>>= 0;
      start >>>= 0;

      if (end <= start) {
        return ''
      }

      if (!encoding) encoding = 'utf8';

      while (true) {
        switch (encoding) {
          case 'hex':
            return hexSlice(this, start, end)

          case 'utf8':
          case 'utf-8':
            return utf8Slice(this, start, end)

          case 'ascii':
            return asciiSlice(this, start, end)

          case 'latin1':
          case 'binary':
            return latin1Slice(this, start, end)

          case 'base64':
            return base64Slice(this, start, end)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return utf16leSlice(this, start, end)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
        }
      }
    }

    // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
    // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
    // reliably in a browserify context because there could be multiple different
    // copies of the 'buffer' package in use. This method works even for Buffer
    // instances that were created from another copy of the `buffer` package.
    // See: https://github.com/feross/buffer/issues/154
    Buffer.prototype._isBuffer = true;

    function swap (b, n, m) {
      const i = b[n];
      b[n] = b[m];
      b[m] = i;
    }

    Buffer.prototype.swap16 = function swap16 () {
      const len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits')
      }
      for (let i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this
    };

    Buffer.prototype.swap32 = function swap32 () {
      const len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits')
      }
      for (let i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this
    };

    Buffer.prototype.swap64 = function swap64 () {
      const len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits')
      }
      for (let i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this
    };

    Buffer.prototype.toString = function toString () {
      const length = this.length;
      if (length === 0) return ''
      if (arguments.length === 0) return utf8Slice(this, 0, length)
      return slowToString.apply(this, arguments)
    };

    Buffer.prototype.toLocaleString = Buffer.prototype.toString;

    Buffer.prototype.equals = function equals (b) {
      if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
      if (this === b) return true
      return Buffer.compare(this, b) === 0
    };

    Buffer.prototype.inspect = function inspect () {
      let str = '';
      const max = exports.INSPECT_MAX_BYTES;
      str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
      if (this.length > max) str += ' ... ';
      return '<Buffer ' + str + '>'
    };
    if (customInspectSymbol) {
      Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
    }

    Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer.from(target, target.offset, target.byteLength);
      }
      if (!Buffer.isBuffer(target)) {
        throw new TypeError(
          'The "target" argument must be one of type Buffer or Uint8Array. ' +
          'Received type ' + (typeof target)
        )
      }

      if (start === undefined) {
        start = 0;
      }
      if (end === undefined) {
        end = target ? target.length : 0;
      }
      if (thisStart === undefined) {
        thisStart = 0;
      }
      if (thisEnd === undefined) {
        thisEnd = this.length;
      }

      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index')
      }

      if (thisStart >= thisEnd && start >= end) {
        return 0
      }
      if (thisStart >= thisEnd) {
        return -1
      }
      if (start >= end) {
        return 1
      }

      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;

      if (this === target) return 0

      let x = thisEnd - thisStart;
      let y = end - start;
      const len = Math.min(x, y);

      const thisCopy = this.slice(thisStart, thisEnd);
      const targetCopy = target.slice(start, end);

      for (let i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
    //
    // Arguments:
    // - buffer - a Buffer to search
    // - val - a string, Buffer, or number
    // - byteOffset - an index into `buffer`; will be clamped to an int32
    // - encoding - an optional encoding, relevant is val is a string
    // - dir - true for indexOf, false for lastIndexOf
    function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
      // Empty buffer means no match
      if (buffer.length === 0) return -1

      // Normalize byteOffset
      if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff;
      } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000;
      }
      byteOffset = +byteOffset; // Coerce to Number.
      if (numberIsNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : (buffer.length - 1);
      }

      // Normalize byteOffset: negative offsets start from the end of the buffer
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir) return -1
        else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1
      }

      // Normalize val
      if (typeof val === 'string') {
        val = Buffer.from(val, encoding);
      }

      // Finally, search either indexOf (if dir is true) or lastIndexOf
      if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
          return -1
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
      } else if (typeof val === 'number') {
        val = val & 0xFF; // Search for a byte value [0-255]
        if (typeof Uint8Array.prototype.indexOf === 'function') {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
          }
        }
        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
      }

      throw new TypeError('val must be string, number or Buffer')
    }

    function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
      let indexSize = 1;
      let arrLength = arr.length;
      let valLength = val.length;

      if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' ||
            encoding === 'utf16le' || encoding === 'utf-16le') {
          if (arr.length < 2 || val.length < 2) {
            return -1
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }

      function read (buf, i) {
        if (indexSize === 1) {
          return buf[i]
        } else {
          return buf.readUInt16BE(i * indexSize)
        }
      }

      let i;
      if (dir) {
        let foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
          } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          let found = true;
          for (let j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break
            }
          }
          if (found) return i
        }
      }

      return -1
    }

    Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1
    };

    Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
    };

    Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
    };

    function hexWrite (buf, string, offset, length) {
      offset = Number(offset) || 0;
      const remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }

      const strLen = string.length;

      if (length > strLen / 2) {
        length = strLen / 2;
      }
      let i;
      for (i = 0; i < length; ++i) {
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i
        buf[offset + i] = parsed;
      }
      return i
    }

    function utf8Write (buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
    }

    function asciiWrite (buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length)
    }

    function base64Write (buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length)
    }

    function ucs2Write (buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
    }

    Buffer.prototype.write = function write (string, offset, length, encoding) {
      // Buffer#write(string)
      if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
      // Buffer#write(string, encoding)
      } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
      // Buffer#write(string, offset[, length][, encoding])
      } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
          length = length >>> 0;
          if (encoding === undefined) encoding = 'utf8';
        } else {
          encoding = length;
          length = undefined;
        }
      } else {
        throw new Error(
          'Buffer.write(string, encoding, offset[, length]) is no longer supported'
        )
      }

      const remaining = this.length - offset;
      if (length === undefined || length > remaining) length = remaining;

      if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds')
      }

      if (!encoding) encoding = 'utf8';

      let loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'hex':
            return hexWrite(this, string, offset, length)

          case 'utf8':
          case 'utf-8':
            return utf8Write(this, string, offset, length)

          case 'ascii':
          case 'latin1':
          case 'binary':
            return asciiWrite(this, string, offset, length)

          case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return ucs2Write(this, string, offset, length)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };

    Buffer.prototype.toJSON = function toJSON () {
      return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
      }
    };

    function base64Slice (buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64Js.fromByteArray(buf)
      } else {
        return base64Js.fromByteArray(buf.slice(start, end))
      }
    }

    function utf8Slice (buf, start, end) {
      end = Math.min(buf.length, end);
      const res = [];

      let i = start;
      while (i < end) {
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = (firstByte > 0xEF)
          ? 4
          : (firstByte > 0xDF)
              ? 3
              : (firstByte > 0xBF)
                  ? 2
                  : 1;

        if (i + bytesPerSequence <= end) {
          let secondByte, thirdByte, fourthByte, tempCodePoint;

          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 0x80) {
                codePoint = firstByte;
              }
              break
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
                if (tempCodePoint > 0x7F) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }

        if (codePoint === null) {
          // we did not generate a valid codePoint so insert a
          // replacement char (U+FFFD) and advance only 1 byte
          codePoint = 0xFFFD;
          bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
          // encode to utf16 (surrogate pair dance)
          codePoint -= 0x10000;
          res.push(codePoint >>> 10 & 0x3FF | 0xD800);
          codePoint = 0xDC00 | codePoint & 0x3FF;
        }

        res.push(codePoint);
        i += bytesPerSequence;
      }

      return decodeCodePointsArray(res)
    }

    // Based on http://stackoverflow.com/a/22747272/680742, the browser with
    // the lowest limit is Chrome, with 0x10000 args.
    // We go 1 magnitude less, for safety
    const MAX_ARGUMENTS_LENGTH = 0x1000;

    function decodeCodePointsArray (codePoints) {
      const len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
      }

      // Decode in chunks to avoid "call stack size exceeded".
      let res = '';
      let i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res
    }

    function asciiSlice (buf, start, end) {
      let ret = '';
      end = Math.min(buf.length, end);

      for (let i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 0x7F);
      }
      return ret
    }

    function latin1Slice (buf, start, end) {
      let ret = '';
      end = Math.min(buf.length, end);

      for (let i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret
    }

    function hexSlice (buf, start, end) {
      const len = buf.length;

      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;

      let out = '';
      for (let i = start; i < end; ++i) {
        out += hexSliceLookupTable[buf[i]];
      }
      return out
    }

    function utf16leSlice (buf, start, end) {
      const bytes = buf.slice(start, end);
      let res = '';
      // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
      for (let i = 0; i < bytes.length - 1; i += 2) {
        res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256));
      }
      return res
    }

    Buffer.prototype.slice = function slice (start, end) {
      const len = this.length;
      start = ~~start;
      end = end === undefined ? len : ~~end;

      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }

      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }

      if (end < start) end = start;

      const newBuf = this.subarray(start, end);
      // Return an augmented `Uint8Array` instance
      Object.setPrototypeOf(newBuf, Buffer.prototype);

      return newBuf
    };

    /*
     * Need to make sure that buffer isn't trying to write out of bounds.
     */
    function checkOffset (offset, ext, length) {
      if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
      if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
    }

    Buffer.prototype.readUintLE =
    Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      let val = this[offset];
      let mul = 1;
      let i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }

      return val
    };

    Buffer.prototype.readUintBE =
    Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) {
        checkOffset(offset, byteLength, this.length);
      }

      let val = this[offset + --byteLength];
      let mul = 1;
      while (byteLength > 0 && (mul *= 0x100)) {
        val += this[offset + --byteLength] * mul;
      }

      return val
    };

    Buffer.prototype.readUint8 =
    Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset]
    };

    Buffer.prototype.readUint16LE =
    Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | (this[offset + 1] << 8)
    };

    Buffer.prototype.readUint16BE =
    Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return (this[offset] << 8) | this[offset + 1]
    };

    Buffer.prototype.readUint32LE =
    Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);

      return ((this[offset]) |
          (this[offset + 1] << 8) |
          (this[offset + 2] << 16)) +
          (this[offset + 3] * 0x1000000)
    };

    Buffer.prototype.readUint32BE =
    Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] * 0x1000000) +
        ((this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        this[offset + 3])
    };

    Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {
      offset = offset >>> 0;
      validateNumber(offset, 'offset');
      const first = this[offset];
      const last = this[offset + 7];
      if (first === undefined || last === undefined) {
        boundsError(offset, this.length - 8);
      }

      const lo = first +
        this[++offset] * 2 ** 8 +
        this[++offset] * 2 ** 16 +
        this[++offset] * 2 ** 24;

      const hi = this[++offset] +
        this[++offset] * 2 ** 8 +
        this[++offset] * 2 ** 16 +
        last * 2 ** 24;

      return BigInt(lo) + (BigInt(hi) << BigInt(32))
    });

    Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {
      offset = offset >>> 0;
      validateNumber(offset, 'offset');
      const first = this[offset];
      const last = this[offset + 7];
      if (first === undefined || last === undefined) {
        boundsError(offset, this.length - 8);
      }

      const hi = first * 2 ** 24 +
        this[++offset] * 2 ** 16 +
        this[++offset] * 2 ** 8 +
        this[++offset];

      const lo = this[++offset] * 2 ** 24 +
        this[++offset] * 2 ** 16 +
        this[++offset] * 2 ** 8 +
        last;

      return (BigInt(hi) << BigInt(32)) + BigInt(lo)
    });

    Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      let val = this[offset];
      let mul = 1;
      let i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      let i = byteLength;
      let mul = 1;
      let val = this[offset + --i];
      while (i > 0 && (mul *= 0x100)) {
        val += this[offset + --i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 0x80)) return (this[offset])
      return ((0xff - this[offset] + 1) * -1)
    };

    Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      const val = this[offset] | (this[offset + 1] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      const val = this[offset + 1] | (this[offset] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16) |
        (this[offset + 3] << 24)
    };

    Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] << 24) |
        (this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        (this[offset + 3])
    };

    Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {
      offset = offset >>> 0;
      validateNumber(offset, 'offset');
      const first = this[offset];
      const last = this[offset + 7];
      if (first === undefined || last === undefined) {
        boundsError(offset, this.length - 8);
      }

      const val = this[offset + 4] +
        this[offset + 5] * 2 ** 8 +
        this[offset + 6] * 2 ** 16 +
        (last << 24); // Overflow

      return (BigInt(val) << BigInt(32)) +
        BigInt(first +
        this[++offset] * 2 ** 8 +
        this[++offset] * 2 ** 16 +
        this[++offset] * 2 ** 24)
    });

    Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {
      offset = offset >>> 0;
      validateNumber(offset, 'offset');
      const first = this[offset];
      const last = this[offset + 7];
      if (first === undefined || last === undefined) {
        boundsError(offset, this.length - 8);
      }

      const val = (first << 24) + // Overflow
        this[++offset] * 2 ** 16 +
        this[++offset] * 2 ** 8 +
        this[++offset];

      return (BigInt(val) << BigInt(32)) +
        BigInt(this[++offset] * 2 ** 24 +
        this[++offset] * 2 ** 16 +
        this[++offset] * 2 ** 8 +
        last)
    });

    Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, true, 23, 4)
    };

    Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, false, 23, 4)
    };

    Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, true, 52, 8)
    };

    Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, false, 52, 8)
    };

    function checkInt (buf, value, offset, ext, max, min) {
      if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
    }

    Buffer.prototype.writeUintLE =
    Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      let mul = 1;
      let i = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUintBE =
    Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      let i = byteLength - 1;
      let mul = 1;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUint8 =
    Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
      this[offset] = (value & 0xff);
      return offset + 1
    };

    Buffer.prototype.writeUint16LE =
    Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      return offset + 2
    };

    Buffer.prototype.writeUint16BE =
    Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
      return offset + 2
    };

    Buffer.prototype.writeUint32LE =
    Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      this[offset + 3] = (value >>> 24);
      this[offset + 2] = (value >>> 16);
      this[offset + 1] = (value >>> 8);
      this[offset] = (value & 0xff);
      return offset + 4
    };

    Buffer.prototype.writeUint32BE =
    Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
      return offset + 4
    };

    function wrtBigUInt64LE (buf, value, offset, min, max) {
      checkIntBI(value, min, max, buf, offset, 7);

      let lo = Number(value & BigInt(0xffffffff));
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      return offset
    }

    function wrtBigUInt64BE (buf, value, offset, min, max) {
      checkIntBI(value, min, max, buf, offset, 7);

      let lo = Number(value & BigInt(0xffffffff));
      buf[offset + 7] = lo;
      lo = lo >> 8;
      buf[offset + 6] = lo;
      lo = lo >> 8;
      buf[offset + 5] = lo;
      lo = lo >> 8;
      buf[offset + 4] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
      buf[offset + 3] = hi;
      hi = hi >> 8;
      buf[offset + 2] = hi;
      hi = hi >> 8;
      buf[offset + 1] = hi;
      hi = hi >> 8;
      buf[offset] = hi;
      return offset + 8
    }

    Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
    });

    Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
    });

    Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit = Math.pow(2, (8 * byteLength) - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      let i = 0;
      let mul = 1;
      let sub = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit = Math.pow(2, (8 * byteLength) - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      let i = byteLength - 1;
      let mul = 1;
      let sub = 0;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
      if (value < 0) value = 0xff + value + 1;
      this[offset] = (value & 0xff);
      return offset + 1
    };

    Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      return offset + 2
    };

    Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
      return offset + 2
    };

    Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      this[offset + 2] = (value >>> 16);
      this[offset + 3] = (value >>> 24);
      return offset + 4
    };

    Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (value < 0) value = 0xffffffff + value + 1;
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
      return offset + 4
    };

    Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
    });

    Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
    });

    function checkIEEE754 (buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
      if (offset < 0) throw new RangeError('Index out of range')
    }

    function writeFloat (buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4);
      }
      ieee754.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4
    }

    Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert)
    };

    function writeDouble (buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8);
      }
      ieee754.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8
    }

    Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert)
    };

    // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
    Buffer.prototype.copy = function copy (target, targetStart, start, end) {
      if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;

      // Copy 0 bytes; we're done
      if (end === start) return 0
      if (target.length === 0 || this.length === 0) return 0

      // Fatal error conditions
      if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds')
      }
      if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
      if (end < 0) throw new RangeError('sourceEnd out of bounds')

      // Are we oob?
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }

      const len = end - start;

      if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
        // Use built-in when available, missing from IE11
        this.copyWithin(targetStart, start, end);
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, end),
          targetStart
        );
      }

      return len
    };

    // Usage:
    //    buffer.fill(number[, offset[, end]])
    //    buffer.fill(buffer[, offset[, end]])
    //    buffer.fill(string[, offset[, end]][, encoding])
    Buffer.prototype.fill = function fill (val, start, end, encoding) {
      // Handle string cases:
      if (typeof val === 'string') {
        if (typeof start === 'string') {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === 'string') {
          encoding = end;
          end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== 'string') {
          throw new TypeError('encoding must be a string')
        }
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
          throw new TypeError('Unknown encoding: ' + encoding)
        }
        if (val.length === 1) {
          const code = val.charCodeAt(0);
          if ((encoding === 'utf8' && code < 128) ||
              encoding === 'latin1') {
            // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
          }
        }
      } else if (typeof val === 'number') {
        val = val & 255;
      } else if (typeof val === 'boolean') {
        val = Number(val);
      }

      // Invalid ranges are not set to a default, so can range check early.
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index')
      }

      if (end <= start) {
        return this
      }

      start = start >>> 0;
      end = end === undefined ? this.length : end >>> 0;

      if (!val) val = 0;

      let i;
      if (typeof val === 'number') {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        const bytes = Buffer.isBuffer(val)
          ? val
          : Buffer.from(val, encoding);
        const len = bytes.length;
        if (len === 0) {
          throw new TypeError('The value "' + val +
            '" is invalid for argument "value"')
        }
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }

      return this
    };

    // CUSTOM ERRORS
    // =============

    // Simplified versions from Node, changed for Buffer-only usage
    const errors = {};
    function E (sym, getMessage, Base) {
      errors[sym] = class NodeError extends Base {
        constructor () {
          super();

          Object.defineProperty(this, 'message', {
            value: getMessage.apply(this, arguments),
            writable: true,
            configurable: true
          });

          // Add the error code to the name to include it in the stack trace.
          this.name = `${this.name} [${sym}]`;
          // Access the stack to generate the error message including the error code
          // from the name.
          this.stack; // eslint-disable-line no-unused-expressions
          // Reset the name to the actual name.
          delete this.name;
        }

        get code () {
          return sym
        }

        set code (value) {
          Object.defineProperty(this, 'code', {
            configurable: true,
            enumerable: true,
            value,
            writable: true
          });
        }

        toString () {
          return `${this.name} [${sym}]: ${this.message}`
        }
      };
    }

    E('ERR_BUFFER_OUT_OF_BOUNDS',
      function (name) {
        if (name) {
          return `${name} is outside of buffer bounds`
        }

        return 'Attempt to access memory outside buffer bounds'
      }, RangeError);
    E('ERR_INVALID_ARG_TYPE',
      function (name, actual) {
        return `The "${name}" argument must be of type number. Received type ${typeof actual}`
      }, TypeError);
    E('ERR_OUT_OF_RANGE',
      function (str, range, input) {
        let msg = `The value of "${str}" is out of range.`;
        let received = input;
        if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
          received = addNumericalSeparator(String(input));
        } else if (typeof input === 'bigint') {
          received = String(input);
          if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
            received = addNumericalSeparator(received);
          }
          received += 'n';
        }
        msg += ` It must be ${range}. Received ${received}`;
        return msg
      }, RangeError);

    function addNumericalSeparator (val) {
      let res = '';
      let i = val.length;
      const start = val[0] === '-' ? 1 : 0;
      for (; i >= start + 4; i -= 3) {
        res = `_${val.slice(i - 3, i)}${res}`;
      }
      return `${val.slice(0, i)}${res}`
    }

    // CHECK FUNCTIONS
    // ===============

    function checkBounds (buf, offset, byteLength) {
      validateNumber(offset, 'offset');
      if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
        boundsError(offset, buf.length - (byteLength + 1));
      }
    }

    function checkIntBI (value, min, max, buf, offset, byteLength) {
      if (value > max || value < min) {
        const n = typeof min === 'bigint' ? 'n' : '';
        let range;
        if (byteLength > 3) {
          if (min === 0 || min === BigInt(0)) {
            range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;
          } else {
            range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +
                    `${(byteLength + 1) * 8 - 1}${n}`;
          }
        } else {
          range = `>= ${min}${n} and <= ${max}${n}`;
        }
        throw new errors.ERR_OUT_OF_RANGE('value', range, value)
      }
      checkBounds(buf, offset, byteLength);
    }

    function validateNumber (value, name) {
      if (typeof value !== 'number') {
        throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)
      }
    }

    function boundsError (value, length, type) {
      if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)
      }

      if (length < 0) {
        throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()
      }

      throw new errors.ERR_OUT_OF_RANGE(type || 'offset',
                                        `>= ${type ? 1 : 0} and <= ${length}`,
                                        value)
    }

    // HELPER FUNCTIONS
    // ================

    const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

    function base64clean (str) {
      // Node takes equal signs as end of the Base64 encoding
      str = str.split('=')[0];
      // Node strips out invalid characters like \n and \t from the string, base64-js does not
      str = str.trim().replace(INVALID_BASE64_RE, '');
      // Node converts strings with length < 2 to ''
      if (str.length < 2) return ''
      // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
      while (str.length % 4 !== 0) {
        str = str + '=';
      }
      return str
    }

    function utf8ToBytes (string, units) {
      units = units || Infinity;
      let codePoint;
      const length = string.length;
      let leadSurrogate = null;
      const bytes = [];

      for (let i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);

        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (!leadSurrogate) {
            // no lead yet
            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            }

            // valid lead
            leadSurrogate = codePoint;

            continue
          }

          // 2 leads in a row
          if (codePoint < 0xDC00) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            leadSurrogate = codePoint;
            continue
          }

          // valid surrogate pair
          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }

        leadSurrogate = null;

        // encode utf8
        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break
          bytes.push(codePoint);
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break
          bytes.push(
            codePoint >> 0x6 | 0xC0,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break
          bytes.push(
            codePoint >> 0xC | 0xE0,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x110000) {
          if ((units -= 4) < 0) break
          bytes.push(
            codePoint >> 0x12 | 0xF0,
            codePoint >> 0xC & 0x3F | 0x80,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else {
          throw new Error('Invalid code point')
        }
      }

      return bytes
    }

    function asciiToBytes (str) {
      const byteArray = [];
      for (let i = 0; i < str.length; ++i) {
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF);
      }
      return byteArray
    }

    function utf16leToBytes (str, units) {
      let c, hi, lo;
      const byteArray = [];
      for (let i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break

        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }

      return byteArray
    }

    function base64ToBytes (str) {
      return base64Js.toByteArray(base64clean(str))
    }

    function blitBuffer (src, dst, offset, length) {
      let i;
      for (i = 0; i < length; ++i) {
        if ((i + offset >= dst.length) || (i >= src.length)) break
        dst[i + offset] = src[i];
      }
      return i
    }

    // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
    // the `instanceof` check but they should be treated as of that type.
    // See: https://github.com/feross/buffer/issues/166
    function isInstance (obj, type) {
      return obj instanceof type ||
        (obj != null && obj.constructor != null && obj.constructor.name != null &&
          obj.constructor.name === type.name)
    }
    function numberIsNaN (obj) {
      // For IE11 support
      return obj !== obj // eslint-disable-line no-self-compare
    }

    // Create lookup table for `toString('hex')`
    // See: https://github.com/feross/buffer/issues/219
    const hexSliceLookupTable = (function () {
      const alphabet = '0123456789abcdef';
      const table = new Array(256);
      for (let i = 0; i < 16; ++i) {
        const i16 = i * 16;
        for (let j = 0; j < 16; ++j) {
          table[i16 + j] = alphabet[i] + alphabet[j];
        }
      }
      return table
    })();

    // Return not function with Error if BigInt not supported
    function defineBigIntMethod (fn) {
      return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn
    }

    function BufferBigIntNotDefined () {
      throw new Error('BigInt not supported')
    }
    });

    const n=proxy({selectedChain:void 0,chains:void 0,standaloneChains:void 0,standaloneUri:void 0,address:void 0,profileName:void 0,profileAvatar:void 0,profileLoading:!1,balanceLoading:!1,balance:void 0,isConnected:!1,isStandalone:!1,isCustomDesktop:!1,isCustomMobile:!1,isExplorer:!1}),a$1={state:n,subscribe(e){return subscribe(n,()=>e(n))},setChains(e){n.chains=e;},setStandaloneChains(e){n.standaloneChains=e;},setStandaloneUri(e){n.standaloneUri=e;},getSelectedChain(){if(!n.selectedChain){const e=w$1.client().getNetwork().chain;n.selectedChain=e;}return n.selectedChain},setSelectedChain(e){n.selectedChain=e;},setIsStandalone(e){n.isStandalone=e;},setIsCustomDesktop(e){n.isCustomDesktop=e;},setIsCustomMobile(e){n.isCustomMobile=e;},setIsExplorer(e){n.isExplorer=e;},getAccount(){const e=w$1.client().getAccount();n.address=e.address,n.isConnected=e.isConnected;},setAddress(e){n.address=e;},setIsConnected(e){n.isConnected=e;},setProfileName(e){n.profileName=e;},setProfileAvatar(e){n.profileAvatar=e;},setProfileLoading(e){n.profileLoading=e;},setBalanceLoading(e){n.balanceLoading=e;},setBalance(e){n.balance=e;},resetProfile(){n.profileName=void 0,n.profileAvatar=void 0,n.balance=void 0;},resetAccount(){n.address=void 0,a$1.resetProfile();}},u=proxy({initialized:!1,ethereumClient:void 0}),w$1={setEthereumClient(e){!u.initialized&&e&&(u.ethereumClient=e,a$1.setChains(e.chains),u.initialized=!0);},client(){if(u.ethereumClient)return u.ethereumClient;throw new Error("ClientCtrl has no client set")}},d={WALLETCONNECT_DEEPLINK_CHOICE:"WALLETCONNECT_DEEPLINK_CHOICE",isMobile(){return typeof window<"u"?Boolean(window.matchMedia("(pointer:coarse)").matches||/Android|webOS|iPhone|iPad|iPod|BlackBerry|Opera Mini/u.test(navigator.userAgent)):!1},isAndroid(){return d.isMobile()&&navigator.userAgent.toLowerCase().includes("android")},isEmptyObject(e){return Object.getPrototypeOf(e)===Object.prototype&&Object.getOwnPropertyNames(e).length===0&&Object.getOwnPropertySymbols(e).length===0},isHttpUrl(e){return e.startsWith("http://")||e.startsWith("https://")},formatNativeUrl(e,t,s){if(d.isHttpUrl(e))return this.formatUniversalUrl(e,t,s);let o=e;o.includes("://")||(o=e.replaceAll("/","").replaceAll(":",""),o=`${o}://`),this.setWalletConnectDeepLink(o,s);const l=encodeURIComponent(t);return `${o}wc?uri=${l}`},formatUniversalUrl(e,t,s){if(!d.isHttpUrl(e))return this.formatNativeUrl(e,t,s);let o=e;e.endsWith("/")&&(o=e.slice(0,-1)),this.setWalletConnectDeepLink(o,s);const l=encodeURIComponent(t);return `${o}/wc?uri=${l}`},async wait(e){return new Promise(t=>{setTimeout(t,e);})},openHref(e,t="_self"){window.open(e,t,"noreferrer noopener");},setWalletConnectDeepLink(e,t){localStorage.setItem(d.WALLETCONNECT_DEEPLINK_CHOICE,JSON.stringify({href:e,name:t}));},setWalletConnectAndroidDeepLink(e){const[t]=e.split("?");localStorage.setItem(d.WALLETCONNECT_DEEPLINK_CHOICE,JSON.stringify({href:t,name:"Android"}));},removeWalletConnectDeepLink(){localStorage.removeItem(d.WALLETCONNECT_DEEPLINK_CHOICE);},isNull(e){return e===null}};function O(){return typeof matchMedia<"u"&&matchMedia("(prefers-color-scheme: dark)").matches}const h$1=proxy({projectId:void 0,themeMode:O()?"dark":"light",themeColor:"default",themeBackground:d.isMobile()?"themeColor":"gradient",themeZIndex:89,mobileWallets:void 0,desktopWallets:void 0,walletImages:void 0,chainImages:void 0,tokenImages:void 0,standaloneChains:void 0,enableStandaloneMode:!1,enableNetworkView:!1,defaultChain:void 0,explorerAllowList:void 0,explorerDenyList:void 0,termsOfServiceUrl:void 0,privacyPolicyUrl:void 0}),W={state:h$1,subscribe(e){return subscribe(h$1,()=>e(h$1))},setConfig(e){var t,s,o,l;if(a$1.setStandaloneChains(e.standaloneChains),a$1.setIsStandalone(Boolean((t=e.standaloneChains)==null?void 0:t.length)||Boolean(e.enableStandaloneMode)),a$1.setIsCustomMobile(Boolean((s=e.mobileWallets)==null?void 0:s.length)),a$1.setIsCustomDesktop(Boolean((o=e.desktopWallets)==null?void 0:o.length)),a$1.setIsExplorer(Boolean((l=e.projectId)==null?void 0:l.length)),e.defaultChain)a$1.setSelectedChain(e.defaultChain);else if(!a$1.state.isStandalone){const m=w$1.client().getDefaultChain();a$1.setSelectedChain(m);}Object.assign(h$1,e);},setThemeConfig(e){Object.assign(h$1,e);}},I="https://explorer-api.walletconnect.com";function L(e){const t=Object.fromEntries(Object.entries(e).filter(([s,o])=>typeof o<"u"&&o!==null&&o!=="").map(([s,o])=>[s,o.toString()]));return new URLSearchParams(t).toString()}const f={async fetchWallets(e,t){const s=L(t),o=`${I}/v3/wallets?projectId=${e}&${s}`;return (await fetch(o)).json()},formatImageUrl(e,t){return `${I}/v3/logo/lg/${t}?projectId=${e}`}},r=proxy({wallets:{listings:[],total:0,page:1},search:{listings:[],total:0,page:1},previewWallets:[],recomendedWallets:[]});function v(){const{projectId:e}=W.state;if(!e)throw new Error("projectId is required to work with explorer api");return e}const U$1={state:r,async getPreviewWallets(e){const{listings:t}=await f.fetchWallets(v(),e);return r.previewWallets=Object.values(t),r.previewWallets},async getRecomendedWallets(){const{listings:e}=await f.fetchWallets(v(),{page:1,entries:6});r.recomendedWallets=Object.values(e);},async getPaginatedWallets(e){const{page:t,search:s}=e,{listings:o,total:l}=await f.fetchWallets(v(),e),m=Object.values(o),b=s?"search":"wallets";return r[b]={listings:[...r[b].listings,...m],total:l,page:t??1},{listings:m,total:l}},getImageUrl(e){return f.formatImageUrl(v(),e)},resetSearch(){r.search={listings:[],total:0,page:1};}},i$2=proxy({history:["ConnectWallet"],view:"ConnectWallet",data:void 0}),y={state:i$2,subscribe(e){return subscribe(i$2,()=>e(i$2))},push(e,t){e!==i$2.view&&(i$2.view=e,t&&(i$2.data=t),i$2.history.push(e));},replace(e){i$2.view=e,i$2.history=[e];},goBack(){if(i$2.history.length>1){i$2.history.pop();const[e]=i$2.history.slice(-1);i$2.view=e;}}},C=proxy({open:!1}),A={state:C,subscribe(e){return subscribe(C,()=>e(C))},open(e){var t;e!=null&&e.route&&y.replace(e.route),e!=null&&e.uri&&a$1.setStandaloneUri(e.uri),(t=e?.standaloneChains)!=null&&t.length&&a$1.setStandaloneChains(e.standaloneChains),C.open=!0;},close(){C.open=!1;}},c$1=proxy({open:!1,message:"",variant:"success"}),P={state:c$1,subscribe(e){return subscribe(c$1,()=>e(c$1))},openToast(e,t){c$1.open=!0,c$1.message=e,c$1.variant=t;},closeToast(){c$1.open=!1;}};typeof window<"u"&&(window.Buffer||(window.Buffer=buffer.Buffer),window.global||(window.global=window),window.process||(window.process={env:{}}));

    /**
     * @license
     * Copyright 2017 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     */
    const t={ATTRIBUTE:1,CHILD:2,PROPERTY:3,BOOLEAN_ATTRIBUTE:4,EVENT:5,ELEMENT:6},e=t=>(...e)=>({_$litDirective$:t,values:e});class i$1{constructor(t){}get _$AU(){return this._$AM._$AU}_$AT(t,e,i){this._$Ct=t,this._$AM=e,this._$Ci=i;}_$AS(t,e){return this.update(t,e)}update(t,e){return this.render(...e)}}

    /**
     * @license
     * Copyright 2018 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     */const o=e(class extends i$1{constructor(t$1){var i;if(super(t$1),t$1.type!==t.ATTRIBUTE||"class"!==t$1.name||(null===(i=t$1.strings)||void 0===i?void 0:i.length)>2)throw Error("`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.")}render(t){return " "+Object.keys(t).filter((i=>t[i])).join(" ")+" "}update(i,[s]){var r,o;if(void 0===this.nt){this.nt=new Set,void 0!==i.strings&&(this.st=new Set(i.strings.join(" ").split(/\s/).filter((t=>""!==t))));for(const t in s)s[t]&&!(null===(r=this.st)||void 0===r?void 0:r.has(t))&&this.nt.add(t);return this.render(s)}const e=i.element.classList;this.nt.forEach((t=>{t in s||(e.remove(t),this.nt.delete(t));}));for(const t in s){const i=!!s[t];i===this.nt.has(t)||(null===(o=this.st)||void 0===o?void 0:o.has(t))||(i?(e.add(t),this.nt.add(t)):(e.remove(t),this.nt.delete(t)));}return x}});

    function addUniqueItem(array, item) {
        array.indexOf(item) === -1 && array.push(item);
    }

    const clamp = (min, max, v) => Math.min(Math.max(v, min), max);

    const defaults$1 = {
        duration: 0.3,
        delay: 0,
        endDelay: 0,
        repeat: 0,
        easing: "ease",
    };

    const isNumber = (value) => typeof value === "number";

    const isEasingList = (easing) => Array.isArray(easing) && !isNumber(easing[0]);

    const wrap = (min, max, v) => {
        const rangeSize = max - min;
        return ((((v - min) % rangeSize) + rangeSize) % rangeSize) + min;
    };

    function getEasingForSegment(easing, i) {
        return isEasingList(easing)
            ? easing[wrap(0, easing.length, i)]
            : easing;
    }

    const mix = (min, max, progress) => -progress * min + progress * max + min;

    const noop = () => { };
    const noopReturn = (v) => v;

    const progress = (min, max, value) => max - min === 0 ? 1 : (value - min) / (max - min);

    function fillOffset(offset, remaining) {
        const min = offset[offset.length - 1];
        for (let i = 1; i <= remaining; i++) {
            const offsetProgress = progress(0, remaining, i);
            offset.push(mix(min, 1, offsetProgress));
        }
    }
    function defaultOffset(length) {
        const offset = [0];
        fillOffset(offset, length - 1);
        return offset;
    }

    function interpolate(output, input = defaultOffset(output.length), easing = noopReturn) {
        const length = output.length;
        /**
         * If the input length is lower than the output we
         * fill the input to match. This currently assumes the input
         * is an animation progress value so is a good candidate for
         * moving outside the function.
         */
        const remainder = length - input.length;
        remainder > 0 && fillOffset(input, remainder);
        return (t) => {
            let i = 0;
            for (; i < length - 2; i++) {
                if (t < input[i + 1])
                    break;
            }
            let progressInRange = clamp(0, 1, progress(input[i], input[i + 1], t));
            const segmentEasing = getEasingForSegment(easing, i);
            progressInRange = segmentEasing(progressInRange);
            return mix(output[i], output[i + 1], progressInRange);
        };
    }

    const isCubicBezier = (easing) => Array.isArray(easing) && isNumber(easing[0]);

    const isEasingGenerator = (easing) => typeof easing === "object" &&
        Boolean(easing.createAnimation);

    const isFunction = (value) => typeof value === "function";

    const isString = (value) => typeof value === "string";

    const time = {
        ms: (seconds) => seconds * 1000,
        s: (milliseconds) => milliseconds / 1000,
    };

    /*
      Convert velocity into velocity per second

      @param [number]: Unit per frame
      @param [number]: Frame duration in ms
    */
    function velocityPerSecond(velocity, frameDuration) {
        return frameDuration ? velocity * (1000 / frameDuration) : 0;
    }

    /*
      Bezier function generator

      This has been modified from Gaëtan Renaudeau's BezierEasing
      https://github.com/gre/bezier-easing/blob/master/src/index.js
      https://github.com/gre/bezier-easing/blob/master/LICENSE
      
      I've removed the newtonRaphsonIterate algo because in benchmarking it
      wasn't noticiably faster than binarySubdivision, indeed removing it
      usually improved times, depending on the curve.

      I also removed the lookup table, as for the added bundle size and loop we're
      only cutting ~4 or so subdivision iterations. I bumped the max iterations up
      to 12 to compensate and this still tended to be faster for no perceivable
      loss in accuracy.

      Usage
        const easeOut = cubicBezier(.17,.67,.83,.67);
        const x = easeOut(0.5); // returns 0.627...
    */
    // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
    const calcBezier = (t, a1, a2) => (((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) * t;
    const subdivisionPrecision = 0.0000001;
    const subdivisionMaxIterations = 12;
    function binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {
        let currentX;
        let currentT;
        let i = 0;
        do {
            currentT = lowerBound + (upperBound - lowerBound) / 2.0;
            currentX = calcBezier(currentT, mX1, mX2) - x;
            if (currentX > 0.0) {
                upperBound = currentT;
            }
            else {
                lowerBound = currentT;
            }
        } while (Math.abs(currentX) > subdivisionPrecision &&
            ++i < subdivisionMaxIterations);
        return currentT;
    }
    function cubicBezier(mX1, mY1, mX2, mY2) {
        // If this is a linear gradient, return linear easing
        if (mX1 === mY1 && mX2 === mY2)
            return noopReturn;
        const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);
        // If animation is at start/end, return t without easing
        return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);
    }

    const steps = (steps, direction = "end") => (progress) => {
        progress =
            direction === "end"
                ? Math.min(progress, 0.999)
                : Math.max(progress, 0.001);
        const expanded = progress * steps;
        const rounded = direction === "end" ? Math.floor(expanded) : Math.ceil(expanded);
        return clamp(0, 1, rounded / steps);
    };

    const namedEasings = {
        ease: cubicBezier(0.25, 0.1, 0.25, 1.0),
        "ease-in": cubicBezier(0.42, 0.0, 1.0, 1.0),
        "ease-in-out": cubicBezier(0.42, 0.0, 0.58, 1.0),
        "ease-out": cubicBezier(0.0, 0.0, 0.58, 1.0),
    };
    const functionArgsRegex = /\((.*?)\)/;
    function getEasingFunction(definition) {
        // If already an easing function, return
        if (isFunction(definition))
            return definition;
        // If an easing curve definition, return bezier function
        if (isCubicBezier(definition))
            return cubicBezier(...definition);
        // If we have a predefined easing function, return
        if (namedEasings[definition])
            return namedEasings[definition];
        // If this is a steps function, attempt to create easing curve
        if (definition.startsWith("steps")) {
            const args = functionArgsRegex.exec(definition);
            if (args) {
                const argsArray = args[1].split(",");
                return steps(parseFloat(argsArray[0]), argsArray[1].trim());
            }
        }
        return noopReturn;
    }

    class Animation {
        constructor(output, keyframes = [0, 1], { easing, duration: initialDuration = defaults$1.duration, delay = defaults$1.delay, endDelay = defaults$1.endDelay, repeat = defaults$1.repeat, offset, direction = "normal", } = {}) {
            this.startTime = null;
            this.rate = 1;
            this.t = 0;
            this.cancelTimestamp = null;
            this.easing = noopReturn;
            this.duration = 0;
            this.totalDuration = 0;
            this.repeat = 0;
            this.playState = "idle";
            this.finished = new Promise((resolve, reject) => {
                this.resolve = resolve;
                this.reject = reject;
            });
            easing = easing || defaults$1.easing;
            if (isEasingGenerator(easing)) {
                const custom = easing.createAnimation(keyframes);
                easing = custom.easing;
                keyframes = custom.keyframes || keyframes;
                initialDuration = custom.duration || initialDuration;
            }
            this.repeat = repeat;
            this.easing = isEasingList(easing) ? noopReturn : getEasingFunction(easing);
            this.updateDuration(initialDuration);
            const interpolate$1 = interpolate(keyframes, offset, isEasingList(easing) ? easing.map(getEasingFunction) : noopReturn);
            this.tick = (timestamp) => {
                var _a;
                // TODO: Temporary fix for OptionsResolver typing
                delay = delay;
                let t = 0;
                if (this.pauseTime !== undefined) {
                    t = this.pauseTime;
                }
                else {
                    t = (timestamp - this.startTime) * this.rate;
                }
                this.t = t;
                // Convert to seconds
                t /= 1000;
                // Rebase on delay
                t = Math.max(t - delay, 0);
                /**
                 * If this animation has finished, set the current time
                 * to the total duration.
                 */
                if (this.playState === "finished" && this.pauseTime === undefined) {
                    t = this.totalDuration;
                }
                /**
                 * Get the current progress (0-1) of the animation. If t is >
                 * than duration we'll get values like 2.5 (midway through the
                 * third iteration)
                 */
                const progress = t / this.duration;
                // TODO progress += iterationStart
                /**
                 * Get the current iteration (0 indexed). For instance the floor of
                 * 2.5 is 2.
                 */
                let currentIteration = Math.floor(progress);
                /**
                 * Get the current progress of the iteration by taking the remainder
                 * so 2.5 is 0.5 through iteration 2
                 */
                let iterationProgress = progress % 1.0;
                if (!iterationProgress && progress >= 1) {
                    iterationProgress = 1;
                }
                /**
                 * If iteration progress is 1 we count that as the end
                 * of the previous iteration.
                 */
                iterationProgress === 1 && currentIteration--;
                /**
                 * Reverse progress if we're not running in "normal" direction
                 */
                const iterationIsOdd = currentIteration % 2;
                if (direction === "reverse" ||
                    (direction === "alternate" && iterationIsOdd) ||
                    (direction === "alternate-reverse" && !iterationIsOdd)) {
                    iterationProgress = 1 - iterationProgress;
                }
                const p = t >= this.totalDuration ? 1 : Math.min(iterationProgress, 1);
                const latest = interpolate$1(this.easing(p));
                output(latest);
                const isAnimationFinished = this.pauseTime === undefined &&
                    (this.playState === "finished" || t >= this.totalDuration + endDelay);
                if (isAnimationFinished) {
                    this.playState = "finished";
                    (_a = this.resolve) === null || _a === void 0 ? void 0 : _a.call(this, latest);
                }
                else if (this.playState !== "idle") {
                    this.frameRequestId = requestAnimationFrame(this.tick);
                }
            };
            this.play();
        }
        play() {
            const now = performance.now();
            this.playState = "running";
            if (this.pauseTime !== undefined) {
                this.startTime = now - this.pauseTime;
            }
            else if (!this.startTime) {
                this.startTime = now;
            }
            this.cancelTimestamp = this.startTime;
            this.pauseTime = undefined;
            this.frameRequestId = requestAnimationFrame(this.tick);
        }
        pause() {
            this.playState = "paused";
            this.pauseTime = this.t;
        }
        finish() {
            this.playState = "finished";
            this.tick(0);
        }
        stop() {
            var _a;
            this.playState = "idle";
            if (this.frameRequestId !== undefined) {
                cancelAnimationFrame(this.frameRequestId);
            }
            (_a = this.reject) === null || _a === void 0 ? void 0 : _a.call(this, false);
        }
        cancel() {
            this.stop();
            this.tick(this.cancelTimestamp);
        }
        reverse() {
            this.rate *= -1;
        }
        commitStyles() { }
        updateDuration(duration) {
            this.duration = duration;
            this.totalDuration = duration * (this.repeat + 1);
        }
        get currentTime() {
            return this.t;
        }
        set currentTime(t) {
            if (this.pauseTime !== undefined || this.rate === 0) {
                this.pauseTime = t;
            }
            else {
                this.startTime = performance.now() - t / this.rate;
            }
        }
        get playbackRate() {
            return this.rate;
        }
        set playbackRate(rate) {
            this.rate = rate;
        }
    }

    /**
     * The MotionValue tracks the state of a single animatable
     * value. Currently, updatedAt and current are unused. The
     * long term idea is to use this to minimise the number
     * of DOM reads, and to abstract the DOM interactions here.
     */
    class MotionValue {
        setAnimation(animation) {
            this.animation = animation;
            animation === null || animation === void 0 ? void 0 : animation.finished.then(() => this.clearAnimation()).catch(() => { });
        }
        clearAnimation() {
            this.animation = this.generator = undefined;
        }
    }

    const data = new WeakMap();
    function getAnimationData(element) {
        if (!data.has(element)) {
            data.set(element, {
                transforms: [],
                values: new Map(),
            });
        }
        return data.get(element);
    }
    function getMotionValue(motionValues, name) {
        if (!motionValues.has(name)) {
            motionValues.set(name, new MotionValue());
        }
        return motionValues.get(name);
    }

    /**
     * A list of all transformable axes. We'll use this list to generated a version
     * of each axes for each transform.
     */
    const axes = ["", "X", "Y", "Z"];
    /**
     * An ordered array of each transformable value. By default, transform values
     * will be sorted to this order.
     */
    const order = ["translate", "scale", "rotate", "skew"];
    const transformAlias = {
        x: "translateX",
        y: "translateY",
        z: "translateZ",
    };
    const rotation = {
        syntax: "<angle>",
        initialValue: "0deg",
        toDefaultUnit: (v) => v + "deg",
    };
    const baseTransformProperties = {
        translate: {
            syntax: "<length-percentage>",
            initialValue: "0px",
            toDefaultUnit: (v) => v + "px",
        },
        rotate: rotation,
        scale: {
            syntax: "<number>",
            initialValue: 1,
            toDefaultUnit: noopReturn,
        },
        skew: rotation,
    };
    const transformDefinitions = new Map();
    const asTransformCssVar = (name) => `--motion-${name}`;
    /**
     * Generate a list of every possible transform key
     */
    const transforms = ["x", "y", "z"];
    order.forEach((name) => {
        axes.forEach((axis) => {
            transforms.push(name + axis);
            transformDefinitions.set(asTransformCssVar(name + axis), baseTransformProperties[name]);
        });
    });
    /**
     * A function to use with Array.sort to sort transform keys by their default order.
     */
    const compareTransformOrder = (a, b) => transforms.indexOf(a) - transforms.indexOf(b);
    /**
     * Provide a quick way to check if a string is the name of a transform
     */
    const transformLookup = new Set(transforms);
    const isTransform = (name) => transformLookup.has(name);
    const addTransformToElement = (element, name) => {
        // Map x to translateX etc
        if (transformAlias[name])
            name = transformAlias[name];
        const { transforms } = getAnimationData(element);
        addUniqueItem(transforms, name);
        /**
         * TODO: An optimisation here could be to cache the transform in element data
         * and only update if this has changed.
         */
        element.style.transform = buildTransformTemplate(transforms);
    };
    const buildTransformTemplate = (transforms) => transforms
        .sort(compareTransformOrder)
        .reduce(transformListToString, "")
        .trim();
    const transformListToString = (template, name) => `${template} ${name}(var(${asTransformCssVar(name)}))`;

    const isCssVar = (name) => name.startsWith("--");
    const registeredProperties = new Set();
    function registerCssVariable(name) {
        if (registeredProperties.has(name))
            return;
        registeredProperties.add(name);
        try {
            const { syntax, initialValue } = transformDefinitions.has(name)
                ? transformDefinitions.get(name)
                : {};
            CSS.registerProperty({
                name,
                inherits: false,
                syntax,
                initialValue,
            });
        }
        catch (e) { }
    }

    const testAnimation = (keyframes, options) => document.createElement("div").animate(keyframes, options);
    const featureTests = {
        cssRegisterProperty: () => typeof CSS !== "undefined" &&
            Object.hasOwnProperty.call(CSS, "registerProperty"),
        waapi: () => Object.hasOwnProperty.call(Element.prototype, "animate"),
        partialKeyframes: () => {
            try {
                testAnimation({ opacity: [1] });
            }
            catch (e) {
                return false;
            }
            return true;
        },
        finished: () => Boolean(testAnimation({ opacity: [0, 1] }, { duration: 0.001 }).finished),
        linearEasing: () => {
            try {
                testAnimation({ opacity: 0 }, { easing: "linear(0, 1)" });
            }
            catch (e) {
                return false;
            }
            return true;
        },
    };
    const results = {};
    const supports = {};
    for (const key in featureTests) {
        supports[key] = () => {
            if (results[key] === undefined)
                results[key] = featureTests[key]();
            return results[key];
        };
    }

    // Create a linear easing point for every x second
    const resolution = 0.015;
    const generateLinearEasingPoints = (easing, duration) => {
        let points = "";
        const numPoints = Math.round(duration / resolution);
        for (let i = 0; i < numPoints; i++) {
            points += easing(progress(0, numPoints - 1, i)) + ", ";
        }
        return points.substring(0, points.length - 2);
    };
    const convertEasing = (easing, duration) => {
        if (isFunction(easing)) {
            return supports.linearEasing()
                ? `linear(${generateLinearEasingPoints(easing, duration)})`
                : defaults$1.easing;
        }
        else {
            return isCubicBezier(easing) ? cubicBezierAsString(easing) : easing;
        }
    };
    const cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;

    function hydrateKeyframes(keyframes, readInitialValue) {
        for (let i = 0; i < keyframes.length; i++) {
            if (keyframes[i] === null) {
                keyframes[i] = i ? keyframes[i - 1] : readInitialValue();
            }
        }
        return keyframes;
    }
    const keyframesList = (keyframes) => Array.isArray(keyframes) ? keyframes : [keyframes];

    function getStyleName(key) {
        if (transformAlias[key])
            key = transformAlias[key];
        return isTransform(key) ? asTransformCssVar(key) : key;
    }

    const style = {
        get: (element, name) => {
            name = getStyleName(name);
            let value = isCssVar(name)
                ? element.style.getPropertyValue(name)
                : getComputedStyle(element)[name];
            if (!value && value !== 0) {
                const definition = transformDefinitions.get(name);
                if (definition)
                    value = definition.initialValue;
            }
            return value;
        },
        set: (element, name, value) => {
            name = getStyleName(name);
            if (isCssVar(name)) {
                element.style.setProperty(name, value);
            }
            else {
                element.style[name] = value;
            }
        },
    };

    function stopAnimation(animation, needsCommit = true) {
        if (!animation || animation.playState === "finished")
            return;
        // Suppress error thrown by WAAPI
        try {
            if (animation.stop) {
                animation.stop();
            }
            else {
                needsCommit && animation.commitStyles();
                animation.cancel();
            }
        }
        catch (e) { }
    }

    function getUnitConverter(keyframes, definition) {
        var _a;
        let toUnit = (definition === null || definition === void 0 ? void 0 : definition.toDefaultUnit) || noopReturn;
        const finalKeyframe = keyframes[keyframes.length - 1];
        if (isString(finalKeyframe)) {
            const unit = ((_a = finalKeyframe.match(/(-?[\d.]+)([a-z%]*)/)) === null || _a === void 0 ? void 0 : _a[2]) || "";
            if (unit)
                toUnit = (value) => value + unit;
        }
        return toUnit;
    }

    function getDevToolsRecord() {
        return window.__MOTION_DEV_TOOLS_RECORD;
    }
    function animateStyle(element, key, keyframesDefinition, options = {}, AnimationPolyfill) {
        const record = getDevToolsRecord();
        const isRecording = options.record !== false && record;
        let animation;
        let { duration = defaults$1.duration, delay = defaults$1.delay, endDelay = defaults$1.endDelay, repeat = defaults$1.repeat, easing = defaults$1.easing, persist = false, direction, offset, allowWebkitAcceleration = false, } = options;
        const data = getAnimationData(element);
        const valueIsTransform = isTransform(key);
        let canAnimateNatively = supports.waapi();
        /**
         * If this is an individual transform, we need to map its
         * key to a CSS variable and update the element's transform style
         */
        valueIsTransform && addTransformToElement(element, key);
        const name = getStyleName(key);
        const motionValue = getMotionValue(data.values, name);
        /**
         * Get definition of value, this will be used to convert numerical
         * keyframes into the default value type.
         */
        const definition = transformDefinitions.get(name);
        /**
         * Stop the current animation, if any. Because this will trigger
         * commitStyles (DOM writes) and we might later trigger DOM reads,
         * this is fired now and we return a factory function to create
         * the actual animation that can get called in batch,
         */
        stopAnimation(motionValue.animation, !(isEasingGenerator(easing) && motionValue.generator) &&
            options.record !== false);
        /**
         * Batchable factory function containing all DOM reads.
         */
        return () => {
            const readInitialValue = () => { var _a, _b; return (_b = (_a = style.get(element, name)) !== null && _a !== void 0 ? _a : definition === null || definition === void 0 ? void 0 : definition.initialValue) !== null && _b !== void 0 ? _b : 0; };
            /**
             * Replace null values with the previous keyframe value, or read
             * it from the DOM if it's the first keyframe.
             */
            let keyframes = hydrateKeyframes(keyframesList(keyframesDefinition), readInitialValue);
            /**
             * Detect unit type of keyframes.
             */
            const toUnit = getUnitConverter(keyframes, definition);
            if (isEasingGenerator(easing)) {
                const custom = easing.createAnimation(keyframes, key !== "opacity", readInitialValue, name, motionValue);
                easing = custom.easing;
                keyframes = custom.keyframes || keyframes;
                duration = custom.duration || duration;
            }
            /**
             * If this is a CSS variable we need to register it with the browser
             * before it can be animated natively. We also set it with setProperty
             * rather than directly onto the element.style object.
             */
            if (isCssVar(name)) {
                if (supports.cssRegisterProperty()) {
                    registerCssVariable(name);
                }
                else {
                    canAnimateNatively = false;
                }
            }
            /**
             * If we've been passed a custom easing function, and this browser
             * does **not** support linear() easing, and the value is a transform
             * (and thus a pure number) we can still support the custom easing
             * by falling back to the animation polyfill.
             */
            if (valueIsTransform &&
                !supports.linearEasing() &&
                (isFunction(easing) || (isEasingList(easing) && easing.some(isFunction)))) {
                canAnimateNatively = false;
            }
            /**
             * If we can animate this value with WAAPI, do so.
             */
            if (canAnimateNatively) {
                /**
                 * Convert numbers to default value types. Currently this only supports
                 * transforms but it could also support other value types.
                 */
                if (definition) {
                    keyframes = keyframes.map((value) => isNumber(value) ? definition.toDefaultUnit(value) : value);
                }
                /**
                 * If this browser doesn't support partial/implicit keyframes we need to
                 * explicitly provide one.
                 */
                if (keyframes.length === 1 &&
                    (!supports.partialKeyframes() || isRecording)) {
                    keyframes.unshift(readInitialValue());
                }
                const animationOptions = {
                    delay: time.ms(delay),
                    duration: time.ms(duration),
                    endDelay: time.ms(endDelay),
                    easing: !isEasingList(easing)
                        ? convertEasing(easing, duration)
                        : undefined,
                    direction,
                    iterations: repeat + 1,
                    fill: "both",
                };
                animation = element.animate({
                    [name]: keyframes,
                    offset,
                    easing: isEasingList(easing)
                        ? easing.map((thisEasing) => convertEasing(thisEasing, duration))
                        : undefined,
                }, animationOptions);
                /**
                 * Polyfill finished Promise in browsers that don't support it
                 */
                if (!animation.finished) {
                    animation.finished = new Promise((resolve, reject) => {
                        animation.onfinish = resolve;
                        animation.oncancel = reject;
                    });
                }
                const target = keyframes[keyframes.length - 1];
                animation.finished
                    .then(() => {
                    if (persist)
                        return;
                    // Apply styles to target
                    style.set(element, name, target);
                    // Ensure fill modes don't persist
                    animation.cancel();
                })
                    .catch(noop);
                /**
                 * This forces Webkit to run animations on the main thread by exploiting
                 * this condition:
                 * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/platform/graphics/ca/GraphicsLayerCA.cpp?rev=281238#L1099
                 *
                 * This fixes Webkit's timing bugs, like accelerated animations falling
                 * out of sync with main thread animations and massive delays in starting
                 * accelerated animations in WKWebView.
                 */
                if (!allowWebkitAcceleration)
                    animation.playbackRate = 1.000001;
                /**
                 * If we can't animate the value natively then we can fallback to the numbers-only
                 * polyfill for transforms.
                 */
            }
            else if (AnimationPolyfill && valueIsTransform) {
                /**
                 * If any keyframe is a string (because we measured it from the DOM), we need to convert
                 * it into a number before passing to the Animation polyfill.
                 */
                keyframes = keyframes.map((value) => typeof value === "string" ? parseFloat(value) : value);
                /**
                 * If we only have a single keyframe, we need to create an initial keyframe by reading
                 * the current value from the DOM.
                 */
                if (keyframes.length === 1) {
                    keyframes.unshift(parseFloat(readInitialValue()));
                }
                animation = new AnimationPolyfill((latest) => {
                    style.set(element, name, toUnit ? toUnit(latest) : latest);
                }, keyframes, Object.assign(Object.assign({}, options), { duration,
                    easing }));
            }
            else {
                const target = keyframes[keyframes.length - 1];
                style.set(element, name, definition && isNumber(target)
                    ? definition.toDefaultUnit(target)
                    : target);
            }
            if (isRecording) {
                record(element, key, keyframes, {
                    duration,
                    delay: delay,
                    easing,
                    repeat,
                    offset,
                }, "motion-one");
            }
            motionValue.setAnimation(animation);
            return animation;
        };
    }

    const getOptions = (options, key) => 
    /**
     * TODO: Make test for this
     * Always return a new object otherwise delay is overwritten by results of stagger
     * and this results in no stagger
     */
    options[key] ? Object.assign(Object.assign({}, options), options[key]) : Object.assign({}, options);

    function resolveElements(elements, selectorCache) {
        var _a;
        if (typeof elements === "string") {
            if (selectorCache) {
                (_a = selectorCache[elements]) !== null && _a !== void 0 ? _a : (selectorCache[elements] = document.querySelectorAll(elements));
                elements = selectorCache[elements];
            }
            else {
                elements = document.querySelectorAll(elements);
            }
        }
        else if (elements instanceof Element) {
            elements = [elements];
        }
        /**
         * Return an empty array
         */
        return Array.from(elements || []);
    }

    const createAnimation = (factory) => factory();
    const withControls = (animationFactory, options, duration = defaults$1.duration) => {
        return new Proxy({
            animations: animationFactory.map(createAnimation).filter(Boolean),
            duration,
            options,
        }, controls);
    };
    /**
     * TODO:
     * Currently this returns the first animation, ideally it would return
     * the first active animation.
     */
    const getActiveAnimation = (state) => state.animations[0];
    const controls = {
        get: (target, key) => {
            const activeAnimation = getActiveAnimation(target);
            switch (key) {
                case "duration":
                    return target.duration;
                case "currentTime":
                    return time.s((activeAnimation === null || activeAnimation === void 0 ? void 0 : activeAnimation[key]) || 0);
                case "playbackRate":
                case "playState":
                    return activeAnimation === null || activeAnimation === void 0 ? void 0 : activeAnimation[key];
                case "finished":
                    if (!target.finished) {
                        target.finished = Promise.all(target.animations.map(selectFinished)).catch(noop);
                    }
                    return target.finished;
                case "stop":
                    return () => {
                        target.animations.forEach((animation) => stopAnimation(animation));
                    };
                case "forEachNative":
                    /**
                     * This is for internal use only, fire a callback for each
                     * underlying animation.
                     */
                    return (callback) => {
                        target.animations.forEach((animation) => callback(animation, target));
                    };
                default:
                    return typeof (activeAnimation === null || activeAnimation === void 0 ? void 0 : activeAnimation[key]) === "undefined"
                        ? undefined
                        : () => target.animations.forEach((animation) => animation[key]());
            }
        },
        set: (target, key, value) => {
            switch (key) {
                case "currentTime":
                    value = time.ms(value);
                case "currentTime":
                case "playbackRate":
                    for (let i = 0; i < target.animations.length; i++) {
                        target.animations[i][key] = value;
                    }
                    return true;
            }
            return false;
        },
    };
    const selectFinished = (animation) => animation.finished;

    function resolveOption(option, i, total) {
        return isFunction(option) ? option(i, total) : option;
    }

    function createAnimate(AnimatePolyfill) {
        return function animate(elements, keyframes, options = {}) {
            elements = resolveElements(elements);
            const numElements = elements.length;
            /**
             * Create and start new animations
             */
            const animationFactories = [];
            for (let i = 0; i < numElements; i++) {
                const element = elements[i];
                for (const key in keyframes) {
                    const valueOptions = getOptions(options, key);
                    valueOptions.delay = resolveOption(valueOptions.delay, i, numElements);
                    const animation = animateStyle(element, key, keyframes[key], valueOptions, AnimatePolyfill);
                    animationFactories.push(animation);
                }
            }
            return withControls(animationFactories, options, 
            /**
             * TODO:
             * If easing is set to spring or glide, duration will be dynamically
             * generated. Ideally we would dynamically generate this from
             * animation.effect.getComputedTiming().duration but this isn't
             * supported in iOS13 or our number polyfill. Perhaps it's possible
             * to Proxy animations returned from animateStyle that has duration
             * as a getter.
             */
            options.duration);
        };
    }

    const animate$1 = createAnimate(Animation);

    const sampleT = 5; // ms
    function calcGeneratorVelocity(resolveValue, t, current) {
        const prevT = Math.max(t - sampleT, 0);
        return velocityPerSecond(current - resolveValue(prevT), t - prevT);
    }

    const defaults = {
        stiffness: 100.0,
        damping: 10.0,
        mass: 1.0,
    };

    const calcDampingRatio = (stiffness = defaults.stiffness, damping = defaults.damping, mass = defaults.mass) => damping / (2 * Math.sqrt(stiffness * mass));

    function hasReachedTarget(origin, target, current) {
        return ((origin < target && current >= target) ||
            (origin > target && current <= target));
    }

    const spring$1 = ({ stiffness = defaults.stiffness, damping = defaults.damping, mass = defaults.mass, from = 0, to = 1, velocity = 0.0, restSpeed = 2, restDistance = 0.5, } = {}) => {
        velocity = velocity ? time.s(velocity) : 0.0;
        const state = {
            done: false,
            hasReachedTarget: false,
            current: from,
            target: to,
        };
        const initialDelta = to - from;
        const undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;
        const dampingRatio = calcDampingRatio(stiffness, damping, mass);
        let resolveSpring;
        if (dampingRatio < 1) {
            const angularFreq = undampedAngularFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
            // Underdamped spring (bouncy)
            resolveSpring = (t) => to -
                Math.exp(-dampingRatio * undampedAngularFreq * t) *
                    (((-velocity + dampingRatio * undampedAngularFreq * initialDelta) /
                        angularFreq) *
                        Math.sin(angularFreq * t) +
                        initialDelta * Math.cos(angularFreq * t));
        }
        else {
            // Critically damped spring
            resolveSpring = (t) => {
                return (to -
                    Math.exp(-undampedAngularFreq * t) *
                        (initialDelta + (-velocity + undampedAngularFreq * initialDelta) * t));
            };
        }
        return (t) => {
            state.current = resolveSpring(t);
            const currentVelocity = t === 0
                ? velocity
                : calcGeneratorVelocity(resolveSpring, t, state.current);
            const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
            const isBelowDisplacementThreshold = Math.abs(to - state.current) <= restDistance;
            state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;
            state.hasReachedTarget = hasReachedTarget(from, to, state.current);
            return state;
        };
    };

    const timeStep = 10;
    const maxDuration = 10000;
    function pregenerateKeyframes(generator, toUnit = noopReturn) {
        let overshootDuration = undefined;
        let timestamp = timeStep;
        let state = generator(0);
        const keyframes = [toUnit(state.current)];
        while (!state.done && timestamp < maxDuration) {
            state = generator(timestamp);
            keyframes.push(toUnit(state.done ? state.target : state.current));
            if (overshootDuration === undefined && state.hasReachedTarget) {
                overshootDuration = timestamp;
            }
            timestamp += timeStep;
        }
        const duration = timestamp - timeStep;
        /**
         * If generating an animation that didn't actually move,
         * generate a second keyframe so we have an origin and target.
         */
        if (keyframes.length === 1)
            keyframes.push(state.current);
        return {
            keyframes,
            duration: duration / 1000,
            overshootDuration: (overshootDuration !== null && overshootDuration !== void 0 ? overshootDuration : duration) / 1000,
        };
    }

    function canGenerate(value) {
        return isNumber(value) && !isNaN(value);
    }
    function getAsNumber(value) {
        return isString(value) ? parseFloat(value) : value;
    }
    function createGeneratorEasing(createGenerator) {
        const keyframesCache = new WeakMap();
        return (options = {}) => {
            const generatorCache = new Map();
            const getGenerator = (from = 0, to = 100, velocity = 0, isScale = false) => {
                const key = `${from}-${to}-${velocity}-${isScale}`;
                if (!generatorCache.has(key)) {
                    generatorCache.set(key, createGenerator(Object.assign({ from,
                        to,
                        velocity, restSpeed: isScale ? 0.05 : 2, restDistance: isScale ? 0.01 : 0.5 }, options)));
                }
                return generatorCache.get(key);
            };
            const getKeyframes = (generator, toUnit) => {
                if (!keyframesCache.has(generator)) {
                    keyframesCache.set(generator, pregenerateKeyframes(generator, toUnit));
                }
                return keyframesCache.get(generator);
            };
            return {
                createAnimation: (keyframes, shouldGenerate = true, getOrigin, name, motionValue) => {
                    let settings;
                    let origin;
                    let target;
                    let velocity = 0;
                    let toUnit = noopReturn;
                    const numKeyframes = keyframes.length;
                    /**
                     * If we should generate an animation for this value, run some preperation
                     * like resolving target/origin, finding a unit (if any) and determine if
                     * it is actually possible to generate.
                     */
                    if (shouldGenerate) {
                        toUnit = getUnitConverter(keyframes, name ? transformDefinitions.get(getStyleName(name)) : undefined);
                        const targetDefinition = keyframes[numKeyframes - 1];
                        target = getAsNumber(targetDefinition);
                        if (numKeyframes > 1 && keyframes[0] !== null) {
                            /**
                             * If we have multiple keyframes, take the initial keyframe as the origin.
                             */
                            origin = getAsNumber(keyframes[0]);
                        }
                        else {
                            const prevGenerator = motionValue === null || motionValue === void 0 ? void 0 : motionValue.generator;
                            /**
                             * If we have an existing generator for this value we can use it to resolve
                             * the animation's current value and velocity.
                             */
                            if (prevGenerator) {
                                /**
                                 * If we have a generator for this value we can use it to resolve
                                 * the animations's current value and velocity.
                                 */
                                const { animation, generatorStartTime } = motionValue;
                                const startTime = (animation === null || animation === void 0 ? void 0 : animation.startTime) || generatorStartTime || 0;
                                const currentTime = (animation === null || animation === void 0 ? void 0 : animation.currentTime) || performance.now() - startTime;
                                const prevGeneratorCurrent = prevGenerator(currentTime).current;
                                origin = prevGeneratorCurrent;
                                velocity = calcGeneratorVelocity((t) => prevGenerator(t).current, currentTime, prevGeneratorCurrent);
                            }
                            else if (getOrigin) {
                                /**
                                 * As a last resort, read the origin from the DOM.
                                 */
                                origin = getAsNumber(getOrigin());
                            }
                        }
                    }
                    /**
                     * If we've determined it is possible to generate an animation, do so.
                     */
                    if (canGenerate(origin) && canGenerate(target)) {
                        const generator = getGenerator(origin, target, velocity, name === null || name === void 0 ? void 0 : name.includes("scale"));
                        settings = Object.assign(Object.assign({}, getKeyframes(generator, toUnit)), { easing: "linear" });
                        // TODO Add test for this
                        if (motionValue) {
                            motionValue.generator = generator;
                            motionValue.generatorStartTime = performance.now();
                        }
                    }
                    /**
                     * If by now we haven't generated a set of keyframes, create a generic generator
                     * based on the provided props that animates from 0-100 to fetch a rough
                     * "overshootDuration" - the moment when the generator first hits the animation target.
                     * Then return animation settings that will run a normal animation for that duration.
                     */
                    if (!settings) {
                        const keyframesMetadata = getKeyframes(getGenerator(0, 100));
                        settings = {
                            easing: "ease",
                            duration: keyframesMetadata.overshootDuration,
                        };
                    }
                    return settings;
                },
            };
        };
    }

    const spring = createGeneratorEasing(spring$1);

    function animateProgress(target, options = {}) {
        return withControls([
            () => {
                const animation = new Animation(target, [0, 1], options);
                animation.finished.catch(() => { });
                return animation;
            },
        ], options, options.duration);
    }
    function animate(target, keyframesOrOptions, options) {
        const factory = isFunction(target) ? animateProgress : animate$1;
        return factory(target, keyframesOrOptions, options);
    }

    /**
     * @license
     * Copyright 2018 Google LLC
     * SPDX-License-Identifier: BSD-3-Clause
     */const l$1=l=>null!=l?l:b$2;

    // can-promise has a crash in some versions of react native that dont have
    // standard global objects
    // https://github.com/soldair/node-qrcode/issues/157

    var canPromise = function () {
      return typeof Promise === 'function' && Promise.prototype && Promise.prototype.then
    };

    let toSJISFunction;
    const CODEWORDS_COUNT = [
      0, // Not used
      26, 44, 70, 100, 134, 172, 196, 242, 292, 346,
      404, 466, 532, 581, 655, 733, 815, 901, 991, 1085,
      1156, 1258, 1364, 1474, 1588, 1706, 1828, 1921, 2051, 2185,
      2323, 2465, 2611, 2761, 2876, 3034, 3196, 3362, 3532, 3706
    ];

    /**
     * Returns the QR Code size for the specified version
     *
     * @param  {Number} version QR Code version
     * @return {Number}         size of QR code
     */
    var getSymbolSize$1 = function getSymbolSize (version) {
      if (!version) throw new Error('"version" cannot be null or undefined')
      if (version < 1 || version > 40) throw new Error('"version" should be in range from 1 to 40')
      return version * 4 + 17
    };

    /**
     * Returns the total number of codewords used to store data and EC information.
     *
     * @param  {Number} version QR Code version
     * @return {Number}         Data length in bits
     */
    var getSymbolTotalCodewords = function getSymbolTotalCodewords (version) {
      return CODEWORDS_COUNT[version]
    };

    /**
     * Encode data with Bose-Chaudhuri-Hocquenghem
     *
     * @param  {Number} data Value to encode
     * @return {Number}      Encoded value
     */
    var getBCHDigit = function (data) {
      let digit = 0;

      while (data !== 0) {
        digit++;
        data >>>= 1;
      }

      return digit
    };

    var setToSJISFunction = function setToSJISFunction (f) {
      if (typeof f !== 'function') {
        throw new Error('"toSJISFunc" is not a valid function.')
      }

      toSJISFunction = f;
    };

    var isKanjiModeEnabled = function () {
      return typeof toSJISFunction !== 'undefined'
    };

    var toSJIS = function toSJIS (kanji) {
      return toSJISFunction(kanji)
    };

    var utils$1 = {
    	getSymbolSize: getSymbolSize$1,
    	getSymbolTotalCodewords: getSymbolTotalCodewords,
    	getBCHDigit: getBCHDigit,
    	setToSJISFunction: setToSJISFunction,
    	isKanjiModeEnabled: isKanjiModeEnabled,
    	toSJIS: toSJIS
    };

    var errorCorrectionLevel = createCommonjsModule$4(function (module, exports) {
    exports.L = { bit: 1 };
    exports.M = { bit: 0 };
    exports.Q = { bit: 3 };
    exports.H = { bit: 2 };

    function fromString (string) {
      if (typeof string !== 'string') {
        throw new Error('Param is not a string')
      }

      const lcStr = string.toLowerCase();

      switch (lcStr) {
        case 'l':
        case 'low':
          return exports.L

        case 'm':
        case 'medium':
          return exports.M

        case 'q':
        case 'quartile':
          return exports.Q

        case 'h':
        case 'high':
          return exports.H

        default:
          throw new Error('Unknown EC Level: ' + string)
      }
    }

    exports.isValid = function isValid (level) {
      return level && typeof level.bit !== 'undefined' &&
        level.bit >= 0 && level.bit < 4
    };

    exports.from = function from (value, defaultValue) {
      if (exports.isValid(value)) {
        return value
      }

      try {
        return fromString(value)
      } catch (e) {
        return defaultValue
      }
    };
    });

    function BitBuffer () {
      this.buffer = [];
      this.length = 0;
    }

    BitBuffer.prototype = {

      get: function (index) {
        const bufIndex = Math.floor(index / 8);
        return ((this.buffer[bufIndex] >>> (7 - index % 8)) & 1) === 1
      },

      put: function (num, length) {
        for (let i = 0; i < length; i++) {
          this.putBit(((num >>> (length - i - 1)) & 1) === 1);
        }
      },

      getLengthInBits: function () {
        return this.length
      },

      putBit: function (bit) {
        const bufIndex = Math.floor(this.length / 8);
        if (this.buffer.length <= bufIndex) {
          this.buffer.push(0);
        }

        if (bit) {
          this.buffer[bufIndex] |= (0x80 >>> (this.length % 8));
        }

        this.length++;
      }
    };

    var bitBuffer = BitBuffer;

    /**
     * Helper class to handle QR Code symbol modules
     *
     * @param {Number} size Symbol size
     */
    function BitMatrix (size) {
      if (!size || size < 1) {
        throw new Error('BitMatrix size must be defined and greater than 0')
      }

      this.size = size;
      this.data = new Uint8Array(size * size);
      this.reservedBit = new Uint8Array(size * size);
    }

    /**
     * Set bit value at specified location
     * If reserved flag is set, this bit will be ignored during masking process
     *
     * @param {Number}  row
     * @param {Number}  col
     * @param {Boolean} value
     * @param {Boolean} reserved
     */
    BitMatrix.prototype.set = function (row, col, value, reserved) {
      const index = row * this.size + col;
      this.data[index] = value;
      if (reserved) this.reservedBit[index] = true;
    };

    /**
     * Returns bit value at specified location
     *
     * @param  {Number}  row
     * @param  {Number}  col
     * @return {Boolean}
     */
    BitMatrix.prototype.get = function (row, col) {
      return this.data[row * this.size + col]
    };

    /**
     * Applies xor operator at specified location
     * (used during masking process)
     *
     * @param {Number}  row
     * @param {Number}  col
     * @param {Boolean} value
     */
    BitMatrix.prototype.xor = function (row, col, value) {
      this.data[row * this.size + col] ^= value;
    };

    /**
     * Check if bit at specified location is reserved
     *
     * @param {Number}   row
     * @param {Number}   col
     * @return {Boolean}
     */
    BitMatrix.prototype.isReserved = function (row, col) {
      return this.reservedBit[row * this.size + col]
    };

    var bitMatrix = BitMatrix;

    /**
     * Alignment pattern are fixed reference pattern in defined positions
     * in a matrix symbology, which enables the decode software to re-synchronise
     * the coordinate mapping of the image modules in the event of moderate amounts
     * of distortion of the image.
     *
     * Alignment patterns are present only in QR Code symbols of version 2 or larger
     * and their number depends on the symbol version.
     */

    var alignmentPattern = createCommonjsModule$4(function (module, exports) {
    const getSymbolSize = utils$1.getSymbolSize;

    /**
     * Calculate the row/column coordinates of the center module of each alignment pattern
     * for the specified QR Code version.
     *
     * The alignment patterns are positioned symmetrically on either side of the diagonal
     * running from the top left corner of the symbol to the bottom right corner.
     *
     * Since positions are simmetrical only half of the coordinates are returned.
     * Each item of the array will represent in turn the x and y coordinate.
     * @see {@link getPositions}
     *
     * @param  {Number} version QR Code version
     * @return {Array}          Array of coordinate
     */
    exports.getRowColCoords = function getRowColCoords (version) {
      if (version === 1) return []

      const posCount = Math.floor(version / 7) + 2;
      const size = getSymbolSize(version);
      const intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2;
      const positions = [size - 7]; // Last coord is always (size - 7)

      for (let i = 1; i < posCount - 1; i++) {
        positions[i] = positions[i - 1] - intervals;
      }

      positions.push(6); // First coord is always 6

      return positions.reverse()
    };

    /**
     * Returns an array containing the positions of each alignment pattern.
     * Each array's element represent the center point of the pattern as (x, y) coordinates
     *
     * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}
     * and filtering out the items that overlaps with finder pattern
     *
     * @example
     * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.
     * The alignment patterns, therefore, are to be centered on (row, column)
     * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).
     * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns
     * and are not therefore used for alignment patterns.
     *
     * let pos = getPositions(7)
     * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]
     *
     * @param  {Number} version QR Code version
     * @return {Array}          Array of coordinates
     */
    exports.getPositions = function getPositions (version) {
      const coords = [];
      const pos = exports.getRowColCoords(version);
      const posLength = pos.length;

      for (let i = 0; i < posLength; i++) {
        for (let j = 0; j < posLength; j++) {
          // Skip if position is occupied by finder patterns
          if ((i === 0 && j === 0) || // top-left
              (i === 0 && j === posLength - 1) || // bottom-left
              (i === posLength - 1 && j === 0)) { // top-right
            continue
          }

          coords.push([pos[i], pos[j]]);
        }
      }

      return coords
    };
    });

    const getSymbolSize = utils$1.getSymbolSize;
    const FINDER_PATTERN_SIZE = 7;

    /**
     * Returns an array containing the positions of each finder pattern.
     * Each array's element represent the top-left point of the pattern as (x, y) coordinates
     *
     * @param  {Number} version QR Code version
     * @return {Array}          Array of coordinates
     */
    var getPositions = function getPositions (version) {
      const size = getSymbolSize(version);

      return [
        // top-left
        [0, 0],
        // top-right
        [size - FINDER_PATTERN_SIZE, 0],
        // bottom-left
        [0, size - FINDER_PATTERN_SIZE]
      ]
    };

    var finderPattern = {
    	getPositions: getPositions
    };

    /**
     * Data mask pattern reference
     * @type {Object}
     */

    var maskPattern = createCommonjsModule$4(function (module, exports) {
    exports.Patterns = {
      PATTERN000: 0,
      PATTERN001: 1,
      PATTERN010: 2,
      PATTERN011: 3,
      PATTERN100: 4,
      PATTERN101: 5,
      PATTERN110: 6,
      PATTERN111: 7
    };

    /**
     * Weighted penalty scores for the undesirable features
     * @type {Object}
     */
    const PenaltyScores = {
      N1: 3,
      N2: 3,
      N3: 40,
      N4: 10
    };

    /**
     * Check if mask pattern value is valid
     *
     * @param  {Number}  mask    Mask pattern
     * @return {Boolean}         true if valid, false otherwise
     */
    exports.isValid = function isValid (mask) {
      return mask != null && mask !== '' && !isNaN(mask) && mask >= 0 && mask <= 7
    };

    /**
     * Returns mask pattern from a value.
     * If value is not valid, returns undefined
     *
     * @param  {Number|String} value        Mask pattern value
     * @return {Number}                     Valid mask pattern or undefined
     */
    exports.from = function from (value) {
      return exports.isValid(value) ? parseInt(value, 10) : undefined
    };

    /**
    * Find adjacent modules in row/column with the same color
    * and assign a penalty value.
    *
    * Points: N1 + i
    * i is the amount by which the number of adjacent modules of the same color exceeds 5
    */
    exports.getPenaltyN1 = function getPenaltyN1 (data) {
      const size = data.size;
      let points = 0;
      let sameCountCol = 0;
      let sameCountRow = 0;
      let lastCol = null;
      let lastRow = null;

      for (let row = 0; row < size; row++) {
        sameCountCol = sameCountRow = 0;
        lastCol = lastRow = null;

        for (let col = 0; col < size; col++) {
          let module = data.get(row, col);
          if (module === lastCol) {
            sameCountCol++;
          } else {
            if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
            lastCol = module;
            sameCountCol = 1;
          }

          module = data.get(col, row);
          if (module === lastRow) {
            sameCountRow++;
          } else {
            if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
            lastRow = module;
            sameCountRow = 1;
          }
        }

        if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
        if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
      }

      return points
    };

    /**
     * Find 2x2 blocks with the same color and assign a penalty value
     *
     * Points: N2 * (m - 1) * (n - 1)
     */
    exports.getPenaltyN2 = function getPenaltyN2 (data) {
      const size = data.size;
      let points = 0;

      for (let row = 0; row < size - 1; row++) {
        for (let col = 0; col < size - 1; col++) {
          const last = data.get(row, col) +
            data.get(row, col + 1) +
            data.get(row + 1, col) +
            data.get(row + 1, col + 1);

          if (last === 4 || last === 0) points++;
        }
      }

      return points * PenaltyScores.N2
    };

    /**
     * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,
     * preceded or followed by light area 4 modules wide
     *
     * Points: N3 * number of pattern found
     */
    exports.getPenaltyN3 = function getPenaltyN3 (data) {
      const size = data.size;
      let points = 0;
      let bitsCol = 0;
      let bitsRow = 0;

      for (let row = 0; row < size; row++) {
        bitsCol = bitsRow = 0;
        for (let col = 0; col < size; col++) {
          bitsCol = ((bitsCol << 1) & 0x7FF) | data.get(row, col);
          if (col >= 10 && (bitsCol === 0x5D0 || bitsCol === 0x05D)) points++;

          bitsRow = ((bitsRow << 1) & 0x7FF) | data.get(col, row);
          if (col >= 10 && (bitsRow === 0x5D0 || bitsRow === 0x05D)) points++;
        }
      }

      return points * PenaltyScores.N3
    };

    /**
     * Calculate proportion of dark modules in entire symbol
     *
     * Points: N4 * k
     *
     * k is the rating of the deviation of the proportion of dark modules
     * in the symbol from 50% in steps of 5%
     */
    exports.getPenaltyN4 = function getPenaltyN4 (data) {
      let darkCount = 0;
      const modulesCount = data.data.length;

      for (let i = 0; i < modulesCount; i++) darkCount += data.data[i];

      const k = Math.abs(Math.ceil((darkCount * 100 / modulesCount) / 5) - 10);

      return k * PenaltyScores.N4
    };

    /**
     * Return mask value at given position
     *
     * @param  {Number} maskPattern Pattern reference value
     * @param  {Number} i           Row
     * @param  {Number} j           Column
     * @return {Boolean}            Mask value
     */
    function getMaskAt (maskPattern, i, j) {
      switch (maskPattern) {
        case exports.Patterns.PATTERN000: return (i + j) % 2 === 0
        case exports.Patterns.PATTERN001: return i % 2 === 0
        case exports.Patterns.PATTERN010: return j % 3 === 0
        case exports.Patterns.PATTERN011: return (i + j) % 3 === 0
        case exports.Patterns.PATTERN100: return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0
        case exports.Patterns.PATTERN101: return (i * j) % 2 + (i * j) % 3 === 0
        case exports.Patterns.PATTERN110: return ((i * j) % 2 + (i * j) % 3) % 2 === 0
        case exports.Patterns.PATTERN111: return ((i * j) % 3 + (i + j) % 2) % 2 === 0

        default: throw new Error('bad maskPattern:' + maskPattern)
      }
    }

    /**
     * Apply a mask pattern to a BitMatrix
     *
     * @param  {Number}    pattern Pattern reference number
     * @param  {BitMatrix} data    BitMatrix data
     */
    exports.applyMask = function applyMask (pattern, data) {
      const size = data.size;

      for (let col = 0; col < size; col++) {
        for (let row = 0; row < size; row++) {
          if (data.isReserved(row, col)) continue
          data.xor(row, col, getMaskAt(pattern, row, col));
        }
      }
    };

    /**
     * Returns the best mask pattern for data
     *
     * @param  {BitMatrix} data
     * @return {Number} Mask pattern reference number
     */
    exports.getBestMask = function getBestMask (data, setupFormatFunc) {
      const numPatterns = Object.keys(exports.Patterns).length;
      let bestPattern = 0;
      let lowerPenalty = Infinity;

      for (let p = 0; p < numPatterns; p++) {
        setupFormatFunc(p);
        exports.applyMask(p, data);

        // Calculate penalty
        const penalty =
          exports.getPenaltyN1(data) +
          exports.getPenaltyN2(data) +
          exports.getPenaltyN3(data) +
          exports.getPenaltyN4(data);

        // Undo previously applied mask
        exports.applyMask(p, data);

        if (penalty < lowerPenalty) {
          lowerPenalty = penalty;
          bestPattern = p;
        }
      }

      return bestPattern
    };
    });

    const EC_BLOCKS_TABLE = [
    // L  M  Q  H
      1, 1, 1, 1,
      1, 1, 1, 1,
      1, 1, 2, 2,
      1, 2, 2, 4,
      1, 2, 4, 4,
      2, 4, 4, 4,
      2, 4, 6, 5,
      2, 4, 6, 6,
      2, 5, 8, 8,
      4, 5, 8, 8,
      4, 5, 8, 11,
      4, 8, 10, 11,
      4, 9, 12, 16,
      4, 9, 16, 16,
      6, 10, 12, 18,
      6, 10, 17, 16,
      6, 11, 16, 19,
      6, 13, 18, 21,
      7, 14, 21, 25,
      8, 16, 20, 25,
      8, 17, 23, 25,
      9, 17, 23, 34,
      9, 18, 25, 30,
      10, 20, 27, 32,
      12, 21, 29, 35,
      12, 23, 34, 37,
      12, 25, 34, 40,
      13, 26, 35, 42,
      14, 28, 38, 45,
      15, 29, 40, 48,
      16, 31, 43, 51,
      17, 33, 45, 54,
      18, 35, 48, 57,
      19, 37, 51, 60,
      19, 38, 53, 63,
      20, 40, 56, 66,
      21, 43, 59, 70,
      22, 45, 62, 74,
      24, 47, 65, 77,
      25, 49, 68, 81
    ];

    const EC_CODEWORDS_TABLE = [
    // L  M  Q  H
      7, 10, 13, 17,
      10, 16, 22, 28,
      15, 26, 36, 44,
      20, 36, 52, 64,
      26, 48, 72, 88,
      36, 64, 96, 112,
      40, 72, 108, 130,
      48, 88, 132, 156,
      60, 110, 160, 192,
      72, 130, 192, 224,
      80, 150, 224, 264,
      96, 176, 260, 308,
      104, 198, 288, 352,
      120, 216, 320, 384,
      132, 240, 360, 432,
      144, 280, 408, 480,
      168, 308, 448, 532,
      180, 338, 504, 588,
      196, 364, 546, 650,
      224, 416, 600, 700,
      224, 442, 644, 750,
      252, 476, 690, 816,
      270, 504, 750, 900,
      300, 560, 810, 960,
      312, 588, 870, 1050,
      336, 644, 952, 1110,
      360, 700, 1020, 1200,
      390, 728, 1050, 1260,
      420, 784, 1140, 1350,
      450, 812, 1200, 1440,
      480, 868, 1290, 1530,
      510, 924, 1350, 1620,
      540, 980, 1440, 1710,
      570, 1036, 1530, 1800,
      570, 1064, 1590, 1890,
      600, 1120, 1680, 1980,
      630, 1204, 1770, 2100,
      660, 1260, 1860, 2220,
      720, 1316, 1950, 2310,
      750, 1372, 2040, 2430
    ];

    /**
     * Returns the number of error correction block that the QR Code should contain
     * for the specified version and error correction level.
     *
     * @param  {Number} version              QR Code version
     * @param  {Number} errorCorrectionLevel Error correction level
     * @return {Number}                      Number of error correction blocks
     */
    var getBlocksCount = function getBlocksCount (version, errorCorrectionLevel$1) {
      switch (errorCorrectionLevel$1) {
        case errorCorrectionLevel.L:
          return EC_BLOCKS_TABLE[(version - 1) * 4 + 0]
        case errorCorrectionLevel.M:
          return EC_BLOCKS_TABLE[(version - 1) * 4 + 1]
        case errorCorrectionLevel.Q:
          return EC_BLOCKS_TABLE[(version - 1) * 4 + 2]
        case errorCorrectionLevel.H:
          return EC_BLOCKS_TABLE[(version - 1) * 4 + 3]
        default:
          return undefined
      }
    };

    /**
     * Returns the number of error correction codewords to use for the specified
     * version and error correction level.
     *
     * @param  {Number} version              QR Code version
     * @param  {Number} errorCorrectionLevel Error correction level
     * @return {Number}                      Number of error correction codewords
     */
    var getTotalCodewordsCount = function getTotalCodewordsCount (version, errorCorrectionLevel$1) {
      switch (errorCorrectionLevel$1) {
        case errorCorrectionLevel.L:
          return EC_CODEWORDS_TABLE[(version - 1) * 4 + 0]
        case errorCorrectionLevel.M:
          return EC_CODEWORDS_TABLE[(version - 1) * 4 + 1]
        case errorCorrectionLevel.Q:
          return EC_CODEWORDS_TABLE[(version - 1) * 4 + 2]
        case errorCorrectionLevel.H:
          return EC_CODEWORDS_TABLE[(version - 1) * 4 + 3]
        default:
          return undefined
      }
    };

    var errorCorrectionCode = {
    	getBlocksCount: getBlocksCount,
    	getTotalCodewordsCount: getTotalCodewordsCount
    };

    const EXP_TABLE = new Uint8Array(512);
    const LOG_TABLE = new Uint8Array(256)
    /**
     * Precompute the log and anti-log tables for faster computation later
     *
     * For each possible value in the galois field 2^8, we will pre-compute
     * the logarithm and anti-logarithm (exponential) of this value
     *
     * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}
     */
    ;(function initTables () {
      let x = 1;
      for (let i = 0; i < 255; i++) {
        EXP_TABLE[i] = x;
        LOG_TABLE[x] = i;

        x <<= 1; // multiply by 2

        // The QR code specification says to use byte-wise modulo 100011101 arithmetic.
        // This means that when a number is 256 or larger, it should be XORed with 0x11D.
        if (x & 0x100) { // similar to x >= 256, but a lot faster (because 0x100 == 256)
          x ^= 0x11D;
        }
      }

      // Optimization: double the size of the anti-log table so that we don't need to mod 255 to
      // stay inside the bounds (because we will mainly use this table for the multiplication of
      // two GF numbers, no more).
      // @see {@link mul}
      for (let i = 255; i < 512; i++) {
        EXP_TABLE[i] = EXP_TABLE[i - 255];
      }
    }());

    /**
     * Returns log value of n inside Galois Field
     *
     * @param  {Number} n
     * @return {Number}
     */
    var log = function log (n) {
      if (n < 1) throw new Error('log(' + n + ')')
      return LOG_TABLE[n]
    };

    /**
     * Returns anti-log value of n inside Galois Field
     *
     * @param  {Number} n
     * @return {Number}
     */
    var exp = function exp (n) {
      return EXP_TABLE[n]
    };

    /**
     * Multiplies two number inside Galois Field
     *
     * @param  {Number} x
     * @param  {Number} y
     * @return {Number}
     */
    var mul = function mul (x, y) {
      if (x === 0 || y === 0) return 0

      // should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized
      // @see {@link initTables}
      return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]]
    };

    var galoisField = {
    	log: log,
    	exp: exp,
    	mul: mul
    };

    var polynomial = createCommonjsModule$4(function (module, exports) {
    /**
     * Multiplies two polynomials inside Galois Field
     *
     * @param  {Uint8Array} p1 Polynomial
     * @param  {Uint8Array} p2 Polynomial
     * @return {Uint8Array}    Product of p1 and p2
     */
    exports.mul = function mul (p1, p2) {
      const coeff = new Uint8Array(p1.length + p2.length - 1);

      for (let i = 0; i < p1.length; i++) {
        for (let j = 0; j < p2.length; j++) {
          coeff[i + j] ^= galoisField.mul(p1[i], p2[j]);
        }
      }

      return coeff
    };

    /**
     * Calculate the remainder of polynomials division
     *
     * @param  {Uint8Array} divident Polynomial
     * @param  {Uint8Array} divisor  Polynomial
     * @return {Uint8Array}          Remainder
     */
    exports.mod = function mod (divident, divisor) {
      let result = new Uint8Array(divident);

      while ((result.length - divisor.length) >= 0) {
        const coeff = result[0];

        for (let i = 0; i < divisor.length; i++) {
          result[i] ^= galoisField.mul(divisor[i], coeff);
        }

        // remove all zeros from buffer head
        let offset = 0;
        while (offset < result.length && result[offset] === 0) offset++;
        result = result.slice(offset);
      }

      return result
    };

    /**
     * Generate an irreducible generator polynomial of specified degree
     * (used by Reed-Solomon encoder)
     *
     * @param  {Number} degree Degree of the generator polynomial
     * @return {Uint8Array}    Buffer containing polynomial coefficients
     */
    exports.generateECPolynomial = function generateECPolynomial (degree) {
      let poly = new Uint8Array([1]);
      for (let i = 0; i < degree; i++) {
        poly = exports.mul(poly, new Uint8Array([1, galoisField.exp(i)]));
      }

      return poly
    };
    });

    function ReedSolomonEncoder (degree) {
      this.genPoly = undefined;
      this.degree = degree;

      if (this.degree) this.initialize(this.degree);
    }

    /**
     * Initialize the encoder.
     * The input param should correspond to the number of error correction codewords.
     *
     * @param  {Number} degree
     */
    ReedSolomonEncoder.prototype.initialize = function initialize (degree) {
      // create an irreducible generator polynomial
      this.degree = degree;
      this.genPoly = polynomial.generateECPolynomial(this.degree);
    };

    /**
     * Encodes a chunk of data
     *
     * @param  {Uint8Array} data Buffer containing input data
     * @return {Uint8Array}      Buffer containing encoded data
     */
    ReedSolomonEncoder.prototype.encode = function encode (data) {
      if (!this.genPoly) {
        throw new Error('Encoder not initialized')
      }

      // Calculate EC for this data block
      // extends data size to data+genPoly size
      const paddedData = new Uint8Array(data.length + this.degree);
      paddedData.set(data);

      // The error correction codewords are the remainder after dividing the data codewords
      // by a generator polynomial
      const remainder = polynomial.mod(paddedData, this.genPoly);

      // return EC data blocks (last n byte, where n is the degree of genPoly)
      // If coefficients number in remainder are less than genPoly degree,
      // pad with 0s to the left to reach the needed number of coefficients
      const start = this.degree - remainder.length;
      if (start > 0) {
        const buff = new Uint8Array(this.degree);
        buff.set(remainder, start);

        return buff
      }

      return remainder
    };

    var reedSolomonEncoder = ReedSolomonEncoder;

    /**
     * Check if QR Code version is valid
     *
     * @param  {Number}  version QR Code version
     * @return {Boolean}         true if valid version, false otherwise
     */
    var isValid = function isValid (version) {
      return !isNaN(version) && version >= 1 && version <= 40
    };

    var versionCheck = {
    	isValid: isValid
    };

    const numeric = '[0-9]+';
    const alphanumeric = '[A-Z $%*+\\-./:]+';
    let kanji = '(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|' +
      '[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|' +
      '[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|' +
      '[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+';
    kanji = kanji.replace(/u/g, '\\u');

    const byte = '(?:(?![A-Z0-9 $%*+\\-./:]|' + kanji + ')(?:.|[\r\n]))+';

    var KANJI = new RegExp(kanji, 'g');
    var BYTE_KANJI = new RegExp('[^A-Z0-9 $%*+\\-./:]+', 'g');
    var BYTE = new RegExp(byte, 'g');
    var NUMERIC = new RegExp(numeric, 'g');
    var ALPHANUMERIC = new RegExp(alphanumeric, 'g');

    const TEST_KANJI = new RegExp('^' + kanji + '$');
    const TEST_NUMERIC = new RegExp('^' + numeric + '$');
    const TEST_ALPHANUMERIC = new RegExp('^[A-Z0-9 $%*+\\-./:]+$');

    var testKanji = function testKanji (str) {
      return TEST_KANJI.test(str)
    };

    var testNumeric = function testNumeric (str) {
      return TEST_NUMERIC.test(str)
    };

    var testAlphanumeric = function testAlphanumeric (str) {
      return TEST_ALPHANUMERIC.test(str)
    };

    var regex = {
    	KANJI: KANJI,
    	BYTE_KANJI: BYTE_KANJI,
    	BYTE: BYTE,
    	NUMERIC: NUMERIC,
    	ALPHANUMERIC: ALPHANUMERIC,
    	testKanji: testKanji,
    	testNumeric: testNumeric,
    	testAlphanumeric: testAlphanumeric
    };

    var mode = createCommonjsModule$4(function (module, exports) {
    /**
     * Numeric mode encodes data from the decimal digit set (0 - 9)
     * (byte values 30HEX to 39HEX).
     * Normally, 3 data characters are represented by 10 bits.
     *
     * @type {Object}
     */
    exports.NUMERIC = {
      id: 'Numeric',
      bit: 1 << 0,
      ccBits: [10, 12, 14]
    };

    /**
     * Alphanumeric mode encodes data from a set of 45 characters,
     * i.e. 10 numeric digits (0 - 9),
     *      26 alphabetic characters (A - Z),
     *   and 9 symbols (SP, $, %, *, +, -, ., /, :).
     * Normally, two input characters are represented by 11 bits.
     *
     * @type {Object}
     */
    exports.ALPHANUMERIC = {
      id: 'Alphanumeric',
      bit: 1 << 1,
      ccBits: [9, 11, 13]
    };

    /**
     * In byte mode, data is encoded at 8 bits per character.
     *
     * @type {Object}
     */
    exports.BYTE = {
      id: 'Byte',
      bit: 1 << 2,
      ccBits: [8, 16, 16]
    };

    /**
     * The Kanji mode efficiently encodes Kanji characters in accordance with
     * the Shift JIS system based on JIS X 0208.
     * The Shift JIS values are shifted from the JIS X 0208 values.
     * JIS X 0208 gives details of the shift coded representation.
     * Each two-byte character value is compacted to a 13-bit binary codeword.
     *
     * @type {Object}
     */
    exports.KANJI = {
      id: 'Kanji',
      bit: 1 << 3,
      ccBits: [8, 10, 12]
    };

    /**
     * Mixed mode will contain a sequences of data in a combination of any of
     * the modes described above
     *
     * @type {Object}
     */
    exports.MIXED = {
      bit: -1
    };

    /**
     * Returns the number of bits needed to store the data length
     * according to QR Code specifications.
     *
     * @param  {Mode}   mode    Data mode
     * @param  {Number} version QR Code version
     * @return {Number}         Number of bits
     */
    exports.getCharCountIndicator = function getCharCountIndicator (mode, version) {
      if (!mode.ccBits) throw new Error('Invalid mode: ' + mode)

      if (!versionCheck.isValid(version)) {
        throw new Error('Invalid version: ' + version)
      }

      if (version >= 1 && version < 10) return mode.ccBits[0]
      else if (version < 27) return mode.ccBits[1]
      return mode.ccBits[2]
    };

    /**
     * Returns the most efficient mode to store the specified data
     *
     * @param  {String} dataStr Input data string
     * @return {Mode}           Best mode
     */
    exports.getBestModeForData = function getBestModeForData (dataStr) {
      if (regex.testNumeric(dataStr)) return exports.NUMERIC
      else if (regex.testAlphanumeric(dataStr)) return exports.ALPHANUMERIC
      else if (regex.testKanji(dataStr)) return exports.KANJI
      else return exports.BYTE
    };

    /**
     * Return mode name as string
     *
     * @param {Mode} mode Mode object
     * @returns {String}  Mode name
     */
    exports.toString = function toString (mode) {
      if (mode && mode.id) return mode.id
      throw new Error('Invalid mode')
    };

    /**
     * Check if input param is a valid mode object
     *
     * @param   {Mode}    mode Mode object
     * @returns {Boolean} True if valid mode, false otherwise
     */
    exports.isValid = function isValid (mode) {
      return mode && mode.bit && mode.ccBits
    };

    /**
     * Get mode object from its name
     *
     * @param   {String} string Mode name
     * @returns {Mode}          Mode object
     */
    function fromString (string) {
      if (typeof string !== 'string') {
        throw new Error('Param is not a string')
      }

      const lcStr = string.toLowerCase();

      switch (lcStr) {
        case 'numeric':
          return exports.NUMERIC
        case 'alphanumeric':
          return exports.ALPHANUMERIC
        case 'kanji':
          return exports.KANJI
        case 'byte':
          return exports.BYTE
        default:
          throw new Error('Unknown mode: ' + string)
      }
    }

    /**
     * Returns mode from a value.
     * If value is not a valid mode, returns defaultValue
     *
     * @param  {Mode|String} value        Encoding mode
     * @param  {Mode}        defaultValue Fallback value
     * @return {Mode}                     Encoding mode
     */
    exports.from = function from (value, defaultValue) {
      if (exports.isValid(value)) {
        return value
      }

      try {
        return fromString(value)
      } catch (e) {
        return defaultValue
      }
    };
    });

    var version = createCommonjsModule$4(function (module, exports) {
    // Generator polynomial used to encode version information
    const G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0);
    const G18_BCH = utils$1.getBCHDigit(G18);

    function getBestVersionForDataLength (mode, length, errorCorrectionLevel) {
      for (let currentVersion = 1; currentVersion <= 40; currentVersion++) {
        if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {
          return currentVersion
        }
      }

      return undefined
    }

    function getReservedBitsCount (mode$1, version) {
      // Character count indicator + mode indicator bits
      return mode.getCharCountIndicator(mode$1, version) + 4
    }

    function getTotalBitsFromDataArray (segments, version) {
      let totalBits = 0;

      segments.forEach(function (data) {
        const reservedBits = getReservedBitsCount(data.mode, version);
        totalBits += reservedBits + data.getBitsLength();
      });

      return totalBits
    }

    function getBestVersionForMixedData (segments, errorCorrectionLevel) {
      for (let currentVersion = 1; currentVersion <= 40; currentVersion++) {
        const length = getTotalBitsFromDataArray(segments, currentVersion);
        if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode.MIXED)) {
          return currentVersion
        }
      }

      return undefined
    }

    /**
     * Returns version number from a value.
     * If value is not a valid version, returns defaultValue
     *
     * @param  {Number|String} value        QR Code version
     * @param  {Number}        defaultValue Fallback value
     * @return {Number}                     QR Code version number
     */
    exports.from = function from (value, defaultValue) {
      if (versionCheck.isValid(value)) {
        return parseInt(value, 10)
      }

      return defaultValue
    };

    /**
     * Returns how much data can be stored with the specified QR code version
     * and error correction level
     *
     * @param  {Number} version              QR Code version (1-40)
     * @param  {Number} errorCorrectionLevel Error correction level
     * @param  {Mode}   mode                 Data mode
     * @return {Number}                      Quantity of storable data
     */
    exports.getCapacity = function getCapacity (version, errorCorrectionLevel, mode$1) {
      if (!versionCheck.isValid(version)) {
        throw new Error('Invalid QR Code version')
      }

      // Use Byte mode as default
      if (typeof mode$1 === 'undefined') mode$1 = mode.BYTE;

      // Total codewords for this QR code version (Data + Error correction)
      const totalCodewords = utils$1.getSymbolTotalCodewords(version);

      // Total number of error correction codewords
      const ecTotalCodewords = errorCorrectionCode.getTotalCodewordsCount(version, errorCorrectionLevel);

      // Total number of data codewords
      const dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;

      if (mode$1 === mode.MIXED) return dataTotalCodewordsBits

      const usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode$1, version);

      // Return max number of storable codewords
      switch (mode$1) {
        case mode.NUMERIC:
          return Math.floor((usableBits / 10) * 3)

        case mode.ALPHANUMERIC:
          return Math.floor((usableBits / 11) * 2)

        case mode.KANJI:
          return Math.floor(usableBits / 13)

        case mode.BYTE:
        default:
          return Math.floor(usableBits / 8)
      }
    };

    /**
     * Returns the minimum version needed to contain the amount of data
     *
     * @param  {Segment} data                    Segment of data
     * @param  {Number} [errorCorrectionLevel=H] Error correction level
     * @param  {Mode} mode                       Data mode
     * @return {Number}                          QR Code version
     */
    exports.getBestVersionForData = function getBestVersionForData (data, errorCorrectionLevel$1) {
      let seg;

      const ecl = errorCorrectionLevel.from(errorCorrectionLevel$1, errorCorrectionLevel.M);

      if (Array.isArray(data)) {
        if (data.length > 1) {
          return getBestVersionForMixedData(data, ecl)
        }

        if (data.length === 0) {
          return 1
        }

        seg = data[0];
      } else {
        seg = data;
      }

      return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl)
    };

    /**
     * Returns version information with relative error correction bits
     *
     * The version information is included in QR Code symbols of version 7 or larger.
     * It consists of an 18-bit sequence containing 6 data bits,
     * with 12 error correction bits calculated using the (18, 6) Golay code.
     *
     * @param  {Number} version QR Code version
     * @return {Number}         Encoded version info bits
     */
    exports.getEncodedBits = function getEncodedBits (version) {
      if (!versionCheck.isValid(version) || version < 7) {
        throw new Error('Invalid QR Code version')
      }

      let d = version << 12;

      while (utils$1.getBCHDigit(d) - G18_BCH >= 0) {
        d ^= (G18 << (utils$1.getBCHDigit(d) - G18_BCH));
      }

      return (version << 12) | d
    };
    });

    const G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0);
    const G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1);
    const G15_BCH = utils$1.getBCHDigit(G15);

    /**
     * Returns format information with relative error correction bits
     *
     * The format information is a 15-bit sequence containing 5 data bits,
     * with 10 error correction bits calculated using the (15, 5) BCH code.
     *
     * @param  {Number} errorCorrectionLevel Error correction level
     * @param  {Number} mask                 Mask pattern
     * @return {Number}                      Encoded format information bits
     */
    var getEncodedBits = function getEncodedBits (errorCorrectionLevel, mask) {
      const data = ((errorCorrectionLevel.bit << 3) | mask);
      let d = data << 10;

      while (utils$1.getBCHDigit(d) - G15_BCH >= 0) {
        d ^= (G15 << (utils$1.getBCHDigit(d) - G15_BCH));
      }

      // xor final data with mask pattern in order to ensure that
      // no combination of Error Correction Level and data mask pattern
      // will result in an all-zero data string
      return ((data << 10) | d) ^ G15_MASK
    };

    var formatInfo = {
    	getEncodedBits: getEncodedBits
    };

    function NumericData (data) {
      this.mode = mode.NUMERIC;
      this.data = data.toString();
    }

    NumericData.getBitsLength = function getBitsLength (length) {
      return 10 * Math.floor(length / 3) + ((length % 3) ? ((length % 3) * 3 + 1) : 0)
    };

    NumericData.prototype.getLength = function getLength () {
      return this.data.length
    };

    NumericData.prototype.getBitsLength = function getBitsLength () {
      return NumericData.getBitsLength(this.data.length)
    };

    NumericData.prototype.write = function write (bitBuffer) {
      let i, group, value;

      // The input data string is divided into groups of three digits,
      // and each group is converted to its 10-bit binary equivalent.
      for (i = 0; i + 3 <= this.data.length; i += 3) {
        group = this.data.substr(i, 3);
        value = parseInt(group, 10);

        bitBuffer.put(value, 10);
      }

      // If the number of input digits is not an exact multiple of three,
      // the final one or two digits are converted to 4 or 7 bits respectively.
      const remainingNum = this.data.length - i;
      if (remainingNum > 0) {
        group = this.data.substr(i);
        value = parseInt(group, 10);

        bitBuffer.put(value, remainingNum * 3 + 1);
      }
    };

    var numericData = NumericData;

    /**
     * Array of characters available in alphanumeric mode
     *
     * As per QR Code specification, to each character
     * is assigned a value from 0 to 44 which in this case coincides
     * with the array index
     *
     * @type {Array}
     */
    const ALPHA_NUM_CHARS = [
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
      'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
      'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
      ' ', '$', '%', '*', '+', '-', '.', '/', ':'
    ];

    function AlphanumericData (data) {
      this.mode = mode.ALPHANUMERIC;
      this.data = data;
    }

    AlphanumericData.getBitsLength = function getBitsLength (length) {
      return 11 * Math.floor(length / 2) + 6 * (length % 2)
    };

    AlphanumericData.prototype.getLength = function getLength () {
      return this.data.length
    };

    AlphanumericData.prototype.getBitsLength = function getBitsLength () {
      return AlphanumericData.getBitsLength(this.data.length)
    };

    AlphanumericData.prototype.write = function write (bitBuffer) {
      let i;

      // Input data characters are divided into groups of two characters
      // and encoded as 11-bit binary codes.
      for (i = 0; i + 2 <= this.data.length; i += 2) {
        // The character value of the first character is multiplied by 45
        let value = ALPHA_NUM_CHARS.indexOf(this.data[i]) * 45;

        // The character value of the second digit is added to the product
        value += ALPHA_NUM_CHARS.indexOf(this.data[i + 1]);

        // The sum is then stored as 11-bit binary number
        bitBuffer.put(value, 11);
      }

      // If the number of input data characters is not a multiple of two,
      // the character value of the final character is encoded as a 6-bit binary number.
      if (this.data.length % 2) {
        bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i]), 6);
      }
    };

    var alphanumericData = AlphanumericData;

    var encodeUtf8 = function encodeUtf8 (input) {
      var result = [];
      var size = input.length;

      for (var index = 0; index < size; index++) {
        var point = input.charCodeAt(index);

        if (point >= 0xD800 && point <= 0xDBFF && size > index + 1) {
          var second = input.charCodeAt(index + 1);

          if (second >= 0xDC00 && second <= 0xDFFF) {
            // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
            point = (point - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
            index += 1;
          }
        }

        // US-ASCII
        if (point < 0x80) {
          result.push(point);
          continue
        }

        // 2-byte UTF-8
        if (point < 0x800) {
          result.push((point >> 6) | 192);
          result.push((point & 63) | 128);
          continue
        }

        // 3-byte UTF-8
        if (point < 0xD800 || (point >= 0xE000 && point < 0x10000)) {
          result.push((point >> 12) | 224);
          result.push(((point >> 6) & 63) | 128);
          result.push((point & 63) | 128);
          continue
        }

        // 4-byte UTF-8
        if (point >= 0x10000 && point <= 0x10FFFF) {
          result.push((point >> 18) | 240);
          result.push(((point >> 12) & 63) | 128);
          result.push(((point >> 6) & 63) | 128);
          result.push((point & 63) | 128);
          continue
        }

        // Invalid character
        result.push(0xEF, 0xBF, 0xBD);
      }

      return new Uint8Array(result).buffer
    };

    function ByteData (data) {
      this.mode = mode.BYTE;
      if (typeof (data) === 'string') {
        data = encodeUtf8(data);
      }
      this.data = new Uint8Array(data);
    }

    ByteData.getBitsLength = function getBitsLength (length) {
      return length * 8
    };

    ByteData.prototype.getLength = function getLength () {
      return this.data.length
    };

    ByteData.prototype.getBitsLength = function getBitsLength () {
      return ByteData.getBitsLength(this.data.length)
    };

    ByteData.prototype.write = function (bitBuffer) {
      for (let i = 0, l = this.data.length; i < l; i++) {
        bitBuffer.put(this.data[i], 8);
      }
    };

    var byteData = ByteData;

    function KanjiData (data) {
      this.mode = mode.KANJI;
      this.data = data;
    }

    KanjiData.getBitsLength = function getBitsLength (length) {
      return length * 13
    };

    KanjiData.prototype.getLength = function getLength () {
      return this.data.length
    };

    KanjiData.prototype.getBitsLength = function getBitsLength () {
      return KanjiData.getBitsLength(this.data.length)
    };

    KanjiData.prototype.write = function (bitBuffer) {
      let i;

      // In the Shift JIS system, Kanji characters are represented by a two byte combination.
      // These byte values are shifted from the JIS X 0208 values.
      // JIS X 0208 gives details of the shift coded representation.
      for (i = 0; i < this.data.length; i++) {
        let value = utils$1.toSJIS(this.data[i]);

        // For characters with Shift JIS values from 0x8140 to 0x9FFC:
        if (value >= 0x8140 && value <= 0x9FFC) {
          // Subtract 0x8140 from Shift JIS value
          value -= 0x8140;

        // For characters with Shift JIS values from 0xE040 to 0xEBBF
        } else if (value >= 0xE040 && value <= 0xEBBF) {
          // Subtract 0xC140 from Shift JIS value
          value -= 0xC140;
        } else {
          throw new Error(
            'Invalid SJIS character: ' + this.data[i] + '\n' +
            'Make sure your charset is UTF-8')
        }

        // Multiply most significant byte of result by 0xC0
        // and add least significant byte to product
        value = (((value >>> 8) & 0xff) * 0xC0) + (value & 0xff);

        // Convert result to a 13-bit binary string
        bitBuffer.put(value, 13);
      }
    };

    var kanjiData = KanjiData;

    var dijkstra_1 = createCommonjsModule$4(function (module) {

    /******************************************************************************
     * Created 2008-08-19.
     *
     * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.
     *
     * Copyright (C) 2008
     *   Wyatt Baldwin <self@wyattbaldwin.com>
     *   All rights reserved
     *
     * Licensed under the MIT license.
     *
     *   http://www.opensource.org/licenses/mit-license.php
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     *****************************************************************************/
    var dijkstra = {
      single_source_shortest_paths: function(graph, s, d) {
        // Predecessor map for each node that has been encountered.
        // node ID => predecessor node ID
        var predecessors = {};

        // Costs of shortest paths from s to all nodes encountered.
        // node ID => cost
        var costs = {};
        costs[s] = 0;

        // Costs of shortest paths from s to all nodes encountered; differs from
        // `costs` in that it provides easy access to the node that currently has
        // the known shortest path from s.
        // XXX: Do we actually need both `costs` and `open`?
        var open = dijkstra.PriorityQueue.make();
        open.push(s, 0);

        var closest,
            u, v,
            cost_of_s_to_u,
            adjacent_nodes,
            cost_of_e,
            cost_of_s_to_u_plus_cost_of_e,
            cost_of_s_to_v,
            first_visit;
        while (!open.empty()) {
          // In the nodes remaining in graph that have a known cost from s,
          // find the node, u, that currently has the shortest path from s.
          closest = open.pop();
          u = closest.value;
          cost_of_s_to_u = closest.cost;

          // Get nodes adjacent to u...
          adjacent_nodes = graph[u] || {};

          // ...and explore the edges that connect u to those nodes, updating
          // the cost of the shortest paths to any or all of those nodes as
          // necessary. v is the node across the current edge from u.
          for (v in adjacent_nodes) {
            if (adjacent_nodes.hasOwnProperty(v)) {
              // Get the cost of the edge running from u to v.
              cost_of_e = adjacent_nodes[v];

              // Cost of s to u plus the cost of u to v across e--this is *a*
              // cost from s to v that may or may not be less than the current
              // known cost to v.
              cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;

              // If we haven't visited v yet OR if the current known cost from s to
              // v is greater than the new cost we just found (cost of s to u plus
              // cost of u to v across e), update v's cost in the cost list and
              // update v's predecessor in the predecessor list (it's now u).
              cost_of_s_to_v = costs[v];
              first_visit = (typeof costs[v] === 'undefined');
              if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {
                costs[v] = cost_of_s_to_u_plus_cost_of_e;
                open.push(v, cost_of_s_to_u_plus_cost_of_e);
                predecessors[v] = u;
              }
            }
          }
        }

        if (typeof d !== 'undefined' && typeof costs[d] === 'undefined') {
          var msg = ['Could not find a path from ', s, ' to ', d, '.'].join('');
          throw new Error(msg);
        }

        return predecessors;
      },

      extract_shortest_path_from_predecessor_list: function(predecessors, d) {
        var nodes = [];
        var u = d;
        while (u) {
          nodes.push(u);
          predecessors[u];
          u = predecessors[u];
        }
        nodes.reverse();
        return nodes;
      },

      find_path: function(graph, s, d) {
        var predecessors = dijkstra.single_source_shortest_paths(graph, s, d);
        return dijkstra.extract_shortest_path_from_predecessor_list(
          predecessors, d);
      },

      /**
       * A very naive priority queue implementation.
       */
      PriorityQueue: {
        make: function (opts) {
          var T = dijkstra.PriorityQueue,
              t = {},
              key;
          opts = opts || {};
          for (key in T) {
            if (T.hasOwnProperty(key)) {
              t[key] = T[key];
            }
          }
          t.queue = [];
          t.sorter = opts.sorter || T.default_sorter;
          return t;
        },

        default_sorter: function (a, b) {
          return a.cost - b.cost;
        },

        /**
         * Add a new item to the queue and ensure the highest priority element
         * is at the front of the queue.
         */
        push: function (value, cost) {
          var item = {value: value, cost: cost};
          this.queue.push(item);
          this.queue.sort(this.sorter);
        },

        /**
         * Return the highest priority element in the queue.
         */
        pop: function () {
          return this.queue.shift();
        },

        empty: function () {
          return this.queue.length === 0;
        }
      }
    };


    // node.js module exports
    {
      module.exports = dijkstra;
    }
    });

    var segments = createCommonjsModule$4(function (module, exports) {
    /**
     * Returns UTF8 byte length
     *
     * @param  {String} str Input string
     * @return {Number}     Number of byte
     */
    function getStringByteLength (str) {
      return unescape(encodeURIComponent(str)).length
    }

    /**
     * Get a list of segments of the specified mode
     * from a string
     *
     * @param  {Mode}   mode Segment mode
     * @param  {String} str  String to process
     * @return {Array}       Array of object with segments data
     */
    function getSegments (regex, mode, str) {
      const segments = [];
      let result;

      while ((result = regex.exec(str)) !== null) {
        segments.push({
          data: result[0],
          index: result.index,
          mode: mode,
          length: result[0].length
        });
      }

      return segments
    }

    /**
     * Extracts a series of segments with the appropriate
     * modes from a string
     *
     * @param  {String} dataStr Input string
     * @return {Array}          Array of object with segments data
     */
    function getSegmentsFromString (dataStr) {
      const numSegs = getSegments(regex.NUMERIC, mode.NUMERIC, dataStr);
      const alphaNumSegs = getSegments(regex.ALPHANUMERIC, mode.ALPHANUMERIC, dataStr);
      let byteSegs;
      let kanjiSegs;

      if (utils$1.isKanjiModeEnabled()) {
        byteSegs = getSegments(regex.BYTE, mode.BYTE, dataStr);
        kanjiSegs = getSegments(regex.KANJI, mode.KANJI, dataStr);
      } else {
        byteSegs = getSegments(regex.BYTE_KANJI, mode.BYTE, dataStr);
        kanjiSegs = [];
      }

      const segs = numSegs.concat(alphaNumSegs, byteSegs, kanjiSegs);

      return segs
        .sort(function (s1, s2) {
          return s1.index - s2.index
        })
        .map(function (obj) {
          return {
            data: obj.data,
            mode: obj.mode,
            length: obj.length
          }
        })
    }

    /**
     * Returns how many bits are needed to encode a string of
     * specified length with the specified mode
     *
     * @param  {Number} length String length
     * @param  {Mode} mode     Segment mode
     * @return {Number}        Bit length
     */
    function getSegmentBitsLength (length, mode$1) {
      switch (mode$1) {
        case mode.NUMERIC:
          return numericData.getBitsLength(length)
        case mode.ALPHANUMERIC:
          return alphanumericData.getBitsLength(length)
        case mode.KANJI:
          return kanjiData.getBitsLength(length)
        case mode.BYTE:
          return byteData.getBitsLength(length)
      }
    }

    /**
     * Merges adjacent segments which have the same mode
     *
     * @param  {Array} segs Array of object with segments data
     * @return {Array}      Array of object with segments data
     */
    function mergeSegments (segs) {
      return segs.reduce(function (acc, curr) {
        const prevSeg = acc.length - 1 >= 0 ? acc[acc.length - 1] : null;
        if (prevSeg && prevSeg.mode === curr.mode) {
          acc[acc.length - 1].data += curr.data;
          return acc
        }

        acc.push(curr);
        return acc
      }, [])
    }

    /**
     * Generates a list of all possible nodes combination which
     * will be used to build a segments graph.
     *
     * Nodes are divided by groups. Each group will contain a list of all the modes
     * in which is possible to encode the given text.
     *
     * For example the text '12345' can be encoded as Numeric, Alphanumeric or Byte.
     * The group for '12345' will contain then 3 objects, one for each
     * possible encoding mode.
     *
     * Each node represents a possible segment.
     *
     * @param  {Array} segs Array of object with segments data
     * @return {Array}      Array of object with segments data
     */
    function buildNodes (segs) {
      const nodes = [];
      for (let i = 0; i < segs.length; i++) {
        const seg = segs[i];

        switch (seg.mode) {
          case mode.NUMERIC:
            nodes.push([seg,
              { data: seg.data, mode: mode.ALPHANUMERIC, length: seg.length },
              { data: seg.data, mode: mode.BYTE, length: seg.length }
            ]);
            break
          case mode.ALPHANUMERIC:
            nodes.push([seg,
              { data: seg.data, mode: mode.BYTE, length: seg.length }
            ]);
            break
          case mode.KANJI:
            nodes.push([seg,
              { data: seg.data, mode: mode.BYTE, length: getStringByteLength(seg.data) }
            ]);
            break
          case mode.BYTE:
            nodes.push([
              { data: seg.data, mode: mode.BYTE, length: getStringByteLength(seg.data) }
            ]);
        }
      }

      return nodes
    }

    /**
     * Builds a graph from a list of nodes.
     * All segments in each node group will be connected with all the segments of
     * the next group and so on.
     *
     * At each connection will be assigned a weight depending on the
     * segment's byte length.
     *
     * @param  {Array} nodes    Array of object with segments data
     * @param  {Number} version QR Code version
     * @return {Object}         Graph of all possible segments
     */
    function buildGraph (nodes, version) {
      const table = {};
      const graph = { start: {} };
      let prevNodeIds = ['start'];

      for (let i = 0; i < nodes.length; i++) {
        const nodeGroup = nodes[i];
        const currentNodeIds = [];

        for (let j = 0; j < nodeGroup.length; j++) {
          const node = nodeGroup[j];
          const key = '' + i + j;

          currentNodeIds.push(key);
          table[key] = { node: node, lastCount: 0 };
          graph[key] = {};

          for (let n = 0; n < prevNodeIds.length; n++) {
            const prevNodeId = prevNodeIds[n];

            if (table[prevNodeId] && table[prevNodeId].node.mode === node.mode) {
              graph[prevNodeId][key] =
                getSegmentBitsLength(table[prevNodeId].lastCount + node.length, node.mode) -
                getSegmentBitsLength(table[prevNodeId].lastCount, node.mode);

              table[prevNodeId].lastCount += node.length;
            } else {
              if (table[prevNodeId]) table[prevNodeId].lastCount = node.length;

              graph[prevNodeId][key] = getSegmentBitsLength(node.length, node.mode) +
                4 + mode.getCharCountIndicator(node.mode, version); // switch cost
            }
          }
        }

        prevNodeIds = currentNodeIds;
      }

      for (let n = 0; n < prevNodeIds.length; n++) {
        graph[prevNodeIds[n]].end = 0;
      }

      return { map: graph, table: table }
    }

    /**
     * Builds a segment from a specified data and mode.
     * If a mode is not specified, the more suitable will be used.
     *
     * @param  {String} data             Input data
     * @param  {Mode | String} modesHint Data mode
     * @return {Segment}                 Segment
     */
    function buildSingleSegment (data, modesHint) {
      let mode$1;
      const bestMode = mode.getBestModeForData(data);

      mode$1 = mode.from(modesHint, bestMode);

      // Make sure data can be encoded
      if (mode$1 !== mode.BYTE && mode$1.bit < bestMode.bit) {
        throw new Error('"' + data + '"' +
          ' cannot be encoded with mode ' + mode.toString(mode$1) +
          '.\n Suggested mode is: ' + mode.toString(bestMode))
      }

      // Use Mode.BYTE if Kanji support is disabled
      if (mode$1 === mode.KANJI && !utils$1.isKanjiModeEnabled()) {
        mode$1 = mode.BYTE;
      }

      switch (mode$1) {
        case mode.NUMERIC:
          return new numericData(data)

        case mode.ALPHANUMERIC:
          return new alphanumericData(data)

        case mode.KANJI:
          return new kanjiData(data)

        case mode.BYTE:
          return new byteData(data)
      }
    }

    /**
     * Builds a list of segments from an array.
     * Array can contain Strings or Objects with segment's info.
     *
     * For each item which is a string, will be generated a segment with the given
     * string and the more appropriate encoding mode.
     *
     * For each item which is an object, will be generated a segment with the given
     * data and mode.
     * Objects must contain at least the property "data".
     * If property "mode" is not present, the more suitable mode will be used.
     *
     * @param  {Array} array Array of objects with segments data
     * @return {Array}       Array of Segments
     */
    exports.fromArray = function fromArray (array) {
      return array.reduce(function (acc, seg) {
        if (typeof seg === 'string') {
          acc.push(buildSingleSegment(seg, null));
        } else if (seg.data) {
          acc.push(buildSingleSegment(seg.data, seg.mode));
        }

        return acc
      }, [])
    };

    /**
     * Builds an optimized sequence of segments from a string,
     * which will produce the shortest possible bitstream.
     *
     * @param  {String} data    Input string
     * @param  {Number} version QR Code version
     * @return {Array}          Array of segments
     */
    exports.fromString = function fromString (data, version) {
      const segs = getSegmentsFromString(data);

      const nodes = buildNodes(segs);
      const graph = buildGraph(nodes, version);
      const path = dijkstra_1.find_path(graph.map, 'start', 'end');

      const optimizedSegs = [];
      for (let i = 1; i < path.length - 1; i++) {
        optimizedSegs.push(graph.table[path[i]].node);
      }

      return exports.fromArray(mergeSegments(optimizedSegs))
    };

    /**
     * Splits a string in various segments with the modes which
     * best represent their content.
     * The produced segments are far from being optimized.
     * The output of this function is only used to estimate a QR Code version
     * which may contain the data.
     *
     * @param  {string} data Input string
     * @return {Array}       Array of segments
     */
    exports.rawSplit = function rawSplit (data) {
      return exports.fromArray(
        getSegmentsFromString(data)
      )
    };
    });

    /**
     * QRCode for JavaScript
     *
     * modified by Ryan Day for nodejs support
     * Copyright (c) 2011 Ryan Day
     *
     * Licensed under the MIT license:
     *   http://www.opensource.org/licenses/mit-license.php
     *
    //---------------------------------------------------------------------
    // QRCode for JavaScript
    //
    // Copyright (c) 2009 Kazuhiko Arase
    //
    // URL: http://www.d-project.com/
    //
    // Licensed under the MIT license:
    //   http://www.opensource.org/licenses/mit-license.php
    //
    // The word "QR Code" is registered trademark of
    // DENSO WAVE INCORPORATED
    //   http://www.denso-wave.com/qrcode/faqpatent-e.html
    //
    //---------------------------------------------------------------------
    */

    /**
     * Add finder patterns bits to matrix
     *
     * @param  {BitMatrix} matrix  Modules matrix
     * @param  {Number}    version QR Code version
     */
    function setupFinderPattern (matrix, version) {
      const size = matrix.size;
      const pos = finderPattern.getPositions(version);

      for (let i = 0; i < pos.length; i++) {
        const row = pos[i][0];
        const col = pos[i][1];

        for (let r = -1; r <= 7; r++) {
          if (row + r <= -1 || size <= row + r) continue

          for (let c = -1; c <= 7; c++) {
            if (col + c <= -1 || size <= col + c) continue

            if ((r >= 0 && r <= 6 && (c === 0 || c === 6)) ||
              (c >= 0 && c <= 6 && (r === 0 || r === 6)) ||
              (r >= 2 && r <= 4 && c >= 2 && c <= 4)) {
              matrix.set(row + r, col + c, true, true);
            } else {
              matrix.set(row + r, col + c, false, true);
            }
          }
        }
      }
    }

    /**
     * Add timing pattern bits to matrix
     *
     * Note: this function must be called before {@link setupAlignmentPattern}
     *
     * @param  {BitMatrix} matrix Modules matrix
     */
    function setupTimingPattern (matrix) {
      const size = matrix.size;

      for (let r = 8; r < size - 8; r++) {
        const value = r % 2 === 0;
        matrix.set(r, 6, value, true);
        matrix.set(6, r, value, true);
      }
    }

    /**
     * Add alignment patterns bits to matrix
     *
     * Note: this function must be called after {@link setupTimingPattern}
     *
     * @param  {BitMatrix} matrix  Modules matrix
     * @param  {Number}    version QR Code version
     */
    function setupAlignmentPattern (matrix, version) {
      const pos = alignmentPattern.getPositions(version);

      for (let i = 0; i < pos.length; i++) {
        const row = pos[i][0];
        const col = pos[i][1];

        for (let r = -2; r <= 2; r++) {
          for (let c = -2; c <= 2; c++) {
            if (r === -2 || r === 2 || c === -2 || c === 2 ||
              (r === 0 && c === 0)) {
              matrix.set(row + r, col + c, true, true);
            } else {
              matrix.set(row + r, col + c, false, true);
            }
          }
        }
      }
    }

    /**
     * Add version info bits to matrix
     *
     * @param  {BitMatrix} matrix  Modules matrix
     * @param  {Number}    version QR Code version
     */
    function setupVersionInfo (matrix, version$1) {
      const size = matrix.size;
      const bits = version.getEncodedBits(version$1);
      let row, col, mod;

      for (let i = 0; i < 18; i++) {
        row = Math.floor(i / 3);
        col = i % 3 + size - 8 - 3;
        mod = ((bits >> i) & 1) === 1;

        matrix.set(row, col, mod, true);
        matrix.set(col, row, mod, true);
      }
    }

    /**
     * Add format info bits to matrix
     *
     * @param  {BitMatrix} matrix               Modules matrix
     * @param  {ErrorCorrectionLevel}    errorCorrectionLevel Error correction level
     * @param  {Number}    maskPattern          Mask pattern reference value
     */
    function setupFormatInfo (matrix, errorCorrectionLevel, maskPattern) {
      const size = matrix.size;
      const bits = formatInfo.getEncodedBits(errorCorrectionLevel, maskPattern);
      let i, mod;

      for (i = 0; i < 15; i++) {
        mod = ((bits >> i) & 1) === 1;

        // vertical
        if (i < 6) {
          matrix.set(i, 8, mod, true);
        } else if (i < 8) {
          matrix.set(i + 1, 8, mod, true);
        } else {
          matrix.set(size - 15 + i, 8, mod, true);
        }

        // horizontal
        if (i < 8) {
          matrix.set(8, size - i - 1, mod, true);
        } else if (i < 9) {
          matrix.set(8, 15 - i - 1 + 1, mod, true);
        } else {
          matrix.set(8, 15 - i - 1, mod, true);
        }
      }

      // fixed module
      matrix.set(size - 8, 8, 1, true);
    }

    /**
     * Add encoded data bits to matrix
     *
     * @param  {BitMatrix}  matrix Modules matrix
     * @param  {Uint8Array} data   Data codewords
     */
    function setupData (matrix, data) {
      const size = matrix.size;
      let inc = -1;
      let row = size - 1;
      let bitIndex = 7;
      let byteIndex = 0;

      for (let col = size - 1; col > 0; col -= 2) {
        if (col === 6) col--;

        while (true) {
          for (let c = 0; c < 2; c++) {
            if (!matrix.isReserved(row, col - c)) {
              let dark = false;

              if (byteIndex < data.length) {
                dark = (((data[byteIndex] >>> bitIndex) & 1) === 1);
              }

              matrix.set(row, col - c, dark);
              bitIndex--;

              if (bitIndex === -1) {
                byteIndex++;
                bitIndex = 7;
              }
            }
          }

          row += inc;

          if (row < 0 || size <= row) {
            row -= inc;
            inc = -inc;
            break
          }
        }
      }
    }

    /**
     * Create encoded codewords from data input
     *
     * @param  {Number}   version              QR Code version
     * @param  {ErrorCorrectionLevel}   errorCorrectionLevel Error correction level
     * @param  {ByteData} data                 Data input
     * @return {Uint8Array}                    Buffer containing encoded codewords
     */
    function createData (version, errorCorrectionLevel, segments) {
      // Prepare data buffer
      const buffer = new bitBuffer();

      segments.forEach(function (data) {
        // prefix data with mode indicator (4 bits)
        buffer.put(data.mode.bit, 4);

        // Prefix data with character count indicator.
        // The character count indicator is a string of bits that represents the
        // number of characters that are being encoded.
        // The character count indicator must be placed after the mode indicator
        // and must be a certain number of bits long, depending on the QR version
        // and data mode
        // @see {@link Mode.getCharCountIndicator}.
        buffer.put(data.getLength(), mode.getCharCountIndicator(data.mode, version));

        // add binary data sequence to buffer
        data.write(buffer);
      });

      // Calculate required number of bits
      const totalCodewords = utils$1.getSymbolTotalCodewords(version);
      const ecTotalCodewords = errorCorrectionCode.getTotalCodewordsCount(version, errorCorrectionLevel);
      const dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;

      // Add a terminator.
      // If the bit string is shorter than the total number of required bits,
      // a terminator of up to four 0s must be added to the right side of the string.
      // If the bit string is more than four bits shorter than the required number of bits,
      // add four 0s to the end.
      if (buffer.getLengthInBits() + 4 <= dataTotalCodewordsBits) {
        buffer.put(0, 4);
      }

      // If the bit string is fewer than four bits shorter, add only the number of 0s that
      // are needed to reach the required number of bits.

      // After adding the terminator, if the number of bits in the string is not a multiple of 8,
      // pad the string on the right with 0s to make the string's length a multiple of 8.
      while (buffer.getLengthInBits() % 8 !== 0) {
        buffer.putBit(0);
      }

      // Add pad bytes if the string is still shorter than the total number of required bits.
      // Extend the buffer to fill the data capacity of the symbol corresponding to
      // the Version and Error Correction Level by adding the Pad Codewords 11101100 (0xEC)
      // and 00010001 (0x11) alternately.
      const remainingByte = (dataTotalCodewordsBits - buffer.getLengthInBits()) / 8;
      for (let i = 0; i < remainingByte; i++) {
        buffer.put(i % 2 ? 0x11 : 0xEC, 8);
      }

      return createCodewords(buffer, version, errorCorrectionLevel)
    }

    /**
     * Encode input data with Reed-Solomon and return codewords with
     * relative error correction bits
     *
     * @param  {BitBuffer} bitBuffer            Data to encode
     * @param  {Number}    version              QR Code version
     * @param  {ErrorCorrectionLevel} errorCorrectionLevel Error correction level
     * @return {Uint8Array}                     Buffer containing encoded codewords
     */
    function createCodewords (bitBuffer, version, errorCorrectionLevel) {
      // Total codewords for this QR code version (Data + Error correction)
      const totalCodewords = utils$1.getSymbolTotalCodewords(version);

      // Total number of error correction codewords
      const ecTotalCodewords = errorCorrectionCode.getTotalCodewordsCount(version, errorCorrectionLevel);

      // Total number of data codewords
      const dataTotalCodewords = totalCodewords - ecTotalCodewords;

      // Total number of blocks
      const ecTotalBlocks = errorCorrectionCode.getBlocksCount(version, errorCorrectionLevel);

      // Calculate how many blocks each group should contain
      const blocksInGroup2 = totalCodewords % ecTotalBlocks;
      const blocksInGroup1 = ecTotalBlocks - blocksInGroup2;

      const totalCodewordsInGroup1 = Math.floor(totalCodewords / ecTotalBlocks);

      const dataCodewordsInGroup1 = Math.floor(dataTotalCodewords / ecTotalBlocks);
      const dataCodewordsInGroup2 = dataCodewordsInGroup1 + 1;

      // Number of EC codewords is the same for both groups
      const ecCount = totalCodewordsInGroup1 - dataCodewordsInGroup1;

      // Initialize a Reed-Solomon encoder with a generator polynomial of degree ecCount
      const rs = new reedSolomonEncoder(ecCount);

      let offset = 0;
      const dcData = new Array(ecTotalBlocks);
      const ecData = new Array(ecTotalBlocks);
      let maxDataSize = 0;
      const buffer = new Uint8Array(bitBuffer.buffer);

      // Divide the buffer into the required number of blocks
      for (let b = 0; b < ecTotalBlocks; b++) {
        const dataSize = b < blocksInGroup1 ? dataCodewordsInGroup1 : dataCodewordsInGroup2;

        // extract a block of data from buffer
        dcData[b] = buffer.slice(offset, offset + dataSize);

        // Calculate EC codewords for this data block
        ecData[b] = rs.encode(dcData[b]);

        offset += dataSize;
        maxDataSize = Math.max(maxDataSize, dataSize);
      }

      // Create final data
      // Interleave the data and error correction codewords from each block
      const data = new Uint8Array(totalCodewords);
      let index = 0;
      let i, r;

      // Add data codewords
      for (i = 0; i < maxDataSize; i++) {
        for (r = 0; r < ecTotalBlocks; r++) {
          if (i < dcData[r].length) {
            data[index++] = dcData[r][i];
          }
        }
      }

      // Apped EC codewords
      for (i = 0; i < ecCount; i++) {
        for (r = 0; r < ecTotalBlocks; r++) {
          data[index++] = ecData[r][i];
        }
      }

      return data
    }

    /**
     * Build QR Code symbol
     *
     * @param  {String} data                 Input string
     * @param  {Number} version              QR Code version
     * @param  {ErrorCorretionLevel} errorCorrectionLevel Error level
     * @param  {MaskPattern} maskPattern     Mask pattern
     * @return {Object}                      Object containing symbol data
     */
    function createSymbol (data, version$1, errorCorrectionLevel, maskPattern$1) {
      let segments$1;

      if (Array.isArray(data)) {
        segments$1 = segments.fromArray(data);
      } else if (typeof data === 'string') {
        let estimatedVersion = version$1;

        if (!estimatedVersion) {
          const rawSegments = segments.rawSplit(data);

          // Estimate best version that can contain raw splitted segments
          estimatedVersion = version.getBestVersionForData(rawSegments, errorCorrectionLevel);
        }

        // Build optimized segments
        // If estimated version is undefined, try with the highest version
        segments$1 = segments.fromString(data, estimatedVersion || 40);
      } else {
        throw new Error('Invalid data')
      }

      // Get the min version that can contain data
      const bestVersion = version.getBestVersionForData(segments$1, errorCorrectionLevel);

      // If no version is found, data cannot be stored
      if (!bestVersion) {
        throw new Error('The amount of data is too big to be stored in a QR Code')
      }

      // If not specified, use min version as default
      if (!version$1) {
        version$1 = bestVersion;

      // Check if the specified version can contain the data
      } else if (version$1 < bestVersion) {
        throw new Error('\n' +
          'The chosen QR Code version cannot contain this amount of data.\n' +
          'Minimum version required to store current data is: ' + bestVersion + '.\n'
        )
      }

      const dataBits = createData(version$1, errorCorrectionLevel, segments$1);

      // Allocate matrix buffer
      const moduleCount = utils$1.getSymbolSize(version$1);
      const modules = new bitMatrix(moduleCount);

      // Add function modules
      setupFinderPattern(modules, version$1);
      setupTimingPattern(modules);
      setupAlignmentPattern(modules, version$1);

      // Add temporary dummy bits for format info just to set them as reserved.
      // This is needed to prevent these bits from being masked by {@link MaskPattern.applyMask}
      // since the masking operation must be performed only on the encoding region.
      // These blocks will be replaced with correct values later in code.
      setupFormatInfo(modules, errorCorrectionLevel, 0);

      if (version$1 >= 7) {
        setupVersionInfo(modules, version$1);
      }

      // Add data codewords
      setupData(modules, dataBits);

      if (isNaN(maskPattern$1)) {
        // Find best mask pattern
        maskPattern$1 = maskPattern.getBestMask(modules,
          setupFormatInfo.bind(null, modules, errorCorrectionLevel));
      }

      // Apply mask pattern
      maskPattern.applyMask(maskPattern$1, modules);

      // Replace format info bits with correct values
      setupFormatInfo(modules, errorCorrectionLevel, maskPattern$1);

      return {
        modules: modules,
        version: version$1,
        errorCorrectionLevel: errorCorrectionLevel,
        maskPattern: maskPattern$1,
        segments: segments$1
      }
    }

    /**
     * QR Code
     *
     * @param {String | Array} data                 Input data
     * @param {Object} options                      Optional configurations
     * @param {Number} options.version              QR Code version
     * @param {String} options.errorCorrectionLevel Error correction level
     * @param {Function} options.toSJISFunc         Helper func to convert utf8 to sjis
     */
    var create$1 = function create (data, options) {
      if (typeof data === 'undefined' || data === '') {
        throw new Error('No input text')
      }

      let errorCorrectionLevel$1 = errorCorrectionLevel.M;
      let version$1;
      let mask;

      if (typeof options !== 'undefined') {
        // Use higher error correction level as default
        errorCorrectionLevel$1 = errorCorrectionLevel.from(options.errorCorrectionLevel, errorCorrectionLevel.M);
        version$1 = version.from(options.version);
        mask = maskPattern.from(options.maskPattern);

        if (options.toSJISFunc) {
          utils$1.setToSJISFunction(options.toSJISFunc);
        }
      }

      return createSymbol(data, version$1, errorCorrectionLevel$1, mask)
    };

    var qrcode = {
    	create: create$1
    };

    var utils = createCommonjsModule$4(function (module, exports) {
    function hex2rgba (hex) {
      if (typeof hex === 'number') {
        hex = hex.toString();
      }

      if (typeof hex !== 'string') {
        throw new Error('Color should be defined as hex string')
      }

      let hexCode = hex.slice().replace('#', '').split('');
      if (hexCode.length < 3 || hexCode.length === 5 || hexCode.length > 8) {
        throw new Error('Invalid hex color: ' + hex)
      }

      // Convert from short to long form (fff -> ffffff)
      if (hexCode.length === 3 || hexCode.length === 4) {
        hexCode = Array.prototype.concat.apply([], hexCode.map(function (c) {
          return [c, c]
        }));
      }

      // Add default alpha value
      if (hexCode.length === 6) hexCode.push('F', 'F');

      const hexValue = parseInt(hexCode.join(''), 16);

      return {
        r: (hexValue >> 24) & 255,
        g: (hexValue >> 16) & 255,
        b: (hexValue >> 8) & 255,
        a: hexValue & 255,
        hex: '#' + hexCode.slice(0, 6).join('')
      }
    }

    exports.getOptions = function getOptions (options) {
      if (!options) options = {};
      if (!options.color) options.color = {};

      const margin = typeof options.margin === 'undefined' ||
        options.margin === null ||
        options.margin < 0
        ? 4
        : options.margin;

      const width = options.width && options.width >= 21 ? options.width : undefined;
      const scale = options.scale || 4;

      return {
        width: width,
        scale: width ? 4 : scale,
        margin: margin,
        color: {
          dark: hex2rgba(options.color.dark || '#000000ff'),
          light: hex2rgba(options.color.light || '#ffffffff')
        },
        type: options.type,
        rendererOpts: options.rendererOpts || {}
      }
    };

    exports.getScale = function getScale (qrSize, opts) {
      return opts.width && opts.width >= qrSize + opts.margin * 2
        ? opts.width / (qrSize + opts.margin * 2)
        : opts.scale
    };

    exports.getImageWidth = function getImageWidth (qrSize, opts) {
      const scale = exports.getScale(qrSize, opts);
      return Math.floor((qrSize + opts.margin * 2) * scale)
    };

    exports.qrToImageData = function qrToImageData (imgData, qr, opts) {
      const size = qr.modules.size;
      const data = qr.modules.data;
      const scale = exports.getScale(size, opts);
      const symbolSize = Math.floor((size + opts.margin * 2) * scale);
      const scaledMargin = opts.margin * scale;
      const palette = [opts.color.light, opts.color.dark];

      for (let i = 0; i < symbolSize; i++) {
        for (let j = 0; j < symbolSize; j++) {
          let posDst = (i * symbolSize + j) * 4;
          let pxColor = opts.color.light;

          if (i >= scaledMargin && j >= scaledMargin &&
            i < symbolSize - scaledMargin && j < symbolSize - scaledMargin) {
            const iSrc = Math.floor((i - scaledMargin) / scale);
            const jSrc = Math.floor((j - scaledMargin) / scale);
            pxColor = palette[data[iSrc * size + jSrc] ? 1 : 0];
          }

          imgData[posDst++] = pxColor.r;
          imgData[posDst++] = pxColor.g;
          imgData[posDst++] = pxColor.b;
          imgData[posDst] = pxColor.a;
        }
      }
    };
    });

    var canvas = createCommonjsModule$4(function (module, exports) {
    function clearCanvas (ctx, canvas, size) {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      if (!canvas.style) canvas.style = {};
      canvas.height = size;
      canvas.width = size;
      canvas.style.height = size + 'px';
      canvas.style.width = size + 'px';
    }

    function getCanvasElement () {
      try {
        return document.createElement('canvas')
      } catch (e) {
        throw new Error('You need to specify a canvas element')
      }
    }

    exports.render = function render (qrData, canvas, options) {
      let opts = options;
      let canvasEl = canvas;

      if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {
        opts = canvas;
        canvas = undefined;
      }

      if (!canvas) {
        canvasEl = getCanvasElement();
      }

      opts = utils.getOptions(opts);
      const size = utils.getImageWidth(qrData.modules.size, opts);

      const ctx = canvasEl.getContext('2d');
      const image = ctx.createImageData(size, size);
      utils.qrToImageData(image.data, qrData, opts);

      clearCanvas(ctx, canvasEl, size);
      ctx.putImageData(image, 0, 0);

      return canvasEl
    };

    exports.renderToDataURL = function renderToDataURL (qrData, canvas, options) {
      let opts = options;

      if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {
        opts = canvas;
        canvas = undefined;
      }

      if (!opts) opts = {};

      const canvasEl = exports.render(qrData, canvas, opts);

      const type = opts.type || 'image/png';
      const rendererOpts = opts.rendererOpts || {};

      return canvasEl.toDataURL(type, rendererOpts.quality)
    };
    });

    function getColorAttrib (color, attrib) {
      const alpha = color.a / 255;
      const str = attrib + '="' + color.hex + '"';

      return alpha < 1
        ? str + ' ' + attrib + '-opacity="' + alpha.toFixed(2).slice(1) + '"'
        : str
    }

    function svgCmd (cmd, x, y) {
      let str = cmd + x;
      if (typeof y !== 'undefined') str += ' ' + y;

      return str
    }

    function qrToPath (data, size, margin) {
      let path = '';
      let moveBy = 0;
      let newRow = false;
      let lineLength = 0;

      for (let i = 0; i < data.length; i++) {
        const col = Math.floor(i % size);
        const row = Math.floor(i / size);

        if (!col && !newRow) newRow = true;

        if (data[i]) {
          lineLength++;

          if (!(i > 0 && col > 0 && data[i - 1])) {
            path += newRow
              ? svgCmd('M', col + margin, 0.5 + row + margin)
              : svgCmd('m', moveBy, 0);

            moveBy = 0;
            newRow = false;
          }

          if (!(col + 1 < size && data[i + 1])) {
            path += svgCmd('h', lineLength);
            lineLength = 0;
          }
        } else {
          moveBy++;
        }
      }

      return path
    }

    var render = function render (qrData, options, cb) {
      const opts = utils.getOptions(options);
      const size = qrData.modules.size;
      const data = qrData.modules.data;
      const qrcodesize = size + opts.margin * 2;

      const bg = !opts.color.light.a
        ? ''
        : '<path ' + getColorAttrib(opts.color.light, 'fill') +
          ' d="M0 0h' + qrcodesize + 'v' + qrcodesize + 'H0z"/>';

      const path =
        '<path ' + getColorAttrib(opts.color.dark, 'stroke') +
        ' d="' + qrToPath(data, size, opts.margin) + '"/>';

      const viewBox = 'viewBox="' + '0 0 ' + qrcodesize + ' ' + qrcodesize + '"';

      const width = !opts.width ? '' : 'width="' + opts.width + '" height="' + opts.width + '" ';

      const svgTag = '<svg xmlns="http://www.w3.org/2000/svg" ' + width + viewBox + ' shape-rendering="crispEdges">' + bg + path + '</svg>\n';

      if (typeof cb === 'function') {
        cb(null, svgTag);
      }

      return svgTag
    };

    var svgTag = {
    	render: render
    };

    function renderCanvas (renderFunc, canvas, text, opts, cb) {
      const args = [].slice.call(arguments, 1);
      const argsNum = args.length;
      const isLastArgCb = typeof args[argsNum - 1] === 'function';

      if (!isLastArgCb && !canPromise()) {
        throw new Error('Callback required as last argument')
      }

      if (isLastArgCb) {
        if (argsNum < 2) {
          throw new Error('Too few arguments provided')
        }

        if (argsNum === 2) {
          cb = text;
          text = canvas;
          canvas = opts = undefined;
        } else if (argsNum === 3) {
          if (canvas.getContext && typeof cb === 'undefined') {
            cb = opts;
            opts = undefined;
          } else {
            cb = opts;
            opts = text;
            text = canvas;
            canvas = undefined;
          }
        }
      } else {
        if (argsNum < 1) {
          throw new Error('Too few arguments provided')
        }

        if (argsNum === 1) {
          text = canvas;
          canvas = opts = undefined;
        } else if (argsNum === 2 && !canvas.getContext) {
          opts = text;
          text = canvas;
          canvas = undefined;
        }

        return new Promise(function (resolve, reject) {
          try {
            const data = qrcode.create(text, opts);
            resolve(renderFunc(data, canvas, opts));
          } catch (e) {
            reject(e);
          }
        })
      }

      try {
        const data = qrcode.create(text, opts);
        cb(null, renderFunc(data, canvas, opts));
      } catch (e) {
        cb(e);
      }
    }

    var create = qrcode.create;
    var toCanvas = renderCanvas.bind(null, canvas.render);
    var toDataURL = renderCanvas.bind(null, canvas.renderToDataURL);

    // only svg for now.
    var toString = renderCanvas.bind(null, function (data, _, opts) {
      return svgTag.render(data, opts)
    });

    var browser = {
    	create: create,
    	toCanvas: toCanvas,
    	toDataURL: toDataURL,
    	toString: toString
    };

    var Mt=Object.defineProperty,st=Object.getOwnPropertySymbols,Wt=Object.prototype.hasOwnProperty,Lt=Object.prototype.propertyIsEnumerable,ct=(e,t,o)=>t in e?Mt(e,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[t]=o,dt=(e,t)=>{for(var o in t||(t={}))Wt.call(t,o)&&ct(e,o,t[o]);if(st)for(var o of st(t))Lt.call(t,o)&&ct(e,o,t[o]);return e};function ht(){return {default:{light:{inverse:"rgb(255,255,255)",foreground:"rgb(51,150,255)",background:"rgb(232,242,252)"},dark:{inverse:"rgb(255,255,255)",foreground:"rgb(71,161,255)",background:"rgb(21,38,55)"}},magenta:{light:{inverse:"rgb(255,255,255)",foreground:"rgb(198,83,128)",background:"rgb(244,221,230)"},dark:{inverse:"rgb(255,255,255)",foreground:"rgb(203,77,140)",background:"rgb(57,35,43)"}},blue:{light:{inverse:"rgb(255,255,255)",foreground:"rgb(61,92,245)",background:"rgb(232,235,252)"},dark:{inverse:"rgb(255,255,255)",foreground:"rgb(81,109,251)",background:"rgb(28,33,59)"}},orange:{light:{inverse:"rgb(255,255,255)",foreground:"rgb(234,140,46)",background:"rgb(244,236,221)"},dark:{inverse:"rgb(0,0,0)",foreground:"rgb(255,166,76)",background:"rgb(57,50,34)"}},green:{light:{inverse:"rgb(255,255,255)",foreground:"rgb(38,181,98)",background:"rgb(218,246,218)"},dark:{inverse:"rgb(0,0,0)",foreground:"rgb(38,217,98)",background:"rgb(35,52,40)"}},purple:{light:{inverse:"rgb(255,255,255)",foreground:"rgb(121,76,255)",background:"rgb(225,218,246)"},dark:{inverse:"rgb(255,255,255)",foreground:"rgb(144,110,247)",background:"rgb(36,31,51)"}},teal:{light:{inverse:"rgb(255,255,255)",foreground:"rgb(43,182,182)",background:"rgb(217,242,238)"},dark:{inverse:"rgb(0,0,0)",foreground:"rgb(54,226,226)",background:"rgb(29,48,52)"}},blackWhite:{light:{inverse:"rgb(255,255,255)",foreground:"rgb(20,20,20)",background:"rgb(255,255,255)"},dark:{inverse:"rgb(0,0,0)",foreground:"rgb(255,255,255)",background:"rgb(20,20,20)"}}}}function At(){return {light:{foreground:{1:"rgb(20,20,20)",2:"rgb(121,134,134)",3:"rgb(158,169,169)"},background:{1:"rgb(255,255,255)",2:"rgb(241,243,243)",3:"rgb(228,231,231)"},overlay:"rgba(0,0,0,0.1)"},dark:{foreground:{1:"rgb(228,231,231)",2:"rgb(148,158,158)",3:"rgb(110,119,119)"},background:{1:"rgb(20,20,20)",2:"rgb(39,42,42)",3:"rgb(59,64,64)"},overlay:"rgba(255,255,255,0.1"}}}function Pt(){return {default:{1:"#B6B9C9",2:"#C653C6",3:"#794DFF",4:"#2EB8B8"},blue:{1:"#E8EBFD",2:"#C653C6",3:"#2DD2C5",4:"#3D5CF5"},magenta:{1:"#F4DDE6",2:"#E0D452",3:"#F09475",4:"#D1618D"},orange:{1:"#F4ECDD",2:"#B4EB47",3:"#3075E8",4:"#EB9947"},green:{1:"#DAF6DA",2:"#E06B92",3:"#99E54D",4:"#26B562"},purple:{1:"#E1DAF6",2:"#EB9947",3:"#E06B92",4:"#794DFF"},teal:{1:"#D9F2EE",2:"#F09475",3:"#794DFF",4:"#2EB8B8"},blackWhite:{1:"#E3E8E8",2:"#98AEAE",3:"#516767",4:"#242E2E"}}}const g={color(){var e,t;const o=(e=W.state.themeColor)!=null?e:"default",r=(t=W.state.themeMode)!=null?t:"dark",a=ht()[o][r],n=At()[r],l=Pt()[o];return {foreground:dt({accent:a.foreground,inverse:a.inverse},n.foreground),background:dt({accent:a.background},n.background),gradient:l,overlay:n.overlay,error:"rgb(242, 90, 103)"}},setTheme(){const e=document.querySelector(":root"),{themeZIndex:t}=W.state;if(e){const o={"--color-fg-accent":g.color().foreground.accent,"--color-fg-inverse":g.color().foreground.inverse,"--color-fg-1":g.color().foreground[1],"--color-fg-2":g.color().foreground[2],"--color-fg-3":g.color().foreground[3],"--color-bg-1":g.color().background[1],"--color-bg-2":g.color().background[2],"--color-bg-3":g.color().background[3],"--color-overlay":g.color().overlay,"--color-err":g.color().error,"--color-success":ht().green.light.foreground,"--gradient-1":g.color().gradient[1],"--gradient-2":g.color().gradient[2],"--gradient-3":g.color().gradient[3],"--gradient-4":g.color().gradient[4],"--modal-z-index":`${t}`};Object.entries(o).forEach(([r,a])=>e.style.setProperty(r,a));}},globalCss:i$6`*,::after,::before{margin:0;padding:0;box-sizing:border-box;font-style:normal;text-rendering:optimizeSpeed;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;-webkit-tap-highlight-color:transparent;backface-visibility:hidden}button{cursor:pointer;display:flex;justify-content:center;align-items:center;position:relative;border:none;background-color:transparent}button::after{content:'';position:absolute;inset:0;transition:background-color,.2s ease}button:disabled{cursor:not-allowed}button svg,button w3m-text{position:relative;z-index:1}input{border:none;outline:0;appearance:none}img{display:block}::selection{color:var(--color-fg-inverse);background:var(--color-fg-accent)}`},jt=i$6`button{display:flex;border-radius:10px;flex-direction:column;transition:background-color .2s ease;justify-content:center;padding:5px;width:100px}button:hover{background-color:var(--color-overlay)}button>div{display:flex;justify-content:center;align-items:center;width:32px;height:32px;box-shadow:inset 0 0 0 1px var(--color-overlay);background-color:var(--color-fg-accent);border-radius:50%;margin-bottom:4px}button path{fill:var(--color-fg-inverse)}`;var St=Object.defineProperty,_t=Object.getOwnPropertyDescriptor,Ce=(e,t,o,r)=>{for(var a=r>1?void 0:r?_t(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&St(t,o,a),a};let te=class extends s$2{constructor(){super(...arguments),this.icon=void 0,this.label="",this.onClick=()=>null;}render(){return y$1`<button @click="${this.onClick}"><div>${this.icon}</div><w3m-text variant="xsmall-normal" color="accent">${this.label}</w3m-text></button>`}};te.styles=[g.globalCss,jt],Ce([e$1()],te.prototype,"icon",2),Ce([e$1()],te.prototype,"label",2),Ce([e$1()],te.prototype,"onClick",2),te=Ce([e$2("w3m-box-button")],te);const Dt=i$6`button{border-radius:28px;height:28px;padding:0 10px;background-color:var(--color-fg-accent)}button path{fill:var(--color-fg-inverse)}button::after{border-radius:inherit;border:1px solid var(--color-overlay)}button:disabled::after{background-color:transparent}.w3m-icon-left svg{margin-right:5px}.w3m-icon-right svg{margin-left:5px}button:hover::after{background-color:var(--color-overlay)}button:disabled{background-color:var(--color-bg-3)}`;var Tt=Object.defineProperty,Nt=Object.getOwnPropertyDescriptor,se=(e,t,o,r)=>{for(var a=r>1?void 0:r?Nt(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&Tt(t,o,a),a};let G=class extends s$2{constructor(){super(...arguments),this.disabled=!1,this.iconLeft=void 0,this.iconRight=void 0,this.onClick=()=>null;}render(){const e={"w3m-icon-left":this.iconLeft!==void 0,"w3m-icon-right":this.iconRight!==void 0};return y$1`<button class="${o(e)}" ?disabled="${this.disabled}" @click="${this.onClick}">${this.iconLeft}<w3m-text variant="small-normal" color="inverse"><slot></slot></w3m-text>${this.iconRight}</button>`}};G.styles=[g.globalCss,Dt],se([e$1()],G.prototype,"disabled",2),se([e$1()],G.prototype,"iconLeft",2),se([e$1()],G.prototype,"iconRight",2),se([e$1()],G.prototype,"onClick",2),G=se([e$2("w3m-button")],G);const Rt=i$6`:host{display:inline-block}button{padding:0 15px;height:40px;border-radius:10px;color:var(--color-fg-inverse);background-color:var(--color-fg-accent)}button::after{content:'';inset:0;position:absolute;background-color:transparent;border-radius:inherit;transition:background-color .2s ease;border:1px solid var(--color-overlay)}button:hover::after{background-color:var(--color-overlay)}button:disabled{padding-bottom:0;background-color:var(--color-bg-3);color:var(--color-fg-3)}`;var Bt=Object.defineProperty,Ht=Object.getOwnPropertyDescriptor,mt=(e,t,o,r)=>{for(var a=r>1?void 0:r?Ht(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&Bt(t,o,a),a};let ke=class extends s$2{constructor(){super(...arguments),this.disabled=!1;}render(){return y$1`<button ?disabled="${this.disabled}"><slot></slot></button>`}};ke.styles=[g.globalCss,Rt],mt([e$1()],ke.prototype,"disabled",2),ke=mt([e$2("w3m-button-big")],ke);class Ut{constructor(...t){this.angle=0,this.t=1253106,this.last=0,this.height=500,this.amp=300,this.seed=15,this.freqX=14e-5,this.freqY=29e-5,this.freqDelta=1e-5,this.activeColors=[1,1,1,1],this.isMetaKey=!1,this.playing=!1,pt(this,"resize",()=>{this.width=window.innerWidth,this.minigl.setSize(this.width,this.height),this.minigl.setOrthographicCamera(),this.xSegCount=Math.ceil(this.width*this.conf.density[0]),this.ySegCount=Math.ceil(this.height*this.conf.density[1]),this.mesh.geometry.setTopology(this.xSegCount,this.ySegCount),this.mesh.geometry.setSize(this.width,this.height),this.mesh.material.uniforms.u_shadow_power.value=this.width<550?5:6;}),pt(this,"animate",o=>{if(this.playing){if(this.shouldSkipFrame(o)||(this.t+=Math.min(o-this.last,1e3/15),this.last=o,this.mesh.material.uniforms.u_time.value=this.t,this.minigl.render()),this.last!==0&&this.isStatic)return this.minigl.render();requestAnimationFrame(this.animate);}});}play(t){this.el=t,this.connect();}stop(){this.playing=!1;}async connect(){this.shaderFiles={vertex:"varying vec3 v_color;void main(){float time=u_time*u_global.noiseSpeed;vec2 noiseCoord=resolution*uvNorm*u_global.noiseFreq;vec2 st=1.-uvNorm.xy;float tilt=resolution.y/2.0*uvNorm.y;float incline=resolution.x*uvNorm.x/2.0*u_vertDeform.incline;float offset=resolution.x/2.0*u_vertDeform.incline*mix(u_vertDeform.offsetBottom,u_vertDeform.offsetTop,uv.y);float noise=snoise(vec3(noiseCoord.x*u_vertDeform.noiseFreq.x+time*u_vertDeform.noiseFlow,noiseCoord.y*u_vertDeform.noiseFreq.y,time*u_vertDeform.noiseSpeed+u_vertDeform.noiseSeed))*u_vertDeform.noiseAmp;noise*=1.0-pow(abs(uvNorm.y),2.0);noise=max(0.0,noise);vec3 pos=vec3(position.x,position.y+tilt+incline+noise-offset,position.z);if(u_active_colors[0]==1.){v_color=u_baseColor;}for(int i=0;i<u_waveLayers_length;i++){if(u_active_colors[i+1]==1.){WaveLayers layer=u_waveLayers[i];float noise=smoothstep(layer.noiseFloor,layer.noiseCeil,snoise(vec3(noiseCoord.x*layer.noiseFreq.x+time*layer.noiseFlow,noiseCoord.y*layer.noiseFreq.y,time*layer.noiseSpeed+layer.noiseSeed))/2.0+0.5);v_color=blendNormal(v_color,layer.color,pow(noise,4.));}}gl_Position=projectionMatrix*modelViewMatrix*vec4(pos,1.0);}",noise:`
// MIT License: Copyright (C) 2011 Ashima Arts. All rights reserved. https://github.com/ashima/webgl-noise, https://github.com/stegu/webgl-noise
vec3 mod289(vec3 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 mod289(vec4 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 permute(vec4 x){return mod289(((x*34.0)+1.0)*x);}vec4 taylorInvSqrt(vec4 r){return 1.79284291400159-0.85373472095314*r;}float snoise(vec3 v){const vec2 C=vec2(1.0/6.0,1.0/3.0);const vec4 D=vec4(0.0,0.5,1.0,2.0);vec3 i=floor(v+dot(v,C.yyy));vec3 x0=v-i+dot(i,C.xxx);vec3 g=step(x0.yzx,x0.xyz);vec3 l=1.0-g;vec3 i1=min(g.xyz,l.zxy);vec3 i2=max(g.xyz,l.zxy);vec3 x1=x0-i1+C.xxx;vec3 x2=x0-i2+C.yyy;vec3 x3=x0-D.yyy;i=mod289(i);vec4 p=permute(permute(permute(i.z+vec4(0.0,i1.z,i2.z,1.0))+i.y+vec4(0.0,i1.y,i2.y,1.0))+i.x+vec4(0.0,i1.x,i2.x,1.0));float n_=0.142857142857;vec3 ns=n_*D.wyz-D.xzx;vec4 j=p-49.0*floor(p*ns.z*ns.z);vec4 x_=floor(j*ns.z);vec4 y_=floor(j-7.0*x_);vec4 x=x_*ns.x+ns.yyyy;vec4 y=y_*ns.x+ns.yyyy;vec4 h=1.0-abs(x)-abs(y);vec4 b0=vec4(x.xy,y.xy);vec4 b1=vec4(x.zw,y.zw);vec4 s0=floor(b0)*2.0+1.0;vec4 s1=floor(b1)*2.0+1.0;vec4 sh=-step(h,vec4(0.0));vec4 a0=b0.xzyw+s0.xzyw*sh.xxyy;vec4 a1=b1.xzyw+s1.xzyw*sh.zzww;vec3 p0=vec3(a0.xy,h.x);vec3 p1=vec3(a0.zw,h.y);vec3 p2=vec3(a1.xy,h.z);vec3 p3=vec3(a1.zw,h.w);vec4 norm=taylorInvSqrt(vec4(dot(p0,p0),dot(p1,p1),dot(p2,p2),dot(p3,p3)));p0*=norm.x;p1*=norm.y;p2*=norm.z;p3*=norm.w;vec4 m=max(0.6-vec4(dot(x0,x0),dot(x1,x1),dot(x2,x2),dot(x3,x3)),0.0);m=m*m;return 42.0*dot(m*m,vec4(dot(p0,x0),dot(p1,x1),dot(p2,x2),dot(p3,x3)));}`,blend:`
// MIT Licence: Copyright (C) 2015 Jamie Owen. All rights reserved. https://github.com/jamieowen/glsl-blend
vec3 blendNormal(vec3 base, vec3 blend){return blend;}vec3 blendNormal(vec3 base,vec3 blend,float opacity){return (blendNormal(base,blend)*opacity+base*(1.0-opacity));}float blendScreen(float base,float blend){return 1.0-((1.0-base)*(1.0-blend));}vec3 blendScreen(vec3 base,vec3 blend){return vec3(blendScreen(base.r,blend.r),blendScreen(base.g,blend.g),blendScreen(base.b,blend.b));}vec3 blendScreen(vec3 base,vec3 blend,float opacity){return (blendScreen(base, blend)*opacity+base*(1.0-opacity));}vec3 blendMultiply(vec3 base,vec3 blend){return base*blend;}vec3 blendMultiply(vec3 base,vec3 blend,float opacity){return (blendMultiply(base,blend)*opacity+base*(1.0-opacity));}float blendOverlay(float base,float blend){return base<0.5?(2.0*base*blend):(1.0-2.0*(1.0-base)*(1.0-blend));}vec3 blendOverlay(vec3 base,vec3 blend){return vec3(blendOverlay(base.r,blend.r),blendOverlay(base.g,blend.g),blendOverlay(base.b,blend.b));}vec3 blendOverlay(vec3 base,vec3 blend,float opacity){return (blendOverlay(base,blend)*opacity+base*(1.0-opacity));}vec3 blendHardLight(vec3 base,vec3 blend){return blendOverlay(blend,base);}vec3 blendHardLight(vec3 base,vec3 blend,float opacity){return (blendHardLight(base,blend)*opacity+base*(1.0-opacity));}float blendSoftLight(float base,float blend){return (blend<0.5)?(2.0*base*blend+base*base*(1.0-2.0*blend)):(sqrt(base)*(2.0*blend-1.0)+2.0*base*(1.0-blend));}vec3 blendSoftLight(vec3 base,vec3 blend){return vec3(blendSoftLight(base.r,blend.r),blendSoftLight(base.g,blend.g),blendSoftLight(base.b,blend.b));}vec3 blendSoftLight(vec3 base,vec3 blend,float opacity){return (blendSoftLight(base,blend)*opacity+base*(1.0-opacity));}float blendColorDodge(float base,float blend){return (blend==1.0)?blend:min(base/(1.0-blend),1.0);}vec3 blendColorDodge(vec3 base,vec3 blend){return vec3(blendColorDodge(base.r,blend.r),blendColorDodge(base.g,blend.g),blendColorDodge(base.b,blend.b));}vec3 blendColorDodge(vec3 base,vec3 blend,float opacity){return (blendColorDodge(base, blend)*opacity+base*(1.0-opacity));}float blendColorBurn(float base,float blend){return (blend==0.0)?blend:max((1.0-((1.0-base)/blend)),0.0);}vec3 blendColorBurn(vec3 base,vec3 blend){return vec3(blendColorBurn(base.r,blend.r),blendColorBurn(base.g,blend.g),blendColorBurn(base.b,blend.b));}vec3 blendColorBurn(vec3 base,vec3 blend,float opacity){return (blendColorBurn(base, blend)*opacity+base*(1.0-opacity));}float blendVividLight(float base,float blend){return (blend<0.5)?blendColorBurn(base,(2.0*blend)):blendColorDodge(base,(2.0*(blend-0.5)));}vec3 blendVividLight(vec3 base,vec3 blend){return vec3(blendVividLight(base.r,blend.r),blendVividLight(base.g,blend.g),blendVividLight(base.b,blend.b));}vec3 blendVividLight(vec3 base,vec3 blend,float opacity){return (blendVividLight(base,blend)*opacity+base*(1.0-opacity));}float blendLighten(float base,float blend){return max(blend,base);}vec3 blendLighten(vec3 base,vec3 blend){return vec3(blendLighten(base.r,blend.r),blendLighten(base.g,blend.g),blendLighten(base.b,blend.b));}vec3 blendLighten(vec3 base,vec3 blend,float opacity){return (blendLighten(base,blend)*opacity+base*(1.0-opacity));}float blendLinearBurn(float base,float blend){return max(base+blend-1.0,0.0);}vec3 blendLinearBurn(vec3 base,vec3 blend){return max(base+blend-vec3(1.0),vec3(0.0));}vec3 blendLinearBurn(vec3 base,vec3 blend,float opacity){return (blendLinearBurn(base, blend)*opacity+base*(1.0-opacity));}float blendLinearDodge(float base,float blend){return min(base+blend,1.0);}vec3 blendLinearDodge(vec3 base,vec3 blend){return min(base+blend,vec3(1.0));}vec3 blendLinearDodge(vec3 base,vec3 blend,float opacity){return (blendLinearDodge(base,blend)*opacity+base*(1.0-opacity));}float blendLinearLight(float base,float blend){return blend<0.5?blendLinearBurn(base,(2.0*blend)):blendLinearDodge(base,(2.0*(blend-0.5)));}vec3 blendLinearLight(vec3 base,vec3 blend){return vec3(blendLinearLight(base.r,blend.r),blendLinearLight(base.g,blend.g),blendLinearLight(base.b,blend.b));}vec3 blendLinearLight(vec3 base,vec3 blend,float opacity){return (blendLinearLight(base,blend)*opacity+base*(1.0-opacity));}`,fragment:"varying vec3 v_color;void main(){vec3 color=v_color;if(u_darken_top==1.0){vec2 st=gl_FragCoord.xy/resolution.xy;color.g-=pow(st.y+sin(-12.0)*st.x,u_shadow_power)*0.4;}gl_FragColor=vec4(color,1.0);}"},this.conf={density:[.06,.16]},this.minigl=new Ft(this.el,null,null,!0),requestAnimationFrame(()=>{this.el&&(this.computedCanvasStyle=getComputedStyle(this.el),this.waitForCssVars());});}initMaterial(){this.uniforms={u_time:new this.minigl.Uniform({value:0}),u_shadow_power:new this.minigl.Uniform({value:5}),u_darken_top:new this.minigl.Uniform({value:this.el.dataset.jsDarkenTop===""?1:0}),u_active_colors:new this.minigl.Uniform({value:this.activeColors,type:"vec4"}),u_global:new this.minigl.Uniform({value:{noiseFreq:new this.minigl.Uniform({value:[this.freqX,this.freqY],type:"vec2"}),noiseSpeed:new this.minigl.Uniform({value:5e-6})},type:"struct"}),u_vertDeform:new this.minigl.Uniform({value:{incline:new this.minigl.Uniform({value:Math.sin(this.angle)/Math.cos(this.angle)}),offsetTop:new this.minigl.Uniform({value:-.5}),offsetBottom:new this.minigl.Uniform({value:-.5}),noiseFreq:new this.minigl.Uniform({value:[3,4],type:"vec2"}),noiseAmp:new this.minigl.Uniform({value:this.amp}),noiseSpeed:new this.minigl.Uniform({value:10}),noiseFlow:new this.minigl.Uniform({value:3}),noiseSeed:new this.minigl.Uniform({value:this.seed})},type:"struct",excludeFrom:"fragment"}),u_baseColor:new this.minigl.Uniform({value:this.sectionColors[0],type:"vec3",excludeFrom:"fragment"}),u_waveLayers:new this.minigl.Uniform({value:[],excludeFrom:"fragment",type:"array"})};for(let t=1;t<this.sectionColors.length;t+=1)this.uniforms.u_waveLayers.value.push(new this.minigl.Uniform({value:{color:new this.minigl.Uniform({value:this.sectionColors[t],type:"vec3"}),noiseFreq:new this.minigl.Uniform({value:[2+t/this.sectionColors.length,3+t/this.sectionColors.length],type:"vec2"}),noiseSpeed:new this.minigl.Uniform({value:11+.3*t}),noiseFlow:new this.minigl.Uniform({value:6.5+.3*t}),noiseSeed:new this.minigl.Uniform({value:this.seed+10*t}),noiseFloor:new this.minigl.Uniform({value:.1}),noiseCeil:new this.minigl.Uniform({value:.63+.07*t})},type:"struct"}));return this.vertexShader=[this.shaderFiles.noise,this.shaderFiles.blend,this.shaderFiles.vertex].join(""),new this.minigl.Material(this.vertexShader,this.shaderFiles.fragment,this.uniforms)}initMesh(){this.material=this.initMaterial(),this.geometry=new this.minigl.PlaneGeometry,this.mesh=new this.minigl.Mesh(this.geometry,this.material);}shouldSkipFrame(t){return !!window.document.hidden||parseInt(t,10)%2==0||void 0}updateFrequency(t){this.freqX+=t,this.freqY+=t;}toggleColor(t){this.activeColors[t]=this.activeColors[t]===0?1:0;}init(){this.playing=!0,this.initGradientColors(),this.initMesh(),this.resize(),requestAnimationFrame(this.animate);}waitForCssVars(){this.computedCanvasStyle&&this.computedCanvasStyle.getPropertyValue("--gradient-1").indexOf("#")!==-1?this.init():this.init();}initGradientColors(){this.sectionColors=["--gradient-1","--gradient-2","--gradient-3","--gradient-4"].map(t=>{let o=this.computedCanvasStyle.getPropertyValue(t).trim();return o.length===4&&(o=`#${o.substr(1).split("").map(r=>r+r).join("")}`),o&&`0x${o.substr(1)}`}).filter(Boolean).map(Zt);}}function Zt(e){return [(e>>16&255)/255,(e>>8&255)/255,(255&e)/255]}function pt(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}let Ft=class{constructor(t,o,r){const a=this;a.canvas=t,a.gl=a.canvas.getContext("webgl",{antialias:!0}),a.meshes=[];const n=a.gl;o&&r&&this.setSize(o,r),Object.defineProperties(a,{Material:{enumerable:!1,value:class{constructor(c,m,s={}){const d=this;function u(R,E){const x=n.createShader(R);return n.shaderSource(x,E),n.compileShader(x),n.getShaderParameter(x,n.COMPILE_STATUS)||console.error(n.getShaderInfoLog(x)),x}function C(R,E){return Object.entries(R).map(([x,W])=>W.getDeclaration(x,E)).join("")}d.uniforms=s,d.uniformInstances=[];const A="precision highp float;";d.vertexSource=`${A} attribute vec4 position;attribute vec2 uv;attribute vec2 uvNorm;${C(a.commonUniforms,"vertex")} ${C(s,"vertex")} ${c}`,d.Source=`${A} ${C(a.commonUniforms,"fragment")} ${C(s,"fragment")} ${m} `,d.vertexShader=u(n.VERTEX_SHADER,d.vertexSource),d.fragmentShader=u(n.FRAGMENT_SHADER,d.Source),d.program=n.createProgram(),n.attachShader(d.program,d.vertexShader),n.attachShader(d.program,d.fragmentShader),n.linkProgram(d.program),n.getProgramParameter(d.program,n.LINK_STATUS)||console.error(n.getProgramInfoLog(d.program)),n.useProgram(d.program),d.attachUniforms(void 0,a.commonUniforms),d.attachUniforms(void 0,d.uniforms);}attachUniforms(c,m){const s=this;c===void 0?Object.entries(m).forEach(([d,u])=>{s.attachUniforms(d,u);}):m.type=="array"?m.value.forEach((d,u)=>s.attachUniforms(`${c}[${u}]`,d)):m.type=="struct"?Object.entries(m.value).forEach(([d,u])=>s.attachUniforms(`${c}.${d}`,u)):s.uniformInstances.push({uniform:m,location:n.getUniformLocation(s.program,c)});}}},Uniform:{enumerable:!1,value:class{constructor(c){this.type="float",Object.assign(this,c),this.typeFn={float:"1f",int:"1i",vec2:"2fv",vec3:"3fv",vec4:"4fv",mat4:"Matrix4fv"}[this.type]||"1f",this.update();}update(c){this.value!==void 0&&n[`uniform${this.typeFn}`](c,this.typeFn.indexOf("Matrix")===0?this.transpose:this.value,this.typeFn.indexOf("Matrix")===0?this.value:null);}getDeclaration(c,m,s){const d=this;if(d.excludeFrom!==m){if(d.type==="array")return d.value[0].getDeclaration(c,m,d.value.length)+`const int ${c}_length=${d.value.length};`;if(d.type==="struct"){let u=c.replace("u_","");return u=u.charAt(0).toUpperCase()+u.slice(1),`uniform struct ${u} {`+Object.entries(d.value).map(([C,A])=>A.getDeclaration(C,m).replace(/^uniform/,"")).join("")+`} ${c}${s>0?`[${s}]`:""};`}return `uniform ${d.type} ${c}${s>0?`[${s}]`:""};`}}}},PlaneGeometry:{enumerable:!1,value:class{constructor(c,m,s,d,u){n.createBuffer(),this.attributes={position:new a.Attribute({target:n.ARRAY_BUFFER,size:3}),uv:new a.Attribute({target:n.ARRAY_BUFFER,size:2}),uvNorm:new a.Attribute({target:n.ARRAY_BUFFER,size:2}),index:new a.Attribute({target:n.ELEMENT_ARRAY_BUFFER,size:3,type:n.UNSIGNED_SHORT})},this.setTopology(s,d),this.setSize(c,m,u);}setTopology(c=1,m=1){const s=this;s.xSegCount=c,s.ySegCount=m,s.vertexCount=(s.xSegCount+1)*(s.ySegCount+1),s.quadCount=s.xSegCount*s.ySegCount*2,s.attributes.uv.values=new Float32Array(2*s.vertexCount),s.attributes.uvNorm.values=new Float32Array(2*s.vertexCount),s.attributes.index.values=new Uint16Array(3*s.quadCount);for(let d=0;d<=s.ySegCount;d++)for(let u=0;u<=s.xSegCount;u++){const C=d*(s.xSegCount+1)+u;if(s.attributes.uv.values[2*C]=u/s.xSegCount,s.attributes.uv.values[2*C+1]=1-d/s.ySegCount,s.attributes.uvNorm.values[2*C]=u/s.xSegCount*2-1,s.attributes.uvNorm.values[2*C+1]=1-d/s.ySegCount*2,u<s.xSegCount&&d<s.ySegCount){const A=d*s.xSegCount+u;s.attributes.index.values[6*A]=C,s.attributes.index.values[6*A+1]=C+1+s.xSegCount,s.attributes.index.values[6*A+2]=C+1,s.attributes.index.values[6*A+3]=C+1,s.attributes.index.values[6*A+4]=C+1+s.xSegCount,s.attributes.index.values[6*A+5]=C+2+s.xSegCount;}}s.attributes.uv.update(),s.attributes.uvNorm.update(),s.attributes.index.update();}setSize(c=1,m=1,s="xz"){const d=this;d.width=c,d.height=m,d.orientation=s,d.attributes.position.values&&d.attributes.position.values.length===3*d.vertexCount||(d.attributes.position.values=new Float32Array(3*d.vertexCount));const u=c/-2,C=m/-2,A=c/d.xSegCount,R=m/d.ySegCount;for(let E=0;E<=d.ySegCount;E++){const x=C+E*R;for(let W=0;W<=d.xSegCount;W++){const I=u+W*A,S=E*(d.xSegCount+1)+W;d.attributes.position.values[3*S+"xyz".indexOf(s[0])]=I,d.attributes.position.values[3*S+"xyz".indexOf(s[1])]=-x;}}d.attributes.position.update();}}},Mesh:{enumerable:!1,value:class{constructor(c,m){const s=this;s.geometry=c,s.material=m,s.attributeInstances=[],Object.entries(s.geometry.attributes).forEach(([d,u])=>{s.attributeInstances.push({attribute:u,location:u.attach(d,s.material.program)});}),a.meshes.push(s);}draw(){n.useProgram(this.material.program),this.material.uniformInstances.forEach(({uniform:c,location:m})=>c.update(m)),this.attributeInstances.forEach(({attribute:c,location:m})=>c.use(m)),n.drawElements(n.TRIANGLES,this.geometry.attributes.index.values.length,n.UNSIGNED_SHORT,0);}remove(){a.meshes=a.meshes.filter(c=>c!=this);}}},Attribute:{enumerable:!1,value:class{constructor(c){this.type=n.FLOAT,this.normalized=!1,this.buffer=n.createBuffer(),Object.assign(this,c),this.update();}update(){this.values!==void 0&&(n.bindBuffer(this.target,this.buffer),n.bufferData(this.target,this.values,n.STATIC_DRAW));}attach(c,m){const s=n.getAttribLocation(m,c);return this.target===n.ARRAY_BUFFER&&(n.enableVertexAttribArray(s),n.vertexAttribPointer(s,this.size,this.type,this.normalized,0,0)),s}use(c){n.bindBuffer(this.target,this.buffer),this.target===n.ARRAY_BUFFER&&(n.enableVertexAttribArray(c),n.vertexAttribPointer(c,this.size,this.type,this.normalized,0,0));}}}});const l=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];a.commonUniforms={projectionMatrix:new a.Uniform({type:"mat4",value:l}),modelViewMatrix:new a.Uniform({type:"mat4",value:l}),resolution:new a.Uniform({type:"vec2",value:[1,1]}),aspectRatio:new a.Uniform({type:"float",value:1})};}setSize(t=640,o=480){this.width=t,this.height=o,this.canvas.width=t,this.canvas.height=o,this.gl.viewport(0,0,t,o),this.commonUniforms.resolution.value=[t,o],this.commonUniforms.aspectRatio.value=t/o;}setOrthographicCamera(t=0,o=0,r=0,a=-2e3,n=2e3){this.commonUniforms.projectionMatrix.value=[2/this.width,0,0,0,0,2/this.height,0,0,0,0,2/(a-n),0,t,o,r,1];}render(){this.gl.clearColor(0,0,0,0),this.gl.clearDepth(1),this.meshes.forEach(t=>t.draw());}};const w={CROSS_ICON:w$2`<svg width="12" height="12" viewBox="0 0 12 12"><path d="M9.94 11A.75.75 0 1 0 11 9.94L7.414 6.353a.5.5 0 0 1 0-.708L11 2.061A.75.75 0 1 0 9.94 1L6.353 4.586a.5.5 0 0 1-.708 0L2.061 1A.75.75 0 0 0 1 2.06l3.586 3.586a.5.5 0 0 1 0 .708L1 9.939A.75.75 0 1 0 2.06 11l3.586-3.586a.5.5 0 0 1 .708 0L9.939 11Z" fill="#fff"/></svg>`,NOISE_TEXTURE:w$2`<svg id="w3m-transparent-noise"><filter id="w3m-noise"><feTurbulence type="fractalNoise" baseFrequency="0.8"/></filter><rect width="100%" height="100%" filter="url(#w3m-noise)"/></svg>`,WALLET_CONNECT_LOGO:w$2`<svg width="178" height="29" viewBox="0 0 178 29" id="w3m-wc-logo"><path d="M10.683 7.926c5.284-5.17 13.85-5.17 19.134 0l.636.623a.652.652 0 0 1 0 .936l-2.176 2.129a.343.343 0 0 1-.478 0l-.875-.857c-3.686-3.607-9.662-3.607-13.348 0l-.937.918a.343.343 0 0 1-.479 0l-2.175-2.13a.652.652 0 0 1 0-.936l.698-.683Zm23.633 4.403 1.935 1.895a.652.652 0 0 1 0 .936l-8.73 8.543a.687.687 0 0 1-.956 0L20.37 17.64a.172.172 0 0 0-.239 0l-6.195 6.063a.687.687 0 0 1-.957 0l-8.73-8.543a.652.652 0 0 1 0-.936l1.936-1.895a.687.687 0 0 1 .957 0l6.196 6.064a.172.172 0 0 0 .239 0l6.195-6.064a.687.687 0 0 1 .957 0l6.196 6.064a.172.172 0 0 0 .24 0l6.195-6.064a.687.687 0 0 1 .956 0ZM48.093 20.948l2.338-9.355c.139-.515.258-1.07.416-1.942.12.872.258 1.427.357 1.942l2.022 9.355h4.181l3.528-13.874h-3.21l-1.943 8.523a24.825 24.825 0 0 0-.456 2.457c-.158-.931-.317-1.625-.495-2.438l-1.883-8.542h-4.201l-2.042 8.542a41.204 41.204 0 0 0-.475 2.438 41.208 41.208 0 0 0-.476-2.438l-1.903-8.542h-3.349l3.508 13.874h4.083ZM63.33 21.304c1.585 0 2.596-.654 3.11-1.605-.059.297-.078.595-.078.892v.357h2.655V15.22c0-2.735-1.248-4.32-4.3-4.32-2.636 0-4.36 1.466-4.52 3.487h2.914c.1-.891.734-1.426 1.705-1.426.911 0 1.407.515 1.407 1.11 0 .435-.258.693-1.03.792l-1.388.159c-2.061.257-3.825 1.01-3.825 3.19 0 1.982 1.645 3.092 3.35 3.092Zm.891-2.041c-.773 0-1.348-.436-1.348-1.19 0-.733.655-1.09 1.645-1.268l.674-.119c.575-.118.892-.218 1.09-.396v.912c0 1.228-.892 2.06-2.06 2.06ZM70.398 7.074v13.874h2.874V7.074h-2.874ZM74.934 7.074v13.874h2.874V7.074h-2.874ZM84.08 21.304c2.735 0 4.5-1.546 4.697-3.567h-2.893c-.139.892-.892 1.387-1.804 1.387-1.228 0-2.12-.99-2.14-2.358h6.897v-.555c0-3.21-1.764-5.312-4.816-5.312-2.933 0-4.994 2.062-4.994 5.173 0 3.37 2.12 5.232 5.053 5.232Zm-2.16-6.421c.119-1.11.932-1.922 2.081-1.922 1.11 0 1.883.772 1.903 1.922H81.92ZM94.92 21.146c.633 0 1.248-.1 1.525-.179v-2.18c-.218.04-.475.06-.693.06-1.05 0-1.427-.595-1.427-1.566v-3.805h2.338v-2.24h-2.338V7.788H91.47v3.448H89.37v2.24h2.1v4.201c0 2.3 1.15 3.469 3.45 3.469ZM104.62 21.304c3.924 0 6.302-2.299 6.599-5.608h-3.111c-.238 1.803-1.506 3.032-3.369 3.032-2.2 0-3.746-1.784-3.746-4.796 0-2.953 1.605-4.638 3.805-4.638 1.883 0 2.953 1.15 3.171 2.834h3.191c-.317-3.448-2.854-5.41-6.342-5.41-3.984 0-7.036 2.695-7.036 7.214 0 4.677 2.676 7.372 6.838 7.372ZM117.449 21.304c2.993 0 5.114-1.882 5.114-5.172 0-3.23-2.121-5.233-5.114-5.233-2.972 0-5.093 2.002-5.093 5.233 0 3.29 2.101 5.172 5.093 5.172Zm0-2.22c-1.327 0-2.18-1.09-2.18-2.952 0-1.903.892-2.973 2.18-2.973 1.308 0 2.2 1.07 2.2 2.973 0 1.862-.872 2.953-2.2 2.953ZM126.569 20.948v-5.689c0-1.208.753-2.1 1.823-2.1 1.011 0 1.606.773 1.606 2.06v5.729h2.873v-6.144c0-2.339-1.229-3.905-3.428-3.905-1.526 0-2.458.734-2.953 1.606a5.31 5.31 0 0 0 .079-.892v-.377h-2.874v9.712h2.874ZM137.464 20.948v-5.689c0-1.208.753-2.1 1.823-2.1 1.011 0 1.606.773 1.606 2.06v5.729h2.873v-6.144c0-2.339-1.228-3.905-3.428-3.905-1.526 0-2.458.734-2.953 1.606a5.31 5.31 0 0 0 .079-.892v-.377h-2.874v9.712h2.874ZM149.949 21.304c2.735 0 4.499-1.546 4.697-3.567h-2.893c-.139.892-.892 1.387-1.804 1.387-1.228 0-2.12-.99-2.14-2.358h6.897v-.555c0-3.21-1.764-5.312-4.816-5.312-2.933 0-4.994 2.062-4.994 5.173 0 3.37 2.12 5.232 5.053 5.232Zm-2.16-6.421c.119-1.11.932-1.922 2.081-1.922 1.11 0 1.883.772 1.903 1.922h-3.984ZM160.876 21.304c3.013 0 4.658-1.645 4.975-4.201h-2.874c-.099 1.07-.713 1.982-2.001 1.982-1.309 0-2.2-1.21-2.2-2.993 0-1.942 1.03-2.933 2.259-2.933 1.209 0 1.803.872 1.883 1.882h2.873c-.218-2.358-1.823-4.142-4.776-4.142-2.874 0-5.153 1.903-5.153 5.193 0 3.25 1.923 5.212 5.014 5.212ZM172.067 21.146c.634 0 1.248-.1 1.526-.179v-2.18c-.218.04-.476.06-.694.06-1.05 0-1.427-.595-1.427-1.566v-3.805h2.339v-2.24h-2.339V7.788h-2.854v3.448h-2.1v2.24h2.1v4.201c0 2.3 1.15 3.469 3.449 3.469Z" fill="#fff"/></svg>`,WALLET_CONNECT_ICON:w$2`<svg width="28" height="20" viewBox="0 0 28 20"><g clip-path="url(#a)"><path d="M7.386 6.482c3.653-3.576 9.575-3.576 13.228 0l.44.43a.451.451 0 0 1 0 .648L19.55 9.033a.237.237 0 0 1-.33 0l-.606-.592c-2.548-2.496-6.68-2.496-9.228 0l-.648.634a.237.237 0 0 1-.33 0L6.902 7.602a.451.451 0 0 1 0-.647l.483-.473Zm16.338 3.046 1.339 1.31a.451.451 0 0 1 0 .648l-6.035 5.909a.475.475 0 0 1-.662 0L14.083 13.2a.119.119 0 0 0-.166 0l-4.283 4.194a.475.475 0 0 1-.662 0l-6.035-5.91a.451.451 0 0 1 0-.647l1.338-1.31a.475.475 0 0 1 .662 0l4.283 4.194c.046.044.12.044.166 0l4.283-4.194a.475.475 0 0 1 .662 0l4.283 4.194c.046.044.12.044.166 0l4.283-4.194a.475.475 0 0 1 .662 0Z" fill="#000000"/></g><defs><clipPath id="a"><path fill="#ffffff" d="M0 0h28v20H0z"/></clipPath></defs></svg>`,WALLET_CONNECT_ICON_COLORED:w$2`<svg width="96" height="96" fill="none"><path fill="#fff" d="M25.322 33.597c12.525-12.263 32.83-12.263 45.355 0l1.507 1.476a1.547 1.547 0 0 1 0 2.22l-5.156 5.048a.814.814 0 0 1-1.134 0l-2.074-2.03c-8.737-8.555-22.903-8.555-31.64 0l-2.222 2.175a.814.814 0 0 1-1.134 0l-5.156-5.049a1.547 1.547 0 0 1 0-2.22l1.654-1.62Zm56.019 10.44 4.589 4.494a1.547 1.547 0 0 1 0 2.22l-20.693 20.26a1.628 1.628 0 0 1-2.267 0L48.283 56.632a.407.407 0 0 0-.567 0L33.03 71.012a1.628 1.628 0 0 1-2.268 0L10.07 50.75a1.547 1.547 0 0 1 0-2.22l4.59-4.494a1.628 1.628 0 0 1 2.267 0l14.687 14.38c.156.153.41.153.567 0l14.685-14.38a1.628 1.628 0 0 1 2.268 0l14.687 14.38c.156.153.41.153.567 0l14.686-14.38a1.628 1.628 0 0 1 2.268 0Z"/><path stroke="#000" d="M25.672 33.954c12.33-12.072 32.325-12.072 44.655 0l1.508 1.476a1.047 1.047 0 0 1 0 1.506l-5.157 5.048a.314.314 0 0 1-.434 0l-2.074-2.03c-8.932-8.746-23.409-8.746-32.34 0l-2.222 2.174a.314.314 0 0 1-.434 0l-5.157-5.048a1.047 1.047 0 0 1 0-1.506l1.655-1.62Zm55.319 10.44 4.59 4.494a1.047 1.047 0 0 1 0 1.506l-20.694 20.26a1.128 1.128 0 0 1-1.568 0l-14.686-14.38a.907.907 0 0 0-1.267 0L32.68 70.655a1.128 1.128 0 0 1-1.568 0L10.42 50.394a1.047 1.047 0 0 1 0-1.506l4.59-4.493a1.128 1.128 0 0 1 1.567 0l14.687 14.379a.907.907 0 0 0 1.266 0l-.35-.357.35.357 14.686-14.38a1.128 1.128 0 0 1 1.568 0l14.687 14.38a.907.907 0 0 0 1.267 0l14.686-14.38a1.128 1.128 0 0 1 1.568 0Z"/></svg>`,BACK_ICON:w$2`<svg width="10" height="18" viewBox="0 0 10 18"><path fill-rule="evenodd" clip-rule="evenodd" d="M8.735.179a.75.75 0 0 1 .087 1.057L2.92 8.192a1.25 1.25 0 0 0 0 1.617l5.902 6.956a.75.75 0 1 1-1.144.97L1.776 10.78a2.75 2.75 0 0 1 0-3.559L7.678.265A.75.75 0 0 1 8.735.18Z" fill="#fff"/></svg>`,COPY_ICON:w$2`<svg width="24" height="24" fill="none"><path fill="#fff" fill-rule="evenodd" d="M7.01 7.01c.03-1.545.138-2.5.535-3.28A5 5 0 0 1 9.73 1.545C10.8 1 12.2 1 15 1c2.8 0 4.2 0 5.27.545a5 5 0 0 1 2.185 2.185C23 4.8 23 6.2 23 9c0 2.8 0 4.2-.545 5.27a5 5 0 0 1-2.185 2.185c-.78.397-1.735.505-3.28.534l-.001.01c-.03 1.54-.138 2.493-.534 3.27a5 5 0 0 1-2.185 2.186C13.2 23 11.8 23 9 23c-2.8 0-4.2 0-5.27-.545a5 5 0 0 1-2.185-2.185C1 19.2 1 17.8 1 15c0-2.8 0-4.2.545-5.27A5 5 0 0 1 3.73 7.545C4.508 7.149 5.46 7.04 7 7.01h.01ZM15 15.5c-1.425 0-2.403-.001-3.162-.063-.74-.06-1.139-.172-1.427-.319a3.5 3.5 0 0 1-1.53-1.529c-.146-.288-.257-.686-.318-1.427C8.501 11.403 8.5 10.425 8.5 9c0-1.425.001-2.403.063-3.162.06-.74.172-1.139.318-1.427a3.5 3.5 0 0 1 1.53-1.53c.288-.146.686-.257 1.427-.318.759-.062 1.737-.063 3.162-.063 1.425 0 2.403.001 3.162.063.74.06 1.139.172 1.427.318a3.5 3.5 0 0 1 1.53 1.53c.146.288.257.686.318 1.427.062.759.063 1.737.063 3.162 0 1.425-.001 2.403-.063 3.162-.06.74-.172 1.139-.319 1.427a3.5 3.5 0 0 1-1.529 1.53c-.288.146-.686.257-1.427.318-.759.062-1.737.063-3.162.063ZM7 8.511c-.444.009-.825.025-1.162.052-.74.06-1.139.172-1.427.318a3.5 3.5 0 0 0-1.53 1.53c-.146.288-.257.686-.318 1.427-.062.759-.063 1.737-.063 3.162 0 1.425.001 2.403.063 3.162.06.74.172 1.139.318 1.427a3.5 3.5 0 0 0 1.53 1.53c.288.146.686.257 1.427.318.759.062 1.737.063 3.162.063 1.425 0 2.403-.001 3.162-.063.74-.06 1.139-.172 1.427-.319a3.5 3.5 0 0 0 1.53-1.53c.146-.287.257-.685.318-1.426.027-.337.043-.718.052-1.162H15c-2.8 0-4.2 0-5.27-.545a5 5 0 0 1-2.185-2.185C7 13.2 7 11.8 7 9v-.489Z" clip-rule="evenodd"/></svg>`,RETRY_ICON:w$2`<svg width="15" height="16" viewBox="0 0 15 16"><path d="M6.464 2.03A.75.75 0 0 0 5.403.97L2.08 4.293a1 1 0 0 0 0 1.414L5.403 9.03a.75.75 0 0 0 1.06-1.06L4.672 6.177a.25.25 0 0 1 .177-.427h2.085a4 4 0 1 1-3.93 4.746c-.077-.407-.405-.746-.82-.746-.414 0-.755.338-.7.748a5.501 5.501 0 1 0 5.45-6.248H4.848a.25.25 0 0 1-.177-.427L6.464 2.03Z" fill="#fff"/></svg>`,DESKTOP_ICON:w$2`<svg width="16" height="16" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M0 5.98c0-1.85 0-2.775.394-3.466a3 3 0 0 1 1.12-1.12C2.204 1 3.13 1 4.98 1h6.04c1.85 0 2.775 0 3.466.394a3 3 0 0 1 1.12 1.12C16 3.204 16 4.13 16 5.98v1.04c0 1.85 0 2.775-.394 3.466a3 3 0 0 1-1.12 1.12C13.796 12 12.87 12 11.02 12H4.98c-1.85 0-2.775 0-3.466-.394a3 3 0 0 1-1.12-1.12C0 9.796 0 8.87 0 7.02V5.98ZM4.98 2.5h6.04c.953 0 1.568.001 2.034.043.446.04.608.108.69.154a1.5 1.5 0 0 1 .559.56c.046.08.114.243.154.69.042.465.043 1.08.043 2.033v1.04c0 .952-.001 1.568-.043 2.034-.04.446-.108.608-.154.69a1.499 1.499 0 0 1-.56.559c-.08.046-.243.114-.69.154-.466.042-1.08.043-2.033.043H4.98c-.952 0-1.568-.001-2.034-.043-.446-.04-.608-.108-.69-.154a1.5 1.5 0 0 1-.559-.56c-.046-.08-.114-.243-.154-.69-.042-.465-.043-1.08-.043-2.033V5.98c0-.952.001-1.568.043-2.034.04-.446.108-.608.154-.69a1.5 1.5 0 0 1 .56-.559c.08-.046.243-.114.69-.154.465-.042 1.08-.043 2.033-.043Z" fill="#fff"/><path d="M4 14.25a.75.75 0 0 1 .75-.75h6.5a.75.75 0 0 1 0 1.5h-6.5a.75.75 0 0 1-.75-.75Z" fill="#fff"/></svg>`,MOBILE_ICON:w$2`<svg width="16" height="16" viewBox="0 0 16 16"><path d="M6.75 5a1.25 1.25 0 1 0 0-2.5 1.25 1.25 0 0 0 0 2.5Z" fill="#fff"/><path fill-rule="evenodd" clip-rule="evenodd" d="M3 4.98c0-1.85 0-2.775.394-3.466a3 3 0 0 1 1.12-1.12C5.204 0 6.136 0 8 0s2.795 0 3.486.394a3 3 0 0 1 1.12 1.12C13 2.204 13 3.13 13 4.98v6.04c0 1.85 0 2.775-.394 3.466a3 3 0 0 1-1.12 1.12C10.796 16 9.864 16 8 16s-2.795 0-3.486-.394a3 3 0 0 1-1.12-1.12C3 13.796 3 12.87 3 11.02V4.98Zm8.5 0v6.04c0 .953-.001 1.568-.043 2.034-.04.446-.108.608-.154.69a1.499 1.499 0 0 1-.56.559c-.08.045-.242.113-.693.154-.47.042-1.091.043-2.05.043-.959 0-1.58-.001-2.05-.043-.45-.04-.613-.109-.693-.154a1.5 1.5 0 0 1-.56-.56c-.046-.08-.114-.243-.154-.69-.042-.466-.043-1.08-.043-2.033V4.98c0-.952.001-1.568.043-2.034.04-.446.108-.608.154-.69a1.5 1.5 0 0 1 .56-.559c.08-.045.243-.113.693-.154C6.42 1.501 7.041 1.5 8 1.5c.959 0 1.58.001 2.05.043.45.04.613.109.693.154a1.5 1.5 0 0 1 .56.56c.046.08.114.243.154.69.042.465.043 1.08.043 2.033Z" fill="#fff"/></svg>`,ARROW_DOWN_ICON:w$2`<svg width="14" height="14" viewBox="0 0 14 14"><path d="M2.28 7.47a.75.75 0 0 0-1.06 1.06l5.25 5.25a.75.75 0 0 0 1.06 0l5.25-5.25a.75.75 0 0 0-1.06-1.06l-3.544 3.543a.25.25 0 0 1-.426-.177V.75a.75.75 0 0 0-1.5 0v10.086a.25.25 0 0 1-.427.176L2.28 7.47Z" fill="#fff"/></svg>`,ARROW_UP_RIGHT_ICON:w$2`<svg width="15" height="14" fill="none"><path d="M4.5 1.75A.75.75 0 0 1 5.25 1H12a1.5 1.5 0 0 1 1.5 1.5v6.75a.75.75 0 0 1-1.5 0V4.164a.25.25 0 0 0-.427-.176L4.061 11.5A.75.75 0 0 1 3 10.44l7.513-7.513a.25.25 0 0 0-.177-.427H5.25a.75.75 0 0 1-.75-.75Z" fill="#fff"/></svg>`,ARROW_RIGHT_ICON:w$2`<svg width="6" height="14" viewBox="0 0 6 14"><path fill-rule="evenodd" clip-rule="evenodd" d="M2.181 1.099a.75.75 0 0 1 1.024.279l2.433 4.258a2.75 2.75 0 0 1 0 2.729l-2.433 4.257a.75.75 0 1 1-1.303-.744L4.335 7.62a1.25 1.25 0 0 0 0-1.24L1.902 2.122a.75.75 0 0 1 .28-1.023Z" fill="#fff"/></svg>`,QRCODE_ICON:w$2`<svg width="25" height="24" viewBox="0 0 25 24"><path d="M23.748 9a.748.748 0 0 0 .748-.752c-.018-2.596-.128-4.07-.784-5.22a6 6 0 0 0-2.24-2.24c-1.15-.656-2.624-.766-5.22-.784a.748.748 0 0 0-.752.748c0 .414.335.749.748.752 1.015.007 1.82.028 2.494.088.995.09 1.561.256 1.988.5.7.398 1.28.978 1.679 1.678.243.427.41.993.498 1.988.061.675.082 1.479.09 2.493a.753.753 0 0 0 .75.749ZM3.527.788C4.677.132 6.152.022 8.747.004A.748.748 0 0 1 9.5.752a.753.753 0 0 1-.749.752c-1.014.007-1.818.028-2.493.088-.995.09-1.561.256-1.988.5-.7.398-1.28.978-1.679 1.678-.243.427-.41.993-.499 1.988-.06.675-.081 1.479-.088 2.493A.753.753 0 0 1 1.252 9a.748.748 0 0 1-.748-.752c.018-2.596.128-4.07.784-5.22a6 6 0 0 1 2.24-2.24ZM1.252 15a.748.748 0 0 0-.748.752c.018 2.596.128 4.07.784 5.22a6 6 0 0 0 2.24 2.24c1.15.656 2.624.766 5.22.784a.748.748 0 0 0 .752-.748.753.753 0 0 0-.749-.752c-1.014-.007-1.818-.028-2.493-.089-.995-.089-1.561-.255-1.988-.498a4.5 4.5 0 0 1-1.679-1.68c-.243-.426-.41-.992-.499-1.987-.06-.675-.081-1.479-.088-2.493A.753.753 0 0 0 1.252 15ZM22.996 15.749a.753.753 0 0 1 .752-.749c.415 0 .751.338.748.752-.018 2.596-.128 4.07-.784 5.22a6 6 0 0 1-2.24 2.24c-1.15.656-2.624.766-5.22.784a.748.748 0 0 1-.752-.748c0-.414.335-.749.748-.752 1.015-.007 1.82-.028 2.494-.089.995-.089 1.561-.255 1.988-.498a4.5 4.5 0 0 0 1.679-1.68c.243-.426.41-.992.498-1.987.061-.675.082-1.479.09-2.493Z" fill="#fff"/><path fill-rule="evenodd" clip-rule="evenodd" d="M7 4a2.5 2.5 0 0 0-2.5 2.5v2A2.5 2.5 0 0 0 7 11h2a2.5 2.5 0 0 0 2.5-2.5v-2A2.5 2.5 0 0 0 9 4H7Zm2 1.5H7a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1ZM13.5 6.5A2.5 2.5 0 0 1 16 4h2a2.5 2.5 0 0 1 2.5 2.5v2A2.5 2.5 0 0 1 18 11h-2a2.5 2.5 0 0 1-2.5-2.5v-2Zm2.5-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1ZM7 13a2.5 2.5 0 0 0-2.5 2.5v2A2.5 2.5 0 0 0 7 20h2a2.5 2.5 0 0 0 2.5-2.5v-2A2.5 2.5 0 0 0 9 13H7Zm2 1.5H7a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1Z" fill="#fff"/><path d="M13.5 15.5c0-.465 0-.697.038-.89a2 2 0 0 1 1.572-1.572C15.303 13 15.535 13 16 13v2.5h-2.5ZM18 13c.465 0 .697 0 .89.038a2 2 0 0 1 1.572 1.572c.038.193.038.425.038.89H18V13ZM18 17.5h2.5c0 .465 0 .697-.038.89a2 2 0 0 1-1.572 1.572C18.697 20 18.465 20 18 20v-2.5ZM13.5 17.5H16V20c-.465 0-.697 0-.89-.038a2 2 0 0 1-1.572-1.572c-.038-.193-.038-.425-.038-.89Z" fill="#fff"/></svg>`,SCAN_ICON:w$2`<svg width="16" height="16" fill="none"><path fill="#fff" d="M10 15.216c0 .422.347.763.768.74 1.202-.064 2.025-.222 2.71-.613a5.001 5.001 0 0 0 1.865-1.866c.39-.684.549-1.507.613-2.709a.735.735 0 0 0-.74-.768.768.768 0 0 0-.76.732c-.009.157-.02.306-.032.447-.073.812-.206 1.244-.384 1.555-.31.545-.761.996-1.306 1.306-.311.178-.743.311-1.555.384-.141.013-.29.023-.447.032a.768.768 0 0 0-.732.76ZM10 .784c0 .407.325.737.732.76.157.009.306.02.447.032.812.073 1.244.206 1.555.384a3.5 3.5 0 0 1 1.306 1.306c.178.311.311.743.384 1.555.013.142.023.29.032.447a.768.768 0 0 0 .76.732.734.734 0 0 0 .74-.768c-.064-1.202-.222-2.025-.613-2.71A5 5 0 0 0 13.477.658c-.684-.39-1.507-.549-2.709-.613a.735.735 0 0 0-.768.74ZM5.232.044A.735.735 0 0 1 6 .784a.768.768 0 0 1-.732.76c-.157.009-.305.02-.447.032-.812.073-1.244.206-1.555.384A3.5 3.5 0 0 0 1.96 3.266c-.178.311-.311.743-.384 1.555-.013.142-.023.29-.032.447A.768.768 0 0 1 .784 6a.735.735 0 0 1-.74-.768c.064-1.202.222-2.025.613-2.71A5 5 0 0 1 2.523.658C3.207.267 4.03.108 5.233.044ZM5.268 14.456a.768.768 0 0 1 .732.76.734.734 0 0 1-.768.74c-1.202-.064-2.025-.222-2.71-.613a5 5 0 0 1-1.865-1.866c-.39-.684-.549-1.507-.613-2.709A.735.735 0 0 1 .784 10c.407 0 .737.325.76.732.009.157.02.306.032.447.073.812.206 1.244.384 1.555a3.5 3.5 0 0 0 1.306 1.306c.311.178.743.311 1.555.384.142.013.29.023.447.032Z"/></svg>`,CHECKMARK_ICON:w$2`<svg width="13" height="12" viewBox="0 0 13 12"><path fill-rule="evenodd" clip-rule="evenodd" d="M12.155.132a.75.75 0 0 1 .232 1.035L5.821 11.535a1 1 0 0 1-1.626.09L.665 7.21a.75.75 0 1 1 1.17-.937L4.71 9.867a.25.25 0 0 0 .406-.023L11.12.364a.75.75 0 0 1 1.035-.232Z" fill="#fff"/></svg>`,HELP_ETH_IMG:w$2`<svg width="60" height="60" fill="none" viewBox="0 0 60 60"><g clip-path="url(#j)"><rect width="60" height="60" rx="30" fill="#987DE8"/><path fill-rule="evenodd" clip-rule="evenodd" d="m15.48 28.367 11.966-19.3c1.174-1.892 3.927-1.892 5.1 0l11.97 19.306a6 6 0 0 1 .9 3.142v.028a6 6 0 0 1-1.154 3.56L33.227 50.208c-1.599 2.188-4.864 2.188-6.461 0L15.733 35.095a6 6 0 0 1-1.154-3.538v-.029a6 6 0 0 1 .9-3.161Z" fill="#fff"/><path d="M30.84 10.112a.992.992 0 0 0-.844-.464V24.5l12.598 5.53c.081-.466-.001-.963-.27-1.398L30.84 10.112Z" fill="#643CDD"/><path d="M29.996 9.648a.991.991 0 0 0-.845.465l-11.489 18.53a1.991 1.991 0 0 0-.264 1.387l12.598-5.53V9.648Z" fill="#BDADEB"/><path d="M29.996 50.544a.994.994 0 0 0 .808-.41l11.235-15.38c.307-.434-.193-.988-.658-.72L31.49 39.71a2.998 2.998 0 0 1-1.494.398v10.437Z" fill="#643CDD"/><path d="M17.966 34.762 29.19 50.134c.2.274.503.41.807.41V40.108a2.998 2.998 0 0 1-1.493-.398l-9.884-5.676c-.468-.27-.971.292-.653.728Z" fill="#BDADEB"/><path d="M42.594 30.03 29.996 24.5v13.138a3 3 0 0 0 1.495-.399l10.149-5.83c.525-.31.856-.823.954-1.38Z" fill="#401AB3"/><path d="M29.996 37.638V24.462l-12.598 5.566c.098.564.437 1.083.974 1.392l10.13 5.82c.462.265.978.398 1.494.398Z" fill="#7C5AE2"/></g><rect class="help-img-highlight" x=".5" y=".5" width="59" height="59" rx="29.5"/><defs><clipPath id="j"><rect width="60" height="60" rx="30" fill="#fff"/></clipPath></defs></svg>`,HELP_PAINTING_IMG:w$2`<svg width="60" height="60" fill="none" viewBox="0 0 60 60"><g clip-path="url(#k)"><rect width="60" height="60" rx="3" fill="#C653C6"/><path d="M52.094 47.344c0-4.246-1.436-9.557-5.885-12.4a2.876 2.876 0 0 0-1.615-3.891v-.819a4.037 4.037 0 0 0-1.34-3.007 4.75 4.75 0 0 0-2.41-6.252v-5.506c0-6.248-5.065-11.313-11.313-11.313-6.247 0-11.312 5.065-11.312 11.313v2.152a3.343 3.343 0 0 0-1.18 5.045 4.738 4.738 0 0 0-1.633 3.584 4.73 4.73 0 0 0 .956 2.858 5.218 5.218 0 0 0-2.358 6.815c-3.06 4.129-6.098 8.298-6.098 15.64 0 2.668.364 4.856.731 6.385.184.765.368 1.366.509 1.78a12.721 12.721 0 0 0 .225.611l.015.037.005.011.001.004v.002h.001l.92-.393-.92.394.26.606h38.26l.291-.49-.86-.51.86.51v-.001l.002-.002.002-.005.01-.017.035-.06.127-.225c.108-.195.26-.477.441-.835.363-.714.845-1.732 1.328-2.953.959-2.427 1.945-5.725 1.945-9.068Z" fill="#E87DE8" stroke="#fff" stroke-width="2"/><path fill-rule="evenodd" clip-rule="evenodd" d="M26.5 29.5c-3-.5-5.5-3-5.503-7l.002-7c0-.466 0-.698.026-.893a3 3 0 0 1 2.582-2.582c.195-.026.428-.026.893-.026 2 0 2.5-2.5 2.5-2.5s0 2.5 2.5 2.5c1.398 0 2.097 0 2.648.229a3 3 0 0 1 1.624 1.623c.228.552.228 1.25.228 2.649v6c0 4-3 7-6.5 7 1.35.23 4 0 6.5-2v9.53C34 38.5 31.495 40 28 40s-6-1.5-6-2.97L24 34l2.5 1.5v-6ZM26 47h4.5c2.5 0 3 4 3 5.5h-3l-1-1.5H26v-4Zm-6.25 5.5H24V57h-8c0-1 1-4.5 3.75-4.5Z" fill="#fff"/></g><rect class="help-img-highlight" x=".5" y=".5" width="59" height="59" rx="2.5"/><defs><clipPath id="k"><rect width="60" height="60" rx="3" fill="#fff"/></clipPath></defs></svg>`,HELP_CHART_IMG:w$2`<svg width="60" height="60" fill="none" viewBox="0 0 60 60"><g clip-path="url(#l)"><path d="M0 25.01C0 15.76 0 11.133 1.97 7.678a15 15 0 0 1 5.598-5.597C11.023.11 15.648.11 24.9.11h10.2c9.251 0 13.877 0 17.332 1.97a15 15 0 0 1 5.597 5.597C60 11.133 60 15.758 60 25.01v10.2c0 9.252 0 13.877-1.97 17.332a15 15 0 0 1-5.598 5.598c-3.455 1.97-8.08 1.97-17.332 1.97H24.9c-9.251 0-13.877 0-17.332-1.97a14.999 14.999 0 0 1-5.597-5.598C0 49.087 0 44.462 0 35.21v-10.2Z" fill="#1DC956"/><path d="M.5 25.01c0-4.635 0-8.078.244-10.795.244-2.71.726-4.65 1.66-6.289a14.5 14.5 0 0 1 5.412-5.41c1.639-.936 3.579-1.418 6.289-1.661C16.822.61 20.265.61 24.9.61h10.2c4.635 0 8.078 0 10.795.245 2.71.243 4.65.725 6.29 1.66a14.5 14.5 0 0 1 5.41 5.411c.935 1.64 1.417 3.579 1.66 6.29.244 2.717.245 6.16.245 10.794v10.2c0 4.635 0 8.078-.244 10.795-.244 2.71-.726 4.65-1.66 6.29a14.5 14.5 0 0 1-5.412 5.41c-1.639.936-3.579 1.418-6.289 1.661-2.717.244-6.16.244-10.795.244H24.9c-4.635 0-8.078 0-10.795-.244-2.71-.243-4.65-.725-6.29-1.66a14.5 14.5 0 0 1-5.41-5.412C1.47 50.655.988 48.716.745 46.005.5 43.288.5 39.845.5 35.21v-10.2Z" stroke="#fff" stroke-opacity=".1"/><path d="M16.109 60c-3.833-.179-6.41-.645-8.541-1.86a15 15 0 0 1-5.598-5.598C.553 50.057.155 46.967.043 41.985l4.146-1.382a4 4 0 0 0 2.48-2.39l4.654-12.409a2 2 0 0 1 2.505-1.195l2.526.842a2 2 0 0 0 2.422-1.003l2.968-5.938c.81-1.62 3.185-1.415 3.705.32l3.774 12.581a2 2 0 0 0 3.025 1.09l3.342-2.228c.27-.18.49-.422.646-.706l5.297-9.712a2 2 0 0 1 1.428-1.016l4.134-.689a2 2 0 0 1 1.61.437l3.892 3.243a2 2 0 0 0 2.694-.122l4.633-4.632C60 19.28 60 21.88 60 25.01v10.2c0 9.252 0 13.877-1.97 17.332a14.998 14.998 0 0 1-5.598 5.598c-2.131 1.215-4.708 1.681-8.54 1.86H16.108Z" fill="#2BEE6C"/><path d="M.072 43.03a112.37 112.37 0 0 1-.048-2.093l3.85-1.283a3 3 0 0 0 1.86-1.793l4.653-12.408a3 3 0 0 1 3.758-1.793l2.526.842a1 1 0 0 0 1.21-.501l2.97-5.938c1.214-2.43 4.775-2.123 5.556.48l3.774 12.58a1 1 0 0 0 1.513.545l3.341-2.227a1 1 0 0 0 .323-.353l5.298-9.712a3 3 0 0 1 2.14-1.523l4.135-.69a3 3 0 0 1 2.414.655l3.892 3.244a1 1 0 0 0 1.347-.061l5.28-5.28c.046.845.077 1.752.097 2.732l-3.962 3.962a3 3 0 0 1-4.042.183l-3.893-3.243a1 1 0 0 0-.804-.218l-4.135.689a1 1 0 0 0-.714.507l-5.297 9.712c-.233.427-.565.79-.97 1.06l-3.34 2.228a3 3 0 0 1-4.538-1.635l-3.775-12.58c-.26-.868-1.447-.97-1.852-.16l-2.969 5.937a3 3 0 0 1-3.632 1.505l-2.526-.842a1 1 0 0 0-1.252.597L7.606 38.564a5 5 0 0 1-3.1 2.988L.072 43.029Z" fill="#fff"/><path fill-rule="evenodd" clip-rule="evenodd" d="M49.5 19a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0Z" fill="#2BEE6C"/><path d="M47.5 19a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z" fill="#fff"/><path d="M45 .283v59.654c-.63.042-1.294.074-2 .098V.185c.706.025 1.37.056 2 .098Z" fill="#fff"/><path class="help-img-highlight" d="M.5 25.01c0-4.635 0-8.078.244-10.795.244-2.71.726-4.65 1.66-6.289a14.5 14.5 0 0 1 5.412-5.41c1.639-.936 3.579-1.418 6.289-1.661C16.822.61 20.265.61 24.9.61h10.2c4.635 0 8.078 0 10.795.245 2.71.243 4.65.725 6.29 1.66a14.5 14.5 0 0 1 5.41 5.411c.935 1.64 1.417 3.579 1.66 6.29.244 2.717.245 6.16.245 10.794v10.2c0 4.635 0 8.078-.244 10.795-.244 2.71-.726 4.65-1.66 6.29a14.5 14.5 0 0 1-5.412 5.41c-1.639.936-3.579 1.418-6.289 1.661-2.717.244-6.16.244-10.795.244H24.9c-4.635 0-8.078 0-10.795-.244-2.71-.243-4.65-.725-6.29-1.66a14.5 14.5 0 0 1-5.41-5.412C1.47 50.655.988 48.716.745 46.005.5 43.288.5 39.845.5 35.21v-10.2Z"/></g><defs><clipPath id="l"><path fill="#fff" d="M0 0h60v60H0z"/></clipPath></defs></svg>`,HELP_KEY_IMG:w$2`<svg width="60" height="60" fill="none" viewBox="0 0 60 60"><g clip-path="url(#m)"><path fill="#EB8B47" d="M0 24.9c0-9.252 0-13.878 1.97-17.332A15 15 0 0 1 7.569 1.97C11.023 0 15.648 0 24.9 0h10.2c9.251 0 13.877 0 17.332 1.97a15 15 0 0 1 5.597 5.598C60 11.022 60 15.648 60 24.899v10.2c0 9.252 0 13.878-1.97 17.332a15.001 15.001 0 0 1-5.598 5.598c-3.455 1.97-8.08 1.97-17.332 1.97H24.9c-9.251 0-13.877 0-17.332-1.97a15 15 0 0 1-5.597-5.598C0 48.977 0 44.351 0 35.1V24.9Z"/><path class="help-img-highlight" d="M.5 24.9c0-4.635 0-8.078.244-10.795.244-2.71.726-4.65 1.66-6.29a14.5 14.5 0 0 1 5.412-5.41C9.455 1.468 11.395.986 14.105.743 16.822.5 20.265.5 24.9.5h10.2c4.635 0 8.078 0 10.795.244 2.71.243 4.65.725 6.29 1.66a14.5 14.5 0 0 1 5.41 5.411c.935 1.64 1.417 3.58 1.66 6.29.244 2.717.245 6.16.245 10.794v10.2c0 4.635 0 8.078-.244 10.796-.244 2.71-.726 4.65-1.66 6.289a14.5 14.5 0 0 1-5.412 5.41c-1.639.936-3.579 1.418-6.289 1.661-2.717.244-6.16.244-10.795.244H24.9c-4.635 0-8.078 0-10.795-.244-2.71-.243-4.65-.725-6.29-1.66a14.5 14.5 0 0 1-5.41-5.411c-.935-1.64-1.417-3.58-1.66-6.29C.5 43.178.5 39.734.5 35.1V24.9Z"/><path fill="#FF974C" stroke="#fff" stroke-width="2" d="M39.192 29.192c5.077-5.077 5.077-13.308 0-18.385-5.076-5.077-13.308-5.077-18.384 0-5.077 5.077-5.077 13.308 0 18.385l1.287 1.291c1.137 1.142 1.706 1.712 2.097 2.387.267.462.472.957.608 1.473.2.755.2 1.56.2 3.171V48.75c0 1.077 0 1.615.134 2.119a4 4 0 0 0 .407.984c.262.45.643.831 1.404 1.592l.294.295c.654.654.982.981 1.365 1.086.26.07.533.07.792 0 .383-.105.71-.432 1.365-1.086l3.478-3.479c.655-.654.982-.981 1.087-1.365a1.5 1.5 0 0 0 0-.791c-.105-.384-.432-.711-1.087-1.365l-.478-.479c-.655-.654-.982-.981-1.087-1.365a1.5 1.5 0 0 1 0-.791c.105-.384.432-.711 1.087-1.365l.478-.479c.655-.654.982-.981 1.087-1.365a1.5 1.5 0 0 0 0-.791c-.105-.384-.432-.711-1.087-1.365l-.492-.493c-.65-.65-.974-.974-1.08-1.355a1.5 1.5 0 0 1-.003-.788c.102-.382.425-.71 1.069-1.364l5.46-5.547Z"/><circle cx="30" cy="17" r="4" fill="#EB8B47" stroke="#fff" stroke-width="2"/></g><defs><clipPath id="m"><path fill="#fff" d="M0 0h60v60H0z"/></clipPath></defs></svg>`,HELP_USER_IMG:w$2`<svg width="60" height="60" fill="none" viewBox="0 0 60 60"><g clip-path="url(#n)"><rect width="60" height="60" fill="#00ACE6" rx="30"/><path fill="#1AC6FF" stroke="#fff" stroke-width="2" d="M59 73c0 16.016-12.984 29-29 29S1 89.016 1 73c0-16.017 11-29 29-29s29 12.983 29 29ZM18.69 19.902a11 11 0 0 1 9.281-8.692 14.842 14.842 0 0 1 4.058 0 11 11 0 0 1 9.28 8.692c.178.866.322 1.75.44 2.625.132.977.132 1.968 0 2.945a39.467 39.467 0 0 1-.44 2.625 11 11 0 0 1-9.28 8.692 14.862 14.862 0 0 1-4.058 0 11 11 0 0 1-9.28-8.692 39.467 39.467 0 0 1-.44-2.625 11.004 11.004 0 0 1 0-2.945c.118-.876.262-1.759.44-2.625Z"/><circle cx="24.5" cy="23.5" r="1.5" fill="#fff"/><circle cx="35.5" cy="23.5" r="1.5" fill="#fff"/><path stroke="#fff" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m31 20-3 8h4"/></g><rect class="help-img-highlight" width="59" height="59" x=".5" y=".5" rx="29.5"/><defs><clipPath id="n"><rect width="60" height="60" fill="#fff" rx="30"/></clipPath></defs></svg>`,HELP_LOCK_IMG:w$2`<svg width="60" height="60" fill="none" viewBox="0 0 60 60"><rect width="60" height="60" fill="#C653C6" rx="3"/><path fill="#fff" d="M20.034 15.216C20 15.607 20 16.07 20 17v2.808c0 1.13 0 1.696-.2 2.11a1.78 1.78 0 0 1-.584.714c-.366.28-1.051.42-2.423.7a7.076 7.076 0 0 0-1.597.511 9.001 9.001 0 0 0-4.353 4.353C10 30.005 10 32.336 10 37c0 4.663 0 6.995.843 8.804a9.001 9.001 0 0 0 4.353 4.353C17.005 51 19.336 51 24 51h12c4.663 0 6.995 0 8.804-.843a9.001 9.001 0 0 0 4.353-4.353C50 43.995 50 41.664 50 37c0-4.663 0-6.995-.843-8.804a9.001 9.001 0 0 0-4.353-4.353 7.076 7.076 0 0 0-1.597-.511c-1.372-.28-2.057-.42-2.423-.7a1.78 1.78 0 0 1-.583-.715C40 21.505 40 20.94 40 19.809V17c0-.929 0-1.393-.034-1.784a9 9 0 0 0-8.182-8.182C31.393 7 30.93 7 30 7s-1.393 0-1.784.034a9 9 0 0 0-8.182 8.182Z"/><path fill="#E87DE8" d="M22 17c0-.929 0-1.393.044-1.784a7 7 0 0 1 6.172-6.172C28.606 9 29.071 9 30 9s1.393 0 1.784.044a7 7 0 0 1 6.172 6.172c.044.39.044.855.044 1.784v4.5a1.5 1.5 0 0 1-3 0V17c0-.93 0-1.394-.077-1.78a4 4 0 0 0-3.143-3.143C31.394 12 30.93 12 30 12s-1.394 0-1.78.077a4 4 0 0 0-3.143 3.143C25 15.606 25 16.07 25 17v4.5a1.5 1.5 0 0 1-3 0V17Z"/><path fill="#E87DE8" fill-rule="evenodd" d="M12 36.62c0-4.317 0-6.476.92-8.088a7 7 0 0 1 2.612-2.612c1.612-.92 3.77-.92 8.088-.92h6.855c.469 0 .703 0 .906.017 2.73.222 4.364 2.438 4.619 4.983.27-2.698 2.111-5 5.015-5A6.985 6.985 0 0 1 48 31.985v5.395c0 4.317 0 6.476-.92 8.088a7 7 0 0 1-2.612 2.612c-1.612.92-3.77.92-8.088.92h-5.855c-.469 0-.703 0-.906-.017-2.73-.222-4.364-2.438-4.619-4.983-.258 2.583-1.943 4.818-4.714 4.99-.155.01-.335.01-.694.01-.55 0-.825 0-1.057-.015a7 7 0 0 1-6.52-6.52C12 42.233 12 41.958 12 41.408V36.62Zm21.24-.273a4 4 0 1 0-6.478 0c.985 1.36 1.479 2.039 1.564 2.229.178.398.176.818.174 1.247V42.5a1.5 1.5 0 0 0 3 0v-2.677c-.002-.429-.004-.85.174-1.247.085-.19.579-.87 1.565-2.229Z" clip-rule="evenodd"/><rect class="help-img-highlight" width="59" height="59" x=".5" y=".5" rx="2.5"/></svg>`,HELP_COMPAS_IMG:w$2`<svg width="60" height="60" fill="none" viewBox="0 0 60 60"><rect width="60" height="60" fill="#1DC956" rx="30"/><circle cx="30" cy="29.999" r="3" fill="#fff"/><path fill="#2BEE6C" stroke="#fff" stroke-width="2" d="m45.316 17.9-.88-.425.88.424a7.9 7.9 0 0 1 .026-.053c.093-.192.21-.432.26-.687l-.819-.162.819.162a2 2 0 0 0-.239-1.405c-.132-.224-.32-.412-.472-.562a8.415 8.415 0 0 1-.042-.042l-.042-.042c-.15-.151-.338-.34-.562-.472l-.508.862.508-.862a2 2 0 0 0-1.405-.239c-.255.05-.495.167-.687.26l-.053.026-15.05 7.246-.108.052c-1.131.545-1.843.887-2.456 1.374a6.994 6.994 0 0 0-1.13 1.13c-.487.613-.83 1.325-1.375 2.457l-.051.108-7.247 15.05-.025.053c-.094.192-.21.431-.26.686a2 2 0 0 0 .239 1.406l.855-.505-.856.505c.133.224.321.411.473.562l.042.042.041.042c.15.151.338.34.563.472a2 2 0 0 0 1.405.239l-.195-.981.195.98c.255-.05.494-.166.686-.26l.054-.025-.419-.87.419.87 15.05-7.247.107-.051c1.132-.545 1.844-.888 2.457-1.374a7.002 7.002 0 0 0 1.13-1.13c.487-.614.83-1.325 1.374-2.457l.052-.108 7.246-15.05Z"/><path fill="#1DC956" d="m33.376 32.723-2.669-3.43-14.85 14.849.206.205a1 1 0 0 0 1.141.194l15.105-7.273a3 3 0 0 0 1.067-4.545Z"/><path fill="#86F999" d="m26.624 27.276 2.669 3.43 14.85-14.849-.206-.205a1 1 0 0 0-1.141-.194L27.69 22.731a3 3 0 0 0-1.067 4.545Z"/><circle cx="30" cy="30" r="3" fill="#fff" transform="rotate(45 30 30)"/><rect class="help-img-highlight" width="59" height="59" x=".5" y=".5" rx="29.5"/></svg>`,HELP_NOUN_IMG:w$2`<svg width="60" height="60" fill="none" viewBox="0 0 60 60"><rect width="60" height="60" fill="#794CFF" rx="3"/><path fill="#987DE8" stroke="#fff" stroke-width="2" d="M33 22.5v-1H16v5H8.5V36H13v-5h3v7.5h17V31h1v7.5h17v-17H34v5h-1v-4Z"/><path fill="#fff" d="M37.5 25h10v10h-10z"/><path fill="#4019B2" d="M42.5 25h5v10h-5z"/><path fill="#fff" d="M19.5 25h10v10h-10z"/><path fill="#4019B2" d="M24.5 25h5v10h-5z"/><path fill="#fff" d="M12 30.5h4V37h-4v-6.5Z"/><rect class="help-img-highlight" width="59" height="59" x=".5" y=".5" rx="2.5"/></svg>`,HELP_DAO_IMG:w$2`<svg width="60" height="60" fill="none" viewBox="0 0 60 60"><g clip-path="url(#o)"><path fill="#EB8B47" d="M0 24.9c0-9.252 0-13.878 1.97-17.332A15 15 0 0 1 7.569 1.97C11.023 0 15.648 0 24.9 0h10.2c9.251 0 13.877 0 17.332 1.97a15 15 0 0 1 5.597 5.598C60 11.022 60 15.648 60 24.899v10.2c0 9.252 0 13.878-1.97 17.332a15.001 15.001 0 0 1-5.598 5.598c-3.455 1.97-8.08 1.97-17.332 1.97H24.9c-9.251 0-13.877 0-17.332-1.97a15 15 0 0 1-5.597-5.598C0 48.977 0 44.351 0 35.1V24.9Z"/><path class="help-img-highlight" d="M.5 24.9c0-4.635 0-8.078.244-10.795.244-2.71.726-4.65 1.66-6.29a14.5 14.5 0 0 1 5.412-5.41C9.455 1.468 11.395.986 14.105.743 16.822.5 20.265.5 24.9.5h10.2c4.635 0 8.078 0 10.795.244 2.71.243 4.65.725 6.29 1.66a14.5 14.5 0 0 1 5.41 5.411c.935 1.64 1.417 3.58 1.66 6.29.244 2.717.245 6.16.245 10.794v10.2c0 4.635 0 8.078-.244 10.796-.244 2.71-.726 4.65-1.66 6.289a14.5 14.5 0 0 1-5.412 5.41c-1.639.936-3.579 1.418-6.289 1.661-2.717.244-6.16.244-10.795.244H24.9c-4.635 0-8.078 0-10.795-.244-2.71-.243-4.65-.725-6.29-1.66a14.5 14.5 0 0 1-5.41-5.411c-.935-1.64-1.417-3.58-1.66-6.29C.5 43.178.5 39.734.5 35.1V24.9Z"/><path fill="#FF974C" stroke="#fff" stroke-width="2" d="M19 52c5.523 0 10-4.477 10-10s-4.477-10-10-10S9 36.477 9 42s4.477 10 10 10Z"/><path fill="#fff" fill-rule="evenodd" d="M42.844 8.326a1 1 0 0 0-1.687 0L28.978 27.463A1 1 0 0 0 29.822 29h24.357a1 1 0 0 0 .843-1.537L42.844 8.326Z" clip-rule="evenodd"/><path fill="#FF974C" fill-rule="evenodd" d="M42.335 11.646c.324.115.571.504 1.066 1.28l7.332 11.523c.562.883.843 1.325.792 1.69a1 1 0 0 1-.342.623c-.28.238-.803.238-1.85.238H34.667c-1.047 0-1.57 0-1.85-.238a1 1 0 0 1-.342-.623c-.051-.365.23-.806.792-1.69l7.332-11.523c.495-.776.742-1.165 1.066-1.28a1 1 0 0 1 .67 0ZM35 27a7 7 0 0 0 7-7 7 7 0 0 0 7 7H35Z" clip-rule="evenodd"/><path fill="#FF974C" stroke="#fff" stroke-width="2" d="M10.106 9.357c-.109.32-.107.682-.106.975V25.668c-.001.293-.003.654.106.975a2 2 0 0 0 1.251 1.25c.32.11.682.108.975.107H19c5.523 0 10-4.477 10-10S24.523 8 19 8h-6.668c-.293-.001-.654-.003-.975.106a2 2 0 0 0-1.25 1.251Z"/><circle cx="19" cy="18" r="4" fill="#EB8B47" stroke="#fff" stroke-width="2"/><circle cx="19" cy="41.999" r="4" fill="#EB8B47" stroke="#fff" stroke-width="2"/></g><defs><clipPath id="o"><path fill="#fff" d="M0 0h60v60H0z"/></clipPath></defs></svg>`,SEARCH_ICON:w$2`<svg width="20" height="21"><path fill-rule="evenodd" clip-rule="evenodd" d="M12.432 13.992c-.354-.353-.91-.382-1.35-.146a5.5 5.5 0 1 1 2.265-2.265c-.237.441-.208.997.145 1.35l3.296 3.296a.75.75 0 1 1-1.06 1.061l-3.296-3.296Zm.06-5a4 4 0 1 1-8 0 4 4 0 0 1 8 0Z" fill="#949E9E"/></svg>`,HELP_ICON:w$2`<svg width="11" height="17" viewBox="0 0 11 17"><path fill="#fff" d="M5.22 2.97c-1.07 0-2.25.843-2.25 2.25a.75.75 0 0 1-1.5 0c0-2.393 2.019-3.75 3.75-3.75 1.73 0 3.75 1.357 3.75 3.75 0 1.64-1.038 2.466-1.785 3.057-.802.635-1.215.984-1.215 1.693a.75.75 0 1 1-1.5 0c0-1.466.985-2.24 1.681-2.788l.103-.081C7.007 6.504 7.47 6.08 7.47 5.22c0-1.407-1.181-2.25-2.25-2.25ZM5.22 14.97a1.25 1.25 0 1 0 0-2.5 1.25 1.25 0 0 0 0 2.5Z"/></svg>`,WALLET_ICON:w$2`<svg width="15" height="14" fill="none" viewBox="0 0 15 14"><path fill="#fff" fill-rule="evenodd" d="M.64 9.2v-3h.001c.009-1.857.07-2.886.525-3.682a4 4 0 0 1 1.492-1.493C3.58.5 4.813.5 7.28.5h3.735c.58 0 .871 0 1.114.04A3 3 0 0 1 14.6 3.011c.04.243.04.533.04 1.114 0 .58 0 .871-.04 1.114a3 3 0 0 1-2.471 2.47c-.243.041-.533.041-1.114.041h-.777c.178.307.302.648.362 1.011.04.243.04.533.04 1.114 0 .58 0 .871-.04 1.114a3 3 0 0 1-2.471 2.47c-.243.041-.533.041-1.114.041H4.507A3.867 3.867 0 0 1 .64 9.633V9.2ZM7.28 2h3.735c.64 0 .779.005.87.02a1.5 1.5 0 0 1 1.235 1.236c.015.09.02.229.02.869s-.005.779-.02.87a1.5 1.5 0 0 1-1.236 1.235c-.09.015-.229.02-.869.02H4.023c-.697 0-1.345.21-1.883.572V6.25h.001c.004-.791.015-1.383.059-1.867.056-.629.157-.926.269-1.122a2.5 2.5 0 0 1 .932-.933c.197-.111.494-.212 1.123-.268C5.173 2 6.019 2 7.28 2Zm-.265 5.75H4.023c-1.04 0-1.883.843-1.883 1.883A2.367 2.367 0 0 0 4.507 12h2.508c.64 0 .779-.005.87-.02a1.5 1.5 0 0 0 1.235-1.236c.015-.09.02-.229.02-.869s-.005-.779-.02-.87A1.5 1.5 0 0 0 7.884 7.77c-.09-.015-.228-.02-.869-.02Z" clip-rule="evenodd"/></svg>`,NETWORK_PLACEHOLDER:w$2`<svg width="28" height="28" fill="none" viewBox="0 0 28 28"><mask id="p" width="26" height="28" x="1" y="0" maskUnits="userSpaceOnUse" style="mask-type:alpha"><path fill="#D9D9D9" d="M12 1.172a4 4 0 0 1 4 0l8.124 4.69a4 4 0 0 1 2 3.465v9.381a4 4 0 0 1-2 3.464L16 26.862a4 4 0 0 1-4 0l-8.124-4.69a4 4 0 0 1-2-3.464V9.327a4 4 0 0 1 2-3.464L12 1.173Z"/></mask><g mask="url(#p)"><path id="network-placeholder-fill" fill="#fff" d="M0 0h28v28H0z"/><path id="network-placeholder-dash" stroke="#000" stroke-dasharray="2 2" d="m8.953 2.931 2.032-1.173.25.433 1.015-.586c.269-.155.553-.271.844-.35l-.13-.483a4.003 4.003 0 0 1 2.071 0l-.13.483c.293.079.576.195.845.35l1.016.586.25-.433 2.03 1.173-.25.433 2.032 1.173.25-.433 2.03 1.172-.25.433 1.016.587c.269.155.512.342.725.556l.354-.354a4.003 4.003 0 0 1 1.035 1.794l-.483.129c.078.292.12.596.12.906v1.172h.5v2.346h-.5v2.345h.5v2.345h-.5v1.173c0 .31-.042.614-.12.906l.483.13a4.003 4.003 0 0 1-1.035 1.793l-.354-.354a3.498 3.498 0 0 1-.725.556l-1.015.586.25.434-2.031 1.172-.25-.433-2.031 1.173.25.433-2.031 1.172-.25-.433-1.016.587a3.494 3.494 0 0 1-.844.35l.13.482a4.003 4.003 0 0 1-2.071 0l.13-.483a3.496 3.496 0 0 1-.845-.35l-1.015-.586-.25.433-2.032-1.172.25-.433-2.03-1.173-.25.433L4.89 22.76l.25-.434-1.015-.586a3.498 3.498 0 0 1-.725-.556l-.354.354a4.003 4.003 0 0 1-1.035-1.794l.483-.13a3.497 3.497 0 0 1-.12-.905v-1.173h-.5V15.19h.5v-2.345h-.5v-2.346h.5V9.327c0-.31.042-.614.12-.906l-.483-.13a4.003 4.003 0 0 1 1.035-1.793l.354.354c.213-.214.456-.401.725-.556l1.015-.587-.25-.433 2.031-1.172.25.433 2.031-1.173-.25-.433Z"/><path fill="#798686" stroke="#fff" d="M14.243 13.563 14 13.428l-.243.135-6.388 3.549-.024.013c-.432.24-.79.44-1.053.622-.266.184-.516.405-.636.722a1.5 1.5 0 0 0 0 1.062c.12.317.37.538.636.722.263.183.62.382 1.053.622l.024.013 3.164 1.758.088.049c1.164.646 1.857 1.032 2.607 1.162.51.09 1.033.09 1.544 0 .75-.13 1.443-.516 2.606-1.162l.09-.05 3.163-1.757.024-.013c.432-.24.79-.44 1.053-.622.266-.184.516-.405.636-.722l-.468-.177.468.177a1.5 1.5 0 0 0 0-1.062l-.468.177.468-.177c-.12-.317-.37-.538-.636-.722-.263-.183-.62-.382-1.053-.622l-.024-.013-6.388-3.55Z"/><path fill="#9EA9A9" stroke="#fff" d="M14.243 8.563 14 8.428l-.243.135-6.388 3.549-.024.013c-.432.24-.79.44-1.053.622-.266.184-.516.405-.636.722a1.5 1.5 0 0 0 0 1.062c.12.316.37.537.636.722.263.183.62.382 1.053.622l.024.013 3.164 1.758.088.049c1.164.646 1.857 1.032 2.607 1.162.51.09 1.033.09 1.544 0 .75-.13 1.443-.516 2.606-1.162l.09-.05 3.163-1.757.024-.013c.432-.24.79-.44 1.053-.622.266-.184.516-.405.636-.722l-.468-.177.468.177a1.5 1.5 0 0 0 0-1.062l-.468.177.468-.177c-.12-.316-.37-.537-.636-.722-.263-.183-.62-.382-1.053-.622l-.024-.013-6.388-3.55Z"/><path fill="#C9CFCF" stroke="#fff" d="m22.344 9.53-.468-.176.468.177a1.5 1.5 0 0 0 0-1.062l-.468.177.468-.177c-.12-.317-.37-.537-.636-.722-.263-.183-.62-.382-1.053-.622l-.024-.013-3.163-1.758-.09-.05c-1.163-.645-1.856-1.03-2.606-1.161a4.5 4.5 0 0 0-1.544 0c-.75.13-1.443.516-2.607 1.162l-.088.05-3.164 1.757-.024.013c-.432.24-.79.44-1.053.622-.266.185-.516.405-.636.722a1.5 1.5 0 0 0 0 1.062c.12.317.37.537.636.722.263.183.62.382 1.053.622l.024.013 3.164 1.758.088.049c1.164.646 1.857 1.032 2.607 1.162.51.09 1.033.09 1.544 0 .75-.13 1.443-.516 2.606-1.162l.09-.05 3.163-1.757.024-.013c.432-.24.79-.44 1.053-.622.266-.184.516-.405.636-.722Z"/></g></svg>`,WALLET_PLACEHOLDER:w$2`<svg width="60" height="60" fill="none" viewBox="0 0 60 60"><g clip-path="url(#q)"><path id="wallet-placeholder-fill" fill="#fff" d="M0 24.9c0-9.251 0-13.877 1.97-17.332a15 15 0 0 1 5.598-5.597C11.023 0 15.648 0 24.9 0h10.2c9.252 0 13.877 0 17.332 1.97a15 15 0 0 1 5.597 5.598C60 11.023 60 15.648 60 24.9v10.2c0 9.252 0 13.877-1.97 17.332a15.001 15.001 0 0 1-5.598 5.597C48.977 60 44.352 60 35.1 60H24.9c-9.251 0-13.877 0-17.332-1.97a15 15 0 0 1-5.597-5.598C0 48.977 0 44.352 0 35.1V24.9Z"/><path id="wallet-placeholder-dash" stroke="#000" stroke-dasharray="4 4" stroke-width="1.5" d="M.04 41.708a231.598 231.598 0 0 1-.039-4.403l.75-.001L.75 35.1v-2.55H0v-5.1h.75V24.9l.001-2.204h-.75c.003-1.617.011-3.077.039-4.404l.75.016c.034-1.65.099-3.08.218-4.343l-.746-.07c.158-1.678.412-3.083.82-4.316l.713.236c.224-.679.497-1.296.827-1.875a14.25 14.25 0 0 1 1.05-1.585L3.076 5.9A15 15 0 0 1 5.9 3.076l.455.596a14.25 14.25 0 0 1 1.585-1.05c.579-.33 1.196-.603 1.875-.827l-.236-.712C10.812.674 12.217.42 13.895.262l.07.746C15.23.89 16.66.824 18.308.79l-.016-.75C19.62.012 21.08.004 22.695.001l.001.75L24.9.75h2.55V0h5.1v.75h2.55l2.204.001v-.75c1.617.003 3.077.011 4.404.039l-.016.75c1.65.034 3.08.099 4.343.218l.07-.746c1.678.158 3.083.412 4.316.82l-.236.713c.679.224 1.296.497 1.875.827a14.24 14.24 0 0 1 1.585 1.05l.455-.596A14.999 14.999 0 0 1 56.924 5.9l-.596.455c.384.502.735 1.032 1.05 1.585.33.579.602 1.196.827 1.875l.712-.236c.409 1.233.663 2.638.822 4.316l-.747.07c.119 1.264.184 2.694.218 4.343l.75-.016c.028 1.327.036 2.787.039 4.403l-.75.001.001 2.204v2.55H60v5.1h-.75v2.55l-.001 2.204h.75a231.431 231.431 0 0 1-.039 4.404l-.75-.016c-.034 1.65-.099 3.08-.218 4.343l.747.07c-.159 1.678-.413 3.083-.822 4.316l-.712-.236a10.255 10.255 0 0 1-.827 1.875 14.242 14.242 0 0 1-1.05 1.585l.596.455a14.997 14.997 0 0 1-2.824 2.824l-.455-.596c-.502.384-1.032.735-1.585 1.05-.579.33-1.196.602-1.875.827l.236.712c-1.233.409-2.638.663-4.316.822l-.07-.747c-1.264.119-2.694.184-4.343.218l.016.75c-1.327.028-2.787.036-4.403.039l-.001-.75-2.204.001h-2.55V60h-5.1v-.75H24.9l-2.204-.001v.75a231.431 231.431 0 0 1-4.404-.039l.016-.75c-1.65-.034-3.08-.099-4.343-.218l-.07.747c-1.678-.159-3.083-.413-4.316-.822l.236-.712a10.258 10.258 0 0 1-1.875-.827 14.252 14.252 0 0 1-1.585-1.05l-.455.596A14.999 14.999 0 0 1 3.076 54.1l.596-.455a14.24 14.24 0 0 1-1.05-1.585 10.259 10.259 0 0 1-.827-1.875l-.712.236C.674 49.188.42 47.783.262 46.105l.746-.07C.89 44.77.824 43.34.79 41.692l-.75.016Z"/><path fill="#fff" fill-rule="evenodd" d="M35.643 32.145c-.297-.743-.445-1.114-.401-1.275a.42.42 0 0 1 .182-.27c.134-.1.463-.1 1.123-.1.742 0 1.499.046 2.236-.05a6 6 0 0 0 5.166-5.166c.051-.39.051-.855.051-1.784 0-.928 0-1.393-.051-1.783a6 6 0 0 0-5.166-5.165c-.39-.052-.854-.052-1.783-.052h-7.72c-4.934 0-7.401 0-9.244 1.051a8 8 0 0 0-2.985 2.986C16.057 22.28 16.003 24.58 16 29 15.998 31.075 16 33.15 16 35.224A7.778 7.778 0 0 0 23.778 43H28.5c1.394 0 2.09 0 2.67-.116a6 6 0 0 0 4.715-4.714c.115-.58.115-1.301.115-2.744 0-1.31 0-1.964-.114-2.49a4.998 4.998 0 0 0-.243-.792Z" clip-rule="evenodd"/><path fill="#9EA9A9" fill-rule="evenodd" d="M37 18h-7.72c-2.494 0-4.266.002-5.647.126-1.361.122-2.197.354-2.854.728a6.5 6.5 0 0 0-2.425 2.426c-.375.657-.607 1.492-.729 2.853-.11 1.233-.123 2.777-.125 4.867 0 .7 0 1.05.097 1.181.096.13.182.181.343.2.163.02.518-.18 1.229-.581a6.195 6.195 0 0 1 3.053-.8H37c.977 0 1.32-.003 1.587-.038a4.5 4.5 0 0 0 3.874-3.874c.036-.268.039-.611.039-1.588 0-.976-.003-1.319-.038-1.587a4.5 4.5 0 0 0-3.875-3.874C38.32 18.004 37.977 18 37 18Zm-7.364 12.5h-7.414a4.722 4.722 0 0 0-4.722 4.723 6.278 6.278 0 0 0 6.278 6.278H28.5c1.466 0 1.98-.008 2.378-.087a4.5 4.5 0 0 0 3.535-3.536c.08-.397.087-.933.087-2.451 0-1.391-.009-1.843-.08-2.17a3.5 3.5 0 0 0-2.676-2.676c-.328-.072-.762-.08-2.108-.08Z" clip-rule="evenodd"/></g><defs><clipPath id="q"><path fill="#fff" d="M0 0h60v60H0z"/></clipPath></defs></svg>`,TOKEN_PLACEHOLDER:w$2`<svg width="60" height="60" viewBox="0 0 60 60" fill="none"><rect id="token-placeholder-fill" width="58" height="58" x="1" y="1" fill="#fff" rx="29"/><path fill="#3B4040" stroke="#fff" stroke-width="2" d="M32 10a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v5.566c0 .357.192.685.495.875a16.001 16.001 0 0 1 4.256 3.894c.667.88.33 2.113-.627 2.665l-2.494 1.44c-.956.552-2.166.204-2.913-.609a9.12 9.12 0 1 0 .064 12.267c.739-.82 1.945-1.181 2.907-.64l2.509 1.415c.962.542 1.312 1.77.654 2.658a16 16 0 0 1-4.356 4.028c-.303.19-.495.518-.495.875V50a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2v-2.992c0-.602-.528-1.065-1.13-1.032-.579.032-1.16.032-1.74 0-.602-.032-1.13.43-1.13 1.032V50a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2v-5.566c0-.357-.192-.685-.495-.875a16 16 0 0 1 0-27.118c.303-.19.495-.517.495-.875V10a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v2.992c0 .601.528 1.064 1.13 1.032.58-.032 1.161-.032 1.74 0 .602.033 1.13-.43 1.13-1.032V10Z"/><rect id="token-placeholder-dash" width="58" height="58" x="1" y="1" stroke="#000" stroke-dasharray="6 6" stroke-width="2" rx="29"/></svg>`,ACCOUNT_COPY:w$2`<svg width="14" height="14" fill="none" viewBox="0 0 14 14"><path fill="#fff" fill-rule="evenodd" d="M4.003 4.005c.012-1.225.074-1.936.391-2.491a3 3 0 0 1 1.12-1.12C6.204 0 7.136 0 9 0s2.795 0 3.486.394a3 3 0 0 1 1.12 1.12C14 2.204 14 3.136 14 5s0 2.795-.394 3.486a3 3 0 0 1-1.12 1.12c-.555.317-1.266.379-2.491.391l.002.003c-.012 1.222-.075 1.932-.391 2.486a3 3 0 0 1-1.12 1.12C7.796 14 6.864 14 5 14s-2.795 0-3.486-.394a3 3 0 0 1-1.12-1.12C0 11.796 0 10.864 0 9s0-2.795.394-3.486a3 3 0 0 1 1.12-1.12c.554-.316 1.264-.379 2.486-.391l.003.002ZM9 8.5c-.959 0-1.58-.001-2.05-.043-.45-.04-.613-.109-.693-.154a1.5 1.5 0 0 1-.56-.56c-.045-.08-.113-.243-.154-.693C5.501 6.58 5.5 5.959 5.5 5c0-.959.001-1.58.043-2.05.04-.45.109-.613.154-.693a1.5 1.5 0 0 1 .56-.56c.08-.045.243-.113.693-.154C7.42 1.501 8.041 1.5 9 1.5c.959 0 1.58.001 2.05.043.45.04.613.109.693.154a1.5 1.5 0 0 1 .56.56c.045.08.113.243.154.693.042.47.043 1.091.043 2.05 0 .959-.001 1.58-.043 2.05-.04.45-.109.613-.154.693a1.5 1.5 0 0 1-.56.56c-.08.045-.242.113-.693.154-.47.042-1.091.043-2.05.043ZM4 5.503a13.77 13.77 0 0 0-1.05.04c-.45.04-.613.109-.693.154a1.5 1.5 0 0 0-.56.56c-.045.08-.113.243-.154.693C1.501 7.42 1.5 8.041 1.5 9c0 .959.001 1.58.043 2.05.04.45.109.613.154.693a1.5 1.5 0 0 0 .56.56c.08.045.243.113.693.154.47.042 1.091.043 2.05.043.959 0 1.58-.001 2.05-.043.45-.04.613-.109.693-.154a1.5 1.5 0 0 0 .56-.56c.045-.08.113-.242.154-.693.025-.283.035-.619.04-1.05-1.534-.003-2.358-.037-2.983-.394a3 3 0 0 1-1.12-1.12c-.357-.625-.39-1.449-.394-2.983Z" clip-rule="evenodd"/></svg>`,ACCOUNT_DISCONNECT:w$2`<svg width="16" height="14" fill="none" viewBox="0 0 16 14"><path fill="#fff" d="M9.677 1.5h-2.61c-1.261 0-2.107.001-2.757.06-.629.056-.926.157-1.122.268a2.5 2.5 0 0 0-.933.933c-.112.196-.212.493-.269 1.122-.058.65-.06 1.496-.06 2.757v.72c0 1.26.002 2.107.06 2.756.057.63.157.927.27 1.123a2.5 2.5 0 0 0 .932.933c.196.111.493.212 1.122.268.65.059 1.496.06 2.757.06h2.61a.75.75 0 1 1 0 1.5h-2.61c-2.467 0-3.7 0-4.622-.525a4 4 0 0 1-1.493-1.493C.427 11.06.427 9.827.427 7.36v-.72c0-2.467 0-3.7.525-4.622A4 4 0 0 1 2.445.525C3.366 0 4.6 0 7.067 0h2.61a.75.75 0 1 1 0 1.5Z"/><path fill="#fff" d="M10.896 11.03a.75.75 0 0 1 0-1.06l1.793-1.793a.25.25 0 0 0-.176-.427H8.177a.75.75 0 0 1 0-1.5h4.336a.25.25 0 0 0 .176-.427L10.896 4.03a.75.75 0 0 1 1.061-1.06l3.323 3.323a1 1 0 0 1 0 1.414l-3.323 3.323a.75.75 0 0 1-1.06 0Z"/></svg>`},zt={1:"692ed6ba-e569-459a-556a-776476829e00",42161:"600a9a04-c1b9-42ca-6785-9b4b6ff85200",43114:"30c46e53-e989-45fb-4549-be3bd4eb3b00",56:"93564157-2e8e-4ce7-81df-b264dbee9b00",250:"06b26297-fe0c-4733-5d6b-ffa5498aac00",10:"ab9c186a-c52f-464b-2906-ca59d760a400",137:"41d04d42-da3b-4453-8506-668cc0727900"};var U=(e=>(e.metaMask="metaMask",e.trust="trust",e.phantom="phantom",e.brave="brave",e.spotEthWallet="spotEthWallet",e.exodus="exodus",e.tokenPocket="tokenPocket",e.frame="frame",e.tally="tally",e.coinbaseWallet="coinbaseWallet",e.core="core",e.bitkeep="bitkeep",e.mathWallet="mathWallet",e.opera="opera",e.tokenary="tokenary",e["1inch"]="1inch",e.kuCoinWallet="kuCoinWallet",e.ledger="ledger",e))(U||{});const J={injectedPreset:{metaMask:{name:"MetaMask",icon:"619537c0-2ff3-4c78-9ed8-a05e7567f300",url:"https://metamask.io",isMobile:!0},trust:{name:"Trust",icon:"0528ee7e-16d1-4089-21e3-bbfb41933100",url:"https://trustwallet.com",isMobile:!0},spotEthWallet:{name:"Spot",icon:"1bf33a89-b049-4a1c-d1f6-4dd7419ee400",url:"https://www.spot-wallet.com",isMobile:!0},phantom:{name:"Phantom",icon:"62471a22-33cb-4e65-5b54-c3d9ea24b900",url:"https://phantom.app"},core:{name:"Core",icon:"35f9c46e-cc57-4aa7-315d-e6ccb2a1d600",url:"https://core.app",isMobile:!0},bitkeep:{name:"BitKeep",icon:"3f7075d0-4ab7-4db5-404d-3e4c05e6fe00",url:"https://bitkeep.com",isMobile:!0},tokenPocket:{name:"TokenPocket",icon:"f3119826-4ef5-4d31-4789-d4ae5c18e400",url:"https://www.tokenpocket.pro",isMobile:!0},mathWallet:{name:"MathWallet",icon:"26a8f588-3231-4411-60ce-5bb6b805a700",url:"https://mathwallet.org",isMobile:!0},exodus:{name:"Exodus",icon:"4c16cad4-cac9-4643-6726-c696efaf5200",url:"https://www.exodus.com",isMobile:!0,isDesktop:!0},kuCoinWallet:{name:"KuCoin Wallet",icon:"1e47340b-8fd7-4ad6-17e7-b2bd651fae00",url:"https://kuwallet.com",isMobile:!0},ledger:{name:"Ledger",icon:"a7f416de-aa03-4c5e-3280-ab49269aef00",url:"https://www.ledger.com",isDesktop:!0},brave:{name:"Brave",icon:"125e828e-9936-4451-a8f2-949c119b7400",url:"https://brave.com/wallet"},frame:{name:"Frame",icon:"cd492418-ea85-4ef1-aeed-1c9e20b58900",url:"https://frame.sh"},tally:{name:"Tally",icon:"98d2620c-9fc8-4a1c-31bc-78d59d00a300",url:"https://tallyho.org"},coinbaseWallet:{name:"Coinbase",icon:"f8068a7f-83d7-4190-1f94-78154a12c600",url:"https://www.coinbase.com/wallet"},opera:{name:"Opera",icon:"877fa1a4-304d-4d45-ca8e-f76d1a556f00",url:"https://www.opera.com/crypto"},tokenary:{name:"Tokenary",icon:"5e481041-dc3c-4a81-373a-76bbde91b800",url:"https://tokenary.io",isDesktop:!0},["1inch"]:{name:"1inch Wallet",icon:"dce1ee99-403f-44a9-9f94-20de30616500",url:"https://1inch.io/wallet",isMobile:!0,isDesktop:!0}},getInjectedId(e){if(e.toUpperCase()!=="INJECTED"&&e.length)return e;const{ethereum:t,spotEthWallet:o,coinbaseWalletExtension:r}=window;return t?t.isTrust||t.isTrustWallet?"trust":t.isPhantom?"phantom":t.isBraveWallet?"brave":o?"spotEthWallet":t.isExodus?"exodus":t.isTokenPocket?"tokenPocket":t.isFrame?"frame":t.isTally?"tally":r?"coinbaseWallet":t.isAvalanche?"core":t.isBitKeep?"bitkeep":t.isMathWallet?"mathWallet":t.isOpera?"opera":t.isTokenary?"tokenary":t.isOneInchIOSWallet||t.isOneInchAndroidWallet?"1inch":t.isKuCoinWallet?"kuCoinWallet":t.isMetaMask?"metaMask":"injected":"metaMask"},getInjectedName(e){var t,o;if(e.length&&e.toUpperCase()!=="INJECTED")return e;const r=J.getInjectedId("");return (o=(t=J.injectedPreset[r])==null?void 0:t.name)!=null?o:"Injected"}},Vt={ETH:{icon:"692ed6ba-e569-459a-556a-776476829e00"},WETH:{icon:"692ed6ba-e569-459a-556a-776476829e00"},AVAX:{icon:"30c46e53-e989-45fb-4549-be3bd4eb3b00"},FTM:{icon:"06b26297-fe0c-4733-5d6b-ffa5498aac00"},BNB:{icon:"93564157-2e8e-4ce7-81df-b264dbee9b00"},MATIC:{icon:"41d04d42-da3b-4453-8506-668cc0727900"},OP:{icon:"ab9c186a-c52f-464b-2906-ca59d760a400"}};var Gt=Object.defineProperty,gt=Object.getOwnPropertySymbols,qt=Object.prototype.hasOwnProperty,Kt=Object.prototype.propertyIsEnumerable,ut=(e,t,o)=>t in e?Gt(e,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[t]=o,Yt=(e,t)=>{for(var o in t||(t={}))qt.call(t,o)&&ut(e,o,t[o]);if(gt)for(var o of gt(t))Kt.call(t,o)&&ut(e,o,t[o]);return e};const h={MOBILE_BREAKPOINT:600,W3M_RECENT_WALLET:"W3M_RECENT_WALLET",rejectStandaloneButtonComponent(){const{isStandalone:e}=a$1.state;if(e)throw new Error("Web3Modal button components are not available in standalone mode.")},getShadowRootElement(e,t){const o=e.renderRoot.querySelector(t);if(!o)throw new Error(`${t} not found`);return o},getWalletId(e){return J.getInjectedId(e)},getWalletIcon(e){var t,o;const r=(t=J.injectedPreset[e])==null?void 0:t.icon,{projectId:a,walletImages:n}=W.state;return (o=n?.[e])!=null?o:a&&r?U$1.getImageUrl(r):""},getWalletName(e,t=!1){const o=J.getInjectedName(e);return t?o.split(" ")[0]:o},getChainIcon(e){var t;const o=zt[e],{projectId:r,chainImages:a}=W.state;return (t=a?.[e])!=null?t:r&&o?U$1.getImageUrl(o):""},getTokenIcon(e){var t,o;const r=(t=Vt[e])==null?void 0:t.icon,{projectId:a,tokenImages:n}=W.state;return (o=n?.[e])!=null?o:a&&r?U$1.getImageUrl(r):""},isMobileAnimation(){return window.innerWidth<=h.MOBILE_BREAKPOINT},async preloadImage(e){return new Promise((t,o)=>{const r=new Image;r.onload=t,r.onerror=o,r.src=e;})},getErrorMessage(e){return e instanceof Error?e.message:"Unknown Error"},debounce(e,t=500){let o;return (...r)=>{function a(){e(...r);}o&&clearTimeout(o),o=setTimeout(a,t);}},async handleMobileLinking(e){const{standaloneUri:t,selectedChain:o}=a$1.state,{links:r,name:a}=e;function n(l){let c="";r!=null&&r.universal?c=d.formatUniversalUrl(r.universal,l,a):r!=null&&r.native&&(c=d.formatNativeUrl(r.native,l,a)),d.openHref(c);}t?n(t):(await w$1.client().connectWalletConnect(l=>{n(l);},o?.id),A.close()),h.setRecentWallet(e);},async handleAndroidLinking(){const{standaloneUri:e,selectedChain:t}=a$1.state;e?d.openHref(e):(await w$1.client().connectWalletConnect(o=>{d.setWalletConnectAndroidDeepLink(o),d.openHref(o);},t?.id),A.close());},async handleUriCopy(){const{standaloneUri:e}=a$1.state;if(e)await navigator.clipboard.writeText(e);else {const t=await w$1.client().getActiveWalletConnectUri();await navigator.clipboard.writeText(t);}P.openToast("Link copied","success");},async handleConnectorConnection(e,t){try{const{selectedChain:o}=a$1.state;await w$1.client().connectConnector(e,o?.id),A.close();}catch(o){t?t():P.openToast(h.getErrorMessage(o),"error");}},getCustomWallets(){var e;const{desktopWallets:t,mobileWallets:o}=W.state;return (e=d.isMobile()?o:t)!=null?e:[]},getCustomImageUrls(){const{chainImages:e,walletImages:t}=W.state,o=Object.values(e??{}),r=Object.values(t??{});return Object.values([...o,...r])},getConnectorImageUrls(){return w$1.client().getConnectors().map(({id:e})=>J.getInjectedId(e)).map(e=>h.getWalletIcon(e))},truncate(e,t=8){return e.length<=t?e:`${e.substring(0,4)}...${e.substring(e.length-4)}`},generateAvatarColors(e){var t;const o=(t=e.match(/.{1,7}/g))==null?void 0:t.splice(0,5),r=[];o?.forEach(n=>{let l=0;for(let m=0;m<n.length;m+=1)l=n.charCodeAt(m)+((l<<5)-l),l=l&l;const c=[0,0,0];for(let m=0;m<3;m+=1){const s=l>>m*8&255;c[m]=s;}r.push(`rgb(${c[0]}, ${c[1]}, ${c[2]})`);});const a=document.querySelector(":root");if(a){const n={"--color-av-1":r[0],"--color-av-2":r[1],"--color-av-3":r[2],"--color-av-4":r[3],"--color-av-5":r[4]};Object.entries(n).forEach(([l,c])=>a.style.setProperty(l,c));}},setRecentWallet(e){localStorage.setItem(h.W3M_RECENT_WALLET,JSON.stringify(e));},getRecentWallet(){const e=localStorage.getItem(h.W3M_RECENT_WALLET);if(e)return JSON.parse(e)},getExtensionWallets(){const e=[];for(const[t,o]of Object.entries(J.injectedPreset))t!==U.coinbaseWallet&&o&&!o.isDesktop&&e.push(Yt({id:t},o));return e},caseSafeIncludes(e,t){return e.toUpperCase().includes(t.toUpperCase())}},Qt=i$6`#w3m-transparent-noise,.w3m-canvas,.w3m-color-placeholder,.w3m-gradient-placeholder,.w3m-highlight{inset:0;position:absolute;display:block;pointer-events:none;width:100%;height:100px;border-radius:8px 8px 0 0;transform:translateY(-5px)}.w3m-gradient-placeholder{background:linear-gradient(var(--gradient-1),var(--gradient-2),var(--gradient-3),var(--gradient-4))}.w3m-color-placeholder{background-color:var(--color-fg-accent)}.w3m-highlight{border:1px solid var(--color-overlay)}.w3m-canvas{opacity:0;transition:opacity 2s ease;box-shadow:0 8px 28px -6px rgba(10,16,31,.12),0 18px 88px -4px rgba(10,16,31,.14)}.w3m-canvas-visible{opacity:1}#w3m-transparent-noise{mix-blend-mode:multiply;opacity:.35}.w3m-toolbar{height:28px;display:flex;position:relative;margin:5px 15px 5px 5px;justify-content:space-between;align-items:center}.w3m-toolbar img,.w3m-toolbar svg{height:28px;object-position:left center;object-fit:contain}#w3m-wc-logo path{fill:var(--color-fg-inverse)}.w3m-action-btn{width:28px;height:28px;border-radius:50%;border:0;display:flex;justify-content:center;align-items:center;cursor:pointer;transition:background-color,.2s ease;background-color:var(--color-bg-1);box-shadow:0 0 0 1px var(--color-overlay),0 2px 4px -2px rgba(0,0,0,.12),0 4px 4px -2px rgba(0,0,0,.08)}.w3m-action-btn:hover{background-color:var(--color-bg-2)}.w3m-action-btn svg{display:block;object-position:center}.w3m-action-btn path{fill:var(--color-fg-1)}.w3m-actions{display:flex}.w3m-actions button:first-child{margin-right:16px}.w3m-help-active button:first-child{background-color:var(--color-fg-1)}.w3m-help-active button:first-child path{fill:var(--color-bg-1)}`;var Xt=Object.defineProperty,Jt=Object.getOwnPropertyDescriptor,Re=(e,t,o,r)=>{for(var a=r>1?void 0:r?Jt(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&Xt(t,o,a),a};const vt=new Ut;let ce=class extends s$2{constructor(){super(),this.open=!1,this.isHelp=!1,this.unsubscribeRouter=void 0,this.playTimeout=void 0,this.unsubscribeRouter=y.subscribe(e=>{this.isHelp=e.view==="Help";});}firstUpdated(){const{themeBackground:e}=W.state;e==="gradient"&&(this.playTimeout=setTimeout(()=>{vt.play(this.canvasEl),this.open=!0;},800));}disconnectedCallback(){var e;(e=this.unsubscribeRouter)==null||e.call(this),clearTimeout(this.playTimeout),vt.stop();}get canvasEl(){return h.getShadowRootElement(this,".w3m-canvas")}onHelp(){y.push("Help");}render(){const{themeBackground:e}=W.state,t={"w3m-canvas":!0,"w3m-canvas-visible":this.open},o$1={"w3m-actions":!0,"w3m-help-active":this.isHelp};return y$1`${e==="themeColor"?y$1`<div class="w3m-color-placeholder"></div>`:null} ${e==="gradient"?y$1`<div class="w3m-gradient-placeholder"></div><canvas class="${o(t)}"></canvas>${w.NOISE_TEXTURE}`:null}<div class="w3m-highlight"></div><div class="w3m-toolbar">${w.WALLET_CONNECT_LOGO}<div class="${o(o$1)}"><button class="w3m-action-btn" @click="${this.onHelp}">${w.HELP_ICON}</button> <button class="w3m-action-btn" @click="${A.close}">${w.CROSS_ICON}</button></div></div>`}};ce.styles=[g.globalCss,Qt],Re([t$1()],ce.prototype,"open",2),Re([t$1()],ce.prototype,"isHelp",2),ce=Re([e$2("w3m-modal-backcard")],ce);const ea=i$6`main{padding:20px;padding-top:0;width:100%}`;var ta=Object.defineProperty,aa=Object.getOwnPropertyDescriptor,oa=(e,t,o,r)=>{for(var a=r>1?void 0:r?aa(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&ta(t,o,a),a};let Be=class extends s$2{render(){return y$1`<main><slot></slot></main>`}};Be.styles=[g.globalCss,ea],Be=oa([e$2("w3m-modal-content")],Be);const ra=i$6`footer{padding:10px;display:flex;flex-direction:column;align-items:inherit;justify-content:inherit;border-top:1px solid var(--color-bg-2)}`;var na=Object.defineProperty,la=Object.getOwnPropertyDescriptor,ia=(e,t,o,r)=>{for(var a=r>1?void 0:r?la(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&na(t,o,a),a};let He=class extends s$2{render(){return y$1`<footer><slot></slot></footer>`}};He.styles=[g.globalCss,ra],He=ia([e$2("w3m-modal-footer")],He);const sa=i$6`header{display:flex;justify-content:center;align-items:center;padding:20px;position:relative}.w3m-border{border-bottom:1px solid var(--color-bg-2);margin-bottom:20px}header button{padding:15px 20px;transition:opacity .2s ease}@media(hover:hover){header button:hover{opacity:.5}}.w3m-back-btn{position:absolute;left:0}.w3m-action-btn{position:absolute;right:0}path{fill:var(--color-fg-accent)}`;var ca=Object.defineProperty,da=Object.getOwnPropertyDescriptor,de=(e,t,o,r)=>{for(var a=r>1?void 0:r?da(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&ca(t,o,a),a};let q=class extends s$2{constructor(){super(...arguments),this.title="",this.onAction=void 0,this.actionIcon=void 0,this.border=!1;}backBtnTemplate(){return y$1`<button class="w3m-back-btn" @click="${y.goBack}">${w.BACK_ICON}</button>`}actionBtnTemplate(){return y$1`<button class="w3m-action-btn" @click="${this.onAction}">${this.actionIcon}</button>`}render(){const e={"w3m-border":this.border},t=y.state.history.length>1,o$1=this.title?y$1`<w3m-text variant="large-bold">${this.title}</w3m-text>`:y$1`<slot></slot>`;return y$1`<header class="${o(e)}">${t?this.backBtnTemplate():null} ${o$1} ${this.onAction?this.actionBtnTemplate():null}</header>`}};q.styles=[g.globalCss,sa],de([e$1()],q.prototype,"title",2),de([e$1()],q.prototype,"onAction",2),de([e$1()],q.prototype,"actionIcon",2),de([e$1()],q.prototype,"border",2),q=de([e$2("w3m-modal-header")],q);const ha=i$6`.w3m-router{overflow:hidden;will-change:transform}.w3m-content{display:flex;flex-direction:column}`;var ma=Object.defineProperty,pa=Object.getOwnPropertyDescriptor,Ue=(e,t,o,r)=>{for(var a=r>1?void 0:r?pa(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&ma(t,o,a),a};let he=class extends s$2{constructor(){super(),this.view=y.state.view,this.prevView=y.state.view,this.unsubscribe=void 0,this.oldHeight="0px",this.resizeObserver=void 0,this.unsubscribe=y.subscribe(e=>{this.view!==e.view&&this.onChangeRoute();});}firstUpdated(){this.resizeObserver=new ResizeObserver(([e])=>{const t=`${e.contentRect.height}px`;this.oldHeight!=="0px"&&(animate(this.routerEl,{height:[this.oldHeight,t]},{duration:.2}),animate(this.routerEl,{opacity:[0,1],scale:[.99,1]},{duration:.37,delay:.03})),this.oldHeight=t;}),this.resizeObserver.observe(this.contentEl);}disconnectedCallback(){var e,t;(e=this.unsubscribe)==null||e.call(this),(t=this.resizeObserver)==null||t.disconnect();}get routerEl(){return h.getShadowRootElement(this,".w3m-router")}get contentEl(){return h.getShadowRootElement(this,".w3m-content")}viewTemplate(){switch(this.view){case"ConnectWallet":return y$1`<w3m-connect-wallet-view></w3m-connect-wallet-view>`;case"SelectNetwork":return y$1`<w3m-select-network-view></w3m-select-network-view>`;case"InjectedConnector":return y$1`<w3m-injected-connector-view></w3m-injected-connector-view>`;case"InstallConnector":return y$1`<w3m-install-connector-view></w3m-install-connector-view>`;case"GetWallet":return y$1`<w3m-get-wallet-view></w3m-get-wallet-view>`;case"DesktopConnector":return y$1`<w3m-desktop-connector-view></w3m-desktop-connector-view>`;case"WalletExplorer":return y$1`<w3m-wallet-explorer-view></w3m-wallet-explorer-view>`;case"Qrcode":return y$1`<w3m-qrcode-view></w3m-qrcode-view>`;case"Help":return y$1`<w3m-help-view></w3m-help-view>`;case"WalletFilter":return y$1`<w3m-wallet-filter-view></w3m-wallet-filter-view>`;case"Account":return y$1`<w3m-account-view></w3m-account-view>`;case"SwitchNetwork":return y$1`<w3m-switch-network-view></w3m-switch-network-view>`;default:return y$1`<div>Not Found</div>`}}async onChangeRoute(){await animate(this.routerEl,{opacity:[1,0],scale:[1,1.02]},{duration:.15}).finished,this.view=y.state.view;}render(){return y$1`<div class="w3m-router"><div class="w3m-content">${this.viewTemplate()}</div></div>`}};he.styles=[g.globalCss,ha],Ue([t$1()],he.prototype,"view",2),Ue([t$1()],he.prototype,"prevView",2),he=Ue([e$2("w3m-modal-router")],he);const ga=i$6`div{height:36px;width:max-content;display:flex;justify-content:center;align-items:center;padding:10px 15px;position:absolute;top:12px;box-shadow:0 6px 14px -6px rgba(10,16,31,.3),0 10px 32px -4px rgba(10,16,31,.15);z-index:2;left:50%;transform:translateX(-50%);pointer-events:none;backdrop-filter:blur(20px) saturate(1.8);-webkit-backdrop-filter:blur(20px) saturate(1.8);border-radius:36px;border:1px solid var(--color-overlay);background-color:var(--color-overlay)}svg{margin-right:5px}@-moz-document url-prefix(){div{background-color:var(--color-bg-3)}}.w3m-success path{fill:var(--color-fg-accent)}.w3m-error path{fill:var(--color-err)}`;var ua=Object.defineProperty,va=Object.getOwnPropertyDescriptor,bt=(e,t,o,r)=>{for(var a=r>1?void 0:r?va(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&ua(t,o,a),a};let $e=class extends s$2{constructor(){super(),this.open=!1,this.unsubscribe=void 0,this.timeout=void 0,this.unsubscribe=P.subscribe(e=>{e.open?(this.open=!0,this.timeout=setTimeout(()=>P.closeToast(),2200)):(this.open=!1,clearTimeout(this.timeout));});}disconnectedCallback(){var e;(e=this.unsubscribe)==null||e.call(this),clearTimeout(this.timeout),P.closeToast();}render(){const{message:e,variant:t}=P.state,o$1={"w3m-success":t==="success","w3m-error":t==="error"};return this.open?y$1`<div class="${o(o$1)}">${t==="success"?w.CHECKMARK_ICON:null} ${t==="error"?w.CROSS_ICON:null}<w3m-text variant="small-normal">${e}</w3m-text></div>`:null}};$e.styles=[g.globalCss,ga],bt([t$1()],$e.prototype,"open",2),$e=bt([e$2("w3m-modal-toast")],$e);const ba=i$6`button{padding:5px;border-radius:10px;transition:all .2s ease;display:flex;flex-direction:column;align-items:center;justify-content:center;width:80px;height:90px}w3m-network-image{width:54px;height:59px}w3m-text{width:100%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;text-align:center;margin-top:5px}button:hover{background-color:var(--color-overlay)}`;var wa=Object.defineProperty,fa=Object.getOwnPropertyDescriptor,Oe=(e,t,o,r)=>{for(var a=r>1?void 0:r?fa(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&wa(t,o,a),a};let ae=class extends s$2{constructor(){super(...arguments),this.onClick=()=>null,this.name="",this.chainId="";}render(){return y$1`<button @click="${this.onClick}"><w3m-network-image chainId="${this.chainId}"></w3m-network-image><w3m-text variant="xsmall-normal">${this.name}</w3m-text></button>`}};ae.styles=[g.globalCss,ba],Oe([e$1()],ae.prototype,"onClick",2),Oe([e$1()],ae.prototype,"name",2),Oe([e$1()],ae.prototype,"chainId",2),ae=Oe([e$2("w3m-network-button")],ae);const ya=i$6`div{width:inherit;height:inherit}.polygon-stroke{stroke:var(--color-overlay)}svg{width:100%;height:100%;margin:0}#network-placeholder-fill{fill:var(--color-bg-3)}#network-placeholder-dash{stroke:var(--color-overlay)}`;var xa=Object.defineProperty,Ca=Object.getOwnPropertyDescriptor,wt=(e,t,o,r)=>{for(var a=r>1?void 0:r?Ca(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&xa(t,o,a),a};let Ee=class extends s$2{constructor(){super(...arguments),this.chainId="";}render(){const e=h.getChainIcon(this.chainId);return e?y$1`<div><svg width="54" height="59" viewBox="0 0 54 59" fill="none"><defs><clipPath id="polygon"><path d="M17.033 4.964c3.852-2.262 5.778-3.393 7.84-3.77a11.807 11.807 0 0 1 4.254 0c2.062.377 3.988 1.508 7.84 3.77l6.066 3.562c3.852 2.263 5.777 3.394 7.13 5.022a12.268 12.268 0 0 1 2.127 3.747c.71 2.006.71 4.268.71 8.793v7.124c0 4.525 0 6.787-.71 8.793a12.268 12.268 0 0 1-2.126 3.747c-1.354 1.628-3.28 2.76-7.131 5.022l-6.066 3.562c-3.852 2.262-5.778 3.393-7.84 3.771a11.814 11.814 0 0 1-4.254 0c-2.062-.378-3.988-1.509-7.84-3.77l-6.066-3.563c-3.852-2.263-5.778-3.394-7.13-5.022a12.268 12.268 0 0 1-2.127-3.747C1 40 1 37.737 1 33.212v-7.124c0-4.525 0-6.787.71-8.793a12.268 12.268 0 0 1 2.127-3.747c1.352-1.628 3.278-2.76 7.13-5.022l6.066-3.562Z"/></clipPath></defs><image clip-path="url(#polygon)" href="${e}" width="58" height="59" x="-2" y="0"/><path class="polygon-stroke" d="M17.22 5.295c3.877-2.277 5.737-3.363 7.72-3.726a11.44 11.44 0 0 1 4.12 0c1.983.363 3.844 1.45 7.72 3.726l6.065 3.562c3.876 2.276 5.731 3.372 7.032 4.938a11.896 11.896 0 0 1 2.06 3.63c.683 1.928.688 4.11.688 8.663v7.124c0 4.553-.005 6.735-.688 8.664a11.896 11.896 0 0 1-2.06 3.63c-1.3 1.565-3.156 2.66-7.032 4.937l-6.065 3.563c-3.877 2.276-5.737 3.362-7.72 3.725a11.46 11.46 0 0 1-4.12 0c-1.983-.363-3.844-1.449-7.72-3.726l-6.065-3.562c-3.876-2.276-5.731-3.372-7.032-4.938a11.885 11.885 0 0 1-2.06-3.63c-.682-1.928-.688-4.11-.688-8.663v-7.124c0-4.553.006-6.735.688-8.664a11.885 11.885 0 0 1 2.06-3.63c1.3-1.565 3.156-2.66 7.032-4.937l6.065-3.562Z" stroke="#fff"/></svg></div>`:y$1`${w.NETWORK_PLACEHOLDER}`}};Ee.styles=[g.globalCss,ya],wt([e$1()],Ee.prototype,"chainId",2),Ee=wt([e$2("w3m-network-image")],Ee);const ka=.1,ft=2.5,Z=7;function Ze(e,t,o){return e===t?!1:(e-t<0?t-e:e-t)<=o+ka}function $a(e,t){const o=Array.prototype.slice.call(browser.create(e,{errorCorrectionLevel:t}).modules.data,0),r=Math.sqrt(o.length);return o.reduce((a,n,l)=>(l%r===0?a.push([n]):a[a.length-1].push(n))&&a,[])}const Oa={generate(e,t,o,r){const a=r==="light"?"#141414":"#fff",n=r==="light"?"#fff":"#141414",l=[],c=$a(e,"Q"),m=t/c.length,s=[{x:0,y:0},{x:1,y:0},{x:0,y:1}];s.forEach(({x:E,y:x})=>{const W=(c.length-Z)*m*E,I=(c.length-Z)*m*x,S=.32;for(let B=0;B<s.length;B+=1){const ee=m*(Z-B*2);l.push(w$2`<rect fill="${B%2===0?a:n}" height="${ee}" rx="${ee*S}" ry="${ee*S}" width="${ee}" x="${W+m*B}" y="${I+m*B}">`);}});const d=Math.floor((o+25)/m),u=c.length/2-d/2,C=c.length/2+d/2-1,A=[];c.forEach((E,x)=>{E.forEach((W,I)=>{if(c[x][I]&&!(x<Z&&I<Z||x>c.length-(Z+1)&&I<Z||x<Z&&I>c.length-(Z+1))&&!(x>u&&x<C&&I>u&&I<C)){const S=x*m+m/2,B=I*m+m/2;A.push([S,B]);}});});const R={};return A.forEach(([E,x])=>{R[E]?R[E].push(x):R[E]=[x];}),Object.entries(R).map(([E,x])=>{const W=x.filter(I=>x.every(S=>!Ze(I,S,m)));return [Number(E),W]}).forEach(([E,x])=>{x.forEach(W=>{l.push(w$2`<circle cx="${E}" cy="${W}" fill="${a}" r="${m/ft}">`);});}),Object.entries(R).filter(([E,x])=>x.length>1).map(([E,x])=>{const W=x.filter(I=>x.some(S=>Ze(I,S,m)));return [Number(E),W]}).map(([E,x])=>{x.sort((I,S)=>I<S?-1:1);const W=[];for(const I of x){const S=W.find(B=>B.some(ee=>Ze(I,ee,m)));S?S.push(I):W.push([I]);}return [E,W.map(I=>[I[0],I[I.length-1]])]}).forEach(([E,x])=>{x.forEach(([W,I])=>{l.push(w$2`<line x1="${E}" x2="${E}" y1="${W}" y2="${I}" stroke="${a}" stroke-width="${m/(ft/2)}" stroke-linecap="round">`);});}),l}},Ea=i$6`div{position:relative;user-select:none;display:block;overflow:hidden;width:100%;aspect-ratio:1/1}svg:first-child,w3m-wallet-image{position:absolute;top:50%;left:50%;transform:translateY(-50%) translateX(-50%)}w3m-wallet-image{transform:translateY(-50%) translateX(-50%)}w3m-wallet-image{width:25%;height:25%;border-radius:15px}svg:first-child{transform:translateY(-50%) translateX(-50%) scale(.9)}svg:first-child path:first-child{fill:var(--color-fg-accent)}svg:first-child path:last-child{stroke:var(--color-overlay)}`;var Ia=Object.defineProperty,Ma=Object.getOwnPropertyDescriptor,me=(e,t,o,r)=>{for(var a=r>1?void 0:r?Ma(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&Ia(t,o,a),a};let K=class extends s$2{constructor(){super(...arguments),this.uri="",this.size=0,this.logoSrc="",this.walletId="";}svgTemplate(){var e;const t=(e=W.state.themeMode)!=null?e:"light";return w$2`<svg height="${this.size}" width="${this.size}">${Oa.generate(this.uri,this.size,this.size/4,t)}</svg>`}render(){return y$1`<div>${this.walletId||this.logoSrc?y$1`<w3m-wallet-image walletId="${l$1(this.walletId)}" src="${l$1(this.logoSrc)}"></w3m-wallet-image>`:w.WALLET_CONNECT_ICON_COLORED} ${this.svgTemplate()}</div>`}};K.styles=[g.globalCss,Ea],me([e$1()],K.prototype,"uri",2),me([e$1({type:Number})],K.prototype,"size",2),me([e$1()],K.prototype,"logoSrc",2),me([e$1()],K.prototype,"walletId",2),K=me([e$2("w3m-qrcode")],K);const Wa=i$6`:host{position:relative;height:28px;width:75%}input{width:100%;height:100%;line-height:28px;border-radius:28px;font-style:normal;font-family:-apple-system,system-ui,BlinkMacSystemFont,'Segoe UI',Roboto,Ubuntu,'Helvetica Neue',sans-serif;font-feature-settings:'case' on;font-weight:500;font-size:16px;letter-spacing:-.03em;padding:0 10px 0 34px;transition:.2s all ease;color:transparent;position:absolute;background-color:var(--color-bg-3);box-shadow:inset 0 0 0 1px var(--color-overlay)}input::placeholder{color:transparent}svg{margin-right:4px}.w3m-placeholder{top:0;left:50%;transform:translateX(-50%);transition:.2s all ease;pointer-events:none;display:flex;align-items:center;justify-content:center;height:100%;width:fit-content;position:relative}input:focus-within+.w3m-placeholder,input:not(:placeholder-shown)+.w3m-placeholder{transform:translateX(10px);left:0}w3m-text{opacity:1;transition:.2s opacity ease}input:focus-within+.w3m-placeholder w3m-text,input:not(:placeholder-shown)+.w3m-placeholder w3m-text{opacity:0}input:focus-within,input:not(:placeholder-shown){color:var(--color-fg-1)}input:focus-within{box-shadow:inset 0 0 0 1px var(--color-fg-accent)}path{fill:var(--color-fg-2)}`;var La=Object.defineProperty,Aa=Object.getOwnPropertyDescriptor,yt=(e,t,o,r)=>{for(var a=r>1?void 0:r?Aa(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&La(t,o,a),a};let Ie=class extends s$2{constructor(){super(...arguments),this.onChange=()=>null;}render(){const e=d.isMobile()?"Search mobile wallets":"Search desktop wallets";return y$1`<input type="text" @input="${this.onChange}" placeholder="${e}"><div class="w3m-placeholder">${w.SEARCH_ICON}<w3m-text color="secondary" variant="medium-thin">${e}</w3m-text></div>`}};Ie.styles=[g.globalCss,Wa],yt([e$1()],Ie.prototype,"onChange",2),Ie=yt([e$2("w3m-search-input")],Ie);const Pa=i$6`@keyframes rotate{100%{transform:rotate(360deg)}}@keyframes dash{0%{stroke-dasharray:1,150;stroke-dashoffset:0}50%{stroke-dasharray:90,150;stroke-dashoffset:-35}100%{stroke-dasharray:90,150;stroke-dashoffset:-124}}svg{animation:rotate 2s linear infinite;display:flex;justify-content:center;align-items:center}svg circle{stroke-linecap:round;animation:dash 1.5s ease infinite;stroke:var(--color-fg-accent)}`;var ja=Object.defineProperty,Sa=Object.getOwnPropertyDescriptor,_a=(e,t,o,r)=>{for(var a=r>1?void 0:r?Sa(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&ja(t,o,a),a};let Fe=class extends s$2{render(){return y$1`<svg viewBox="0 0 50 50" width="24" height="24"><circle cx="25" cy="25" r="20" fill="none" stroke-width="4" stroke="#fff"/></svg>`}};Fe.styles=[g.globalCss,Pa],Fe=_a([e$2("w3m-spinner")],Fe);const Da=i$6`span{font-style:normal;font-family:-apple-system,system-ui,BlinkMacSystemFont,'Segoe UI',Roboto,Ubuntu,'Helvetica Neue',sans-serif;font-feature-settings:'tnum' on,'lnum' on,'case' on}.w3m-xxsmall-bold{font-weight:700;font-size:10px;line-height:12px;letter-spacing:.02em;text-transform:uppercase}.w3m-xsmall-normal{font-weight:600;font-size:12px;line-height:14px;letter-spacing:-.03em}.w3m-small-thin{font-weight:500;font-size:14px;line-height:16px;letter-spacing:-.03em}.w3m-small-normal{font-weight:600;font-size:14px;line-height:16px;letter-spacing:-.03em}.w3m-medium-thin{font-weight:500;font-size:16px;line-height:20px;letter-spacing:-.03em}.w3m-medium-normal{font-weight:600;font-size:16px;line-height:20px;letter-spacing:-.03em}.w3m-medium-bold{font-weight:700;font-size:16px;line-height:20px;letter-spacing:-.03em}.w3m-large-bold{font-weight:600;font-size:20px;line-height:24px;letter-spacing:-.03em}.w3m-left{text-align:left}.w3m-center{text-align:center}.w3m-right{text-align:right}:host(*){color:var(--color-fg-1)}.w3m-color-primary{color:var(--color-fg-1)}.w3m-color-secondary{color:var(--color-fg-2)}.w3m-color-tertiary{color:var(--color-fg-3)}.w3m-color-inverse{color:var(--color-fg-inverse)}.w3m-color-accnt{color:var(--color-fg-accent)}.w3m-color-error{color:var(--color-err)}`;var Ta=Object.defineProperty,Na=Object.getOwnPropertyDescriptor,Me=(e,t,o,r)=>{for(var a=r>1?void 0:r?Na(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&Ta(t,o,a),a};let oe=class extends s$2{constructor(){super(...arguments),this.variant="medium-normal",this.align="left",this.color="primary";}render(){const e={"w3m-large-bold":this.variant==="large-bold","w3m-medium-bold":this.variant==="medium-bold","w3m-medium-normal":this.variant==="medium-normal","w3m-medium-thin":this.variant==="medium-thin","w3m-small-normal":this.variant==="small-normal","w3m-small-thin":this.variant==="small-thin","w3m-xsmall-normal":this.variant==="xsmall-normal","w3m-xxsmall-bold":this.variant==="xxsmall-bold","w3m-left":this.align==="left","w3m-center":this.align==="center","w3m-right":this.align==="right","w3m-color-primary":this.color==="primary","w3m-color-secondary":this.color==="secondary","w3m-color-tertiary":this.color==="tertiary","w3m-color-inverse":this.color==="inverse","w3m-color-accnt":this.color==="accent","w3m-color-error":this.color==="error"};return y$1`<span class="${o(e)}"><slot></slot></span>`}};oe.styles=[g.globalCss,Da],Me([e$1()],oe.prototype,"variant",2),Me([e$1()],oe.prototype,"align",2),Me([e$1()],oe.prototype,"color",2),oe=Me([e$2("w3m-text")],oe);const Ra=i$6`div{overflow:hidden;position:relative;border-radius:50%}div::after{content:'';position:absolute;inset:0;border-radius:50%;border:1px solid var(--color-overlay)}div img{width:100%;height:100%;object-fit:cover;object-position:center}svg{width:100%;height:100%}#token-placeholder-fill{fill:var(--color-bg-3)}#token-placeholder-dash{stroke:var(--color-overlay)}`;var Ba=Object.defineProperty,Ha=Object.getOwnPropertyDescriptor,xt=(e,t,o,r)=>{for(var a=r>1?void 0:r?Ha(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&Ba(t,o,a),a};let We=class extends s$2{constructor(){super(...arguments),this.symbol=void 0;}render(){var e;const t=h.getTokenIcon((e=this.symbol)!=null?e:"");return t?y$1`<div><img src="${t}" alt="${this.id}"></div>`:w.TOKEN_PLACEHOLDER}};We.styles=[g.globalCss,Ra],xt([e$1()],We.prototype,"symbol",2),We=xt([e$2("w3m-token-image")],We);const Ua=i$6`button{transition:all .2s ease;width:100%;height:100%;border-radius:10px;display:flex;align-items:flex-start}button:hover{background-color:var(--color-overlay)}button>div{width:80px;padding:5px 0;display:flex;flex-direction:column;align-items:center}w3m-text{width:100%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;text-align:center}w3m-wallet-image{height:60px;width:60px;transition:all .2s ease;border-radius:15px;margin-bottom:5px}.w3m-sublabel{margin-top:2px}`;var Za=Object.defineProperty,Fa=Object.getOwnPropertyDescriptor,z=(e,t,o,r)=>{for(var a=r>1?void 0:r?Fa(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&Za(t,o,a),a};let H=class extends s$2{constructor(){super(...arguments),this.onClick=()=>null,this.name="",this.walletId="",this.label=void 0,this.src=void 0,this.installed=!1,this.recent=!1;}sublabelTemplate(){return this.recent?y$1`<w3m-text class="w3m-sublabel" variant="xxsmall-bold" color="tertiary">RECENT</w3m-text>`:this.installed?y$1`<w3m-text class="w3m-sublabel" variant="xxsmall-bold" color="tertiary">INSTALLED</w3m-text>`:null}render(){var e;return y$1`<button @click="${this.onClick}"><div><w3m-wallet-image walletId="${this.walletId}" .src="${this.src}"></w3m-wallet-image><w3m-text variant="xsmall-normal">${(e=this.label)!=null?e:h.getWalletName(this.name,!0)}</w3m-text>${this.sublabelTemplate()}</div></button>`}};H.styles=[g.globalCss,Ua],z([e$1()],H.prototype,"onClick",2),z([e$1()],H.prototype,"name",2),z([e$1()],H.prototype,"walletId",2),z([e$1()],H.prototype,"label",2),z([e$1()],H.prototype,"src",2),z([e$1()],H.prototype,"installed",2),z([e$1()],H.prototype,"recent",2),H=z([e$2("w3m-wallet-button")],H);const za=i$6`div{overflow:hidden;position:relative;border-radius:inherit;width:100%;height:100%}svg{position:relative;width:100%;height:100%}div::after{content:'';position:absolute;inset:0;border-radius:inherit;border:1px solid var(--color-overlay)}div img{width:100%;height:100%;object-fit:cover;object-position:center}#wallet-placeholder-fill{fill:var(--color-bg-3)}#wallet-placeholder-dash{stroke:var(--color-overlay)}`;var Va=Object.defineProperty,Ga=Object.getOwnPropertyDescriptor,ze=(e,t,o,r)=>{for(var a=r>1?void 0:r?Ga(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&Va(t,o,a),a};let pe=class extends s$2{constructor(){super(...arguments),this.walletId=void 0,this.src=void 0;}render(){var e;const t=h.getWalletId((e=this.walletId)!=null?e:""),o=h.getWalletId(t),r=this.src?this.src:h.getWalletIcon(o);return y$1`${r.length?y$1`<div><img src="${r}" alt="${this.id}"></div>`:w.WALLET_PLACEHOLDER}`}};pe.styles=[g.globalCss,za],ze([e$1()],pe.prototype,"walletId",2),ze([e$1()],pe.prototype,"src",2),pe=ze([e$2("w3m-wallet-image")],pe);const qa=i$6`div{display:flex;align-items:center;background-color:var(--color-overlay);box-shadow:inset 0 0 0 1px var(--color-overlay);border-radius:10px;padding:4px 4px 4px 8px}div button{border-radius:16px;padding:4px 8px 4px 4px;height:auto;margin-left:10px;color:var(--color-fg-inverse);background-color:var(--color-fg-accent)}button::after{content:'';inset:0;position:absolute;background-color:transparent;border-radius:inherit;transition:background-color .2s ease;border:1px solid var(--color-overlay)}button:hover::after{background-color:var(--color-overlay)}w3m-avatar{margin-right:6px}w3m-button-big w3m-avatar{margin-left:-5px}`;var Ka=Object.defineProperty,Ya=Object.getOwnPropertyDescriptor,Ct=(e,t,o,r)=>{for(var a=r>1?void 0:r?Ya(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&Ka(t,o,a),a};let Le=class extends s$2{constructor(){super(),this.balance="hide",h.rejectStandaloneButtonComponent();}onOpen(){const{isStandalone:e}=a$1.state;e||A.open({route:"Account"});}accountTemplate(){return y$1`<w3m-avatar></w3m-avatar><w3m-address-text></w3m-address-text>`}render(){return this.balance==="show"?y$1`<div><w3m-balance></w3m-balance><button @click="${this.onOpen}">${this.accountTemplate()}</button></div>`:y$1`<w3m-button-big @click="${this.onOpen}">${this.accountTemplate()}</w3m-button-big>`}};Le.styles=[g.globalCss,qa],Ct([e$1()],Le.prototype,"balance",2),Le=Ct([e$2("w3m-account-button")],Le);const Qa=i$6`button{display:flex;border-radius:10px;flex-direction:column;transition:background-color .2s ease;justify-content:center;padding:5px;width:100px}button:hover{background-color:var(--color-overlay)}button:disabled{pointer-events:none}w3m-network-image{width:32px;height:32px}w3m-text{margin-top:4px}`;var Xa=Object.defineProperty,Ja=Object.getOwnPropertyDescriptor,Ve=(e,t,o,r)=>{for(var a=r>1?void 0:r?Ja(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&Xa(t,o,a),a};let ge=class extends s$2{constructor(){super(),this.chainId="",this.label="",this.unsubscribeNetwork=void 0;const{selectedChain:e}=a$1.state;this.chainId=e?.id.toString(),this.label=e?.name,this.unsubscribeNetwork=a$1.subscribe(({selectedChain:t})=>{this.chainId=t?.id.toString(),this.label=t?.name;});}disconnectedCallback(){var e;(e=this.unsubscribeNetwork)==null||e.call(this);}onClick(){y.push("SelectNetwork");}render(){const{chains:e}=a$1.state,t=e&&e.length>1;return y$1`<button @click="${this.onClick}" ?disabled="${!t}"><w3m-network-image chainId="${l$1(this.chainId)}"></w3m-network-image><w3m-text variant="xsmall-normal" color="accent">${this.label}</w3m-text></button>`}};ge.styles=[g.globalCss,Qa],Ve([t$1()],ge.prototype,"chainId",2),Ve([t$1()],ge.prototype,"label",2),ge=Ve([e$2("w3m-account-network-button")],ge);const eo=i$6`@keyframes slide{0%{background-position:0 0}100%{background-position:200px 0}}w3m-text{padding:1px 0}.w3m-loading{background:linear-gradient(270deg,var(--color-fg-1) 36.33%,var(--color-fg-3) 42.07%,var(--color-fg-1) 83.3%);background-size:200px 100%;background-clip:text;-webkit-background-clip:text;-webkit-text-fill-color:transparent;animation-name:slide;animation-duration:1.5s;animation-iteration-count:infinite;animation-timing-function:linear}`;var to=Object.defineProperty,ao=Object.getOwnPropertyDescriptor,ue=(e,t,o,r)=>{for(var a=r>1?void 0:r?ao(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&to(t,o,a),a};let Y=class extends s$2{constructor(){super(),this.address=void 0,this.name=void 0,this.loading=!0,this.variant="button",this.unsubscribeAccount=void 0,this.address=a$1.state.address,this.name=a$1.state.profileName,this.loading=Boolean(a$1.state.profileLoading),this.unsubscribeAccount=a$1.subscribe(({address:e,profileName:t,profileLoading:o})=>{this.address=e,this.name=t,this.loading=Boolean(o);});}disconnectedCallback(){var e;(e=this.unsubscribeAccount)==null||e.call(this);}render(){var e;const t=this.variant==="button",o$1={"w3m-loading":this.loading};return y$1`<w3m-text class="${o(o$1)}" variant="${t?"medium-normal":"large-bold"}" color="${t?"inverse":"primary"}">${this.name?this.name:h.truncate((e=this.address)!=null?e:"")}</w3m-text>`}};Y.styles=[g.globalCss,eo],ue([t$1()],Y.prototype,"address",2),ue([t$1()],Y.prototype,"name",2),ue([t$1()],Y.prototype,"loading",2),ue([e$1()],Y.prototype,"variant",2),Y=ue([e$2("w3m-address-text")],Y);const oo=i$6`@keyframes scroll{0%{transform:translate3d(0,0,0)}100%{transform:translate3d(calc(-70px * 10),0,0)}}.w3m-slider{position:relative;overflow-x:hidden;padding:10px 0;margin:0 -20px}.w3m-slider::after,.w3m-slider::before{content:'';height:100%;width:50px;z-index:2;position:absolute;background:linear-gradient(to right,var(--color-bg-1) 0,transparent 100%);top:0}.w3m-slider::before{left:0}.w3m-slider::after{right:0;transform:rotateZ(180deg)}.w3m-track{display:flex;width:calc(70px * 20);animation:scroll 20s linear infinite}.w3m-action{padding:10px;display:flex;justify-content:center}w3m-wallet-image{width:60px;height:60px;margin:0 5px;box-shadow:0 2px 4px -2px rgba(0,0,0,.12),0 4px 4px -2px rgba(0,0,0,.08);border-radius:15px}`;var ro=Object.defineProperty,no=Object.getOwnPropertyDescriptor,lo=(e,t,o,r)=>{for(var a=r>1?void 0:r?no(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&ro(t,o,a),a};let Ge=class extends s$2{onGoToQrcode(){y.push("Qrcode");}render(){const{previewWallets:e}=U$1.state,t=e.length,o=[...e,...e];return y$1`<w3m-modal-header title="Connect your wallet" .onAction="${this.onGoToQrcode}" .actionIcon="${w.QRCODE_ICON}"></w3m-modal-header><w3m-modal-content>${t?y$1`<div class="w3m-slider"><div class="w3m-track">${o.map(({image_url:r})=>y$1`<w3m-wallet-image src="${r.lg}"></w3m-wallet-image>`)}</div></div>`:null}<div class="w3m-action"><w3m-button-big @click="${h.handleAndroidLinking}"><w3m-text variant="medium-normal" color="inverse">Select Wallet</w3m-text></w3m-button-big></div></w3m-modal-content>`}};Ge.styles=[g.globalCss,oo],Ge=lo([e$2("w3m-android-wallet-selection")],Ge);const io=i$6`@keyframes slide{0%{transform:translateX(-50px)}100%{transform:translateX(200px)}}.w3m-placeholder,img{border-radius:50%;box-shadow:inset 0 0 0 1px var(--color-overlay);display:block;position:relative;overflow:hidden!important;background-color:var(--color-av-1);background-image:radial-gradient(at 66% 77%,var(--color-av-2) 0,transparent 50%),radial-gradient(at 29% 97%,var(--color-av-3) 0,transparent 50%),radial-gradient(at 99% 86%,var(--color-av-4) 0,transparent 50%),radial-gradient(at 29% 88%,var(--color-av-5) 0,transparent 50%);transform:translateZ(0)}.w3m-loader{width:50px;height:100%;background:linear-gradient(270deg,transparent 0,rgba(255,255,255,.4) 30%,transparent 100%);animation-name:slide;animation-duration:1.5s;transform:translateX(-50px);animation-iteration-count:infinite;animation-timing-function:linear;animation-delay:.55s}.w3m-small{width:24px;height:24px}.w3m-medium{width:60px;height:60px}`;var so=Object.defineProperty,co=Object.getOwnPropertyDescriptor,ve=(e,t,o,r)=>{for(var a=r>1?void 0:r?co(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&so(t,o,a),a};let Q=class extends s$2{constructor(){super(),this.address=void 0,this.avatar=void 0,this.loading=!0,this.size="small",this.unsubscribeAccount=void 0,this.address=a$1.state.address,this.avatar=a$1.state.profileAvatar,this.loading=Boolean(a$1.state.profileLoading),this.unsubscribeAccount=a$1.subscribe(({address:e,profileAvatar:t,profileLoading:o})=>{this.address=e,this.avatar=t,this.loading=Boolean(o);});}disconnectedCallback(){var e;(e=this.unsubscribeAccount)==null||e.call(this);}render(){const e={"w3m-placeholder":!0,"w3m-small":this.size==="small","w3m-medium":this.size==="medium"};return this.avatar?y$1`<img class="${o(e)}" src="${this.avatar}">`:this.address?(h.generateAvatarColors(this.address),y$1`<div class="${o(e)}">${this.loading?y$1`<div class="w3m-loader"></div>`:null}</div>`):null}};Q.styles=[g.globalCss,io],ve([t$1()],Q.prototype,"address",2),ve([t$1()],Q.prototype,"avatar",2),ve([t$1()],Q.prototype,"loading",2),ve([e$1()],Q.prototype,"size",2),Q=ve([e$2("w3m-avatar")],Q);const ho=i$6`div{display:flex;align-items:center}w3m-token-image{width:28px;height:28px;margin-right:6px}`;var mo=Object.defineProperty,po=Object.getOwnPropertyDescriptor,qe=(e,t,o,r)=>{for(var a=r>1?void 0:r?po(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&mo(t,o,a),a};let be=class extends s$2{constructor(){var e,t;super(),this.symbol=void 0,this.amount=void 0,this.unsubscribeAccount=void 0,this.symbol=(e=a$1.state.balance)==null?void 0:e.symbol,this.amount=(t=a$1.state.balance)==null?void 0:t.amount,this.unsubscribeAccount=a$1.subscribe(({balance:o})=>{this.symbol=o?.symbol,this.amount=o?.amount;});}disconnectedCallback(){var e;(e=this.unsubscribeAccount)==null||e.call(this);}render(){let e="_._";return this.amount==="0.0"&&(e=0),this.amount&&this.amount.length>6&&(e=parseFloat(this.amount).toFixed(3)),y$1`<div><w3m-token-image symbol="${l$1(this.symbol)}"></w3m-token-image><w3m-text variant="medium-normal" color="primary">${e} ${this.symbol}</w3m-text></div>`}};be.styles=[g.globalCss,ho],qe([t$1()],be.prototype,"symbol",2),qe([t$1()],be.prototype,"amount",2),be=qe([e$2("w3m-balance")],be);const go=i$6`.w3m-loading{padding:0 15px}svg{width:28px;height:20px;margin:-1px 3px 0 -5px}svg path{fill:var(--color-fg-inverse)}button:disabled svg path{fill:var(--color-fg-3)}w3m-spinner{margin:0 10px 0 0}`;var uo=Object.defineProperty,vo=Object.getOwnPropertyDescriptor,Ae=(e,t,o,r)=>{for(var a=r>1?void 0:r?vo(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&uo(t,o,a),a};let re=class extends s$2{constructor(){super(),this.loading=!1,this.label="Connect Wallet",this.icon="show",this.modalUnsub=void 0,h.rejectStandaloneButtonComponent(),this.modalUnsub=A.subscribe(e=>{e.open&&(this.loading=!0),e.open||(this.loading=!1);});}disconnectedCallback(){var e;(e=this.modalUnsub)==null||e.call(this);}iconTemplate(){return this.icon==="show"?w.WALLET_CONNECT_ICON:null}onOpen(){this.loading=!0;const{enableNetworkView:e}=W.state,{chains:t,selectedChain:o}=a$1.state,r=t?.length&&t.length>1;e||r&&!o?A.open({route:"SelectNetwork"}):A.open({route:"ConnectWallet"});}render(){const e={"w3m-loading":this.loading};return y$1`<w3m-button-big class="${o(e)}" .disabled="${this.loading}" @click="${this.onOpen}">${this.loading?y$1`<w3m-spinner></w3m-spinner><w3m-text variant="medium-normal" color="accent">Connecting...</w3m-text>`:y$1`${this.iconTemplate()}<w3m-text variant="medium-normal" color="inverse">${this.label}</w3m-text>`}</w3m-button-big>`}};re.styles=[g.globalCss,go],Ae([t$1()],re.prototype,"loading",2),Ae([e$1()],re.prototype,"label",2),Ae([e$1()],re.prototype,"icon",2),re=Ae([e$2("w3m-connect-button")],re);var bo=Object.defineProperty,wo=Object.getOwnPropertyDescriptor,we=(e,t,o,r)=>{for(var a=r>1?void 0:r?wo(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&bo(t,o,a),a};let ne=class extends s$2{constructor(){super(),this.isConnected=!1,this.label="Connect Wallet",this.icon="show",this.balance="hide",this.unsubscribeAccount=void 0,h.rejectStandaloneButtonComponent(),this.isConnected=a$1.state.isConnected,this.unsubscribeAccount=a$1.subscribe(({isConnected:e})=>{this.isConnected=e;});}disconnectedCallback(){var e;(e=this.unsubscribeAccount)==null||e.call(this);}render(){return this.isConnected?y$1`<w3m-account-button balance="${l$1(this.balance)}"></w3m-account-button>`:y$1`<w3m-connect-button label="${l$1(this.label)}" icon="${l$1(this.icon)}"></w3m-connect-button>`}};we([t$1()],ne.prototype,"isConnected",2),we([e$1()],ne.prototype,"label",2),we([e$1()],ne.prototype,"icon",2),we([e$1()],ne.prototype,"balance",2),ne=we([e$2("w3m-core-button")],ne);const F={allowedExplorerListings(e){const{explorerAllowList:t,explorerDenyList:o}=W.state;let r=[...e];return t!=null&&t.length&&(r=r.filter(a=>t.includes(a.id))),o!=null&&o.length&&(r=r.filter(a=>!o.includes(a.id))),r},walletsWithInjected(e){let t=[...e??[]];if(window.ethereum){const o=h.getWalletName("");t=t.filter(({name:r})=>!h.caseSafeIncludes(r,o));}return t},connectorWallets(){const{isStandalone:e}=a$1.state;if(e)return [];let t=w$1.client().getConnectors();return !window.ethereum&&d.isMobile()&&(t=t.filter(({id:o})=>o!=="injected"&&o!==U.metaMask)),t},walletTemplatesWithRecent(e,t){let o=[...e];if(t){const r=h.getRecentWallet();o=o.filter(a=>!a.values.includes(r?.name)),o.splice(1,0,t);}return o}},fo=i$6`.w3m-grid{display:grid;grid-template-columns:repeat(4,80px);justify-content:space-between}.w3m-desktop-title,.w3m-mobile-title{display:flex;align-items:center}.w3m-mobile-title{justify-content:space-between;margin-bottom:20px;margin-top:-10px}.w3m-desktop-title{margin-bottom:10px;padding:0 10px}.w3m-subtitle{display:flex;align-items:center}.w3m-subtitle:last-child path{fill:var(--color-fg-3)}.w3m-desktop-title svg,.w3m-mobile-title svg{margin-right:6px}.w3m-desktop-title path,.w3m-mobile-title path{fill:var(--color-fg-accent)}`;var yo=Object.defineProperty,xo=Object.getOwnPropertyDescriptor,Co=(e,t,o,r)=>{for(var a=r>1?void 0:r?xo(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&yo(t,o,a),a};let Ke=class extends s$2{onDesktopWallet(e){y.push("DesktopConnector",{DesktopConnector:e});}onInjectedWallet(){y.push("InjectedConnector");}onInstallConnector(){y.push("InstallConnector",{InstallConnector:{id:"metaMask",name:"MetaMask",isMobile:!0,url:"https://metamask.io"}});}async onConnectorWallet(e){window.ethereum?e==="injected"||e===U.metaMask?this.onInjectedWallet():await h.handleConnectorConnection(e):this.onInstallConnector();}desktopWalletsTemplate(){const{desktopWallets:e}=W.state;return e?.map(({id:t,name:o,links:{universal:r,native:a}})=>y$1`<w3m-wallet-button walletId="${t}" name="${o}" .onClick="${()=>this.onDesktopWallet({name:o,walletId:t,universal:r,native:a})}"></w3m-wallet-button>`)}previewWalletsTemplate(){return F.allowedExplorerListings(U$1.state.previewWallets).map(({name:e,desktop:{universal:t,native:o},homepage:r,image_url:a,id:n})=>y$1`<w3m-wallet-button src="${a.lg}" name="${e}" .onClick="${()=>this.onDesktopWallet({walletId:n,name:e,native:o,universal:t||r,icon:a.lg})}"></w3m-wallet-button>`)}connectorWalletsTemplate(){return F.connectorWallets().map(({id:e,name:t,ready:o})=>y$1`<w3m-wallet-button .installed="${["injected","metaMask"].includes(e)&&o}" name="${t}" walletId="${e}" .onClick="${async()=>this.onConnectorWallet(e)}"></w3m-wallet-button>`)}recentWalletTemplate(){const e=h.getRecentWallet();if(!e)return;const{id:t,name:o,links:r,image:a}=e;return y$1`<w3m-wallet-button .recent="${!0}" name="${o}" walletId="${l$1(t)}" src="${l$1(a)}" .onClick="${()=>this.onDesktopWallet({name:o,walletId:t,universal:r?.universal,native:r?.native,icon:a})}"></w3m-wallet-button>`}render(){const{standaloneUri:e}=a$1.state,t=this.desktopWalletsTemplate(),o=this.previewWalletsTemplate(),r=this.connectorWalletsTemplate(),a=this.recentWalletTemplate(),n=t??o;let l=[...r,...n];l=F.walletTemplatesWithRecent(l,a);const c=e?n:l,m=c.length>4;let s=[];m?s=c.filter(u=>!u.values.includes(U.coinbaseWallet)).slice(0,3):s=c;const d=Boolean(s.length);return y$1`<w3m-modal-header border="${!0}" title="Connect your wallet" .onAction="${h.handleUriCopy}" .actionIcon="${w.COPY_ICON}"></w3m-modal-header><w3m-modal-content><div class="w3m-mobile-title"><div class="w3m-subtitle">${w.MOBILE_ICON}<w3m-text variant="small-normal" color="accent">Mobile</w3m-text></div><div class="w3m-subtitle">${w.SCAN_ICON}<w3m-text variant="small-normal" color="secondary">Scan with your wallet</w3m-text></div></div><w3m-walletconnect-qr></w3m-walletconnect-qr></w3m-modal-content>${d?y$1`<w3m-modal-footer><div class="w3m-desktop-title">${w.DESKTOP_ICON}<w3m-text variant="small-normal" color="accent">Desktop</w3m-text></div><div class="w3m-grid">${s} ${m?y$1`<w3m-view-all-wallets-button></w3m-view-all-wallets-button>`:null}</div></w3m-modal-footer>`:null}`}};Ke.styles=[g.globalCss,fo],Ke=Co([e$2("w3m-desktop-wallet-selection")],Ke);const ko=i$6`div{background-color:var(--color-bg-2);padding:10px 20px 15px 20px;border-top:1px solid var(--color-bg-3);text-align:center}a{color:var(--color-fg-accent);text-decoration:none;transition:opacity .2s ease-in-out}a:hover{opacity:.8}`;var $o=Object.defineProperty,Oo=Object.getOwnPropertyDescriptor,Eo=(e,t,o,r)=>{for(var a=r>1?void 0:r?Oo(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&$o(t,o,a),a};let Ye=class extends s$2{render(){const{termsOfServiceUrl:e,privacyPolicyUrl:t}=W.state;return e??t?y$1`<div><w3m-text variant="small-normal" color="secondary">By connecting your wallet, you agree to our<br>${e?y$1`<a href="${e}" target="_blank" rel="noopener noreferrer">Terms of Service</a>`:null} ${e&&t?"and":null} ${t?y$1`<a href="${t}" target="_blank" rel="noopener noreferrer">Privacy Policy</a>`:null}</w3m-text></div>`:null}};Ye.styles=[g.globalCss,ko],Ye=Eo([e$2("w3m-legal-notice")],Ye);const Io=i$6`.w3m-grid{display:grid;grid-template-columns:repeat(4,80px);margin:0 -10px;justify-content:space-between;row-gap:10px}`;var Mo=Object.defineProperty,Wo=Object.getOwnPropertyDescriptor,Lo=(e,t,o,r)=>{for(var a=r>1?void 0:r?Wo(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&Mo(t,o,a),a};let Qe=class extends s$2{onGoToQrcode(){y.push("Qrcode");}async onConnectorWallet(e){await h.handleConnectorConnection(e);}mobileWalletsTemplate(){const{mobileWallets:e}=W.state,t=F.walletsWithInjected(e);if(t.length)return t.map(({id:o,name:r,links:{universal:a,native:n}})=>y$1`<w3m-wallet-button name="${r}" walletId="${o}" .onClick="${async()=>h.handleMobileLinking({links:{native:n,universal:a},name:r,id:o})}"></w3m-wallet-button>`)}previewWalletsTemplate(){const{previewWallets:e}=U$1.state;let t=F.walletsWithInjected(e);return t=F.allowedExplorerListings(t),t.map(({image_url:o,name:r,mobile:{native:a,universal:n},id:l})=>y$1`<w3m-wallet-button name="${r}" src="${o.lg}" .onClick="${async()=>h.handleMobileLinking({links:{native:a,universal:n},name:r,id:l,image:o.lg})}"></w3m-wallet-button>`)}connectorWalletsTemplate(){let e=F.connectorWallets();return window.ethereum||(e=e.filter(({id:t})=>t!=="injected"&&t!==U.metaMask)),e.map(({name:t,id:o,ready:r})=>y$1`<w3m-wallet-button .installed="${["injected","metaMask"].includes(o)&&r}" name="${t}" walletId="${o}" .onClick="${async()=>this.onConnectorWallet(o)}"></w3m-wallet-button>`)}recentWalletTemplate(){const e=h.getRecentWallet();if(!e)return;const{id:t,name:o,links:r,image:a}=e;return y$1`<w3m-wallet-button .recent="${!0}" name="${o}" walletId="${l$1(t)}" src="${l$1(a)}" .onClick="${async()=>h.handleMobileLinking({name:o,id:t,links:r,image:a})}"></w3m-wallet-button>`}render(){const{standaloneUri:e}=a$1.state,t=this.connectorWalletsTemplate(),o=this.mobileWalletsTemplate(),r=this.previewWalletsTemplate(),a=this.recentWalletTemplate(),n=o??r;let l=[...t,...n];l=F.walletTemplatesWithRecent(l,a);const c=e?n:l,m=c.length>8;let s=[];m?s=c.filter(A=>!A.values.includes(U.coinbaseWallet)).slice(0,7):s=c;const d=s.slice(0,4),u=s.slice(4,8),C=Boolean(s.length);return y$1`<w3m-modal-header title="Connect your wallet" .onAction="${this.onGoToQrcode}" .actionIcon="${w.QRCODE_ICON}"></w3m-modal-header>${C?y$1`<w3m-modal-content><div class="w3m-grid">${d} ${u.length?y$1`${u} ${m?y$1`<w3m-view-all-wallets-button></w3m-view-all-wallets-button>`:null}`:null}</div></w3m-modal-content>`:null}`}};Qe.styles=[g.globalCss,Io],Qe=Lo([e$2("w3m-mobile-wallet-selection")],Qe);const Ao=i$6`.w3m-overlay{inset:0;position:fixed;z-index:var(--modal-z-index);overflow:hidden;display:flex;justify-content:center;align-items:center;background-color:rgba(0,0,0,.3);opacity:0;pointer-events:none}.w3m-open{pointer-events:auto}.w3m-container{position:relative;max-width:360px;width:100%;outline:0}.w3m-card{width:100%;position:relative;transform:translateY(5px);border-radius:30px;overflow:hidden;box-shadow:0 6px 14px -6px rgba(10,16,31,.12),0 10px 32px -4px rgba(10,16,31,.1),0 0 0 1px var(--color-overlay);background-color:var(--color-bg-1);color:var(--color-fg-1)}@media(max-width:600px){.w3m-container{max-width:440px}.w3m-card{border-radius:40px 40px 0 0}.w3m-overlay{align-items:flex-end}}@media(max-width:600px){.w3m-container{max-width:440px}.w3m-card{transform:translateY(5px);border-radius:40px 40px 0 0}.w3m-overlay{align-items:flex-end}}`;var Po=Object.defineProperty,jo=Object.getOwnPropertyDescriptor,Pe=(e,t,o,r)=>{for(var a=r>1?void 0:r?jo(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&Po(t,o,a),a};let le=class extends s$2{constructor(){if(super(),this.open=!1,this.preload=!0,this.activeChainId=void 0,this.unsubscribeModal=void 0,this.unsubscribeConfig=void 0,this.unwatchAccount=void 0,this.unwatchNetwork=void 0,this.abortController=void 0,g.setTheme(),this.unsubscribeConfig=W.subscribe(g.setTheme),this.unsubscribeModal=A.subscribe(e=>{e.open?this.onOpenModalEvent():this.onCloseModalEvent();}),!a$1.state.isStandalone){a$1.getAccount();const e=a$1.getSelectedChain();this.activeChainId=e?.id,this.fetchProfile(),this.fetchBalance(),this.unwatchNetwork=w$1.client().watchNetwork(t=>{const o=t.chain;o&&this.activeChainId!==o.id&&(a$1.setSelectedChain(o),this.activeChainId=o.id,a$1.resetProfile(),this.fetchProfile(),this.fetchBalance());}),this.unwatchAccount=w$1.client().watchAccount(t=>{const{address:o}=a$1.state;t.address!==o&&(this.fetchProfile(t.address),this.fetchBalance(t.address)),a$1.setAddress(t.address),a$1.setIsConnected(t.isConnected);});}this.preloadModalData();}disconnectedCallback(){var e,t,o,r;(e=this.unsubscribeModal)==null||e.call(this),(t=this.unsubscribeConfig)==null||t.call(this),(o=this.unwatchAccount)==null||o.call(this),(r=this.unwatchNetwork)==null||r.call(this);}get overlayEl(){return h.getShadowRootElement(this,".w3m-overlay")}get containerEl(){return h.getShadowRootElement(this,".w3m-container")}async fetchProfile(e){try{a$1.setProfileLoading(!0);const t=e??a$1.state.address;if(t&&this.activeChainId===1){const[o,r]=await Promise.all([w$1.client().fecthEnsName({address:t}),w$1.client().fetchEnsAvatar({address:t})]);r&&await h.preloadImage(r),a$1.setProfileName(o),a$1.setProfileAvatar(r);}}catch(t){P.openToast(h.getErrorMessage(t),"error");}finally{a$1.setProfileLoading(!1);}}async fetchBalance(e){try{a$1.setBalanceLoading(!0);const t=e??a$1.state.address;if(t){const o=await w$1.client().fetchBalance({address:t});a$1.setBalance({amount:o.formatted,symbol:o.symbol});}}catch(t){P.openToast(h.getErrorMessage(t),"error");}finally{a$1.setBalanceLoading(!1);}}toggleBodyScroll(e){if(document.querySelector("body"))if(e){const t=document.getElementById("w3m-styles");t?.remove();}else document.head.insertAdjacentHTML("beforeend",'<style id="w3m-styles">body{touch-action:none;overflow:hidden;overscroll-behavior:contain;}</style>');}async preloadExplorerData(){var e;const{standaloneChains:t,chains:o,isExplorer:r}=a$1.state;if(r){const a=t?.join(",");await Promise.all([U$1.getPreviewWallets({page:1,entries:10,chains:a,device:d.isMobile()?"mobile":"desktop"}),U$1.getRecomendedWallets()]);const{previewWallets:n,recomendedWallets:l}=U$1.state,c=(e=o?.map(s=>h.getChainIcon(s.id)))!=null?e:[],m=[...n,...l].map(s=>s.image_url.lg);await this.preloadExplorerImages([...c,...m]);}}async preloadExplorerImages(e){e.length&&await Promise.all(e.map(async t=>h.preloadImage(t)));}async preloadCustomImages(){const e=h.getCustomImageUrls();e.length&&await Promise.all(e.map(async t=>h.preloadImage(t)));}async preloadConnectorImages(){const e=h.getConnectorImageUrls();e.length&&await Promise.all(e.map(async t=>h.preloadImage(t)));}async preloadModalData(){try{this.preload&&(this.preload=!1,await Promise.all([this.preloadExplorerData(),this.preloadCustomImages(),this.preloadConnectorImages()]));}catch{P.openToast("Failed preloading","error");}}onCloseModal(e){e.target===e.currentTarget&&A.close();}async onOpenModalEvent(){await this.preloadModalData(),this.toggleBodyScroll(!1);const e=.2;await animate(this.containerEl,{y:0},{duration:0}).finished,animate(this.overlayEl,{opacity:[0,1]},{duration:.2,delay:e}),animate(this.containerEl,h.isMobileAnimation()?{y:["50vh",0]}:{scale:[.98,1]},{scale:{easing:spring({velocity:.4})},y:{easing:spring({mass:.5})},delay:e}),this.addKeyboardEvents(),this.open=!0;}async onCloseModalEvent(){this.toggleBodyScroll(!0),this.removeKeyboardEvents(),await Promise.all([animate(this.containerEl,h.isMobileAnimation()?{y:[0,"50vh"]}:{scale:[1,.98]},{scale:{easing:spring({velocity:0})},y:{easing:spring({mass:.5})}}).finished,animate(this.overlayEl,{opacity:[1,0]},{duration:.2}).finished]),this.open=!1;}addKeyboardEvents(){this.abortController=new AbortController,window.addEventListener("keydown",e=>{var t;e.key==="Escape"?A.close():e.key==="Tab"&&((t=e.target)!=null&&t.tagName.includes("W3M-")||this.containerEl.focus());},this.abortController),this.containerEl.focus();}removeKeyboardEvents(){var e;(e=this.abortController)==null||e.abort(),this.abortController=void 0;}render(){const e={"w3m-overlay":!0,"w3m-open":this.open};return y$1`<div id="w3m-modal" class="${o(e)}" @click="${this.onCloseModal}" role="alertdialog" aria-modal="true"><div class="w3m-container" tabindex="0">${this.open?y$1`<w3m-modal-backcard></w3m-modal-backcard><div class="w3m-card"><w3m-modal-router></w3m-modal-router><w3m-modal-toast></w3m-modal-toast></div>`:null}</div></div>`}};le.styles=[g.globalCss,Ao],Pe([t$1()],le.prototype,"open",2),Pe([t$1()],le.prototype,"preload",2),Pe([t$1()],le.prototype,"activeChainId",2),le=Pe([e$2("w3m-modal")],le);const So=i$6`w3m-network-image{margin-left:-6px;margin-right:6px;width:28px;height:28px}`;var _o=Object.defineProperty,Do=Object.getOwnPropertyDescriptor,je=(e,t,o,r)=>{for(var a=r>1?void 0:r?Do(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&_o(t,o,a),a};let ie=class extends s$2{constructor(){super(),this.chainId="",this.label="",this.wrongNetwork=!1,this.unsubscribeNetwork=void 0,h.rejectStandaloneButtonComponent();const{selectedChain:e}=a$1.state;this.onSetChainData(e),this.unsubscribeNetwork=a$1.subscribe(({selectedChain:t})=>{this.onSetChainData(t);});}disconnectedCallback(){var e;(e=this.unsubscribeNetwork)==null||e.call(this);}onSetChainData(e){if(e){const{chains:t}=a$1.state,o=t?.map(r=>r.id);this.chainId=e.id.toString(),this.wrongNetwork=!(o!=null&&o.includes(e.id)),this.label=this.wrongNetwork?"Wrong Network":e.name;}}onClick(){A.open({route:"SelectNetwork"});}render(){var e;const{chains:t}=a$1.state,o=t&&t.length>1;return y$1`<w3m-button-big @click="${this.onClick}" ?disabled="${!o}"><w3m-network-image chainId="${l$1(this.chainId)}"></w3m-network-image><w3m-text variant="medium-normal" color="inverse">${(e=this.label)!=null&&e.length?this.label:"Select Network"}</w3m-text></w3m-button-big>`}};ie.styles=[g.globalCss,So],je([t$1()],ie.prototype,"chainId",2),je([t$1()],ie.prototype,"label",2),je([t$1()],ie.prototype,"wrongNetwork",2),ie=je([e$2("w3m-network-switch")],ie);const To=i$6`button{display:flex;flex-direction:column;padding:5px 10px;border-radius:10px;transition:background-color .2s ease;height:100%;justify-content:flex-start}.w3m-icons{width:60px;height:60px;display:flex;flex-wrap:wrap;padding:7px;border-radius:15px;justify-content:space-between;align-items:center;margin-bottom:5px;background-color:var(--color-bg-2);box-shadow:inset 0 0 0 1px var(--color-overlay)}button:hover{background-color:var(--color-overlay)}.w3m-icons img{width:21px;height:21px;object-fit:cover;object-position:center;border-radius:8px;border:1px solid var(--color-overlay)}.w3m-icons svg{width:21px;height:21px}.w3m-icons img:nth-child(1),.w3m-icons img:nth-child(2),.w3m-icons svg:nth-child(1),.w3m-icons svg:nth-child(2){margin-bottom:4px}w3m-text{width:100%;text-align:center}#wallet-placeholder-fill{fill:var(--color-bg-3)}#wallet-placeholder-dash{stroke:var(--color-overlay)}`;var No=Object.defineProperty,Ro=Object.getOwnPropertyDescriptor,Bo=(e,t,o,r)=>{for(var a=r>1?void 0:r?Ro(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&No(t,o,a),a};let Xe=class extends s$2{onClick(e,t){e?y.push("WalletExplorer"):t&&y.push("WalletFilter");}render(){const{previewWallets:e}=U$1.state,t=h.getCustomWallets(),o=[...e].reverse().slice(0,4),r=[...t].reverse().slice(0,4),a=Boolean(o.length),n=Boolean(r.length);return y$1`<button @click="${()=>this.onClick(a,n)}"><div class="w3m-icons">${a?o.map(l=>y$1`<img src="${l.image_url.lg}">`):null} ${n?r.map(l=>{const c=h.getWalletId(l.id),m=h.getWalletIcon(c);return m?y$1`<img src="${m}">`:w.WALLET_PLACEHOLDER}):null}</div><w3m-text variant="xsmall-normal">View All</w3m-text></button>`}};Xe.styles=[g.globalCss,To],Xe=Bo([e$2("w3m-view-all-wallets-button")],Xe);const Ho=i$6`.w3m-qr-container{width:100%;aspect-ratio:1/1}`;var Uo=Object.defineProperty,Zo=Object.getOwnPropertyDescriptor,kt=(e,t,o,r)=>{for(var a=r>1?void 0:r?Zo(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&Uo(t,o,a),a};let Se=class extends s$2{constructor(){super(),this.uri="",this.createConnectionAndWait();}get overlayEl(){return h.getShadowRootElement(this,".w3m-qr-container")}async createConnectionAndWait(){var e;try{const{standaloneUri:t}=a$1.state;t?setTimeout(()=>this.uri=t,0):(await w$1.client().connectWalletConnect(o=>this.uri=o,(e=a$1.state.selectedChain)==null?void 0:e.id),A.close());}catch(t){P.openToast(h.getErrorMessage(t),"error"),this.createConnectionAndWait();}}render(){return y$1`<div class="w3m-qr-container">${this.uri?y$1`<w3m-qrcode size="${this.overlayEl.offsetWidth}" uri="${this.uri}"></w3m-qrcode>`:null}</div>`}};Se.styles=[g.globalCss,Ho],kt([t$1()],Se.prototype,"uri",2),Se=kt([e$2("w3m-walletconnect-qr")],Se);const Fo=i$6`.w3m-profile{display:flex;justify-content:space-between;align-items:flex-start;padding-top:20px}.w3m-connection-badge{background-color:var(--color-bg-2);box-shadow:inset 0 0 0 1px var(--color-overlay);padding:6px 10px 6px 26px;position:relative;border-radius:28px}.w3m-connection-badge::before{content:'';position:absolute;width:10px;height:10px;left:10px;background-color:var(--color-success);border-radius:50%;top:50%;margin-top:-5px;box-shadow:0 1px 4px 1px var(--color-success),inset 0 0 0 1px var(--color-overlay)}.w3m-footer{display:flex;justify-content:space-between}w3m-address-text{margin-top:10px;display:block}.w3m-balance{border-top:1px solid var(--color-bg-2);padding:11px 20px}`;var zo=Object.defineProperty,Vo=Object.getOwnPropertyDescriptor,Go=(e,t,o,r)=>{for(var a=r>1?void 0:r?Vo(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&zo(t,o,a),a};let Je=class extends s$2{onDisconnect(){A.close(),w$1.client().disconnect(),a$1.resetAccount();}async onCopyAddress(){var e;await navigator.clipboard.writeText((e=a$1.state.address)!=null?e:""),P.openToast("Address copied","success");}render(){return y$1`<w3m-modal-content><div class="w3m-profile"><div class="w3m-info"><w3m-avatar size="medium"></w3m-avatar><w3m-address-text variant="modal"></w3m-address-text></div><div class="w3m-connection-badge"><w3m-text variant="small-normal" color="secondary">Connected</w3m-text></div></div></w3m-modal-content><div class="w3m-balance"><w3m-balance></w3m-balance></div><w3m-modal-footer><div class="w3m-footer"><w3m-account-network-button></w3m-account-network-button><w3m-box-button label="Copy Address" .onClick="${this.onCopyAddress}" .icon="${w.ACCOUNT_COPY}"></w3m-box-button><w3m-box-button label="Disconnect" .onClick="${this.onDisconnect}" .icon="${w.ACCOUNT_DISCONNECT}"></w3m-box-button></div></w3m-modal-footer>`}};Je.styles=[g.globalCss,Fo],Je=Go([e$2("w3m-account-view")],Je);var qo=Object.defineProperty,Ko=Object.getOwnPropertyDescriptor,Yo=(e,t,o,r)=>{for(var a=r>1?void 0:r?Ko(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&qo(t,o,a),a};let et=class extends s$2{viewTemplate(){return d.isAndroid()?y$1`<w3m-android-wallet-selection></w3m-android-wallet-selection>`:d.isMobile()?y$1`<w3m-mobile-wallet-selection></w3m-mobile-wallet-selection>`:y$1`<w3m-desktop-wallet-selection></w3m-desktop-wallet-selection>`}render(){return y$1`${this.viewTemplate()}<w3m-legal-notice></w3m-legal-notice>`}};et.styles=[g.globalCss],et=Yo([e$2("w3m-connect-wallet-view")],et);const Qo=i$6`.w3m-wrapper{display:flex;align-items:center;justify-content:center;width:100%;aspect-ratio:1/1;flex-direction:column}.w3m-connecting-title{display:flex;align-items:center;justify-content:center;margin-bottom:16px}w3m-spinner{margin-right:10px}w3m-wallet-image{border-radius:15px;width:25%;aspect-ratio:1/1;margin-bottom:20px}.w3m-install-actions{display:flex}.w3m-install-actions w3m-button{margin:0 5px;opacity:1}`;var Xo=Object.defineProperty,Jo=Object.getOwnPropertyDescriptor,$t=(e,t,o,r)=>{for(var a=r>1?void 0:r?Jo(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&Xo(t,o,a),a};let _e=class extends s$2{constructor(){super(),this.uri="",this.onConnect();}getRouterData(){var e;const t=(e=y.state.data)==null?void 0:e.DesktopConnector;if(!t)throw new Error("Missing router data");return t}onFormatAndRedirect(e){const{native:t,universal:o,name:r}=this.getRouterData();if(t){const a=d.formatNativeUrl(t,e,r);d.openHref(a);}else if(o){const a=d.formatUniversalUrl(o,e,r);d.openHref(a,"_blank");}}async onConnect(){var e;const{standaloneUri:t}=a$1.state;if(t)this.onFormatAndRedirect(t);else try{await w$1.client().connectWalletConnect(c=>{this.uri=c,this.onFormatAndRedirect(c);},(e=a$1.state.selectedChain)==null?void 0:e.id);const{name:o,walletId:r,native:a,universal:n,icon:l}=this.getRouterData();h.setRecentWallet({name:o,id:r,links:{native:a,universal:n},image:l}),A.close();}catch(o){P.openToast(h.getErrorMessage(o),"error"),this.onConnect();}}onConnectWithMobile(){y.push("Qrcode");}onGoToWallet(){const{universal:e,name:t}=this.getRouterData();if(e){const o=d.formatUniversalUrl(e,this.uri,t);d.openHref(o,"_blank");}}render(){const{name:e,icon:t,universal:o,walletId:r}=this.getRouterData(),a=h.getWalletName(e);return y$1`<w3m-modal-header title="${a}"></w3m-modal-header><w3m-modal-content><div class="w3m-wrapper">${t?y$1`<w3m-wallet-image src="${t}" size="lg"></w3m-wallet-image>`:y$1`<w3m-wallet-image size="lg" walletid="${l$1(r)}"></w3m-wallet-image>`}<div class="w3m-connecting-title"><w3m-spinner></w3m-spinner><w3m-text variant="large-bold" color="secondary">${`Continue in ${a}...`}</w3m-text></div><div class="w3m-install-actions"><w3m-button .onClick="${this.onConnect.bind(this)}" .iconRight="${w.RETRY_ICON}">Retry</w3m-button>${o?y$1`<w3m-button .onClick="${this.onGoToWallet.bind(this)}" .iconLeft="${w.ARROW_UP_RIGHT_ICON}">Go to Wallet</w3m-button>`:y$1`<w3m-button .onClick="${this.onConnectWithMobile}" .iconLeft="${w.MOBILE_ICON}">Connect with Mobile</w3m-button>`}</div></div></w3m-modal-content>`}};_e.styles=[g.globalCss,Qo],$t([t$1()],_e.prototype,"uri",2),_e=$t([e$2("w3m-desktop-connector-view")],_e);const er=i$6`.w3m-info-text{margin:5px 0 15px;max-width:320px}.w3m-wallet-item{margin:0 -20px 0 0;padding-right:20px;display:flex;align-items:center;border-bottom:1px solid var(--color-bg-2)}.w3m-wallet-item:last-child{margin-bottom:-20px;border-bottom:0}.w3m-wallet-content{margin-left:20px;height:60px;display:flex;flex:1;align-items:center;justify-content:space-between}.w3m-footer-actions{display:flex;flex-direction:column;align-items:center;padding:20px 0;border-top:1px solid var(--color-bg-2)}w3m-wallet-image{display:block;width:40px;height:40px;border-radius:10px}`;var tr=Object.defineProperty,ar=Object.getOwnPropertyDescriptor,or=(e,t,o,r)=>{for(var a=r>1?void 0:r?ar(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&tr(t,o,a),a};let tt=class extends s$2{constructor(){super(...arguments),this.explorerUrl="https://explorer.walletconnect.com/";}onGet(e){d.openHref(e,"_blank");}onExplore(){d.openHref(this.explorerUrl,"_blank");}render(){const{recomendedWallets:e}=U$1.state,t=h.getCustomWallets().slice(0,6),o=e.length,r=t.length;return y$1`<w3m-modal-header title="Get a wallet"></w3m-modal-header><w3m-modal-content>${o?e.map(({name:a,image_url:n,homepage:l})=>y$1`<div class="w3m-wallet-item"><w3m-wallet-image src="${n.lg}"></w3m-wallet-image><div class="w3m-wallet-content"><w3m-text variant="medium-normal">${a}</w3m-text><w3m-button .iconRight="${w.ARROW_RIGHT_ICON}" .onClick="${()=>this.onGet(l)}">Get</w3m-button></div></div>`):null} ${r?t.map(({name:a,id:n,links:l})=>y$1`<div class="w3m-wallet-item"><w3m-wallet-image walletId="${n}"></w3m-wallet-image><div class="w3m-wallet-content"><w3m-text variant="medium-normal">${a}</w3m-text><w3m-button .iconRight="${w.ARROW_RIGHT_ICON}" .onClick="${()=>this.onGet(l.universal)}">Get</w3m-button></div></div>`):null}</w3m-modal-content><div class="w3m-footer-actions"><w3m-text variant="medium-normal">Not what you're looking for?</w3m-text><w3m-text variant="small-thin" align="center" color="secondary" class="w3m-info-text">With hundreds of wallets out there, there's something for everyone</w3m-text><w3m-button .onClick="${this.onExplore.bind(this)}" .iconRight="${w.ARROW_UP_RIGHT_ICON}">Explore Wallets</w3m-button></div>`}};tt.styles=[g.globalCss,er],tt=or([e$2("w3m-get-wallet-view")],tt);const rr=i$6`.w3m-footer-actions{display:flex;justify-content:center}.w3m-footer-actions w3m-button{margin:0 5px}.w3m-info-container{display:flex;flex-direction:column;justify-content:center;align-items:center;margin-bottom:20px}.w3m-info-container:last-child{margin-bottom:0}.w3m-info-text{margin-top:5px}.w3m-images svg{margin:0 2px 5px;width:55px;height:55px}.help-img-highlight{stroke:var(--color-overlay)}`;var nr=Object.defineProperty,lr=Object.getOwnPropertyDescriptor,ir=(e,t,o,r)=>{for(var a=r>1?void 0:r?lr(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&nr(t,o,a),a};let at=class extends s$2{constructor(){super(...arguments),this.learnUrl="https://ethereum.org/en/wallets/";}onGet(){y.push("GetWallet");}onLearnMore(){d.openHref(this.learnUrl,"_blank");}render(){return y$1`<w3m-modal-header title="What is a wallet?"></w3m-modal-header><w3m-modal-content><div class="w3m-info-container"><div class="w3m-images">${w.HELP_CHART_IMG} ${w.HELP_PAINTING_IMG} ${w.HELP_ETH_IMG}</div><w3m-text variant="medium-normal">A home for your digital assets</w3m-text><w3m-text variant="small-thin" align="center" color="secondary" class="w3m-info-text">A wallet lets you store, send and receive digital assets like cryptocurrencies and NFTs.</w3m-text></div><div class="w3m-info-container"><div class="w3m-images">${w.HELP_KEY_IMG} ${w.HELP_USER_IMG} ${w.HELP_LOCK_IMG}</div><w3m-text variant="medium-normal">One login for all of web3</w3m-text><w3m-text variant="small-thin" align="center" color="secondary" class="w3m-info-text">Log in to any app by connecting your wallet. Say goodbye to countless passwords!</w3m-text></div><div class="w3m-info-container"><div class="w3m-images">${w.HELP_COMPAS_IMG} ${w.HELP_NOUN_IMG} ${w.HELP_DAO_IMG}</div><w3m-text variant="medium-normal">Your gateway to a new web</w3m-text><w3m-text variant="small-thin" align="center" color="secondary" class="w3m-info-text">With your wallet, you can explore and interact with DeFi, NFTs, DAOs, and much more.</w3m-text></div><div class="w3m-footer-actions"><w3m-button .onClick="${this.onGet.bind(this)}" .iconLeft="${w.WALLET_ICON}">Get a Wallet</w3m-button><w3m-button .onClick="${this.onLearnMore.bind(this)}" .iconRight="${w.ARROW_UP_RIGHT_ICON}">Learn More</w3m-button></div></w3m-modal-content>`}};at.styles=[g.globalCss,rr],at=ir([e$2("w3m-help-view")],at);const sr=i$6`.w3m-injected-wrapper{display:flex;align-items:center;justify-content:center;width:100%;aspect-ratio:1/1;flex-direction:column}.w3m-connecting-title{display:flex;align-items:center;justify-content:center;margin-bottom:20px}w3m-spinner{margin-right:10px}w3m-wallet-image{border-radius:15px;width:25%;aspect-ratio:1/1;margin-bottom:20px}w3m-button{opacity:0}.w3m-injected-error w3m-button{opacity:1}`;var cr=Object.defineProperty,dr=Object.getOwnPropertyDescriptor,ot=(e,t,o,r)=>{for(var a=r>1?void 0:r?dr(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&cr(t,o,a),a};let fe=class extends s$2{constructor(){super(),this.connecting=!0,this.error=!1,this.connector=w$1.client().getConnectorById("injected"),this.onConnect();}async onConnect(){const{ready:e}=this.connector;e&&(this.error=!1,this.connecting=!0,await h.handleConnectorConnection("injected",()=>{this.error=!0,this.connecting=!1;}));}render(){const e=h.getWalletName(this.connector.name),t=h.getWalletId(this.connector.id),o$1={"w3m-injected-wrapper":!0,"w3m-injected-error":this.error};return y$1`<w3m-modal-header title="${e}"></w3m-modal-header><w3m-modal-content><div class="${o(o$1)}"><w3m-wallet-image walletId="${t}" size="lg"></w3m-wallet-image><div class="w3m-connecting-title">${this.connecting?y$1`<w3m-spinner></w3m-spinner>`:null}<w3m-text variant="large-bold" color="${this.error?"error":"secondary"}">${this.error?"Connection declined":`Continue in ${e}...`}</w3m-text></div><w3m-button .onClick="${this.onConnect.bind(this)}" .disabled="${!this.error}" .iconRight="${w.RETRY_ICON}">Try Again</w3m-button></div></w3m-modal-content>`}};fe.styles=[g.globalCss,sr],ot([t$1()],fe.prototype,"connecting",2),ot([t$1()],fe.prototype,"error",2),fe=ot([e$2("w3m-injected-connector-view")],fe);const hr=i$6`.w3m-injected-wrapper{display:flex;align-items:center;justify-content:center;width:100%;aspect-ratio:1/1;flex-direction:column}.w3m-connecting-title{display:flex;align-items:center;justify-content:center;margin-bottom:16px}.w3m-install-title{display:flex;align-items:center;justify-content:center;flex-direction:column}.w3m-install-title w3m-text:last-child{margin-top:10px;max-width:240px}.w3m-install-actions{display:flex;margin-top:15px;align-items:center;flex-direction:column}@media(max-width:355px){.w3m-install-actions{flex-direction:column;align-items:center}}w3m-wallet-image{border-radius:15px;width:25%;aspect-ratio:1/1;margin-bottom:20px}w3m-button{opacity:0}.w3m-install-actions w3m-button{margin:5px;opacity:1}`;var mr=Object.defineProperty,pr=Object.getOwnPropertyDescriptor,gr=(e,t,o,r)=>{for(var a=r>1?void 0:r?pr(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&mr(t,o,a),a};let rt=class extends s$2{getRouterData(){var e;const t=(e=y.state.data)==null?void 0:e.InstallConnector;if(!t)throw new Error("Missing router data");return t}onInstall(){const{url:e}=this.getRouterData();d.openHref(e,"_blank");}onMobile(){const{name:e}=this.getRouterData();y.push("ConnectWallet"),P.openToast(`Scan the code with ${e}`,"success");}render(){const{name:e,id:t,isMobile:o}=this.getRouterData();return y$1`<w3m-modal-header title="${e}"></w3m-modal-header><w3m-modal-content><div class="w3m-injected-wrapper"><w3m-wallet-image walletId="${t}" size="lg"></w3m-wallet-image><div class="w3m-install-title"><w3m-text variant="large-bold">Install ${e}</w3m-text><w3m-text color="secondary" align="center" variant="medium-thin">To connect ${e}, install the browser extension.</w3m-text></div><div class="w3m-install-actions"><w3m-button .onClick="${this.onInstall.bind(this)}" .iconLeft="${w.ARROW_DOWN_ICON}">Install Extension</w3m-button>${o?y$1`<w3m-button .onClick="${this.onMobile.bind(this)}" .iconLeft="${w.MOBILE_ICON}">${e} Mobile</w3m-button>`:null}</div></div></w3m-modal-content>`}};rt.styles=[g.globalCss,hr],rt=gr([e$2("w3m-install-connector-view")],rt);var ur=Object.defineProperty,vr=Object.getOwnPropertyDescriptor,br=(e,t,o,r)=>{for(var a=r>1?void 0:r?vr(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&ur(t,o,a),a};let nt=class extends s$2{render(){return y$1`<w3m-modal-header title="Scan the code" .onAction="${h.handleUriCopy}" .actionIcon="${w.COPY_ICON}"></w3m-modal-header><w3m-modal-content><w3m-walletconnect-qr></w3m-walletconnect-qr></w3m-modal-content>`}};nt.styles=[g.globalCss],nt=br([e$2("w3m-qrcode-view")],nt);const wr=i$6`.w3m-grid{display:grid;grid-template-columns:repeat(4,80px);margin:-5px -10px;justify-content:space-between}`;var fr=Object.defineProperty,yr=Object.getOwnPropertyDescriptor,xr=(e,t,o,r)=>{for(var a=r>1?void 0:r?yr(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&fr(t,o,a),a};let lt=class extends s$2{onSelectChain(e){const{isConnected:t,selectedChain:o}=a$1.state;t?o?.id===e.id?y.replace("Account"):y.push("SwitchNetwork",{SwitchNetwork:e}):(y.push("ConnectWallet"),a$1.setSelectedChain(e));}render(){const{chains:e}=a$1.state;return y$1`<w3m-modal-header title="Select network"></w3m-modal-header><w3m-modal-content><div class="w3m-grid">${e?.map(t=>y$1`<w3m-network-button name="${t.name}" chainId="${t.id}" .onClick="${()=>this.onSelectChain(t)}">${t.name}</w3m-network-button>`)}</div></w3m-modal-content>`}};lt.styles=[g.globalCss,wr],lt=xr([e$2("w3m-select-network-view")],lt);const Cr=i$6`.w3m-wrapper{display:flex;align-items:center;justify-content:center;width:100%;aspect-ratio:1/1;flex-direction:column}.w3m-connecting-title{display:flex;align-items:center;justify-content:center;margin-bottom:16px}w3m-spinner{margin-right:10px}w3m-network-image{width:96px;height:96px;margin-bottom:20px}w3m-button{opacity:0}.w3m-error w3m-button{opacity:1}`;var kr=Object.defineProperty,$r=Object.getOwnPropertyDescriptor,Ot=(e,t,o,r)=>{for(var a=r>1?void 0:r?$r(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&kr(t,o,a),a};let De=class extends s$2{constructor(){super(),this.error=!1,this.onSwitchNetwork();}getRouterData(){var e;const t=(e=y.state.data)==null?void 0:e.SwitchNetwork;if(!t)throw new Error("Missing router data");return t}async onSwitchNetwork(){try{this.error=!1;const e=this.getRouterData();await w$1.client().switchNetwork({chainId:e.id}),a$1.setSelectedChain(e),y.replace("Account");}catch{this.error=!0;}}render(){const{id:e,name:t}=this.getRouterData(),o$1={"w3m-wrapper":!0,"w3m-error":this.error};return y$1`<w3m-modal-header title="${`Connect to ${t}`}"></w3m-modal-header><w3m-modal-content><div class="${o(o$1)}"><w3m-network-image chainId="${e}"></w3m-network-image><div class="w3m-connecting-title">${this.error?null:y$1`<w3m-spinner></w3m-spinner>`}<w3m-text variant="large-bold" color="${this.error?"error":"secondary"}">${this.error?"Connection declined":"Approve in your wallet"}</w3m-text></div><w3m-button .onClick="${this.onSwitchNetwork.bind(this)}" .disabled="${!this.error}" .iconRight="${w.RETRY_ICON}">Try Again</w3m-button></div></w3m-modal-content>`}};De.styles=[g.globalCss,Cr],Ot([t$1()],De.prototype,"error",2),De=Ot([e$2("w3m-switch-network-view")],De);const Or=i$6`w3m-modal-content{height:clamp(200px,60vh,600px);display:block;overflow:scroll;scrollbar-width:none;position:relative;margin-top:1px}.w3m-grid{display:grid;grid-template-columns:repeat(4,80px);justify-content:space-between;margin:-15px -10px;padding-top:20px}w3m-modal-content::after,w3m-modal-content::before{content:'';position:fixed;pointer-events:none;z-index:1;width:100%;height:20px;opacity:1}w3m-modal-content::before{box-shadow:0 -1px 0 0 var(--color-bg-1);background:linear-gradient(var(--color-bg-1),rgba(255,255,255,0))}w3m-modal-content::after{box-shadow:0 1px 0 0 var(--color-bg-1);background:linear-gradient(rgba(255,255,255,0),var(--color-bg-1));top:calc(100% - 20px)}w3m-modal-content::-webkit-scrollbar{display:none}.w3m-placeholder-block{display:flex;justify-content:center;align-items:center;height:100px;overflow:hidden}.w3m-empty,.w3m-loading{display:flex}.w3m-loading .w3m-placeholder-block{height:100%}.w3m-end-reached .w3m-placeholder-block{height:0;opacity:0}.w3m-empty .w3m-placeholder-block{opacity:1;height:100%}w3m-wallet-button{margin:calc((100% - 60px)/ 3) 0}`;var Er=Object.defineProperty,Ir=Object.getOwnPropertyDescriptor,ye=(e,t,o,r)=>{for(var a=r>1?void 0:r?Ir(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&Er(t,o,a),a};const it=40;let X=class extends s$2{constructor(){super(...arguments),this.loading=!U$1.state.wallets.listings.length,this.firstFetch=!U$1.state.wallets.listings.length,this.search="",this.endReached=!1,this.intersectionObserver=void 0,this.searchDebounce=h.debounce(e=>{e.length>=3?(this.firstFetch=!0,this.endReached=!1,this.search=e,U$1.resetSearch(),this.fetchWallets()):this.search&&(this.search="",this.endReached=this.isLastPage(),U$1.resetSearch());});}firstUpdated(){this.createPaginationObserver();}disconnectedCallback(){var e;(e=this.intersectionObserver)==null||e.disconnect();}get placeholderEl(){return h.getShadowRootElement(this,".w3m-placeholder-block")}createPaginationObserver(){this.intersectionObserver=new IntersectionObserver(([e])=>{e.isIntersecting&&!(this.search&&this.firstFetch)&&this.fetchWallets();}),this.intersectionObserver.observe(this.placeholderEl);}isLastPage(){const{wallets:e,search:t}=U$1.state,{listings:o,total:r}=this.search?t:e;return r<=it||o.length>=r}async fetchWallets(){var e;const{wallets:t,search:o}=U$1.state,r=h.getExtensionWallets(),{listings:a,total:n,page:l}=this.search?o:t;if(!this.endReached&&(this.firstFetch||n>it&&a.length<n))try{this.loading=!0;const c=(e=a$1.state.standaloneChains)==null?void 0:e.join(","),{listings:m}=await U$1.getPaginatedWallets({page:this.firstFetch?1:l+1,entries:it,device:d.isMobile()?"mobile":"desktop",search:this.search,chains:c}),s=m.map(({image_url:u})=>u.lg),d$1=r.map(({id:u})=>h.getWalletIcon(u));await Promise.all([...s.map(async u=>h.preloadImage(u)),...d$1.map(async u=>h.preloadImage(u)),d.wait(300)]),this.endReached=this.isLastPage();}catch(c){P.openToast(h.getErrorMessage(c),"error");}finally{this.loading=!1,this.firstFetch=!1;}}async onConnectPlatform(e){if(d.isMobile()){const{id:t,image_url:o}=e,{native:r,universal:a}=e.mobile;await h.handleMobileLinking({links:{native:r,universal:a},name:e.name,id:t,image:o.lg});}else y.push("DesktopConnector",{DesktopConnector:{name:e.name,icon:e.image_url.lg,universal:e.desktop.universal||e.homepage,native:e.desktop.native}});}onConnectExtension(e){h.getWalletId("")===e.id?y.push("InjectedConnector"):y.push("InstallConnector",{InstallConnector:e});}onSearchChange(e){const{value:t}=e.target;this.searchDebounce(t);}coinbaseConnectorTemplate(){try{const e=w$1.client().getConnectorById(U.coinbaseWallet);return y$1`<w3m-wallet-button name="${e.name}" walletId="${e.id}" .onClick="${async()=>h.handleConnectorConnection(U.coinbaseWallet)}"></w3m-wallet-button>`}catch{return null}}render(){const{wallets:e,search:t}=U$1.state,{isStandalone:o$1}=a$1.state;let{listings:r}=this.search?t:e;r=F.allowedExplorerListings(r);const a=this.loading&&!r.length,n=this.search.length>=3,l=!a&&(!n||h.caseSafeIncludes(U.coinbaseWallet,this.search));let c=!o$1&&!d.isMobile()?h.getExtensionWallets():[];n&&(c=c.filter(({name:u})=>h.caseSafeIncludes(u,this.search)));const m=!this.loading&&!r.length&&!c.length&&!l,s=Math.max(c.length,r.length),d$1={"w3m-loading":a,"w3m-end-reached":this.endReached||!this.loading,"w3m-empty":m};return y$1`<w3m-modal-header><w3m-search-input .onChange="${this.onSearchChange.bind(this)}"></w3m-search-input></w3m-modal-header><w3m-modal-content class="${o(d$1)}"><div class="w3m-grid">${a?null:[...Array(s)].map((u,C)=>y$1`${c[C]?y$1`<w3m-wallet-button name="${c[C].name}" walletId="${c[C].id}" .onClick="${()=>this.onConnectExtension(c[C])}"></w3m-wallet-button>`:null} ${r[C]?y$1`<w3m-wallet-button src="${r[C].image_url.lg}" name="${r[C].name}" walletId="${r[C].id}" .onClick="${async()=>this.onConnectPlatform(r[C])}"></w3m-wallet-button>`:null}`)} ${l?this.coinbaseConnectorTemplate():null}</div><div class="w3m-placeholder-block">${m?y$1`<w3m-text variant="large-bold" color="secondary">No results found</w3m-text>`:null} ${!m&&this.loading?y$1`<w3m-spinner></w3m-spinner>`:null}</div></w3m-modal-content>`}};X.styles=[g.globalCss,Or],ye([t$1()],X.prototype,"loading",2),ye([t$1()],X.prototype,"firstFetch",2),ye([t$1()],X.prototype,"search",2),ye([t$1()],X.prototype,"endReached",2),X=ye([e$2("w3m-wallet-explorer-view")],X);const Mr=i$6`w3m-modal-content{display:flex;max-height:55vh;overflow:scroll;scrollbar-width:none;position:relative;margin-top:1px}w3m-modal-content::after,w3m-modal-content::before{content:'';position:fixed;pointer-events:none;z-index:1;width:100%;height:20px;opacity:1}w3m-modal-content::before{box-shadow:0 -1px 0 0 var(--color-bg-1);background:linear-gradient(var(--color-bg-1),transparent)}w3m-modal-content::after{box-shadow:0 1px 0 0 var(--color-bg-1);background:linear-gradient(transparent,var(--color-bg-1));top:calc(100% - 20px)}w3m-modal-content::-webkit-scrollbar{display:none}.w3m-grid{display:grid;grid-template-columns:repeat(4,80px);justify-content:space-between;margin:-15px -10px}w3m-wallet-button{margin:calc((100% - 60px)/ 3) 0}`;var Wr=Object.defineProperty,Lr=Object.getOwnPropertyDescriptor,Et=(e,t,o,r)=>{for(var a=r>1?void 0:r?Lr(t,o):t,n=e.length-1,l;n>=0;n--)(l=e[n])&&(a=(r?l(t,o,a):l(a))||a);return r&&a&&Wr(t,o,a),a};let Te=class extends s$2{constructor(){super(...arguments),this.search="";}async onConnectPlatform({name:e,universal:t,native:o,walletId:r}){d.isMobile()?await h.handleMobileLinking({links:{native:o,universal:t},name:e,id:r}):y.push("DesktopConnector",{DesktopConnector:{name:e,walletId:r,universal:t,native:o}});}onSearchChange(e){const{value:t}=e.target;this.search=t;}render(){const e=h.getCustomWallets(),t=this.search.length?e.filter(o=>h.caseSafeIncludes(o.name,this.search)):e;return y$1`<w3m-modal-header><w3m-search-input .onChange="${this.onSearchChange.bind(this)}"></w3m-search-input></w3m-modal-header><w3m-modal-content><div class="w3m-grid">${t.map(({id:o,name:r,links:{native:a,universal:n}})=>y$1`<w3m-wallet-button walletId="${o}" name="${r}" .onClick="${async()=>this.onConnectPlatform({name:r,universal:n,native:a,walletId:o})}"></w3m-wallet-button>`)}</div></w3m-modal-content>`}};Te.styles=[g.globalCss,Mr],Et([t$1()],Te.prototype,"search",2),Te=Et([e$2("w3m-wallet-filter-view")],Te);

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null,
        get W3mAccountButton () { return Le; },
        get W3mConnectButton () { return re; },
        get W3mCoreButton () { return ne; },
        get W3mModal () { return le; },
        get W3mNetworkSwitch () { return ie; }
    });

    var l=Object.defineProperty,a=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,i=(t,e,o)=>e in t?l(t,e,{enumerable:!0,configurable:!0,writable:!0,value:o}):t[e]=o,b=(t,e)=>{for(var o in e||(e={}))s.call(e,o)&&i(t,o,e[o]);if(a)for(var o of a(e))c.call(e,o)&&i(t,o,e[o]);return t};class p{constructor(e){this.openModal=A.open,this.closeModal=A.close,this.subscribeModal=A.subscribe,this.setTheme=W.setThemeConfig,W.setConfig(b({enableStandaloneMode:!0},e)),this.initUi();}async initUi(){if(typeof window<"u"){await Promise.resolve().then(function () { return index; });const e=document.createElement("w3m-modal");document.body.insertAdjacentElement("beforeend",e);}}}

    class WCAccount extends BaseAccount {
        constructor(signClient, session) {
            var _a, _b, _c;
            const address = (_c = ((_b = ((_a = session.namespaces["eip155"].accounts[0]) !== null && _a !== void 0 ? _a : "").match(/eip155:1:(.+)/)) !== null && _b !== void 0 ? _b : [])[1]) !== null && _c !== void 0 ? _c : null;
            super(address);
            this.signClient = signClient;
            this.session = session;
        }
        get signer() {
            return new WCSigner(this.signClient, this.session, new JsonRpcProvider$1(networks.op.rpcUrls[0], networks.op));
        }
        async sign(tx) {
            const res = await this.signClient.request({
                topic: this.session.topic,
                chainId: 'eip155:1',
                request: {
                    id: 1,
                    jsonrpc: "2.0",
                    method: "eth_sendTransaction",
                    params: [{
                            from: this.address,
                            to: tx.to,
                            data: tx.data,
                            gasPrice: tx.gasPrice ? BigNumber.from(tx.gasPrice).toHexString() : undefined,
                            gasLimit: tx.gasLimit ? BigNumber.from(tx.gasLimit).toHexString() : undefined,
                            value: tx.value ? BigNumber.from(tx.value).toHexString() : undefined
                        }]
                }
            });
            return res.result;
        }
        async safeSendTransaction(transaction) {
            const tx = await resolveProperties(transaction);
            if (transactionHasChainId(tx)) {
                return await this.signer.sendTransaction(tx);
            }
            else {
                throw Object.assign(Object.assign({}, new Error("Transaction missing chainId")), { tx });
            }
        }
        async disconnect() {
            console.warn("Not implemented!");
        }
    }
    class WCSigner extends Signer {
        ///////////////////
        // Sub-classes MUST implement these
        // Returns the checksum address
        async getAddress() {
            return this._address;
        }
        // Returns the signed prefixed-message. This MUST treat:
        // - Bytes as a binary message
        // - string as a UTF8-message
        // i.e. "0x1234" is a SIX (6) byte string, NOT 2 bytes of data
        async signMessage(message) {
            const textEncoder = new TextEncoder();
            let bytes = typeof message === 'string' ? textEncoder.encode(message) : message;
            const res = await this.signClient.request({
                topic: this.session.topic,
                chainId: `eip155:${await this.chainId()}`,
                request: {
                    id: 1,
                    jsonrpc: "2.0",
                    method: "eth_signTransaction",
                    params: [this._address, hexlify(bytes)]
                }
            });
            return res.result;
        }
        // Signs a transaction and returns the fully serialized, signed transaction.
        // The EXACT transaction MUST be signed, and NO additional properties to be added.
        // - This MAY throw if signing transactions is not supports, but if
        //   it does, sentTransaction MUST be overridden.
        async signTransaction(transaction) {
            const res = await this.signClient.request({
                topic: this.session.topic,
                chainId: `eip155:${await this.chainId()}`,
                request: {
                    id: 1,
                    jsonrpc: "2.0",
                    method: "eth_signTransaction",
                    params: [{
                            from: await transaction.from,
                            to: await transaction.to,
                            data: await transaction.data,
                            gasPrice: await transaction.gasPrice ? BigNumber.from(await transaction.gasPrice).toHexString() : undefined,
                            gasLimit: await transaction.gasLimit ? BigNumber.from(await transaction.gasLimit).toHexString() : undefined,
                            value: await transaction.value ? BigNumber.from(await transaction.value).toHexString() : undefined
                        }]
                }
            });
            return res.result;
        }
        // Returns a new instance of the Signer, connected to provider.
        // This MAY throw if changing providers is not supported.
        connect(provider) {
            return new WCSigner(this.signClient, this.session, provider);
        }
        ///////////////////
        // Constructor
        constructor(signClient, session, provider) {
            var _a, _b, _c;
            super();
            this.signClient = signClient;
            this.session = session;
            this.provider = provider;
            this._address = (_c = ((_b = ((_a = session.namespaces["eip155"].accounts[0]) !== null && _a !== void 0 ? _a : "").match(/eip155:1:(.+)/)) !== null && _b !== void 0 ? _b : [])[1]) !== null && _c !== void 0 ? _c : null;
        }
        async chainId() {
            return (await this.provider.getNetwork()).chainId;
        }
    }

    class InjectedAccount extends BaseAccount {
        constructor(_signer, address) {
            _signer.getAddress().then(realAddress => {
                if (realAddress.toLowerCase() !== address.toLowerCase()) {
                    console.error("Address does not match! Disconnecting injected wallet...");
                    this.disconnect().catch(console.error);
                }
            });
            super(address);
            this._signer = _signer;
        }
        get signer() {
            return this._signer;
        }
        async safeSendTransaction(transaction) {
            const tx = await utils$5.resolveProperties(transaction);
            if (transactionHasChainId(tx)) {
                const chainId = await this._signer.getChainId();
                console.log(chainId, tx.chainId);
                if (chainId != tx.chainId) {
                    const hexChainId = `0x${tx.chainId.toString(16)}`;
                    const web3Provider = new Web3Provider(ethereum, "any");
                    try {
                        await web3Provider.send('wallet_switchEthereumChain', [{ chainId: hexChainId }]);
                    }
                    catch (switchError) {
                        // This error code indicates that the chain has not been added to MetaMask.
                        if (switchError && switchError.code === 4902) {
                            try {
                                if (!(tx.chainId in networks)) {
                                    throw new Error(`Chain, ${tx.chainId}, is not supported`);
                                }
                                const network = networks[tx.chainId];
                                await web3Provider.send('wallet_addEthereumChain', [{ chainName: network.name, chainId: hexChainId, rpcUrls: network.rpcUrls, nativeCurrency: network.nativeCurrency, blockExplorerUrls: network.blockExplorerUrls }]);
                            }
                            catch (addError) {
                                console.error(addError);
                            }
                        }
                        else {
                            console.error(switchError);
                        }
                    }
                    if (await this._signer.getChainId() !== tx.chainId) {
                        throw new Error(`Not connected to requested chain: ${tx.chainId}`);
                    }
                }
                // Send TX:
                return await this.signer.sendTransaction(tx);
            }
            else {
                throw Object.assign(Object.assign({}, new Error("Transaction missing chainId")), { tx });
            }
        }
        async disconnect() {
            // nothing needed
        }
    }

    /* src\components\ConnectOption.svelte generated by Svelte v3.55.0 */

    const file$i = "src\\components\\ConnectOption.svelte";
    const get_logo_slot_changes = dirty => ({});
    const get_logo_slot_context = ctx => ({});

    function create_fragment$k(ctx) {
    	let div;
    	let span;
    	let t0;
    	let button;
    	let t1;
    	let current;
    	let mounted;
    	let dispose;
    	const logo_slot_template = /*#slots*/ ctx[3].logo;
    	const logo_slot = create_slot(logo_slot_template, ctx, /*$$scope*/ ctx[2], get_logo_slot_context);

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			if (logo_slot) logo_slot.c();
    			t0 = space();
    			button = element("button");
    			t1 = text(/*name*/ ctx[0]);
    			attr_dev(span, "id", "logo");
    			attr_dev(span, "class", "svelte-14wbgej");
    			add_location(span, file$i, 6, 2, 171);
    			attr_dev(button, "class", "svelte-14wbgej");
    			add_location(button, file$i, 9, 2, 233);
    			attr_dev(div, "id", "container");
    			attr_dev(div, "class", "svelte-14wbgej");
    			add_location(div, file$i, 5, 0, 128);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);

    			if (logo_slot) {
    				logo_slot.m(span, null);
    			}

    			append_dev(div, t0);
    			append_dev(div, button);
    			append_dev(button, t1);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						button,
    						"click",
    						stop_propagation(function () {
    							if (is_function(/*onClick*/ ctx[1])) /*onClick*/ ctx[1].apply(this, arguments);
    						}),
    						false,
    						false,
    						true
    					),
    					listen_dev(
    						div,
    						"click",
    						function () {
    							if (is_function(/*onClick*/ ctx[1])) /*onClick*/ ctx[1].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (logo_slot) {
    				if (logo_slot.p && (!current || dirty & /*$$scope*/ 4)) {
    					update_slot_base(
    						logo_slot,
    						logo_slot_template,
    						ctx,
    						/*$$scope*/ ctx[2],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
    						: get_slot_changes(logo_slot_template, /*$$scope*/ ctx[2], dirty, get_logo_slot_changes),
    						get_logo_slot_context
    					);
    				}
    			}

    			if (!current || dirty & /*name*/ 1) set_data_dev(t1, /*name*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(logo_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(logo_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (logo_slot) logo_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ConnectOption', slots, ['logo']);
    	let { name } = $$props;
    	let { onClick } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (name === undefined && !('name' in $$props || $$self.$$.bound[$$self.$$.props['name']])) {
    			console.warn("<ConnectOption> was created without expected prop 'name'");
    		}

    		if (onClick === undefined && !('onClick' in $$props || $$self.$$.bound[$$self.$$.props['onClick']])) {
    			console.warn("<ConnectOption> was created without expected prop 'onClick'");
    		}
    	});

    	const writable_props = ['name', 'onClick'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ConnectOption> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    		if ('onClick' in $$props) $$invalidate(1, onClick = $$props.onClick);
    		if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ name, onClick });

    	$$self.$inject_state = $$props => {
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    		if ('onClick' in $$props) $$invalidate(1, onClick = $$props.onClick);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [name, onClick, $$scope, slots];
    }

    class ConnectOption extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$k, create_fragment$k, safe_not_equal, { name: 0, onClick: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ConnectOption",
    			options,
    			id: create_fragment$k.name
    		});
    	}

    	get name() {
    		throw new Error("<ConnectOption>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<ConnectOption>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onClick() {
    		throw new Error("<ConnectOption>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onClick(value) {
    		throw new Error("<ConnectOption>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\ConnectOverlay.svelte generated by Svelte v3.55.0 */

    const { Error: Error_1$3, Object: Object_1$1, console: console_1$5 } = globals;
    const file$h = "src\\components\\ConnectOverlay.svelte";

    // (163:0) {#if $connectionPromise && !web3ModalOpen}
    function create_if_block$4(ctx) {
    	let overlay;
    	let current;

    	overlay = new Overlay({
    			props: {
    				width: 300,
    				close: /*close*/ ctx[2],
    				$$slots: { default: [create_default_slot$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(overlay.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(overlay, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const overlay_changes = {};

    			if (dirty & /*$$scope*/ 4096) {
    				overlay_changes.$$scope = { dirty, ctx };
    			}

    			overlay.$set(overlay_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(overlay.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(overlay.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(overlay, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(163:0) {#if $connectionPromise && !web3ModalOpen}",
    		ctx
    	});

    	return block;
    }

    // (167:4) 
    function create_logo_slot_1(ctx) {
    	let i;

    	const block = {
    		c: function create() {
    			i = element("i");
    			attr_dev(i, "class", "icofont-wallet");
    			attr_dev(i, "slot", "logo");
    			set_style(i, "font-size", `32px`);
    			add_location(i, file$h, 166, 4, 6265);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    		},
    		p: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_logo_slot_1.name,
    		type: "slot",
    		source: "(167:4) ",
    		ctx
    	});

    	return block;
    }

    // (170:4) 
    function create_logo_slot(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "img/wc_logo.svg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "");
    			attr_dev(img, "slot", "logo");
    			add_location(img, file$h, 169, 4, 6446);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_logo_slot.name,
    		type: "slot",
    		source: "(170:4) ",
    		ctx
    	});

    	return block;
    }

    // (164:0) <Overlay width={300} {close}>
    function create_default_slot$4(ctx) {
    	let h3;
    	let t1;
    	let connectoption0;
    	let t2;
    	let connectoption1;
    	let current;

    	connectoption0 = new ConnectOption({
    			props: {
    				name: "Injected",
    				onClick: /*func*/ ctx[5],
    				$$slots: { logo: [create_logo_slot_1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	connectoption1 = new ConnectOption({
    			props: {
    				name: "Wallet Connect",
    				onClick: /*func_1*/ ctx[6],
    				$$slots: { logo: [create_logo_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			h3.textContent = "connect";
    			t1 = space();
    			create_component(connectoption0.$$.fragment);
    			t2 = space();
    			create_component(connectoption1.$$.fragment);
    			add_location(h3, file$h, 164, 2, 6150);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(connectoption0, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(connectoption1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const connectoption0_changes = {};

    			if (dirty & /*$$scope*/ 4096) {
    				connectoption0_changes.$$scope = { dirty, ctx };
    			}

    			connectoption0.$set(connectoption0_changes);
    			const connectoption1_changes = {};

    			if (dirty & /*$$scope*/ 4096) {
    				connectoption1_changes.$$scope = { dirty, ctx };
    			}

    			connectoption1.$set(connectoption1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(connectoption0.$$.fragment, local);
    			transition_in(connectoption1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(connectoption0.$$.fragment, local);
    			transition_out(connectoption1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    			if (detaching) detach_dev(t1);
    			destroy_component(connectoption0, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(connectoption1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$4.name,
    		type: "slot",
    		source: "(164:0) <Overlay width={300} {close}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$j(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*$connectionPromise*/ ctx[1] && !/*web3ModalOpen*/ ctx[0] && create_if_block$4(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error_1$3("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$connectionPromise*/ ctx[1] && !/*web3ModalOpen*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$connectionPromise, web3ModalOpen*/ 3) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$4(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    let resolveConnection;
    let stopConnecting;
    let connectionPromise = writable(null);

    const connect = () => {
    	let promise = get_store_value(connectionPromise);

    	if (!promise) {
    		promise = new Promise((resolve, reject) => {
    				resolveConnection = connected => {
    					account.set(connected);

    					if (get_store_value(connectionPromise)) {
    						connectionPromise.set(null);
    						resolve(connected);

    						pushNotification({
    							message: `<strong>Connected account:</strong> ${shortAddress(connected.address)}`,
    							type: "success"
    						});
    					}
    				};

    				stopConnecting = err => {
    					if (get_store_value(connectionPromise)) {
    						console.log("Setting null");
    						connectionPromise.set(null);
    						reject(err instanceof Error ? err : new Error(err));
    					}
    				};
    			});

    		connectionPromise.set(promise);
    	}

    	return promise;
    };

    const injectedSynced = writable(false);
    const walletConnectProjectId = "7e6fcc227cb1599585bb33cb400e6bf9";

    function instance$j($$self, $$props, $$invalidate) {
    	let $injectedSynced,
    		$$unsubscribe_injectedSynced = noop$2;

    	let $account;

    	let $connectionPromise,
    		$$unsubscribe_connectionPromise = noop$2;

    	validate_store(injectedSynced, 'injectedSynced');
    	component_subscribe($$self, injectedSynced, $$value => $$invalidate(8, $injectedSynced = $$value));
    	validate_store(account, 'account');
    	component_subscribe($$self, account, $$value => $$invalidate(9, $account = $$value));
    	validate_store(connectionPromise, 'connectionPromise');
    	component_subscribe($$self, connectionPromise, $$value => $$invalidate(1, $connectionPromise = $$value));
    	$$self.$$.on_destroy.push(() => $$unsubscribe_injectedSynced());
    	$$self.$$.on_destroy.push(() => $$unsubscribe_connectionPromise());
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ConnectOverlay', slots, []);
    	if (!le) throw new Error("Missing W3mModal import! This is necessary for rollup iife bundle creation.");

    	// Function to Close Overlay:
    	const close = () => {
    		stopConnecting("closed by user");
    	};

    	const chainList = ["eip155:1", "eip155:10", "eip155:137", "eip155:43114", "eip155:31337"];

    	const web3Modal = new p({
    			projectId: walletConnectProjectId,
    			standaloneChains: chainList,
    			themeColor: "blue",
    			themeBackground: "themeColor"
    		});

    	web3Modal.subscribeModal(({ open }) => $$invalidate(0, web3ModalOpen = open));
    	let web3ModalOpen = false;
    	let signClientWC = null;

    	const connectWC = async () => {
    		if (!signClientWC) {
    			signClientWC = await L$1.init({ projectId: walletConnectProjectId });

    			signClientWC.on("session_event", event => {
    				// Handle session events, such as "chainChanged", "accountsChanged", etc.
    				console.log(event);
    			});

    			signClientWC.on("session_update", ({ topic, params }) => {
    				try {
    					const { namespaces } = params;

    					const _session = signClientWC === null || signClientWC === void 0
    					? void 0
    					: signClientWC.session.get(topic);

    					// Overwrite the `namespaces` of the existing session with the incoming one.
    					const updatedSession = Object.assign(Object.assign({}, _session), { namespaces });

    					console.log("Updated Session: ", updatedSession);
    				} catch(err) {
    					console.warn("Error during session_update for topic: ", topic);
    					console.error(err);
    				}
    			});

    			signClientWC.on("session_delete", () => {
    				console.log("Session Deleted!");

    				// Session was deleted -> reset the dapp state, clean up from user session, etc.
    				if ($account instanceof WCAccount) {
    					set_store_value(account, $account = null, $account);
    				}
    			});
    		}

    		const { uri, approval } = await signClientWC.connect({
    			requiredNamespaces: {
    				eip155: {
    					methods: [
    						"eth_sendTransaction",
    						"eth_signTransaction",
    						"eth_sign",
    						"personal_sign",
    						"eth_signTypedData"
    					],
    					chains: chainList,
    					events: ["chainChanged", "accountsChanged"]
    				}
    			}
    		});

    		try {
    			if (uri) {
    				web3Modal.openModal({ uri, standaloneChains: chainList });
    			} else {
    				throw new Error("no URI provided...");
    			}

    			const session = await approval();
    			console.log(session);
    			resolveConnection(new WCAccount(signClientWC, session));
    		} catch(err) {
    			console.error(err);
    		} finally {
    			console.log("closed");
    			web3Modal.closeModal();
    		}
    	};

    	// Injected Wallet:
    	const connectInjected = async () => {
    		if (typeof window["ethereum"] === "undefined") {
    			throw new Error("missing ethereum interface on window");
    		}

    		const web3Provider = new Web3Provider(ethereum, "any");
    		await web3Provider.send("eth_requestAccounts", []);
    		const signer = web3Provider.getSigner();
    		resolveConnection(new InjectedAccount(signer, await signer.getAddress()));

    		// Also check if we are synced with the network and signer changes:
    		if (!$injectedSynced) {
    			try {
    				// Update signer on account change:
    				ethereum.on("accountsChanged", async () => {
    					if ($account instanceof InjectedAccount) {
    						$account === null || $account === void 0
    						? void 0
    						: $account.disconnect();

    						await connectInjected().catch(console.error);
    					}
    				});

    				set_store_value(injectedSynced, $injectedSynced = true, $injectedSynced);
    			} catch(err) {
    				console.error(err);
    			}
    		}
    	};

    	// On Destroy:
    	onDestroy(() => {
    		web3Modal.closeModal();
    	});

    	const writable_props = [];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$5.warn(`<ConnectOverlay> was created with unknown prop '${key}'`);
    	});

    	const func = () => {
    		connectInjected().catch(console.error);
    	};

    	const func_1 = () => {
    		connectWC().catch(console.error);
    	};

    	$$self.$capture_state = () => ({
    		get: get_store_value,
    		writable,
    		account,
    		pushNotification,
    		shortAddress,
    		resolveConnection,
    		stopConnecting,
    		connectionPromise,
    		connect,
    		injectedSynced,
    		Overlay,
    		SignClient: L$1,
    		W3mModal: le,
    		Web3Modal: p,
    		onDestroy,
    		WCAccount,
    		ethers: ethers$1,
    		InjectedAccount,
    		ConnectOption,
    		close,
    		walletConnectProjectId,
    		chainList,
    		web3Modal,
    		web3ModalOpen,
    		signClientWC,
    		connectWC,
    		connectInjected,
    		$injectedSynced,
    		$account,
    		$connectionPromise
    	});

    	$$self.$inject_state = $$props => {
    		if ('web3ModalOpen' in $$props) $$invalidate(0, web3ModalOpen = $$props.web3ModalOpen);
    		if ('signClientWC' in $$props) signClientWC = $$props.signClientWC;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		web3ModalOpen,
    		$connectionPromise,
    		close,
    		connectWC,
    		connectInjected,
    		func,
    		func_1
    	];
    }

    class ConnectOverlay extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$j, create_fragment$j, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ConnectOverlay",
    			options,
    			id: create_fragment$j.name
    		});
    	}
    }

    /* src\components\Account.svelte generated by Svelte v3.55.0 */

    const { console: console_1$4 } = globals;
    const file$g = "src\\components\\Account.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	child_ctx[19] = i;
    	return child_ctx;
    }

    // (101:0) {:else}
    function create_else_block$1(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = "connect";
    			add_location(button, file$g, 101, 0, 3240);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler_5*/ ctx[13], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$2,
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(101:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (58:0) {#if $account}
    function create_if_block_1$2(ctx) {
    	let div;
    	let img;
    	let img_src_value;
    	let t;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*showAccountOptions*/ ctx[2] && create_if_block_2$2(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			img = element("img");
    			t = space();
    			if (if_block) if_block.c();
    			attr_dev(img, "id", "avatar");
    			attr_dev(img, "class", "btn border hover svelte-fgs69g");
    			if (!src_url_equal(img.src, img_src_value = /*$account*/ ctx[0].avatar)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "User Avatar");
    			attr_dev(img, "tabindex", "0");
    			attr_dev(img, "title", "account");
    			add_location(img, file$g, 62, 2, 2243);
    			attr_dev(div, "id", "account");
    			attr_dev(div, "class", "svelte-fgs69g");
    			toggle_class(div, "raised", /*showAccountOptions*/ ctx[2]);
    			add_location(div, file$g, 58, 0, 2102);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, img);
    			append_dev(div, t);
    			if (if_block) if_block.m(div, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(img, "click", stop_propagation(/*click_handler_2*/ ctx[9]), false, false, true),
    					listen_dev(img, "keydown", stop_propagation(ifEnter(/*keydown_handler_2*/ ctx[10])), false, false, true)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty & /*$account*/ 1 && !src_url_equal(img.src, img_src_value = /*$account*/ ctx[0].avatar)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (/*showAccountOptions*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*showAccountOptions*/ 4) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_2$2(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*showAccountOptions*/ 4) {
    				toggle_class(div, "raised", /*showAccountOptions*/ ctx[2]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(58:0) {#if $account}",
    		ctx
    	});

    	return block;
    }

    // (74:2) {#if showAccountOptions}
    function create_if_block_2$2(ctx) {
    	let div1;
    	let div0;
    	let promise;
    	let t0;
    	let button0;
    	let t2;
    	let button1;
    	let current;
    	let mounted;
    	let dispose;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block$1,
    		then: create_then_block$1,
    		catch: create_catch_block$1,
    		value: 20,
    		error: 21,
    		blocks: [,,,]
    	};

    	handle_promise(promise = /*$account*/ ctx[0].ensName(), info);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			info.block.c();
    			t0 = space();
    			button0 = element("button");
    			button0.textContent = "change avatar";
    			t2 = space();
    			button1 = element("button");
    			button1.textContent = "disconnect";
    			attr_dev(div0, "id", "address");
    			attr_dev(div0, "class", "svelte-fgs69g");
    			add_location(div0, file$g, 77, 4, 2689);
    			add_location(button0, file$g, 88, 4, 2988);
    			add_location(button1, file$g, 93, 4, 3108);
    			attr_dev(div1, "id", "options");
    			attr_dev(div1, "class", "svelte-fgs69g");
    			add_location(div1, file$g, 74, 2, 2581);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			info.block.m(div0, info.anchor = null);
    			info.mount = () => div0;
    			info.anchor = null;
    			append_dev(div1, t0);
    			append_dev(div1, button0);
    			append_dev(div1, t2);
    			append_dev(div1, button1);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler_3*/ ctx[11], false, false, false),
    					listen_dev(button1, "click", /*click_handler_4*/ ctx[12], false, false, false),
    					listen_dev(div1, "click", stop_propagation(/*click_handler*/ ctx[5]), false, false, true),
    					listen_dev(div1, "keydown", stop_propagation(/*keydown_handler*/ ctx[6]), false, false, true)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			info.ctx = ctx;

    			if (dirty & /*$account*/ 1 && promise !== (promise = /*$account*/ ctx[0].ensName()) && handle_promise(promise, info)) ; else {
    				update_await_block_branch(info, ctx, dirty);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.block);
    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < 3; i += 1) {
    				const block = info.blocks[i];
    				transition_out(block);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			info.block.d();
    			info.token = null;
    			info = null;
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(74:2) {#if showAccountOptions}",
    		ctx
    	});

    	return block;
    }

    // (83:6) {:catch err}
    function create_catch_block$1(ctx) {
    	let address;
    	let current;

    	address = new Address({
    			props: { address: /*$account*/ ctx[0].address },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(address.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(address, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const address_changes = {};
    			if (dirty & /*$account*/ 1) address_changes.address = /*$account*/ ctx[0].address;
    			address.$set(address_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(address.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(address.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(address, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block$1.name,
    		type: "catch",
    		source: "(83:6) {:catch err}",
    		ctx
    	});

    	return block;
    }

    // (81:6) {:then name}
    function create_then_block$1(ctx) {
    	let address;
    	let current;

    	address = new Address({
    			props: {
    				address: /*$account*/ ctx[0].address,
    				name: /*name*/ ctx[20]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(address.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(address, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const address_changes = {};
    			if (dirty & /*$account*/ 1) address_changes.address = /*$account*/ ctx[0].address;
    			if (dirty & /*$account*/ 1) address_changes.name = /*name*/ ctx[20];
    			address.$set(address_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(address.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(address.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(address, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block$1.name,
    		type: "then",
    		source: "(81:6) {:then name}",
    		ctx
    	});

    	return block;
    }

    // (79:33)         <Address address={$account.address}
    function create_pending_block$1(ctx) {
    	let address;
    	let current;

    	address = new Address({
    			props: { address: /*$account*/ ctx[0].address },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(address.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(address, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const address_changes = {};
    			if (dirty & /*$account*/ 1) address_changes.address = /*$account*/ ctx[0].address;
    			address.$set(address_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(address.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(address.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(address, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block$1.name,
    		type: "pending",
    		source: "(79:33)         <Address address={$account.address}",
    		ctx
    	});

    	return block;
    }

    // (106:0) {#if showAvatarSelector}
    function create_if_block$3(ctx) {
    	let overlay;
    	let current;

    	overlay = new Overlay({
    			props: {
    				close: /*func*/ ctx[15],
    				width: 300,
    				$$slots: { default: [create_default_slot$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(overlay.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(overlay, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const overlay_changes = {};
    			if (dirty & /*showAvatarSelector*/ 8) overlay_changes.close = /*func*/ ctx[15];

    			if (dirty & /*$$scope, avatarList, $account, showAvatarSelector*/ 4194315) {
    				overlay_changes.$$scope = { dirty, ctx };
    			}

    			overlay.$set(overlay_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(overlay.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(overlay.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(overlay, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(106:0) {#if showAvatarSelector}",
    		ctx
    	});

    	return block;
    }

    // (113:4) {#each avatarList as avatar, i}
    function create_each_block$1(ctx) {
    	let button;
    	let img;
    	let img_src_value;
    	let t;
    	let mounted;
    	let dispose;

    	function click_handler_6() {
    		return /*click_handler_6*/ ctx[14](/*avatar*/ ctx[17]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			img = element("img");
    			t = space();
    			if (!src_url_equal(img.src, img_src_value = /*avatar*/ ctx[17])) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "avatar option #" + /*i*/ ctx[19]);
    			attr_dev(img, "class", "svelte-fgs69g");
    			add_location(img, file$g, 114, 8, 3808);
    			attr_dev(button, "class", "avatar-option svelte-fgs69g");
    			toggle_class(button, "selected", /*avatar*/ ctx[17] === /*$account*/ ctx[0]?.avatar);
    			add_location(button, file$g, 113, 6, 3635);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, img);
    			append_dev(button, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_6, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*avatarList*/ 2 && !src_url_equal(img.src, img_src_value = /*avatar*/ ctx[17])) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*avatarList, $account*/ 3) {
    				toggle_class(button, "selected", /*avatar*/ ctx[17] === /*$account*/ ctx[0]?.avatar);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(113:4) {#each avatarList as avatar, i}",
    		ctx
    	});

    	return block;
    }

    // (107:0) <Overlay close={() => showAvatarSelector = false} width={300}>
    function create_default_slot$3(ctx) {
    	let h3;
    	let t1;
    	let p;
    	let i;
    	let t2_value = /*avatarList*/ ctx[1].length + "";
    	let t2;
    	let t3;
    	let t4_value = (/*avatarList*/ ctx[1].length > 1 ? 's' : '') + "";
    	let t4;
    	let t5;
    	let t6;
    	let div;
    	let each_value = /*avatarList*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			h3.textContent = "select an avatar";
    			t1 = space();
    			p = element("p");
    			i = element("i");
    			t2 = text(t2_value);
    			t3 = text(" option");
    			t4 = text(t4_value);
    			t5 = text(" found");
    			t6 = space();
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			add_location(h3, file$g, 107, 2, 3441);
    			add_location(i, file$g, 109, 4, 3479);
    			add_location(p, file$g, 108, 2, 3470);
    			attr_dev(div, "id", "avatar-selector");
    			attr_dev(div, "class", "svelte-fgs69g");
    			add_location(div, file$g, 111, 2, 3564);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, p, anchor);
    			append_dev(p, i);
    			append_dev(i, t2);
    			append_dev(i, t3);
    			append_dev(i, t4);
    			append_dev(i, t5);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*avatarList*/ 2 && t2_value !== (t2_value = /*avatarList*/ ctx[1].length + "")) set_data_dev(t2, t2_value);
    			if (dirty & /*avatarList*/ 2 && t4_value !== (t4_value = (/*avatarList*/ ctx[1].length > 1 ? 's' : '') + "")) set_data_dev(t4, t4_value);

    			if (dirty & /*avatarList, $account, showAvatarSelector*/ 11) {
    				each_value = /*avatarList*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$3.name,
    		type: "slot",
    		source: "(107:0) <Overlay close={() => showAvatarSelector = false} width={300}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let current_block_type_index;
    	let if_block0;
    	let t;
    	let if_block1_anchor;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block_1$2, create_else_block$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$account*/ ctx[0]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let if_block1 = /*showAvatarSelector*/ ctx[3] && create_if_block$3(ctx);

    	const block = {
    		c: function create() {
    			if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, t, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(window, "click", /*click_handler_1*/ ctx[7], false, false, false),
    					listen_dev(window, "keydown", ifEnter(/*keydown_handler_1*/ ctx[8]), false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block0 = if_blocks[current_block_type_index];

    				if (!if_block0) {
    					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block0.c();
    				} else {
    					if_block0.p(ctx, dirty);
    				}

    				transition_in(if_block0, 1);
    				if_block0.m(t.parentNode, t);
    			}

    			if (/*showAvatarSelector*/ ctx[3]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*showAvatarSelector*/ 8) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$3(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(t);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const account = writable(null);

    const disconnect = async () => {
    	var _a;

    	return (_a = get_store_value(account)) === null || _a === void 0
    	? void 0
    	: _a.disconnect().then(() => {
    			account.set(null);
    		});
    };

    function instance$i($$self, $$props, $$invalidate) {
    	let $account,
    		$$unsubscribe_account = noop$2;

    	validate_store(account, 'account');
    	component_subscribe($$self, account, $$value => $$invalidate(0, $account = $$value));
    	$$self.$$.on_destroy.push(() => $$unsubscribe_account());
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Account', slots, []);
    	let avatarList = [];

    	async function resolveAccountAvatar(a) {
    		try {
    			// Set immediately available avatars:
    			$$invalidate(1, avatarList = [...new Set([a.avatar, a.defaultAvatar])]);

    			// Fetch other avatar options:
    			await a.allAvatars().then(avatars => {
    				// Check if active account is still the account we were fetching for:
    				if (a == $account) {
    					console.log("Fetched avatars:", avatars);

    					// Set avatar to highest weight uri (if not set before):
    					$$invalidate(1, avatarList = avatars.map(x => x.url));

    					if (avatarList.length > 0) {
    						if (!$account.storedAvatar && avatarList[0] !== $account.defaultAvatar) {
    							set_store_value(account, $account.avatar = avatarList[0], $account);
    						}
    					}
    				} else {
    					console.warn(`Loaded avatars for ${a.address}, which does not match ${$account === null || $account === void 0
					? void 0
					: $account.address}`);
    				}
    			});
    		} catch(err) {
    			console.error(err);
    		}
    	}

    	// UI Variables:
    	let showAccountOptions = false;

    	let showAvatarSelector = false;
    	const toggleAccountOptions = (state = !showAccountOptions) => $$invalidate(2, showAccountOptions = state);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$4.warn(`<Account> was created with unknown prop '${key}'`);
    	});

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function keydown_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	const click_handler_1 = () => toggleAccountOptions(false);
    	const keydown_handler_1 = () => toggleAccountOptions(false);
    	const click_handler_2 = () => toggleAccountOptions();
    	const keydown_handler_2 = () => toggleAccountOptions();
    	const click_handler_3 = () => $$invalidate(3, showAvatarSelector = true);
    	const click_handler_4 = () => disconnect().catch(console.error);
    	const click_handler_5 = () => connect().catch(console.error);
    	const click_handler_6 = avatar => $account && set_store_value(account, $account.avatar = avatar, $account) && $$invalidate(3, showAvatarSelector = false);
    	const func = () => $$invalidate(3, showAvatarSelector = false);

    	$$self.$capture_state = () => ({
    		get: get_store_value,
    		writable,
    		account,
    		disconnect,
    		ifEnter,
    		Address,
    		connect,
    		Overlay,
    		avatarList,
    		resolveAccountAvatar,
    		showAccountOptions,
    		showAvatarSelector,
    		toggleAccountOptions,
    		$account
    	});

    	$$self.$inject_state = $$props => {
    		if ('avatarList' in $$props) $$invalidate(1, avatarList = $$props.avatarList);
    		if ('showAccountOptions' in $$props) $$invalidate(2, showAccountOptions = $$props.showAccountOptions);
    		if ('showAvatarSelector' in $$props) $$invalidate(3, showAvatarSelector = $$props.showAvatarSelector);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$account*/ 1) {
    			$account && resolveAccountAvatar($account);
    		}
    	};

    	return [
    		$account,
    		avatarList,
    		showAccountOptions,
    		showAvatarSelector,
    		toggleAccountOptions,
    		click_handler,
    		keydown_handler,
    		click_handler_1,
    		keydown_handler_1,
    		click_handler_2,
    		keydown_handler_2,
    		click_handler_3,
    		click_handler_4,
    		click_handler_5,
    		click_handler_6,
    		func
    	];
    }

    class Account extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$i, create_fragment$i, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Account",
    			options,
    			id: create_fragment$i.name
    		});
    	}
    }

    /* src\components\game\UIButton.svelte generated by Svelte v3.55.0 */
    const file$f = "src\\components\\game\\UIButton.svelte";

    function create_fragment$h(ctx) {
    	let button_1;
    	let t_value = /*button*/ ctx[0].name + "";
    	let t;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button_1 = element("button");
    			t = text(t_value);
    			attr_dev(button_1, "class", "svelte-1imi2f8");
    			add_location(button_1, file$f, 13, 0, 388);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button_1, anchor);
    			append_dev(button_1, t);
    			/*button_1_binding*/ ctx[4](button_1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						button_1,
    						"click",
    						function () {
    							if (is_function(/*button*/ ctx[0].action)) /*button*/ ctx[0].action.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(button_1, "pointerenter", /*onHover*/ ctx[2], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			if (dirty & /*button*/ 1 && t_value !== (t_value = /*button*/ ctx[0].name + "")) set_data_dev(t, t_value);
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button_1);
    			/*button_1_binding*/ ctx[4](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$h($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('UIButton', slots, []);
    	let { button } = $$props;
    	let { selected = false } = $$props;
    	let buttonElement;

    	const onHover = () => {
    		buttonElement === null || buttonElement === void 0
    		? void 0
    		: buttonElement.focus();

    		selectMenuComponent(button);
    	};

    	$$self.$$.on_mount.push(function () {
    		if (button === undefined && !('button' in $$props || $$self.$$.bound[$$self.$$.props['button']])) {
    			console.warn("<UIButton> was created without expected prop 'button'");
    		}
    	});

    	const writable_props = ['button', 'selected'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UIButton> was created with unknown prop '${key}'`);
    	});

    	function button_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			buttonElement = $$value;
    			$$invalidate(1, buttonElement);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('button' in $$props) $$invalidate(0, button = $$props.button);
    		if ('selected' in $$props) $$invalidate(3, selected = $$props.selected);
    	};

    	$$self.$capture_state = () => ({
    		selectMenuComponent,
    		button,
    		selected,
    		buttonElement,
    		onHover
    	});

    	$$self.$inject_state = $$props => {
    		if ('button' in $$props) $$invalidate(0, button = $$props.button);
    		if ('selected' in $$props) $$invalidate(3, selected = $$props.selected);
    		if ('buttonElement' in $$props) $$invalidate(1, buttonElement = $$props.buttonElement);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*selected, buttonElement*/ 10) {
    			if (selected && buttonElement) buttonElement.focus();
    		}
    	};

    	return [button, buttonElement, onHover, selected, button_1_binding];
    }

    class UIButton extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$h, create_fragment$h, safe_not_equal, { button: 0, selected: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "UIButton",
    			options,
    			id: create_fragment$h.name
    		});
    	}

    	get button() {
    		throw new Error("<UIButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set button(value) {
    		throw new Error("<UIButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selected() {
    		throw new Error("<UIButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selected(value) {
    		throw new Error("<UIButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\game\Menu.svelte generated by Svelte v3.55.0 */

    const { Error: Error_1$2 } = globals;
    const file$e = "src\\components\\game\\Menu.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[4] = list[i];
    	child_ctx[6] = i;
    	return child_ctx;
    }

    // (21:2) {#if component.type === "button"}
    function create_if_block$2(ctx) {
    	let uibuttonsvelte;
    	let current;

    	uibuttonsvelte = new UIButton({
    			props: {
    				button: /*asButton*/ ctx[2](/*component*/ ctx[4]),
    				selected: /*$menuSelectedIndex*/ ctx[0] == /*i*/ ctx[6]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(uibuttonsvelte.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(uibuttonsvelte, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const uibuttonsvelte_changes = {};
    			if (dirty & /*$menuComponents*/ 2) uibuttonsvelte_changes.button = /*asButton*/ ctx[2](/*component*/ ctx[4]);
    			if (dirty & /*$menuSelectedIndex*/ 1) uibuttonsvelte_changes.selected = /*$menuSelectedIndex*/ ctx[0] == /*i*/ ctx[6];
    			uibuttonsvelte.$set(uibuttonsvelte_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(uibuttonsvelte.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(uibuttonsvelte.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(uibuttonsvelte, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(21:2) {#if component.type === \\\"button\\\"}",
    		ctx
    	});

    	return block;
    }

    // (20:2) {#each $menuComponents as component, i}
    function create_each_block(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*component*/ ctx[4].type === "button" && create_if_block$2(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*component*/ ctx[4].type === "button") {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$menuComponents*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$2(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(20:2) {#each $menuComponents as component, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let div;
    	let h3;
    	let t1;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value = /*$menuComponents*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div = element("div");
    			h3 = element("h3");
    			h3.textContent = "menu";
    			t1 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			add_location(h3, file$e, 18, 2, 607);
    			attr_dev(div, "id", "menu");
    			attr_dev(div, "class", "svelte-16a52jo");
    			add_location(div, file$e, 17, 0, 567);
    		},
    		l: function claim(nodes) {
    			throw new Error_1$2("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    			append_dev(div, t1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "keydown", /*keyDown*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*asButton, $menuComponents, $menuSelectedIndex*/ 7) {
    				each_value = /*$menuComponents*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let $menuSelectedIndex;
    	let $menuComponents;
    	validate_store(menuSelectedIndex, 'menuSelectedIndex');
    	component_subscribe($$self, menuSelectedIndex, $$value => $$invalidate(0, $menuSelectedIndex = $$value));
    	validate_store(menuComponents, 'menuComponents');
    	component_subscribe($$self, menuComponents, $$value => $$invalidate(1, $menuComponents = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Menu', slots, []);

    	const asButton = component => {
    		if (component.type === "button") return component;
    		throw new Error("expected button");
    	};

    	const keyDown = e => {
    		if (e.key === "ArrowUp") {
    			set_store_value(menuSelectedIndex, $menuSelectedIndex = Math.max(0, $menuSelectedIndex - 1), $menuSelectedIndex);
    		} else if (e.key === "ArrowDown") {
    			set_store_value(menuSelectedIndex, $menuSelectedIndex = Math.min($menuComponents.length - 1, $menuSelectedIndex + 1), $menuSelectedIndex);
    		}
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Menu> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		menuComponents,
    		menuSelectedIndex,
    		UIButtonSvelte: UIButton,
    		asButton,
    		keyDown,
    		$menuSelectedIndex,
    		$menuComponents
    	});

    	return [$menuSelectedIndex, $menuComponents, asButton, keyDown];
    }

    class Menu extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$g, create_fragment$g, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Menu",
    			options,
    			id: create_fragment$g.name
    		});
    	}
    }

    /* src\components\game\Environment.svelte generated by Svelte v3.55.0 */

    const file$d = "src\\components\\game\\Environment.svelte";

    function create_fragment$f(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "id", "background");
    			if (!src_url_equal(img.src, img_src_value = "assets/environments/" + /*environmentId*/ ctx[0] + "/environment.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "background environment");
    			attr_dev(img, "class", "svelte-1mmlcmo");
    			add_location(img, file$d, 5, 0, 100);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*environmentId*/ 1 && !src_url_equal(img.src, img_src_value = "assets/environments/" + /*environmentId*/ ctx[0] + "/environment.png")) {
    				attr_dev(img, "src", img_src_value);
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Environment', slots, []);
    	let { environmentId } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (environmentId === undefined && !('environmentId' in $$props || $$self.$$.bound[$$self.$$.props['environmentId']])) {
    			console.warn("<Environment> was created without expected prop 'environmentId'");
    		}
    	});

    	const writable_props = ['environmentId'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Environment> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('environmentId' in $$props) $$invalidate(0, environmentId = $$props.environmentId);
    	};

    	$$self.$capture_state = () => ({ environmentId });

    	$$self.$inject_state = $$props => {
    		if ('environmentId' in $$props) $$invalidate(0, environmentId = $$props.environmentId);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [environmentId];
    }

    class Environment extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, { environmentId: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Environment",
    			options,
    			id: create_fragment$f.name
    		});
    	}

    	get environmentId() {
    		throw new Error("<Environment>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set environmentId(value) {
    		throw new Error("<Environment>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\game\Poolygotchi.svelte generated by Svelte v3.55.0 */

    const { Object: Object_1, console: console_1$3 } = globals;

    const file$c = "src\\components\\game\\Poolygotchi.svelte";

    function create_fragment$e(ctx) {
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let style_transition_duration = `${/*walkingDuration*/ ctx[1]}s`;
    	let style_transform = `translateX(-50%) scaleX(${/*direction*/ ctx[3]})`;
    	let style_left = `${20 + 60 * /*x*/ ctx[2]}%`;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "id", "poolygotchi");
    			if (!src_url_equal(img.src, img_src_value = /*animation*/ ctx[4].src)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = "Poolygotchi of " + /*poolygotchi*/ ctx[0].address.slice(0, 6) + "...");
    			attr_dev(img, "class", "svelte-fz0wdo");
    			set_style(img, "transition-duration", style_transition_duration);
    			set_style(img, "transform", style_transform);
    			set_style(img, "left", style_left);
    			add_location(img, file$c, 88, 0, 3016);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*animation*/ 16 && !src_url_equal(img.src, img_src_value = /*animation*/ ctx[4].src)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*poolygotchi*/ 1 && img_alt_value !== (img_alt_value = "Poolygotchi of " + /*poolygotchi*/ ctx[0].address.slice(0, 6) + "...")) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if (dirty & /*walkingDuration*/ 2 && style_transition_duration !== (style_transition_duration = `${/*walkingDuration*/ ctx[1]}s`)) {
    				set_style(img, "transition-duration", style_transition_duration);
    			}

    			if (dirty & /*direction*/ 8 && style_transform !== (style_transform = `translateX(-50%) scaleX(${/*direction*/ ctx[3]})`)) {
    				set_style(img, "transform", style_transform);
    			}

    			if (dirty & /*x*/ 4 && style_left !== (style_left = `${20 + 60 * /*x*/ ctx[2]}%`)) {
    				set_style(img, "left", style_left);
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let animation;
    	let $menuComponents;
    	let $menuSelectedIndex;
    	let $buttons;
    	validate_store(menuComponents, 'menuComponents');
    	component_subscribe($$self, menuComponents, $$value => $$invalidate(8, $menuComponents = $$value));
    	validate_store(menuSelectedIndex, 'menuSelectedIndex');
    	component_subscribe($$self, menuSelectedIndex, $$value => $$invalidate(9, $menuSelectedIndex = $$value));
    	validate_store(buttons, 'buttons');
    	component_subscribe($$self, buttons, $$value => $$invalidate(10, $buttons = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Poolygotchi', slots, []);
    	let { poolygotchi } = $$props;

    	// Variables:
    	let animations = {
    		crying: new Image(),
    		happy: new Image(),
    		neutral: new Image(),
    		sad: new Image(),
    		sleeping: new Image(),
    		walking: new Image()
    	};

    	let healthFactor = 1;
    	let state = 'neutral';
    	let walkingDuration = 1;
    	let x = 0.5;
    	let direction = 1;

    	// Function to update animation images from active poolygotchi
    	const updateAnimations = () => {
    		poolygotchi.data().then(data => {
    			console.log(data);

    			for (const key of Object.keys(animations)) {
    				const url = `assets/species/${data.speciesId.toString()}/${key}.gif`;
    				const image = new Image();
    				image.src = url;
    				$$invalidate(5, animations[key] = image, animations);
    			}

    			console.log(animations);
    			poolygotchi.healthFactor().then(res => healthFactor = res).catch(console.error);
    		}).catch(console.error);
    	};

    	// Decision loop:
    	const timer = setInterval(
    		() => {
    			if (healthFactor < -2) {
    				$$invalidate(6, state = 'sleeping');
    			} else {
    				const possibleStates = ['neutral', 'walking'];
    				if (healthFactor >= 0) possibleStates.push('happy'); else possibleStates.push('sad');
    				if (healthFactor < -1) possibleStates.push('crying');
    				$$invalidate(6, state = possibleStates[Math.floor(Math.random() * possibleStates.length)]);

    				if (state === 'walking') {
    					const walkTo = Math.random();
    					$$invalidate(1, walkingDuration = Math.abs(walkTo - x) * 5);
    					if (walkTo > x) $$invalidate(3, direction = 1); else $$invalidate(3, direction = -1);
    					$$invalidate(2, x = walkTo);
    					setTimeout(() => $$invalidate(6, state = 'neutral'), walkingDuration * 1000);
    				} else if (state !== 'neutral') {
    					setTimeout(() => $$invalidate(6, state = 'neutral'), 2000);
    				}
    			}
    		},
    		6000
    	);

    	// On Mount:
    	onMount(() => {
    		set_store_value(
    			buttons,
    			$buttons = {
    				left: {
    					title: "Home",
    					class: "icofont-ui-home",
    					action: () => {
    						console.log("home");
    					}
    				},
    				middle: {
    					title: "Interact!",
    					class: "icofont-comment",
    					action: () => {
    						console.log("interact");
    					}
    				},
    				right: {
    					title: "Menu",
    					class: "icofont-navigation-menu",
    					action: () => showMenu.set(!get_store_value(showMenu))
    				}
    			},
    			$buttons
    		);

    		set_store_value(menuSelectedIndex, $menuSelectedIndex = 0, $menuSelectedIndex);

    		set_store_value(
    			menuComponents,
    			$menuComponents = [
    				{
    					type: "button",
    					name: "btn1",
    					action: () => {
    						console.log("btn1");
    					}
    				},
    				{
    					type: "button",
    					name: "btn2",
    					action: () => {
    						console.log("btn2");
    					}
    				},
    				{
    					type: "button",
    					name: "close",
    					action: () => showMenu.set(false)
    				}
    			],
    			$menuComponents
    		);
    	});

    	// On Destroy:
    	onDestroy(() => {
    		clearInterval(timer);
    		setDefaultUI();
    	});

    	$$self.$$.on_mount.push(function () {
    		if (poolygotchi === undefined && !('poolygotchi' in $$props || $$self.$$.bound[$$self.$$.props['poolygotchi']])) {
    			console_1$3.warn("<Poolygotchi> was created without expected prop 'poolygotchi'");
    		}
    	});

    	const writable_props = ['poolygotchi'];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$3.warn(`<Poolygotchi> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('poolygotchi' in $$props) $$invalidate(0, poolygotchi = $$props.poolygotchi);
    	};

    	$$self.$capture_state = () => ({
    		onDestroy,
    		onMount,
    		get: get_store_value,
    		buttons,
    		menuComponents,
    		menuSelectedIndex,
    		setDefaultUI,
    		showMenu,
    		poolygotchi,
    		animations,
    		healthFactor,
    		state,
    		walkingDuration,
    		x,
    		direction,
    		updateAnimations,
    		timer,
    		animation,
    		$menuComponents,
    		$menuSelectedIndex,
    		$buttons
    	});

    	$$self.$inject_state = $$props => {
    		if ('poolygotchi' in $$props) $$invalidate(0, poolygotchi = $$props.poolygotchi);
    		if ('animations' in $$props) $$invalidate(5, animations = $$props.animations);
    		if ('healthFactor' in $$props) healthFactor = $$props.healthFactor;
    		if ('state' in $$props) $$invalidate(6, state = $$props.state);
    		if ('walkingDuration' in $$props) $$invalidate(1, walkingDuration = $$props.walkingDuration);
    		if ('x' in $$props) $$invalidate(2, x = $$props.x);
    		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
    		if ('animation' in $$props) $$invalidate(4, animation = $$props.animation);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*poolygotchi*/ 1) {
    			// Reactive variables:
    			(updateAnimations());
    		}

    		if ($$self.$$.dirty & /*animations, state*/ 96) {
    			$$invalidate(4, animation = animations[state]);
    		}
    	};

    	return [poolygotchi, walkingDuration, x, direction, animation, animations, state];
    }

    class Poolygotchi extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, { poolygotchi: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Poolygotchi",
    			options,
    			id: create_fragment$e.name
    		});
    	}

    	get poolygotchi() {
    		throw new Error("<Poolygotchi>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set poolygotchi(value) {
    		throw new Error("<Poolygotchi>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\game\AccountSetup.svelte generated by Svelte v3.55.0 */

    const { Error: Error_1$1, console: console_1$2 } = globals;
    const file$b = "src\\components\\game\\AccountSetup.svelte";

    // (125:22) 
    function create_if_block_3(ctx) {
    	let div;
    	let button;
    	let img;
    	let img_src_value;
    	let t;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			button = element("button");
    			img = element("img");
    			t = text("\r\n        Hatch!");
    			if (!src_url_equal(img.src, img_src_value = "favicon.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "poolygotchi egg");
    			attr_dev(img, "class", "svelte-qadan4");
    			add_location(img, file$b, 127, 8, 4318);
    			attr_dev(button, "class", "svelte-qadan4");
    			add_location(button, file$b, 126, 6, 4283);
    			attr_dev(div, "id", "hatch");
    			attr_dev(div, "class", "svelte-qadan4");
    			add_location(div, file$b, 125, 4, 4259);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, button);
    			append_dev(button, img);
    			append_dev(button, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*hatch*/ ctx[11], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(125:22) ",
    		ctx
    	});

    	return block;
    }

    // (118:22) 
    function create_if_block_2$1(ctx) {
    	let h3;
    	let t1;
    	let div;
    	let img;
    	let img_src_value;
    	let t2;
    	let input;
    	let t3;
    	let strong;
    	let i;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			h3.textContent = "Set Your Goal";
    			t1 = space();
    			div = element("div");
    			img = element("img");
    			t2 = space();
    			input = element("input");
    			t3 = space();
    			strong = element("strong");
    			i = element("i");
    			i.textContent = "(per week)";
    			attr_dev(h3, "class", "svelte-qadan4");
    			add_location(h3, file$b, 118, 4, 3997);
    			if (!src_url_equal(img.src, img_src_value = "img/usdc.webp")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "USDC");
    			attr_dev(img, "class", "svelte-qadan4");
    			add_location(img, file$b, 120, 6, 4052);
    			attr_dev(input, "type", "number");
    			attr_dev(input, "placeholder", "Weekly Savings Goal");
    			attr_dev(input, "class", "svelte-qadan4");
    			add_location(input, file$b, 121, 6, 4096);
    			add_location(i, file$b, 122, 14, 4191);
    			add_location(strong, file$b, 122, 6, 4183);
    			attr_dev(div, "id", "goal-num");
    			attr_dev(div, "class", "svelte-qadan4");
    			add_location(div, file$b, 119, 4, 4025);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, img);
    			append_dev(div, t2);
    			append_dev(div, input);
    			set_input_value(input, /*weeklyGoal*/ ctx[3]);
    			append_dev(div, t3);
    			append_dev(div, strong);
    			append_dev(strong, i);

    			if (!mounted) {
    				dispose = listen_dev(input, "input", /*input_input_handler_1*/ ctx[13]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*weeklyGoal*/ 8 && to_number(input.value) !== /*weeklyGoal*/ ctx[3]) {
    				set_input_value(input, /*weeklyGoal*/ ctx[3]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(118:22) ",
    		ctx
    	});

    	return block;
    }

    // (111:22) 
    function create_if_block_1$1(ctx) {
    	let h3;
    	let t1;
    	let div;
    	let button0;
    	let i0;
    	let t2;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t3;
    	let button1;
    	let i1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			h3.textContent = "Select Your Environment";
    			t1 = space();
    			div = element("div");
    			button0 = element("button");
    			i0 = element("i");
    			t2 = space();
    			img = element("img");
    			t3 = space();
    			button1 = element("button");
    			i1 = element("i");
    			attr_dev(h3, "class", "svelte-qadan4");
    			add_location(h3, file$b, 111, 4, 3589);
    			attr_dev(i0, "class", "icofont-caret-left");
    			add_location(i0, file$b, 113, 41, 3692);
    			attr_dev(button0, "class", "svelte-qadan4");
    			add_location(button0, file$b, 113, 6, 3657);
    			attr_dev(img, "class", "environment svelte-qadan4");
    			if (!src_url_equal(img.src, img_src_value = "assets/environments/" + /*environmentId*/ ctx[2] + "/environment.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = "poolygotchi environment " + /*environmentId*/ ctx[2]);
    			add_location(img, file$b, 114, 6, 3741);
    			attr_dev(i1, "class", "icofont-caret-right");
    			add_location(i1, file$b, 115, 41, 3913);
    			attr_dev(button1, "class", "svelte-qadan4");
    			add_location(button1, file$b, 115, 6, 3878);
    			attr_dev(div, "class", "selector svelte-qadan4");
    			add_location(div, file$b, 112, 4, 3627);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, button0);
    			append_dev(button0, i0);
    			append_dev(div, t2);
    			append_dev(div, img);
    			append_dev(div, t3);
    			append_dev(div, button1);
    			append_dev(button1, i1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*prevEnvironment*/ ctx[9], false, false, false),
    					listen_dev(button1, "click", /*nextEnvironment*/ ctx[10], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*environmentId*/ 4 && !src_url_equal(img.src, img_src_value = "assets/environments/" + /*environmentId*/ ctx[2] + "/environment.png")) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*environmentId*/ 4 && img_alt_value !== (img_alt_value = "poolygotchi environment " + /*environmentId*/ ctx[2])) {
    				attr_dev(img, "alt", img_alt_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(111:22) ",
    		ctx
    	});

    	return block;
    }

    // (101:2) {#if page == 0}
    function create_if_block$1(ctx) {
    	let h3;
    	let t1;
    	let div1;
    	let div0;
    	let button0;
    	let i0;
    	let t2;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t3;
    	let button1;
    	let i1;
    	let t4;
    	let input;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			h3.textContent = "Choose Your Poolygotchi";
    			t1 = space();
    			div1 = element("div");
    			div0 = element("div");
    			button0 = element("button");
    			i0 = element("i");
    			t2 = space();
    			img = element("img");
    			t3 = space();
    			button1 = element("button");
    			i1 = element("i");
    			t4 = space();
    			input = element("input");
    			attr_dev(h3, "class", "svelte-qadan4");
    			add_location(h3, file$b, 101, 4, 3078);
    			attr_dev(i0, "class", "icofont-caret-left");
    			add_location(i0, file$b, 104, 39, 3207);
    			attr_dev(button0, "class", "svelte-qadan4");
    			add_location(button0, file$b, 104, 8, 3176);
    			attr_dev(img, "class", "poolygotchi svelte-qadan4");
    			if (!src_url_equal(img.src, img_src_value = "assets/species/" + /*speciesId*/ ctx[1] + "/neutral.gif")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = "poolygotchi species " + /*speciesId*/ ctx[1]);
    			add_location(img, file$b, 105, 8, 3258);
    			attr_dev(i1, "class", "icofont-caret-right");
    			add_location(i1, file$b, 106, 39, 3407);
    			attr_dev(button1, "class", "svelte-qadan4");
    			add_location(button1, file$b, 106, 8, 3376);
    			attr_dev(div0, "class", "selector svelte-qadan4");
    			add_location(div0, file$b, 103, 6, 3144);
    			attr_dev(input, "id", "name-input");
    			attr_dev(input, "type", "text");
    			attr_dev(input, "placeholder", "Name Tag");
    			attr_dev(input, "class", "svelte-qadan4");
    			add_location(input, file$b, 108, 6, 3471);
    			attr_dev(div1, "class", "column svelte-qadan4");
    			add_location(div1, file$b, 102, 4, 3116);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, button0);
    			append_dev(button0, i0);
    			append_dev(div0, t2);
    			append_dev(div0, img);
    			append_dev(div0, t3);
    			append_dev(div0, button1);
    			append_dev(button1, i1);
    			append_dev(div1, t4);
    			append_dev(div1, input);
    			set_input_value(input, /*name*/ ctx[0]);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*prevSpecies*/ ctx[7], false, false, false),
    					listen_dev(button1, "click", /*nextSpecies*/ ctx[8], false, false, false),
    					listen_dev(input, "input", /*input_input_handler*/ ctx[12])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*speciesId*/ 2 && !src_url_equal(img.src, img_src_value = "assets/species/" + /*speciesId*/ ctx[1] + "/neutral.gif")) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*speciesId*/ 2 && img_alt_value !== (img_alt_value = "poolygotchi species " + /*speciesId*/ ctx[1])) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if (dirty & /*name*/ 1 && input.value !== /*name*/ ctx[0]) {
    				set_input_value(input, /*name*/ ctx[0]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(101:2) {#if page == 0}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let div1;
    	let t0;
    	let div0;
    	let button0;
    	let t2;
    	let i;
    	let t3;
    	let t4_value = /*page*/ ctx[4] + 1 + "";
    	let t4;
    	let t5;
    	let t6;
    	let button1;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*page*/ ctx[4] == 0) return create_if_block$1;
    		if (/*page*/ ctx[4] == 1) return create_if_block_1$1;
    		if (/*page*/ ctx[4] == 2) return create_if_block_2$1;
    		if (/*page*/ ctx[4] == 3) return create_if_block_3;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type && current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			if (if_block) if_block.c();
    			t0 = space();
    			div0 = element("div");
    			button0 = element("button");
    			button0.textContent = "back";
    			t2 = space();
    			i = element("i");
    			t3 = text("Step ");
    			t4 = text(t4_value);
    			t5 = text(" of 4");
    			t6 = space();
    			button1 = element("button");
    			button1.textContent = "next";
    			attr_dev(button0, "class", "svelte-qadan4");
    			toggle_class(button0, "hidden", /*page*/ ctx[4] == 0);
    			add_location(button0, file$b, 133, 4, 4451);
    			add_location(i, file$b, 134, 4, 4519);
    			attr_dev(button1, "class", "svelte-qadan4");
    			toggle_class(button1, "hidden", /*page*/ ctx[4] == maxPage);
    			add_location(button1, file$b, 135, 4, 4552);
    			attr_dev(div0, "id", "page-selector");
    			attr_dev(div0, "class", "svelte-qadan4");
    			add_location(div0, file$b, 132, 2, 4421);
    			attr_dev(div1, "id", "container");
    			attr_dev(div1, "class", "svelte-qadan4");
    			add_location(div1, file$b, 99, 0, 3033);
    		},
    		l: function claim(nodes) {
    			throw new Error_1$1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, button0);
    			append_dev(div0, t2);
    			append_dev(div0, i);
    			append_dev(i, t3);
    			append_dev(i, t4);
    			append_dev(i, t5);
    			append_dev(div0, t6);
    			append_dev(div0, button1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*back*/ ctx[5], false, false, false),
    					listen_dev(button1, "click", /*next*/ ctx[6], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if (if_block) if_block.d(1);
    				if_block = current_block_type && current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div1, t0);
    				}
    			}

    			if (dirty & /*page*/ 16) {
    				toggle_class(button0, "hidden", /*page*/ ctx[4] == 0);
    			}

    			if (dirty & /*page*/ 16 && t4_value !== (t4_value = /*page*/ ctx[4] + 1 + "")) set_data_dev(t4, t4_value);

    			if (dirty & /*page, maxPage*/ 16) {
    				toggle_class(button1, "hidden", /*page*/ ctx[4] == maxPage);
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);

    			if (if_block) {
    				if_block.d();
    			}

    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const maxPage = 3;

    function instance$d($$self, $$props, $$invalidate) {
    	let $buttons;
    	let $menuComponents;
    	let $account;
    	let $poolygotchi;
    	validate_store(buttons, 'buttons');
    	component_subscribe($$self, buttons, $$value => $$invalidate(16, $buttons = $$value));
    	validate_store(menuComponents, 'menuComponents');
    	component_subscribe($$self, menuComponents, $$value => $$invalidate(17, $menuComponents = $$value));
    	validate_store(account, 'account');
    	component_subscribe($$self, account, $$value => $$invalidate(18, $account = $$value));
    	validate_store(poolygotchi, 'poolygotchi');
    	component_subscribe($$self, poolygotchi, $$value => $$invalidate(19, $poolygotchi = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AccountSetup', slots, []);
    	let name = "Anon Pooly";
    	let speciesId = 0;
    	let environmentId = 0;
    	let weeklyGoal = 100;

    	// Variables
    	let page = 0;

    	let numSpecies = 3;
    	let numEnvironments = 3;

    	// Navigation functions:
    	const back = () => {
    		if (page > 0) $$invalidate(4, page--, page);
    	};

    	const next = () => {
    		if (page < maxPage) $$invalidate(4, page++, page);
    	};

    	// Species Selectors:
    	const prevSpecies = () => {
    		$$invalidate(1, speciesId = BigNumber.from(speciesId).sub(1));
    		if (speciesId.lt(0)) $$invalidate(1, speciesId = BigNumber.from(numSpecies).sub(1));
    	};

    	const nextSpecies = () => {
    		$$invalidate(1, speciesId = BigNumber.from(speciesId).add(1));
    		if (speciesId.gte(numSpecies)) $$invalidate(1, speciesId = 0);
    	};

    	// Environment Selectors:
    	const prevEnvironment = () => {
    		$$invalidate(2, environmentId = BigNumber.from(environmentId).sub(1));
    		if (environmentId.lt(0)) $$invalidate(2, environmentId = BigNumber.from(numEnvironments).sub(1));
    	};

    	const nextEnvironment = () => {
    		$$invalidate(2, environmentId = BigNumber.from(environmentId).add(1));
    		if (environmentId.gte(numEnvironments)) $$invalidate(2, environmentId = 0);
    	};

    	// Hatch Function:
    	async function hatch() {
    		try {
    			if (!$account) throw new Error("missing account");
    			const address = $account.address;
    			const hatchTx = await Poolygotchi$1.contract().populateTransaction.hatch(name, speciesId, environmentId, BigNumber.from(Math.floor(weeklyGoal)).mul(10 ** 6), await PoolTogether.totalDeposited(address));
    			hatchTx.chainId = networks.poolygotchi.chainId;
    			console.log(hatchTx);
    			await (await $account.safeSendTransaction(hatchTx)).wait();
    			set_store_value(poolygotchi, $poolygotchi = await $account.poolygotchi(), $poolygotchi);
    		} catch(err) {
    			console.error(err);
    		}
    	}

    	// On Mount:
    	onMount(() => {
    		// Get accurate asset counts:
    		Poolygotchi$1.contract().numSpecies().then(num => numSpecies = num).catch(console.error);

    		Poolygotchi$1.contract().numEnvironments().then(num => numEnvironments = num).catch(console.error);

    		// Set menu options:
    		set_store_value(menuComponents, $menuComponents = [], $menuComponents);

    		// Set device buttons:
    		set_store_value(
    			buttons,
    			$buttons = {
    				left: {
    					title: "back",
    					class: "icofont-arrow-left",
    					action: back
    				},
    				middle: {
    					title: "cancel",
    					class: "icofont-ui-close",
    					action: disconnect
    				},
    				right: {
    					title: "next",
    					class: "icofont-arrow-right",
    					action: next
    				}
    			},
    			$buttons
    		);
    	});

    	// On Destroy:
    	onDestroy(() => {
    		setDefaultUI();
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$2.warn(`<AccountSetup> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		name = this.value;
    		$$invalidate(0, name);
    	}

    	function input_input_handler_1() {
    		weeklyGoal = to_number(this.value);
    		$$invalidate(3, weeklyGoal);
    	}

    	$$self.$capture_state = () => ({
    		BigNumber,
    		onMount,
    		account,
    		disconnect,
    		Poolygotchi: Poolygotchi$1,
    		buttons,
    		menuComponents,
    		poolygotchi,
    		setDefaultUI,
    		onDestroy,
    		PoolTogether,
    		networks,
    		name,
    		speciesId,
    		environmentId,
    		weeklyGoal,
    		page,
    		maxPage,
    		numSpecies,
    		numEnvironments,
    		back,
    		next,
    		prevSpecies,
    		nextSpecies,
    		prevEnvironment,
    		nextEnvironment,
    		hatch,
    		$buttons,
    		$menuComponents,
    		$account,
    		$poolygotchi
    	});

    	$$self.$inject_state = $$props => {
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    		if ('speciesId' in $$props) $$invalidate(1, speciesId = $$props.speciesId);
    		if ('environmentId' in $$props) $$invalidate(2, environmentId = $$props.environmentId);
    		if ('weeklyGoal' in $$props) $$invalidate(3, weeklyGoal = $$props.weeklyGoal);
    		if ('page' in $$props) $$invalidate(4, page = $$props.page);
    		if ('numSpecies' in $$props) numSpecies = $$props.numSpecies;
    		if ('numEnvironments' in $$props) numEnvironments = $$props.numEnvironments;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		name,
    		speciesId,
    		environmentId,
    		weeklyGoal,
    		page,
    		back,
    		next,
    		prevSpecies,
    		nextSpecies,
    		prevEnvironment,
    		nextEnvironment,
    		hatch,
    		input_input_handler,
    		input_input_handler_1
    	];
    }

    class AccountSetup extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AccountSetup",
    			options,
    			id: create_fragment$d.name
    		});
    	}
    }

    /* src\components\game\Welcome.svelte generated by Svelte v3.55.0 */

    const { console: console_1$1 } = globals;
    const file$a = "src\\components\\game\\Welcome.svelte";

    function create_fragment$c(ctx) {
    	let div;
    	let h3;
    	let t1;
    	let img;
    	let img_src_value;
    	let t2;
    	let p;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h3 = element("h3");
    			h3.textContent = "Welcome!";
    			t1 = space();
    			img = element("img");
    			t2 = space();
    			p = element("p");
    			p.textContent = "Connect to hatch a Poolygotchi!";
    			add_location(h3, file$a, 20, 2, 676);
    			attr_dev(img, "id", "welcome-pooly");
    			if (!src_url_equal(img.src, img_src_value = "assets/species/0/neutral.gif")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "pooly bird standing animation");
    			attr_dev(img, "class", "svelte-10i59ln");
    			add_location(img, file$a, 21, 2, 697);
    			add_location(p, file$a, 22, 2, 798);
    			attr_dev(div, "id", "container");
    			attr_dev(div, "class", "svelte-10i59ln");
    			add_location(div, file$a, 19, 0, 652);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    			append_dev(div, t1);
    			append_dev(div, img);
    			append_dev(div, t2);
    			append_dev(div, p);
    		},
    		p: noop$2,
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let $buttons;
    	validate_store(buttons, 'buttons');
    	component_subscribe($$self, buttons, $$value => $$invalidate(0, $buttons = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Welcome', slots, []);

    	onMount(() => {
    		set_store_value(
    			buttons,
    			$buttons = {
    				left: {
    					title: "-",
    					class: "icofont-minus",
    					action: () => null
    				},
    				middle: {
    					title: "connect",
    					class: "icofont-wallet",
    					action: () => connect().catch(console.error)
    				},
    				right: {
    					title: "about",
    					class: "icofont-question",
    					action: () => push("/about")
    				}
    			},
    			$buttons
    		);
    	});

    	onDestroy(() => {
    		setDefaultUI();
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<Welcome> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		onMount,
    		onDestroy,
    		push,
    		connect,
    		buttons,
    		setDefaultUI,
    		$buttons
    	});

    	return [];
    }

    class Welcome extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Welcome",
    			options,
    			id: create_fragment$c.name
    		});
    	}
    }

    /* src\components\game\Screen.svelte generated by Svelte v3.55.0 */
    const file$9 = "src\\components\\game\\Screen.svelte";

    // (28:2) {:else}
    function create_else_block(ctx) {
    	let welcome;
    	let current;
    	welcome = new Welcome({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(welcome.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(welcome, target, anchor);
    			current = true;
    		},
    		p: noop$2,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(welcome.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(welcome.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(welcome, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(28:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (26:21) 
    function create_if_block_2(ctx) {
    	let accountsetup;
    	let current;
    	accountsetup = new AccountSetup({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(accountsetup.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(accountsetup, target, anchor);
    			current = true;
    		},
    		p: noop$2,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(accountsetup.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(accountsetup.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(accountsetup, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(26:21) ",
    		ctx
    	});

    	return block;
    }

    // (16:2) {#if $poolygotchi}
    function create_if_block_1(ctx) {
    	let await_block_anchor;
    	let promise;
    	let current;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: false,
    		pending: create_pending_block,
    		then: create_then_block,
    		catch: create_catch_block,
    		value: 3,
    		blocks: [,,,]
    	};

    	handle_promise(promise = /*$poolygotchi*/ ctx[0].data(), info);

    	const block = {
    		c: function create() {
    			await_block_anchor = empty();
    			info.block.c();
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, await_block_anchor, anchor);
    			info.block.m(target, info.anchor = anchor);
    			info.mount = () => await_block_anchor.parentNode;
    			info.anchor = await_block_anchor;
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			info.ctx = ctx;

    			if (dirty & /*$poolygotchi*/ 1 && promise !== (promise = /*$poolygotchi*/ ctx[0].data()) && handle_promise(promise, info)) ; else {
    				update_await_block_branch(info, ctx, dirty);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.block);
    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < 3; i += 1) {
    				const block = info.blocks[i];
    				transition_out(block);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(await_block_anchor);
    			info.block.d(detaching);
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(16:2) {#if $poolygotchi}",
    		ctx
    	});

    	return block;
    }

    // (1:0) <!-- Component -->  <script type="ts">import { showMenu }
    function create_catch_block(ctx) {
    	const block = {
    		c: noop$2,
    		m: noop$2,
    		p: noop$2,
    		i: noop$2,
    		o: noop$2,
    		d: noop$2
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block.name,
    		type: "catch",
    		source: "(1:0) <!-- Component -->  <script type=\\\"ts\\\">import { showMenu }",
    		ctx
    	});

    	return block;
    }

    // (17:42)           <!-- Environment -->        <Environment environmentId={data.environmentId}
    function create_then_block(ctx) {
    	let environment;
    	let t;
    	let poolygotchi_1;
    	let current;

    	environment = new Environment({
    			props: {
    				environmentId: /*data*/ ctx[3].environmentId
    			},
    			$$inline: true
    		});

    	poolygotchi_1 = new Poolygotchi({
    			props: { poolygotchi: /*$poolygotchi*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(environment.$$.fragment);
    			t = space();
    			create_component(poolygotchi_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(environment, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(poolygotchi_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const environment_changes = {};
    			if (dirty & /*$poolygotchi*/ 1) environment_changes.environmentId = /*data*/ ctx[3].environmentId;
    			environment.$set(environment_changes);
    			const poolygotchi_1_changes = {};
    			if (dirty & /*$poolygotchi*/ 1) poolygotchi_1_changes.poolygotchi = /*$poolygotchi*/ ctx[0];
    			poolygotchi_1.$set(poolygotchi_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(environment.$$.fragment, local);
    			transition_in(poolygotchi_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(environment.$$.fragment, local);
    			transition_out(poolygotchi_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(environment, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(poolygotchi_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block.name,
    		type: "then",
    		source: "(17:42)           <!-- Environment -->        <Environment environmentId={data.environmentId}",
    		ctx
    	});

    	return block;
    }

    // (1:0) <!-- Component -->  <script type="ts">import { showMenu }
    function create_pending_block(ctx) {
    	const block = {
    		c: noop$2,
    		m: noop$2,
    		p: noop$2,
    		i: noop$2,
    		o: noop$2,
    		d: noop$2
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block.name,
    		type: "pending",
    		source: "(1:0) <!-- Component -->  <script type=\\\"ts\\\">import { showMenu }",
    		ctx
    	});

    	return block;
    }

    // (33:2) {#if $showMenu}
    function create_if_block(ctx) {
    	let menu;
    	let current;
    	menu = new Menu({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(menu.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(menu, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(menu.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(menu.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(menu, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(33:2) {#if $showMenu}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let div;
    	let current_block_type_index;
    	let if_block0;
    	let t;
    	let current;
    	const if_block_creators = [create_if_block_1, create_if_block_2, create_else_block];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$poolygotchi*/ ctx[0]) return 0;
    		if (/*$account*/ ctx[1]) return 1;
    		return 2;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let if_block1 = /*$showMenu*/ ctx[2] && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			attr_dev(div, "id", "screen");
    			attr_dev(div, "class", "svelte-tsg1pq");
    			add_location(div, file$9, 12, 0, 428);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if_blocks[current_block_type_index].m(div, null);
    			append_dev(div, t);
    			if (if_block1) if_block1.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block0 = if_blocks[current_block_type_index];

    				if (!if_block0) {
    					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block0.c();
    				} else {
    					if_block0.p(ctx, dirty);
    				}

    				transition_in(if_block0, 1);
    				if_block0.m(div, t);
    			}

    			if (/*$showMenu*/ ctx[2]) {
    				if (if_block1) {
    					if (dirty & /*$showMenu*/ 4) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_blocks[current_block_type_index].d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let $poolygotchi;
    	let $account;
    	let $showMenu;
    	validate_store(poolygotchi, 'poolygotchi');
    	component_subscribe($$self, poolygotchi, $$value => $$invalidate(0, $poolygotchi = $$value));
    	validate_store(account, 'account');
    	component_subscribe($$self, account, $$value => $$invalidate(1, $account = $$value));
    	validate_store(showMenu, 'showMenu');
    	component_subscribe($$self, showMenu, $$value => $$invalidate(2, $showMenu = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Screen', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Screen> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		showMenu,
    		poolygotchi,
    		account,
    		Menu,
    		Environment,
    		Poolygotchi,
    		AccountSetup,
    		Welcome,
    		$poolygotchi,
    		$account,
    		$showMenu
    	});

    	return [$poolygotchi, $account, $showMenu];
    }

    class Screen extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Screen",
    			options,
    			id: create_fragment$b.name
    		});
    	}
    }

    /* src\components\game\Buttons.svelte generated by Svelte v3.55.0 */

    const file$8 = "src\\components\\game\\Buttons.svelte";

    function create_fragment$a(ctx) {
    	let div;
    	let button0;
    	let i0;
    	let i0_class_value;
    	let button0_title_value;
    	let t0;
    	let button1;
    	let i1;
    	let i1_class_value;
    	let button1_title_value;
    	let t1;
    	let button2;
    	let i2;
    	let i2_class_value;
    	let button2_title_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			button0 = element("button");
    			i0 = element("i");
    			t0 = space();
    			button1 = element("button");
    			i1 = element("i");
    			t1 = space();
    			button2 = element("button");
    			i2 = element("i");
    			attr_dev(i0, "class", i0_class_value = /*buttons*/ ctx[0].left.class);
    			add_location(i0, file$8, 6, 82, 192);
    			attr_dev(button0, "title", button0_title_value = /*buttons*/ ctx[0].left.title);
    			attr_dev(button0, "id", "left-btn");
    			attr_dev(button0, "class", "svelte-v624e");
    			add_location(button0, file$8, 6, 2, 112);
    			attr_dev(i1, "class", i1_class_value = /*buttons*/ ctx[0].middle.class);
    			add_location(i1, file$8, 7, 88, 323);
    			attr_dev(button1, "title", button1_title_value = /*buttons*/ ctx[0].middle.title);
    			attr_dev(button1, "id", "middle-btn");
    			attr_dev(button1, "class", "svelte-v624e");
    			add_location(button1, file$8, 7, 2, 237);
    			attr_dev(i2, "class", i2_class_value = /*buttons*/ ctx[0].right.class);
    			add_location(i2, file$8, 8, 85, 453);
    			attr_dev(button2, "title", button2_title_value = /*buttons*/ ctx[0].right.title);
    			attr_dev(button2, "id", "right-btn");
    			attr_dev(button2, "class", "svelte-v624e");
    			add_location(button2, file$8, 8, 2, 370);
    			attr_dev(div, "id", "buttons");
    			attr_dev(div, "class", "svelte-v624e");
    			add_location(div, file$8, 5, 0, 90);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, button0);
    			append_dev(button0, i0);
    			append_dev(div, t0);
    			append_dev(div, button1);
    			append_dev(button1, i1);
    			append_dev(div, t1);
    			append_dev(div, button2);
    			append_dev(button2, i2);

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						button0,
    						"click",
    						function () {
    							if (is_function(/*buttons*/ ctx[0].left.action)) /*buttons*/ ctx[0].left.action.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button1,
    						"click",
    						function () {
    							if (is_function(/*buttons*/ ctx[0].middle.action)) /*buttons*/ ctx[0].middle.action.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button2,
    						"click",
    						function () {
    							if (is_function(/*buttons*/ ctx[0].right.action)) /*buttons*/ ctx[0].right.action.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (dirty & /*buttons*/ 1 && i0_class_value !== (i0_class_value = /*buttons*/ ctx[0].left.class)) {
    				attr_dev(i0, "class", i0_class_value);
    			}

    			if (dirty & /*buttons*/ 1 && button0_title_value !== (button0_title_value = /*buttons*/ ctx[0].left.title)) {
    				attr_dev(button0, "title", button0_title_value);
    			}

    			if (dirty & /*buttons*/ 1 && i1_class_value !== (i1_class_value = /*buttons*/ ctx[0].middle.class)) {
    				attr_dev(i1, "class", i1_class_value);
    			}

    			if (dirty & /*buttons*/ 1 && button1_title_value !== (button1_title_value = /*buttons*/ ctx[0].middle.title)) {
    				attr_dev(button1, "title", button1_title_value);
    			}

    			if (dirty & /*buttons*/ 1 && i2_class_value !== (i2_class_value = /*buttons*/ ctx[0].right.class)) {
    				attr_dev(i2, "class", i2_class_value);
    			}

    			if (dirty & /*buttons*/ 1 && button2_title_value !== (button2_title_value = /*buttons*/ ctx[0].right.title)) {
    				attr_dev(button2, "title", button2_title_value);
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Buttons', slots, []);
    	let { buttons } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (buttons === undefined && !('buttons' in $$props || $$self.$$.bound[$$self.$$.props['buttons']])) {
    			console.warn("<Buttons> was created without expected prop 'buttons'");
    		}
    	});

    	const writable_props = ['buttons'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Buttons> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('buttons' in $$props) $$invalidate(0, buttons = $$props.buttons);
    	};

    	$$self.$capture_state = () => ({ buttons });

    	$$self.$inject_state = $$props => {
    		if ('buttons' in $$props) $$invalidate(0, buttons = $$props.buttons);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [buttons];
    }

    class Buttons extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, { buttons: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Buttons",
    			options,
    			id: create_fragment$a.name
    		});
    	}

    	get buttons() {
    		throw new Error("<Buttons>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set buttons(value) {
    		throw new Error("<Buttons>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\game\Game.svelte generated by Svelte v3.55.0 */

    const { Error: Error_1, console: console_1 } = globals;
    const file$7 = "src\\components\\game\\Game.svelte";

    function create_fragment$9(ctx) {
    	let div1;
    	let div0;
    	let t0;
    	let screen;
    	let t1;
    	let buttons_1;
    	let current;
    	screen = new Screen({ $$inline: true });

    	buttons_1 = new Buttons({
    			props: { buttons: /*$buttons*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			t0 = space();
    			create_component(screen.$$.fragment);
    			t1 = space();
    			create_component(buttons_1.$$.fragment);
    			attr_dev(div0, "class", "case svelte-1l8jceb");
    			add_location(div0, file$7, 50, 2, 1577);
    			attr_dev(div1, "id", "device");
    			attr_dev(div1, "class", "svelte-1l8jceb");
    			add_location(div1, file$7, 49, 0, 1556);
    		},
    		l: function claim(nodes) {
    			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div1, t0);
    			mount_component(screen, div1, null);
    			append_dev(div1, t1);
    			mount_component(buttons_1, div1, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const buttons_1_changes = {};
    			if (dirty & /*$buttons*/ 1) buttons_1_changes.buttons = /*$buttons*/ ctx[0];
    			buttons_1.$set(buttons_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(screen.$$.fragment, local);
    			transition_in(buttons_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(screen.$$.fragment, local);
    			transition_out(buttons_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(screen);
    			destroy_component(buttons_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const DEFAULT_BUTTONS = {
    	left: {
    		title: "-",
    		class: "icofont-minus",
    		action: () => null
    	},
    	middle: {
    		title: "-",
    		class: "icofont-minus",
    		action: () => null
    	},
    	right: {
    		title: "-",
    		class: "icofont-minus",
    		action: () => null
    	}
    };

    const poolygotchi = writable(null);
    const viewingAsGuest = writable(false);
    const menuComponents = writable([]);
    const menuSelectedIndex = writable(0);
    const showMenu = writable(false);
    const buttons = writable(DEFAULT_BUTTONS);

    function selectMenuComponent(component) {
    	const index = get_store_value(menuComponents).indexOf(component);

    	if (index > -1) {
    		menuSelectedIndex.set(index);
    	} else {
    		throw new Error("Selecting non-existent component");
    	}
    }

    function setDefaultUI() {
    	menuComponents.set([]);
    	menuSelectedIndex.set(0);
    	buttons.set(DEFAULT_BUTTONS);
    }

    /* Subscriptions */
    account.subscribe(account => {
    	if (account) {
    		account.poolygotchi().then(poolygotchi.set).catch(console.error);
    	}
    });

    poolygotchi.subscribe(console.log);

    function instance$9($$self, $$props, $$invalidate) {
    	let $buttons,
    		$$unsubscribe_buttons = noop$2;

    	validate_store(buttons, 'buttons');
    	component_subscribe($$self, buttons, $$value => $$invalidate(0, $buttons = $$value));
    	$$self.$$.on_destroy.push(() => $$unsubscribe_buttons());
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Game', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<Game> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		get: get_store_value,
    		writable,
    		account,
    		DEFAULT_BUTTONS,
    		poolygotchi,
    		viewingAsGuest,
    		menuComponents,
    		menuSelectedIndex,
    		showMenu,
    		buttons,
    		selectMenuComponent,
    		setDefaultUI,
    		Screen,
    		Buttons,
    		$buttons
    	});

    	return [$buttons];
    }

    class Game extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Game",
    			options,
    			id: create_fragment$9.name
    		});
    	}
    }

    /* src\components\Main.svelte generated by Svelte v3.55.0 */
    const file$6 = "src\\components\\Main.svelte";

    function create_fragment$8(ctx) {
    	let main;
    	let main_intro;
    	let main_outro;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[1].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

    	const block = {
    		c: function create() {
    			main = element("main");
    			if (default_slot) default_slot.c();
    			attr_dev(main, "class", "margins");
    			add_location(main, file$6, 3, 0, 73);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);

    			if (default_slot) {
    				default_slot.m(main, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[0],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[0])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[0], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);

    			add_render_callback(() => {
    				if (main_outro) main_outro.end(1);
    				main_intro = create_in_transition(main, fly, { delay: 200, duration: 400, y: -20 });
    				main_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			if (main_intro) main_intro.invalidate();
    			main_outro = create_out_transition(main, fly, { duration: 200, y: 20 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			if (default_slot) default_slot.d(detaching);
    			if (detaching && main_outro) main_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, ['default']);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate(0, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ fly });
    	return [$$scope, slots];
    }

    class Main extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$8.name
    		});
    	}
    }

    /* src\routes\Home.svelte generated by Svelte v3.55.0 */
    const file$5 = "src\\routes\\Home.svelte";

    // (5:0) <Main>
    function create_default_slot$2(ctx) {
    	let section;
    	let game;
    	let current;
    	game = new Game({ $$inline: true });

    	const block = {
    		c: function create() {
    			section = element("section");
    			create_component(game.$$.fragment);
    			attr_dev(section, "class", "center-content");
    			add_location(section, file$5, 5, 2, 140);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			mount_component(game, section, null);
    			current = true;
    		},
    		p: noop$2,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(game.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(game.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(game);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(5:0) <Main>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let main;
    	let current;

    	main = new Main({
    			props: {
    				$$slots: { default: [create_default_slot$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(main.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(main, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const main_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				main_changes.$$scope = { dirty, ctx };
    			}

    			main.$set(main_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(main.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(main.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(main, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Home', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Home> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Game, Main });
    	return [];
    }

    class Home extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Home",
    			options,
    			id: create_fragment$7.name
    		});
    	}
    }

    /* src\routes\About.svelte generated by Svelte v3.55.0 */
    const file$4 = "src\\routes\\About.svelte";

    // (5:0) <Main>
    function create_default_slot$1(ctx) {
    	let section0;
    	let h2;
    	let t1;
    	let p0;
    	let t2;
    	let a0;
    	let t4;
    	let t5;
    	let p1;
    	let t6;
    	let a1;
    	let t8;
    	let t9;
    	let section1;
    	let object;
    	let a2;

    	const block = {
    		c: function create() {
    			section0 = element("section");
    			h2 = element("h2");
    			h2.textContent = "About the Game";
    			t1 = space();
    			p0 = element("p");
    			t2 = text("Poolygotchi is a gamified interface for the ");
    			a0 = element("a");
    			a0.textContent = "PoolTogether Protocol";
    			t4 = text(" that is designed to help you save money and meet your personal goals through the support of your digital poolygotchi.");
    			t5 = space();
    			p1 = element("p");
    			t6 = text("This is an open source project created by the PoolTogether community and funded by an Optimism grant through ");
    			a1 = element("a");
    			a1.textContent = "PoolTogether Inc.";
    			t8 = text(" The following is the original project proposal and grant request:");
    			t9 = space();
    			section1 = element("section");
    			object = element("object");
    			a2 = element("a");
    			a2.textContent = "Poolygotchi Project Proposal.pdf";
    			attr_dev(h2, "class", "center-content");
    			add_location(h2, file$4, 6, 4, 144);
    			attr_dev(a0, "rel", "noreferrer");
    			attr_dev(a0, "href", "https://docs.pooltogether.com/welcome/master");
    			attr_dev(a0, "target", "_blank");
    			add_location(a0, file$4, 8, 50, 251);
    			attr_dev(p0, "class", "svelte-snphpj");
    			add_location(p0, file$4, 7, 4, 196);
    			attr_dev(a1, "rel", "noreferrer");
    			attr_dev(a1, "href", "https://pooltogether.com/");
    			attr_dev(a1, "target", "_blank");
    			add_location(a1, file$4, 11, 115, 620);
    			attr_dev(p1, "class", "svelte-snphpj");
    			add_location(p1, file$4, 10, 4, 500);
    			attr_dev(section0, "class", "content-box");
    			set_style(section0, "margin-bottom", `2rem`);
    			add_location(section0, file$4, 5, 2, 82);
    			attr_dev(a2, "href", "files/poolygotchi_project_proposal_v1.2.pdf");
    			attr_dev(a2, "target", "_blank");
    			add_location(a2, file$4, 17, 6, 989);
    			attr_dev(object, "id", "proposal");
    			attr_dev(object, "title", "Poolygotchi Project proposal");
    			attr_dev(object, "data", "./files/poolygotchi_project_proposal_v1.2.pdf");
    			attr_dev(object, "width", "720");
    			attr_dev(object, "height", "800");
    			attr_dev(object, "class", "svelte-snphpj");
    			add_location(object, file$4, 16, 4, 844);
    			attr_dev(section1, "class", "center-content");
    			add_location(section1, file$4, 15, 2, 806);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section0, anchor);
    			append_dev(section0, h2);
    			append_dev(section0, t1);
    			append_dev(section0, p0);
    			append_dev(p0, t2);
    			append_dev(p0, a0);
    			append_dev(p0, t4);
    			append_dev(section0, t5);
    			append_dev(section0, p1);
    			append_dev(p1, t6);
    			append_dev(p1, a1);
    			append_dev(p1, t8);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, section1, anchor);
    			append_dev(section1, object);
    			append_dev(object, a2);
    		},
    		p: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section0);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(section1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(5:0) <Main>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let main;
    	let current;

    	main = new Main({
    			props: {
    				$$slots: { default: [create_default_slot$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(main.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(main, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const main_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				main_changes.$$scope = { dirty, ctx };
    			}

    			main.$set(main_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(main.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(main.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(main, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('About', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<About> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Main });
    	return [];
    }

    class About extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "About",
    			options,
    			id: create_fragment$6.name
    		});
    	}
    }

    /* src\routes\NotFound.svelte generated by Svelte v3.55.0 */
    const file$3 = "src\\routes\\NotFound.svelte";

    // (5:0) <Main>
    function create_default_slot(ctx) {
    	let h1;
    	let t1;
    	let p;

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Whoops!";
    			t1 = space();
    			p = element("p");
    			p.textContent = "The page you are looking for doesn't seem to exist!";
    			add_location(h1, file$3, 5, 2, 82);
    			add_location(p, file$3, 6, 2, 102);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, p, anchor);
    		},
    		p: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(5:0) <Main>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let main;
    	let current;

    	main = new Main({
    			props: {
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(main.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(main, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const main_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				main_changes.$$scope = { dirty, ctx };
    			}

    			main.$set(main_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(main.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(main.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(main, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NotFound', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NotFound> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Main });
    	return [];
    }

    class NotFound extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NotFound",
    			options,
    			id: create_fragment$5.name
    		});
    	}
    }

    const routes = {
        "/": Home,
        "/about": About,
        "*": NotFound
    };
    const page = writable(null);

    /* src\components\Nav.svelte generated by Svelte v3.55.0 */
    const file$2 = "src\\components\\Nav.svelte";

    function create_fragment$4(ctx) {
    	let t0;
    	let nav_1;
    	let account;
    	let t1;
    	let a0;
    	let t3;
    	let a1;
    	let current;
    	let mounted;
    	let dispose;
    	account = new Account({ $$inline: true });

    	const block = {
    		c: function create() {
    			t0 = space();
    			nav_1 = element("nav");
    			create_component(account.$$.fragment);
    			t1 = space();
    			a0 = element("a");
    			a0.textContent = "play";
    			t3 = space();
    			a1 = element("a");
    			a1.textContent = "about";
    			attr_dev(a0, "class", "btn");
    			attr_dev(a0, "href", "/");
    			toggle_class(a0, "outline", /*$page*/ ctx[2]?.location === "/");
    			add_location(a0, file$2, 24, 2, 677);
    			attr_dev(a1, "class", "btn");
    			attr_dev(a1, "href", "/about");
    			toggle_class(a1, "outline", /*$page*/ ctx[2]?.location === "/about");
    			add_location(a1, file$2, 25, 2, 762);
    			attr_dev(nav_1, "class", "margins svelte-1aqsiax");
    			toggle_class(nav_1, "sticky", /*stickyNav*/ ctx[1]);
    			add_location(nav_1, file$2, 22, 0, 597);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, nav_1, anchor);
    			mount_component(account, nav_1, null);
    			append_dev(nav_1, t1);
    			append_dev(nav_1, a0);
    			append_dev(nav_1, t3);
    			append_dev(nav_1, a1);
    			/*nav_1_binding*/ ctx[4](nav_1);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(document.body, "scroll", /*checkSticky*/ ctx[3], false, false, false),
    					action_destroyer(link.call(null, a0)),
    					action_destroyer(link.call(null, a1))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*$page*/ 4) {
    				toggle_class(a0, "outline", /*$page*/ ctx[2]?.location === "/");
    			}

    			if (!current || dirty & /*$page*/ 4) {
    				toggle_class(a1, "outline", /*$page*/ ctx[2]?.location === "/about");
    			}

    			if (!current || dirty & /*stickyNav*/ 2) {
    				toggle_class(nav_1, "sticky", /*stickyNav*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(account.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(account.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(nav_1);
    			destroy_component(account);
    			/*nav_1_binding*/ ctx[4](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let $page;
    	validate_store(page, 'page');
    	component_subscribe($$self, page, $$value => $$invalidate(2, $page = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Nav', slots, []);
    	let nav;
    	let stickyNav = false;
    	let checkingSticky = false;

    	const checkSticky = () => {
    		if (nav && !checkingSticky) {
    			checkingSticky = true;
    			const bb = nav.getBoundingClientRect();
    			$$invalidate(1, stickyNav = bb.top == 0);
    			requestAnimationFrame(() => checkingSticky = false);
    		}
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Nav> was created with unknown prop '${key}'`);
    	});

    	function nav_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			nav = $$value;
    			$$invalidate(0, nav);
    		});
    	}

    	$$self.$capture_state = () => ({
    		link,
    		page,
    		Account,
    		nav,
    		stickyNav,
    		checkingSticky,
    		checkSticky,
    		$page
    	});

    	$$self.$inject_state = $$props => {
    		if ('nav' in $$props) $$invalidate(0, nav = $$props.nav);
    		if ('stickyNav' in $$props) $$invalidate(1, stickyNav = $$props.stickyNav);
    		if ('checkingSticky' in $$props) checkingSticky = $$props.checkingSticky;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [nav, stickyNav, $page, checkSticky, nav_1_binding];
    }

    class Nav extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Nav",
    			options,
    			id: create_fragment$4.name
    		});
    	}
    }

    /* src\components\Header.svelte generated by Svelte v3.55.0 */
    const file$1 = "src\\components\\Header.svelte";

    function create_fragment$3(ctx) {
    	let header;
    	let div;
    	let t1;
    	let title;
    	let t2;
    	let nav;
    	let current;
    	title = new Title({ $$inline: true });
    	nav = new Nav({ $$inline: true });

    	const block = {
    		c: function create() {
    			header = element("header");
    			div = element("div");
    			div.textContent = `${/*announcements*/ ctx[0][/*index*/ ctx[1]]}`;
    			t1 = space();
    			create_component(title.$$.fragment);
    			t2 = space();
    			create_component(nav.$$.fragment);
    			attr_dev(div, "class", "text-gradient");
    			add_location(div, file$1, 14, 2, 355);
    			attr_dev(header, "class", "margins svelte-1gvba6s");
    			add_location(header, file$1, 11, 0, 293);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, header, anchor);
    			append_dev(header, div);
    			append_dev(header, t1);
    			mount_component(title, header, null);
    			insert_dev(target, t2, anchor);
    			mount_component(nav, target, anchor);
    			current = true;
    		},
    		p: noop$2,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(title.$$.fragment, local);
    			transition_in(nav.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(title.$$.fragment, local);
    			transition_out(nav.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(header);
    			destroy_component(title);
    			if (detaching) detach_dev(t2);
    			destroy_component(nav, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Header', slots, []);
    	const announcements = ["Now with more feathers!", "Ribbit 🐸", "Slow and steady 🐢", "Chirp chirp 🐦"];
    	let index = Math.floor(Math.random() * announcements.length);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Header> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Title, Nav, announcements, index });

    	$$self.$inject_state = $$props => {
    		if ('index' in $$props) $$invalidate(1, index = $$props.index);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [announcements, index];
    }

    class Header extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Header",
    			options,
    			id: create_fragment$3.name
    		});
    	}
    }

    /* src\components\Footer.svelte generated by Svelte v3.55.0 */

    const file = "src\\components\\Footer.svelte";

    function create_fragment$2(ctx) {
    	let footer;
    	let span;

    	const block = {
    		c: function create() {
    			footer = element("footer");
    			span = element("span");
    			span.textContent = "Made by the PoolTogether Community";
    			attr_dev(span, "class", "no-select");
    			add_location(span, file, 2, 2, 45);
    			attr_dev(footer, "class", "margins svelte-1crmxsk");
    			add_location(footer, file, 1, 0, 17);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, footer, anchor);
    			append_dev(footer, span);
    		},
    		p: noop$2,
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(footer);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Footer', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Footer> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Footer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Footer",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /* src\components\Focus.svelte generated by Svelte v3.55.0 */

    function create_fragment$1(ctx) {
    	let mounted;
    	let dispose;

    	const block = {
    		c: noop$2,
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (!mounted) {
    				dispose = [
    					listen_dev(window, "focus", /*focus_handler*/ ctx[1], false, false, false),
    					listen_dev(window, "blur", /*blur_handler*/ ctx[2], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop$2,
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const focused = writable(true);

    function instance$1($$self, $$props, $$invalidate) {
    	let $focused,
    		$$unsubscribe_focused = noop$2;

    	validate_store(focused, 'focused');
    	component_subscribe($$self, focused, $$value => $$invalidate(0, $focused = $$value));
    	$$self.$$.on_destroy.push(() => $$unsubscribe_focused());
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Focus', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Focus> was created with unknown prop '${key}'`);
    	});

    	const focus_handler = () => set_store_value(focused, $focused = true, $focused);
    	const blur_handler = () => set_store_value(focused, $focused = false, $focused);
    	$$self.$capture_state = () => ({ writable, focused, $focused });
    	return [$focused, focus_handler, blur_handler];
    }

    class Focus extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Focus",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    /* src\App.svelte generated by Svelte v3.55.0 */

    function create_fragment(ctx) {
    	let header;
    	let t0;
    	let router;
    	let t1;
    	let footer;
    	let t2;
    	let connectoverlay;
    	let t3;
    	let notifications;
    	let t4;
    	let focus;
    	let t5;
    	let time;
    	let current;
    	header = new Header({ $$inline: true });
    	router = new Router({ props: { routes }, $$inline: true });
    	router.$on("routeLoaded", /*routeLoaded_handler*/ ctx[0]);
    	footer = new Footer({ $$inline: true });
    	connectoverlay = new ConnectOverlay({ $$inline: true });
    	notifications = new Notifications({ $$inline: true });
    	focus = new Focus({ $$inline: true });
    	time = new Time({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(header.$$.fragment);
    			t0 = space();
    			create_component(router.$$.fragment);
    			t1 = space();
    			create_component(footer.$$.fragment);
    			t2 = space();
    			create_component(connectoverlay.$$.fragment);
    			t3 = space();
    			create_component(notifications.$$.fragment);
    			t4 = space();
    			create_component(focus.$$.fragment);
    			t5 = space();
    			create_component(time.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(header, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(router, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(footer, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(connectoverlay, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(notifications, target, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(focus, target, anchor);
    			insert_dev(target, t5, anchor);
    			mount_component(time, target, anchor);
    			current = true;
    		},
    		p: noop$2,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header.$$.fragment, local);
    			transition_in(router.$$.fragment, local);
    			transition_in(footer.$$.fragment, local);
    			transition_in(connectoverlay.$$.fragment, local);
    			transition_in(notifications.$$.fragment, local);
    			transition_in(focus.$$.fragment, local);
    			transition_in(time.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header.$$.fragment, local);
    			transition_out(router.$$.fragment, local);
    			transition_out(footer.$$.fragment, local);
    			transition_out(connectoverlay.$$.fragment, local);
    			transition_out(notifications.$$.fragment, local);
    			transition_out(focus.$$.fragment, local);
    			transition_out(time.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(header, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(router, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(footer, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(connectoverlay, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(notifications, detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(focus, detaching);
    			if (detaching) detach_dev(t5);
    			destroy_component(time, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	const routeLoaded_handler = e => page.set(e.detail);

    	$$self.$capture_state = () => ({
    		Router,
    		Header,
    		Footer,
    		page,
    		routes,
    		ConnectOverlay,
    		Notifications,
    		Focus,
    		Time
    	});

    	return [routeLoaded_handler];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    // Setup app:
    const app = new App({
        target: document.body,
        props: {}
    });

    return app;

})();
//# sourceMappingURL=bundle.js.map
